{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/lucky/source/baidu_verify_code-DKptWBbgP9.html","path":"baidu_verify_code-DKptWBbgP9.html","modified":0,"renderable":1},{"_id":"themes/lucky/source/main.0ac1d1.css","path":"main.0ac1d1.css","modified":0,"renderable":1},{"_id":"themes/lucky/source/main.0ac1d1.js","path":"main.0ac1d1.js","modified":0,"renderable":1},{"_id":"themes/lucky/source/mobile.ae08fd.js","path":"mobile.ae08fd.js","modified":0,"renderable":1},{"_id":"themes/lucky/source/slider.5d8892.js","path":"slider.5d8892.js","modified":0,"renderable":1},{"_id":"themes/lucky/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/lucky/source/fonts/fonteditor.3da1ef.woff","path":"fonts/fonteditor.3da1ef.woff","modified":0,"renderable":1},{"_id":"themes/lucky/source/fonts/fonteditor.60e1c3.svg","path":"fonts/fonteditor.60e1c3.svg","modified":0,"renderable":1},{"_id":"themes/lucky/source/fonts/fonteditor.3e0d4a.svg","path":"fonts/fonteditor.3e0d4a.svg","modified":0,"renderable":1},{"_id":"themes/lucky/source/fonts/fonteditor.bbc4b5.woff2","path":"fonts/fonteditor.bbc4b5.woff2","modified":0,"renderable":1},{"_id":"themes/lucky/source/fonts/fonteditor.fe4d8a.ttf","path":"fonts/fonteditor.fe4d8a.ttf","modified":0,"renderable":1},{"_id":"themes/lucky/source/fonts/fonteditor.86c132.eot","path":"fonts/fonteditor.86c132.eot","modified":0,"renderable":1},{"_id":"themes/lucky/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/lucky/source/fonts/tooltip.d04149.svg","path":"fonts/tooltip.d04149.svg","modified":0,"renderable":1},{"_id":"themes/lucky/source/gitment/APlayer.min.js","path":"gitment/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/lucky/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/lucky/source/img/biubiubiu.gif","path":"img/biubiubiu.gif","modified":0,"renderable":1},{"_id":"themes/lucky/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/img/forkme.png","path":"img/forkme.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/img/head.jpg","path":"img/head.jpg","modified":0,"renderable":1},{"_id":"themes/lucky/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/lucky/source/img/gitee.svg","path":"img/gitee.svg","modified":0,"renderable":1},{"_id":"themes/lucky/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/img/weixin.png","path":"img/weixin.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/lib/busuanzi.pure.js","path":"lib/busuanzi.pure.js","modified":0,"renderable":1},{"_id":"themes/lucky/source/lib/default.css","path":"lib/default.css","modified":0,"renderable":1},{"_id":"themes/lucky/source/lib/clickLove.js","path":"lib/clickLove.js","modified":0,"renderable":1},{"_id":"themes/lucky/source/lib/giteement.browser.js","path":"lib/giteement.browser.js","modified":0,"renderable":1},{"_id":"themes/lucky/source/lib/gitment.css","path":"lib/gitment.css","modified":0,"renderable":1},{"_id":"themes/lucky/source/lib/gitment.js","path":"lib/gitment.js","modified":0,"renderable":1},{"_id":"themes/lucky/source/lib/gitment.js.bak2","path":"lib/gitment.js.bak2","modified":0,"renderable":1},{"_id":"themes/lucky/source/lib/gitment.js.bak","path":"lib/gitment.js.bak","modified":0,"renderable":1},{"_id":"themes/lucky/source/lib/jquery-2.1.4.min.js","path":"lib/jquery-2.1.4.min.js","modified":0,"renderable":1},{"_id":"themes/lucky/source/lib/oauthcallback.browser.js","path":"lib/oauthcallback.browser.js","modified":0,"renderable":1},{"_id":"themes/lucky/source/lib/pace.min.js","path":"lib/pace.min.js","modified":0,"renderable":1},{"_id":"themes/lucky/source/lib/snow.js","path":"lib/snow.js","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/chitose/package-lock.json","path":"live2d_models/chitose/package-lock.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/chitose/package.json","path":"live2d_models/chitose/package.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/package.json","path":"live2d_models/epsilon2_1/package.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/gf/package-lock.json","path":"live2d_models/gf/package-lock.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/gf/package.json","path":"live2d_models/gf/package.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/package-lock.json","path":"live2d_models/haru/package-lock.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/package.json","path":"live2d_models/haru/package.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haruto/package-lock.json","path":"live2d_models/haruto/package-lock.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haruto/package.json","path":"live2d_models/haruto/package.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hibiki/package.json","path":"live2d_models/hibiki/package.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hibiki/package-lock.json","path":"live2d_models/hibiki/package-lock.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hijiki/package.json","path":"live2d_models/hijiki/package.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/package-lock.json","path":"live2d_models/izumi/package-lock.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/package.json","path":"live2d_models/izumi/package.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/koharu/package-lock.json","path":"live2d_models/koharu/package-lock.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/koharu/package.json","path":"live2d_models/koharu/package.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/miku/package-lock.json","path":"live2d_models/miku/package-lock.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/miku/package.json","path":"live2d_models/miku/package.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hijiki/package-lock.json","path":"live2d_models/hijiki/package-lock.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/ni-j/package-lock.json","path":"live2d_models/ni-j/package-lock.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/ni-j/package.json","path":"live2d_models/ni-j/package.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nico/package-lock.json","path":"live2d_models/nico/package-lock.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nico/package.json","path":"live2d_models/nico/package.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/package-lock.json","path":"live2d_models/epsilon2_1/package-lock.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nietzsche/package.json","path":"live2d_models/nietzsche/package.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nipsilon/package-lock.json","path":"live2d_models/nipsilon/package-lock.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nipsilon/package.json","path":"live2d_models/nipsilon/package.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nietzsche/package-lock.json","path":"live2d_models/nietzsche/package-lock.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nito/package-lock.json","path":"live2d_models/nito/package-lock.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nito/package.json","path":"live2d_models/nito/package.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/package-lock.json","path":"live2d_models/shizuku/package-lock.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/package.json","path":"live2d_models/shizuku/package.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tororo/package-lock.json","path":"live2d_models/tororo/package-lock.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tororo/package.json","path":"live2d_models/tororo/package.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/package-lock.json","path":"live2d_models/tsumiki/package-lock.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/package.json","path":"live2d_models/tsumiki/package.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/unitychan/package-lock.json","path":"live2d_models/unitychan/package-lock.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/unitychan/package.json","path":"live2d_models/unitychan/package.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/wanko/package-lock.json","path":"live2d_models/wanko/package-lock.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/wanko/package.json","path":"live2d_models/wanko/package.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/z16/package-lock.json","path":"live2d_models/z16/package-lock.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/z16/package.json","path":"live2d_models/z16/package.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/plugins/TweenMax/HoverImg.js","path":"plugins/TweenMax/HoverImg.js","modified":0,"renderable":1},{"_id":"themes/lucky/source/plugins/TweenMax/TweenMax.min.js","path":"plugins/TweenMax/TweenMax.min.js","modified":0,"renderable":1},{"_id":"themes/lucky/source/plugins/TweenMax/charming.min.js","path":"plugins/TweenMax/charming.min.js","modified":0,"renderable":1},{"_id":"themes/lucky/source/plugins/activate-power-mode/activate-power-mode.js","path":"plugins/activate-power-mode/activate-power-mode.js","modified":0,"renderable":1},{"_id":"themes/lucky/source/plugins/live2d-widget.js/L2Dwidget.0.min.js","path":"plugins/live2d-widget.js/L2Dwidget.0.min.js","modified":0,"renderable":1},{"_id":"themes/lucky/source/plugins/live2d-widget.js/L2Dwidget.0.min.js.map","path":"plugins/live2d-widget.js/L2Dwidget.0.min.js.map","modified":0,"renderable":1},{"_id":"themes/lucky/source/plugins/live2d-widget.js/L2Dwidget.min.js","path":"plugins/live2d-widget.js/L2Dwidget.min.js","modified":0,"renderable":1},{"_id":"themes/lucky/source/plugins/live2d-widget.js/L2Dwidget.min.js.map","path":"plugins/live2d-widget.js/L2Dwidget.min.js.map","modified":0,"renderable":1},{"_id":"themes/lucky/source/plugins/live2d-widget.js/manifest.json","path":"plugins/live2d-widget.js/manifest.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/plugins/ribbon.js/ribbon.js","path":"plugins/ribbon.js/ribbon.js","modified":0,"renderable":1},{"_id":"themes/lucky/source/plugins/ribbon.js/ribbon.min.js","path":"plugins/ribbon.js/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/lucky/source/plugins/live2d-widget.js/L2Dwidget.common.js","path":"plugins/live2d-widget.js/L2Dwidget.common.js","modified":0,"renderable":1},{"_id":"themes/lucky/source/plugins/live2d-widget.js/L2Dwidget.common.js.map","path":"plugins/live2d-widget.js/L2Dwidget.common.js.map","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/chitose/assets/chitose.model.json","path":"live2d_models/chitose/assets/chitose.model.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/chitose/assets/chitose.physics.json","path":"live2d_models/chitose/assets/chitose.physics.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/chitose/assets/chitose.pose.json","path":"live2d_models/chitose/assets/chitose.pose.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/Epsilon2.1.model.json","path":"live2d_models/epsilon2_1/assets/Epsilon2.1.model.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/Epsilon2.1.physics.json","path":"live2d_models/epsilon2_1/assets/Epsilon2.1.physics.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/gf/assets/Gantzert_Felixander.model.json","path":"live2d_models/gf/assets/Gantzert_Felixander.model.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haruto/assets/haruto.model.json","path":"live2d_models/haruto/assets/haruto.model.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haruto/assets/haruto.physics.json","path":"live2d_models/haruto/assets/haruto.physics.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/hibiki.model.json","path":"live2d_models/hibiki/assets/hibiki.model.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/hibiki.physics.json","path":"live2d_models/hibiki/assets/hibiki.physics.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hijiki/assets/hijiki.model.json","path":"live2d_models/hijiki/assets/hijiki.model.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hijiki/assets/hijiki.pose.json","path":"live2d_models/hijiki/assets/hijiki.pose.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/izumi.model.json","path":"live2d_models/izumi/assets/izumi.model.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/izumi.physics.json","path":"live2d_models/izumi/assets/izumi.physics.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/koharu/assets/koharu.model.json","path":"live2d_models/koharu/assets/koharu.model.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/koharu/assets/koharu.physics.json","path":"live2d_models/koharu/assets/koharu.physics.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/miku/assets/miku.model.json","path":"live2d_models/miku/assets/miku.model.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/miku/assets/miku.physics.json","path":"live2d_models/miku/assets/miku.physics.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/ni-j.model.json","path":"live2d_models/ni-j/assets/ni-j.model.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/ni-j.physics.json","path":"live2d_models/ni-j/assets/ni-j.physics.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/ni-j.pose.json","path":"live2d_models/ni-j/assets/ni-j.pose.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nico/assets/nico.model.json","path":"live2d_models/nico/assets/nico.model.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nico/assets/nico.physics.json","path":"live2d_models/nico/assets/nico.physics.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nico/assets/nico.pose.json","path":"live2d_models/nico/assets/nico.pose.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/nietzche.model.json","path":"live2d_models/nietzsche/assets/nietzche.model.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/nietzsche.physics.json","path":"live2d_models/nietzsche/assets/nietzsche.physics.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/nietzsche.pose.json","path":"live2d_models/nietzsche/assets/nietzsche.pose.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/nipsilon.model.json","path":"live2d_models/nipsilon/assets/nipsilon.model.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/nipsilon.physics.json","path":"live2d_models/nipsilon/assets/nipsilon.physics.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/nipsilon.pose.json","path":"live2d_models/nipsilon/assets/nipsilon.pose.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nito/assets/nito.model.json","path":"live2d_models/nito/assets/nito.model.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nito/assets/nito.physics.json","path":"live2d_models/nito/assets/nito.physics.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nito/assets/nito.pose.json","path":"live2d_models/nito/assets/nito.pose.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/shizuku.model.json","path":"live2d_models/shizuku/assets/shizuku.model.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/shizuku.physics.json","path":"live2d_models/shizuku/assets/shizuku.physics.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/shizuku.pose.json","path":"live2d_models/shizuku/assets/shizuku.pose.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tororo/assets/tororo.model.json","path":"live2d_models/tororo/assets/tororo.model.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tororo/assets/tororo.pose.json","path":"live2d_models/tororo/assets/tororo.pose.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/tsumiki.model.json","path":"live2d_models/tsumiki/assets/tsumiki.model.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/tsumiki.physics.json","path":"live2d_models/tsumiki/assets/tsumiki.physics.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/unitychan.model.json","path":"live2d_models/unitychan/assets/unitychan.model.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/unitychan.physics.json","path":"live2d_models/unitychan/assets/unitychan.physics.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/wanko/assets/wanko.model.json","path":"live2d_models/wanko/assets/wanko.model.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/z16/assets/z16.model.json","path":"live2d_models/z16/assets/z16.model.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/z16/assets/z16.physics.json","path":"live2d_models/z16/assets/z16.physics.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/plugins/ribbon.js/demo/index.html","path":"plugins/ribbon.js/demo/index.html","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/chitose/assets/moc/chitose.moc","path":"live2d_models/chitose/assets/moc/chitose.moc","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/chitose/assets/exp/f01.exp.json","path":"live2d_models/chitose/assets/exp/f01.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/chitose/assets/exp/f02.exp.json","path":"live2d_models/chitose/assets/exp/f02.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/chitose/assets/exp/f03.exp.json","path":"live2d_models/chitose/assets/exp/f03.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/chitose/assets/exp/f05.exp.json","path":"live2d_models/chitose/assets/exp/f05.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/chitose/assets/exp/f06.exp.json","path":"live2d_models/chitose/assets/exp/f06.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/chitose/assets/exp/f04.exp.json","path":"live2d_models/chitose/assets/exp/f04.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/chitose/assets/exp/f07.exp.json","path":"live2d_models/chitose/assets/exp/f07.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/exp/f02.exp.json","path":"live2d_models/epsilon2_1/assets/exp/f02.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/exp/f01.exp.json","path":"live2d_models/epsilon2_1/assets/exp/f01.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/exp/f03.exp.json","path":"live2d_models/epsilon2_1/assets/exp/f03.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/exp/f04.exp.json","path":"live2d_models/epsilon2_1/assets/exp/f04.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/exp/f05.exp.json","path":"live2d_models/epsilon2_1/assets/exp/f05.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/exp/f06.exp.json","path":"live2d_models/epsilon2_1/assets/exp/f06.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/exp/f08.exp.json","path":"live2d_models/epsilon2_1/assets/exp/f08.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/moc/Epsilon2.1.moc","path":"live2d_models/epsilon2_1/assets/moc/Epsilon2.1.moc","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/chitose/assets/mtn/chitose_handwave.mtn","path":"live2d_models/chitose/assets/mtn/chitose_handwave.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/chitose/assets/mtn/chitose_idle.mtn","path":"live2d_models/chitose/assets/mtn/chitose_idle.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/chitose/assets/mtn/chitose_kime01.mtn","path":"live2d_models/chitose/assets/mtn/chitose_kime01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/chitose/assets/mtn/chitose_kime02.mtn","path":"live2d_models/chitose/assets/mtn/chitose_kime02.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_idle_01.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_01.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/exp/f07.exp.json","path":"live2d_models/epsilon2_1/assets/exp/f07.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_02.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_02.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_03.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_03.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_04.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_04.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_05.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_05.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_07.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_07.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_08.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_08.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_06.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_06.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_01.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_03.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_03.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_02.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_02.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_04.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_04.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_05.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_05.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_shake_01.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_shake_01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/gf/assets/moc/Gantzert_Felixander.moc","path":"live2d_models/gf/assets/moc/Gantzert_Felixander.moc","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/gf/assets/mtn/A_00_idle.mtn","path":"live2d_models/gf/assets/mtn/A_00_idle.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/gf/assets/mtn/A_01.mtn","path":"live2d_models/gf/assets/mtn/A_01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/gf/assets/mtn/A_02.mtn","path":"live2d_models/gf/assets/mtn/A_02.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/gf/assets/mtn/A_04.mtn","path":"live2d_models/gf/assets/mtn/A_04.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/gf/assets/mtn/A_05.mtn","path":"live2d_models/gf/assets/mtn/A_05.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/haru01.model.json","path":"live2d_models/haru/01/assets/haru01.model.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/haru01.physics.json","path":"live2d_models/haru/01/assets/haru01.physics.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/haru01.pose.json","path":"live2d_models/haru/01/assets/haru01.pose.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/haru02.model.json","path":"live2d_models/haru/02/assets/haru02.model.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/haru02.physics.json","path":"live2d_models/haru/02/assets/haru02.physics.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/haru02.pose.json","path":"live2d_models/haru/02/assets/haru02.pose.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/gf/assets/mtn/A_03.mtn","path":"live2d_models/gf/assets/mtn/A_03.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haruto/assets/moc/haruto.moc","path":"live2d_models/haruto/assets/moc/haruto.moc","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haruto/assets/mtn/04.mtn","path":"live2d_models/haruto/assets/mtn/04.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haruto/assets/mtn/01.mtn","path":"live2d_models/haruto/assets/mtn/01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haruto/assets/mtn/02.mtn","path":"live2d_models/haruto/assets/mtn/02.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haruto/assets/mtn/03.mtn","path":"live2d_models/haruto/assets/mtn/03.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haruto/assets/mtn/05.mtn","path":"live2d_models/haruto/assets/mtn/05.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haruto/assets/mtn/08.mtn","path":"live2d_models/haruto/assets/mtn/08.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haruto/assets/mtn/06.mtn","path":"live2d_models/haruto/assets/mtn/06.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haruto/assets/mtn/09.mtn","path":"live2d_models/haruto/assets/mtn/09.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haruto/assets/mtn/07.mtn","path":"live2d_models/haruto/assets/mtn/07.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haruto/assets/mtn/idle_02.mtn","path":"live2d_models/haruto/assets/mtn/idle_02.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/exp/f01.exp.json","path":"live2d_models/hibiki/assets/exp/f01.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/exp/f02.exp.json","path":"live2d_models/hibiki/assets/exp/f02.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/exp/f03.exp.json","path":"live2d_models/hibiki/assets/exp/f03.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/exp/f04.exp.json","path":"live2d_models/hibiki/assets/exp/f04.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/exp/f05.exp.json","path":"live2d_models/hibiki/assets/exp/f05.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/exp/f06.exp.json","path":"live2d_models/hibiki/assets/exp/f06.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/moc/hibiki.moc","path":"live2d_models/hibiki/assets/moc/hibiki.moc","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/mtn/hibiki_01.mtn","path":"live2d_models/hibiki/assets/mtn/hibiki_01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/mtn/hibiki_02.mtn","path":"live2d_models/hibiki/assets/mtn/hibiki_02.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/mtn/hibiki_03.mtn","path":"live2d_models/hibiki/assets/mtn/hibiki_03.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/mtn/hibiki_04.mtn","path":"live2d_models/hibiki/assets/mtn/hibiki_04.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/mtn/idle_01.mtn","path":"live2d_models/hibiki/assets/mtn/idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/mtn/hibiki_05.mtn","path":"live2d_models/hibiki/assets/mtn/hibiki_05.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/mtn/idle_02.mtn","path":"live2d_models/hibiki/assets/mtn/idle_02.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/mtn/idle_03.mtn","path":"live2d_models/hibiki/assets/mtn/idle_03.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/mtn/idle_04.mtn","path":"live2d_models/hibiki/assets/mtn/idle_04.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/snd/hibiki_01.mp3","path":"live2d_models/hibiki/assets/snd/hibiki_01.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/snd/hibiki_02.mp3","path":"live2d_models/hibiki/assets/snd/hibiki_02.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/snd/hibiki_04.mp3","path":"live2d_models/hibiki/assets/snd/hibiki_04.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/snd/hibiki_03.mp3","path":"live2d_models/hibiki/assets/snd/hibiki_03.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/snd/hibiki_05.mp3","path":"live2d_models/hibiki/assets/snd/hibiki_05.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hijiki/assets/moc/hijiki.moc","path":"live2d_models/hijiki/assets/moc/hijiki.moc","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hijiki/assets/mtn/00_idle.mtn","path":"live2d_models/hijiki/assets/mtn/00_idle.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hijiki/assets/mtn/02.mtn","path":"live2d_models/hijiki/assets/mtn/02.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hijiki/assets/mtn/01.mtn","path":"live2d_models/hijiki/assets/mtn/01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hijiki/assets/mtn/03.mtn","path":"live2d_models/hijiki/assets/mtn/03.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hijiki/assets/mtn/06.mtn","path":"live2d_models/hijiki/assets/mtn/06.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hijiki/assets/mtn/04.mtn","path":"live2d_models/hijiki/assets/mtn/04.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hijiki/assets/mtn/05.mtn","path":"live2d_models/hijiki/assets/mtn/05.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hijiki/assets/mtn/07.mtn","path":"live2d_models/hijiki/assets/mtn/07.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hijiki/assets/mtn/08.mtn","path":"live2d_models/hijiki/assets/mtn/08.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/exp/f01.exp.json","path":"live2d_models/izumi/assets/exp/f01.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/exp/f02.exp.json","path":"live2d_models/izumi/assets/exp/f02.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/exp/f03.exp.json","path":"live2d_models/izumi/assets/exp/f03.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/exp/f04.exp.json","path":"live2d_models/izumi/assets/exp/f04.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/exp/f05.exp.json","path":"live2d_models/izumi/assets/exp/f05.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/exp/f06.exp.json","path":"live2d_models/izumi/assets/exp/f06.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/exp/f07.exp.json","path":"live2d_models/izumi/assets/exp/f07.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/moc/izumi_illust.moc","path":"live2d_models/izumi/assets/moc/izumi_illust.moc","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/mtn/idle_01.mtn","path":"live2d_models/izumi/assets/mtn/idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/mtn/idle_02.mtn","path":"live2d_models/izumi/assets/mtn/idle_02.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/mtn/idle_04.mtn","path":"live2d_models/izumi/assets/mtn/idle_04.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/mtn/idle_03.mtn","path":"live2d_models/izumi/assets/mtn/idle_03.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/mtn/izumi_04.mtn","path":"live2d_models/izumi/assets/mtn/izumi_04.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/mtn/izumi_01.mtn","path":"live2d_models/izumi/assets/mtn/izumi_01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/mtn/izumi_02.mtn","path":"live2d_models/izumi/assets/mtn/izumi_02.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/mtn/izumi_03.mtn","path":"live2d_models/izumi/assets/mtn/izumi_03.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/mtn/izumi_05.mtn","path":"live2d_models/izumi/assets/mtn/izumi_05.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/mtn/izumi_07.mtn","path":"live2d_models/izumi/assets/mtn/izumi_07.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/mtn/izumi_06.mtn","path":"live2d_models/izumi/assets/mtn/izumi_06.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/mtn/izumi_08.mtn","path":"live2d_models/izumi/assets/mtn/izumi_08.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/mtn/izumi_09.mtn","path":"live2d_models/izumi/assets/mtn/izumi_09.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/mtn/izumi_10.mtn","path":"live2d_models/izumi/assets/mtn/izumi_10.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/snd/izumi_01.mp3","path":"live2d_models/izumi/assets/snd/izumi_01.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/snd/izumi_02.mp3","path":"live2d_models/izumi/assets/snd/izumi_02.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/snd/izumi_03.mp3","path":"live2d_models/izumi/assets/snd/izumi_03.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/snd/izumi_04.mp3","path":"live2d_models/izumi/assets/snd/izumi_04.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/snd/izumi_05.mp3","path":"live2d_models/izumi/assets/snd/izumi_05.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/snd/izumi_06.mp3","path":"live2d_models/izumi/assets/snd/izumi_06.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/snd/izumi_08.mp3","path":"live2d_models/izumi/assets/snd/izumi_08.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/snd/izumi_07.mp3","path":"live2d_models/izumi/assets/snd/izumi_07.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/snd/izumi_10.mp3","path":"live2d_models/izumi/assets/snd/izumi_10.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/snd/izumi_09.mp3","path":"live2d_models/izumi/assets/snd/izumi_09.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/koharu/assets/moc/koharu.moc","path":"live2d_models/koharu/assets/moc/koharu.moc","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/koharu/assets/mtn/01.mtn","path":"live2d_models/koharu/assets/mtn/01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/koharu/assets/mtn/02.mtn","path":"live2d_models/koharu/assets/mtn/02.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/koharu/assets/mtn/03.mtn","path":"live2d_models/koharu/assets/mtn/03.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/koharu/assets/mtn/04.mtn","path":"live2d_models/koharu/assets/mtn/04.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/koharu/assets/mtn/07.mtn","path":"live2d_models/koharu/assets/mtn/07.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/koharu/assets/mtn/05.mtn","path":"live2d_models/koharu/assets/mtn/05.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/koharu/assets/mtn/08.mtn","path":"live2d_models/koharu/assets/mtn/08.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/koharu/assets/mtn/09.mtn","path":"live2d_models/koharu/assets/mtn/09.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/koharu/assets/mtn/06.mtn","path":"live2d_models/koharu/assets/mtn/06.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/koharu/assets/mtn/idle.mtn","path":"live2d_models/koharu/assets/mtn/idle.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/miku/assets/moc/miku.moc","path":"live2d_models/miku/assets/moc/miku.moc","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/miku/assets/mtn/miku_idle_01.mtn","path":"live2d_models/miku/assets/mtn/miku_idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/miku/assets/mtn/miku_m_01.mtn","path":"live2d_models/miku/assets/mtn/miku_m_01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/miku/assets/mtn/miku_m_02.mtn","path":"live2d_models/miku/assets/mtn/miku_m_02.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/miku/assets/mtn/miku_m_03.mtn","path":"live2d_models/miku/assets/mtn/miku_m_03.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/miku/assets/mtn/miku_m_04.mtn","path":"live2d_models/miku/assets/mtn/miku_m_04.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/miku/assets/mtn/miku_m_05.mtn","path":"live2d_models/miku/assets/mtn/miku_m_05.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/miku/assets/mtn/miku_m_06.mtn","path":"live2d_models/miku/assets/mtn/miku_m_06.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/miku/assets/mtn/miku_shake_01.mtn","path":"live2d_models/miku/assets/mtn/miku_shake_01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/moc/ni-j.moc","path":"live2d_models/ni-j/assets/moc/ni-j.moc","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/00_idle.mtn","path":"live2d_models/ni-j/assets/mtn/00_idle.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/01_happy.mtn","path":"live2d_models/ni-j/assets/mtn/01_happy.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/02_angry.mtn","path":"live2d_models/ni-j/assets/mtn/02_angry.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/06_love.mtn","path":"live2d_models/ni-j/assets/mtn/06_love.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/03_fear.mtn","path":"live2d_models/ni-j/assets/mtn/03_fear.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/04_surprise.mtn","path":"live2d_models/ni-j/assets/mtn/04_surprise.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/05_fun.mtn","path":"live2d_models/ni-j/assets/mtn/05_fun.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/09_yawn.mtn","path":"live2d_models/ni-j/assets/mtn/09_yawn.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/07_bye.mtn","path":"live2d_models/ni-j/assets/mtn/07_bye.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/08_sad.mtn","path":"live2d_models/ni-j/assets/mtn/08_sad.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/10_yeah.mtn","path":"live2d_models/ni-j/assets/mtn/10_yeah.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/12_stagger.mtn","path":"live2d_models/ni-j/assets/mtn/12_stagger.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/11_muscle.mtn","path":"live2d_models/ni-j/assets/mtn/11_muscle.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/13_cry.mtn","path":"live2d_models/ni-j/assets/mtn/13_cry.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/14_ sigh.mtn","path":"live2d_models/ni-j/assets/mtn/14_ sigh.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/18_no.mtn","path":"live2d_models/ni-j/assets/mtn/18_no.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/15_joy.mtn","path":"live2d_models/ni-j/assets/mtn/15_joy.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/19_walk.mtn","path":"live2d_models/ni-j/assets/mtn/19_walk.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/16_menace.mtn","path":"live2d_models/ni-j/assets/mtn/16_menace.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/20_sleep.mtn","path":"live2d_models/ni-j/assets/mtn/20_sleep.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/17_yes.mtn","path":"live2d_models/ni-j/assets/mtn/17_yes.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nico/assets/moc/nico.moc","path":"live2d_models/nico/assets/moc/nico.moc","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/00_idle.mtn","path":"live2d_models/nico/assets/mtn/00_idle.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/01_happy.mtn","path":"live2d_models/nico/assets/mtn/01_happy.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/02_angry.mtn","path":"live2d_models/nico/assets/mtn/02_angry.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/03_fear.mtn","path":"live2d_models/nico/assets/mtn/03_fear.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/05_fun.mtn","path":"live2d_models/nico/assets/mtn/05_fun.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/06_love.mtn","path":"live2d_models/nico/assets/mtn/06_love.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/04_surprise.mtn","path":"live2d_models/nico/assets/mtn/04_surprise.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/07_bye.mtn","path":"live2d_models/nico/assets/mtn/07_bye.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/08_sad.mtn","path":"live2d_models/nico/assets/mtn/08_sad.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/10_yeah.mtn","path":"live2d_models/nico/assets/mtn/10_yeah.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/09_yawn.mtn","path":"live2d_models/nico/assets/mtn/09_yawn.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/11_muscle.mtn","path":"live2d_models/nico/assets/mtn/11_muscle.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/13_cry.mtn","path":"live2d_models/nico/assets/mtn/13_cry.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/12_stagger.mtn","path":"live2d_models/nico/assets/mtn/12_stagger.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/14_ sigh.mtn","path":"live2d_models/nico/assets/mtn/14_ sigh.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/18_no.mtn","path":"live2d_models/nico/assets/mtn/18_no.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/15_joy.mtn","path":"live2d_models/nico/assets/mtn/15_joy.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/16_menace.mtn","path":"live2d_models/nico/assets/mtn/16_menace.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/17_yes.mtn","path":"live2d_models/nico/assets/mtn/17_yes.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/19_walk.mtn","path":"live2d_models/nico/assets/mtn/19_walk.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/20_sleep.mtn","path":"live2d_models/nico/assets/mtn/20_sleep.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/00_idle.mtn","path":"live2d_models/nietzsche/assets/mtn/00_idle.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/01_happy.mtn","path":"live2d_models/nietzsche/assets/mtn/01_happy.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/02_angry.mtn","path":"live2d_models/nietzsche/assets/mtn/02_angry.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/06_love.mtn","path":"live2d_models/nietzsche/assets/mtn/06_love.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/03_fear.mtn","path":"live2d_models/nietzsche/assets/mtn/03_fear.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/04_surprise.mtn","path":"live2d_models/nietzsche/assets/mtn/04_surprise.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/05_fun.mtn","path":"live2d_models/nietzsche/assets/mtn/05_fun.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/07_bye.mtn","path":"live2d_models/nietzsche/assets/mtn/07_bye.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/10_yeah.mtn","path":"live2d_models/nietzsche/assets/mtn/10_yeah.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/08_sad.mtn","path":"live2d_models/nietzsche/assets/mtn/08_sad.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/09_yawn.mtn","path":"live2d_models/nietzsche/assets/mtn/09_yawn.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/14_ sigh.mtn","path":"live2d_models/nietzsche/assets/mtn/14_ sigh.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/11_muscle.mtn","path":"live2d_models/nietzsche/assets/mtn/11_muscle.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/12_stagger.mtn","path":"live2d_models/nietzsche/assets/mtn/12_stagger.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/13_cry.mtn","path":"live2d_models/nietzsche/assets/mtn/13_cry.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/15_joy.mtn","path":"live2d_models/nietzsche/assets/mtn/15_joy.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/16_menace.mtn","path":"live2d_models/nietzsche/assets/mtn/16_menace.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/17_yes.mtn","path":"live2d_models/nietzsche/assets/mtn/17_yes.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/19_walk.mtn","path":"live2d_models/nietzsche/assets/mtn/19_walk.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/20_sleep.mtn","path":"live2d_models/nietzsche/assets/mtn/20_sleep.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/18_no.mtn","path":"live2d_models/nietzsche/assets/mtn/18_no.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/moc/nietzsche.moc","path":"live2d_models/nietzsche/assets/moc/nietzsche.moc","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/00_idle.mtn","path":"live2d_models/nipsilon/assets/mtn/00_idle.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/02_angry.mtn","path":"live2d_models/nipsilon/assets/mtn/02_angry.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/01_happy.mtn","path":"live2d_models/nipsilon/assets/mtn/01_happy.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/03_fear.mtn","path":"live2d_models/nipsilon/assets/mtn/03_fear.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/06_love.mtn","path":"live2d_models/nipsilon/assets/mtn/06_love.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/04_surprise.mtn","path":"live2d_models/nipsilon/assets/mtn/04_surprise.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/05_fun.mtn","path":"live2d_models/nipsilon/assets/mtn/05_fun.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/07_bye.mtn","path":"live2d_models/nipsilon/assets/mtn/07_bye.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/09_yawn.mtn","path":"live2d_models/nipsilon/assets/mtn/09_yawn.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/08_sad.mtn","path":"live2d_models/nipsilon/assets/mtn/08_sad.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/10_yeah.mtn","path":"live2d_models/nipsilon/assets/mtn/10_yeah.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/11_muscle.mtn","path":"live2d_models/nipsilon/assets/mtn/11_muscle.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/12_stagger.mtn","path":"live2d_models/nipsilon/assets/mtn/12_stagger.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/13_cry.mtn","path":"live2d_models/nipsilon/assets/mtn/13_cry.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/14_ sigh.mtn","path":"live2d_models/nipsilon/assets/mtn/14_ sigh.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/15_joy.mtn","path":"live2d_models/nipsilon/assets/mtn/15_joy.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/16_menace.mtn","path":"live2d_models/nipsilon/assets/mtn/16_menace.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/17_yes.mtn","path":"live2d_models/nipsilon/assets/mtn/17_yes.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/19_walk.mtn","path":"live2d_models/nipsilon/assets/mtn/19_walk.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/18_no.mtn","path":"live2d_models/nipsilon/assets/mtn/18_no.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/20_sleep.mtn","path":"live2d_models/nipsilon/assets/mtn/20_sleep.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/moc/nipsilon.moc","path":"live2d_models/nipsilon/assets/moc/nipsilon.moc","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nito/assets/moc/nito.moc","path":"live2d_models/nito/assets/moc/nito.moc","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/00_idle.mtn","path":"live2d_models/nito/assets/mtn/00_idle.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/01_happy.mtn","path":"live2d_models/nito/assets/mtn/01_happy.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/02_angry.mtn","path":"live2d_models/nito/assets/mtn/02_angry.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/03_fear.mtn","path":"live2d_models/nito/assets/mtn/03_fear.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/04_surprise.mtn","path":"live2d_models/nito/assets/mtn/04_surprise.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/05_fun.mtn","path":"live2d_models/nito/assets/mtn/05_fun.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/06_love.mtn","path":"live2d_models/nito/assets/mtn/06_love.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/07_bye.mtn","path":"live2d_models/nito/assets/mtn/07_bye.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/11_muscle.mtn","path":"live2d_models/nito/assets/mtn/11_muscle.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/08_sad.mtn","path":"live2d_models/nito/assets/mtn/08_sad.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/09_yawn.mtn","path":"live2d_models/nito/assets/mtn/09_yawn.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/10_yeah.mtn","path":"live2d_models/nito/assets/mtn/10_yeah.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/14_ sigh.mtn","path":"live2d_models/nito/assets/mtn/14_ sigh.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/12_stagger.mtn","path":"live2d_models/nito/assets/mtn/12_stagger.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/15_joy.mtn","path":"live2d_models/nito/assets/mtn/15_joy.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/13_cry.mtn","path":"live2d_models/nito/assets/mtn/13_cry.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/16_menace.mtn","path":"live2d_models/nito/assets/mtn/16_menace.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/20_sleep.mtn","path":"live2d_models/nito/assets/mtn/20_sleep.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/18_no.mtn","path":"live2d_models/nito/assets/mtn/18_no.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/19_walk.mtn","path":"live2d_models/nito/assets/mtn/19_walk.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/17_yes.mtn","path":"live2d_models/nito/assets/mtn/17_yes.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/moc/shizuku.moc","path":"live2d_models/shizuku/assets/moc/shizuku.moc","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/exp/f01.exp.json","path":"live2d_models/shizuku/assets/exp/f01.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/exp/f02.exp.json","path":"live2d_models/shizuku/assets/exp/f02.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/exp/f03.exp.json","path":"live2d_models/shizuku/assets/exp/f03.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/exp/f04.exp.json","path":"live2d_models/shizuku/assets/exp/f04.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/flickHead_00.mtn","path":"live2d_models/shizuku/assets/mtn/flickHead_00.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/flickHead_01.mtn","path":"live2d_models/shizuku/assets/mtn/flickHead_01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/flickHead_02.mtn","path":"live2d_models/shizuku/assets/mtn/flickHead_02.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/idle_00.mtn","path":"live2d_models/shizuku/assets/mtn/idle_00.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/idle_01.mtn","path":"live2d_models/shizuku/assets/mtn/idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/idle_02.mtn","path":"live2d_models/shizuku/assets/mtn/idle_02.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/pinchIn_00.mtn","path":"live2d_models/shizuku/assets/mtn/pinchIn_00.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/pinchIn_01.mtn","path":"live2d_models/shizuku/assets/mtn/pinchIn_01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/pinchOut_00.mtn","path":"live2d_models/shizuku/assets/mtn/pinchOut_00.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/pinchOut_01.mtn","path":"live2d_models/shizuku/assets/mtn/pinchOut_01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/pinchIn_02.mtn","path":"live2d_models/shizuku/assets/mtn/pinchIn_02.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/pinchOut_02.mtn","path":"live2d_models/shizuku/assets/mtn/pinchOut_02.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/shake_00.mtn","path":"live2d_models/shizuku/assets/mtn/shake_00.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/tapBody_01.mtn","path":"live2d_models/shizuku/assets/mtn/tapBody_01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/tapBody_02.mtn","path":"live2d_models/shizuku/assets/mtn/tapBody_02.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/snd/flickHead_00.mp3","path":"live2d_models/shizuku/assets/snd/flickHead_00.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/shake_01.mtn","path":"live2d_models/shizuku/assets/mtn/shake_01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/shake_02.mtn","path":"live2d_models/shizuku/assets/mtn/shake_02.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/tapBody_00.mtn","path":"live2d_models/shizuku/assets/mtn/tapBody_00.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/snd/flickHead_01.mp3","path":"live2d_models/shizuku/assets/snd/flickHead_01.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/snd/flickHead_02.mp3","path":"live2d_models/shizuku/assets/snd/flickHead_02.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/snd/pinchIn_00.mp3","path":"live2d_models/shizuku/assets/snd/pinchIn_00.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/snd/pinchIn_01.mp3","path":"live2d_models/shizuku/assets/snd/pinchIn_01.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/snd/pinchIn_02.mp3","path":"live2d_models/shizuku/assets/snd/pinchIn_02.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/snd/pinchOut_00.mp3","path":"live2d_models/shizuku/assets/snd/pinchOut_00.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/snd/pinchOut_01.mp3","path":"live2d_models/shizuku/assets/snd/pinchOut_01.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/snd/pinchOut_02.mp3","path":"live2d_models/shizuku/assets/snd/pinchOut_02.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/snd/shake_01.mp3","path":"live2d_models/shizuku/assets/snd/shake_01.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/snd/shake_00.mp3","path":"live2d_models/shizuku/assets/snd/shake_00.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/snd/shake_02.mp3","path":"live2d_models/shizuku/assets/snd/shake_02.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/snd/tapBody_00.mp3","path":"live2d_models/shizuku/assets/snd/tapBody_00.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/snd/tapBody_01.mp3","path":"live2d_models/shizuku/assets/snd/tapBody_01.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/snd/tapBody_02.mp3","path":"live2d_models/shizuku/assets/snd/tapBody_02.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tororo/assets/mtn/01.mtn","path":"live2d_models/tororo/assets/mtn/01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tororo/assets/mtn/00_idle.mtn","path":"live2d_models/tororo/assets/mtn/00_idle.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tororo/assets/mtn/02.mtn","path":"live2d_models/tororo/assets/mtn/02.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tororo/assets/mtn/03.mtn","path":"live2d_models/tororo/assets/mtn/03.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tororo/assets/mtn/04.mtn","path":"live2d_models/tororo/assets/mtn/04.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tororo/assets/mtn/05.mtn","path":"live2d_models/tororo/assets/mtn/05.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tororo/assets/mtn/06.mtn","path":"live2d_models/tororo/assets/mtn/06.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tororo/assets/mtn/07.mtn","path":"live2d_models/tororo/assets/mtn/07.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tororo/assets/mtn/08.mtn","path":"live2d_models/tororo/assets/mtn/08.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tororo/assets/moc/tororo.moc","path":"live2d_models/tororo/assets/moc/tororo.moc","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/exp/F01.exp.json","path":"live2d_models/tsumiki/assets/exp/F01.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/exp/F02.exp.json","path":"live2d_models/tsumiki/assets/exp/F02.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/exp/F05.exp.json","path":"live2d_models/tsumiki/assets/exp/F05.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/exp/F03.exp.json","path":"live2d_models/tsumiki/assets/exp/F03.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/exp/F04.exp.json","path":"live2d_models/tsumiki/assets/exp/F04.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/exp/F06.exp.json","path":"live2d_models/tsumiki/assets/exp/F06.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/exp/F08.exp.json","path":"live2d_models/tsumiki/assets/exp/F08.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/exp/F09.exp.json","path":"live2d_models/tsumiki/assets/exp/F09.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/exp/F07.exp.json","path":"live2d_models/tsumiki/assets/exp/F07.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/exp/F10.exp.json","path":"live2d_models/tsumiki/assets/exp/F10.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/P01.mtn","path":"live2d_models/tsumiki/assets/mtn/P01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_01_df.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_01_df.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_idle_01.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_02.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_02.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_01.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_04.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_04.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_03.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_03.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_05.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_05.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_06.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_06.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_08.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_08.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_10.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_10.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_07.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_07.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_09.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_09.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_11.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_11.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_12.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_12.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_14.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_14.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_13.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_13.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_15.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_15.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_16.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_16.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_17.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_17.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_18.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_18.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_21.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_21.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_19.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_19.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_22.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_22.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_23.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_23.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_20.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_20.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_24.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_24.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/moc/tsumiki.moc","path":"live2d_models/tsumiki/assets/moc/tsumiki.moc","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/idle_01.mtn","path":"live2d_models/unitychan/assets/mtn/idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/idle_02.mtn","path":"live2d_models/unitychan/assets/mtn/idle_02.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/m_01.mtn","path":"live2d_models/unitychan/assets/mtn/m_01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/m_02.mtn","path":"live2d_models/unitychan/assets/mtn/m_02.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/m_03.mtn","path":"live2d_models/unitychan/assets/mtn/m_03.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/m_04.mtn","path":"live2d_models/unitychan/assets/mtn/m_04.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/m_05.mtn","path":"live2d_models/unitychan/assets/mtn/m_05.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/m_08.mtn","path":"live2d_models/unitychan/assets/mtn/m_08.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/m_06.mtn","path":"live2d_models/unitychan/assets/mtn/m_06.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/m_07.mtn","path":"live2d_models/unitychan/assets/mtn/m_07.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/m_10.mtn","path":"live2d_models/unitychan/assets/mtn/m_10.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/m_09.mtn","path":"live2d_models/unitychan/assets/mtn/m_09.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/m_11.mtn","path":"live2d_models/unitychan/assets/mtn/m_11.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/m_12.mtn","path":"live2d_models/unitychan/assets/mtn/m_12.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/m_13.mtn","path":"live2d_models/unitychan/assets/mtn/m_13.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/m_14.mtn","path":"live2d_models/unitychan/assets/mtn/m_14.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/moc/unitychan.moc","path":"live2d_models/unitychan/assets/moc/unitychan.moc","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/wanko/assets/moc/wanko.moc","path":"live2d_models/wanko/assets/moc/wanko.moc","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/wanko/assets/mtn/idle_01.mtn","path":"live2d_models/wanko/assets/mtn/idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/wanko/assets/mtn/idle_02.mtn","path":"live2d_models/wanko/assets/mtn/idle_02.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/wanko/assets/mtn/idle_03.mtn","path":"live2d_models/wanko/assets/mtn/idle_03.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/wanko/assets/mtn/shake_02.mtn","path":"live2d_models/wanko/assets/mtn/shake_02.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/wanko/assets/mtn/idle_04.mtn","path":"live2d_models/wanko/assets/mtn/idle_04.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/wanko/assets/mtn/shake_01.mtn","path":"live2d_models/wanko/assets/mtn/shake_01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/wanko/assets/mtn/touch_01.mtn","path":"live2d_models/wanko/assets/mtn/touch_01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/wanko/assets/mtn/touch_02.mtn","path":"live2d_models/wanko/assets/mtn/touch_02.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/wanko/assets/mtn/touch_05.mtn","path":"live2d_models/wanko/assets/mtn/touch_05.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/wanko/assets/mtn/touch_03.mtn","path":"live2d_models/wanko/assets/mtn/touch_03.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/wanko/assets/mtn/touch_04.mtn","path":"live2d_models/wanko/assets/mtn/touch_04.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/wanko/assets/mtn/touch_06.mtn","path":"live2d_models/wanko/assets/mtn/touch_06.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/z16/assets/exp/f00.exp.json","path":"live2d_models/z16/assets/exp/f00.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/z16/assets/moc/z16.moc","path":"live2d_models/z16/assets/moc/z16.moc","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/z16/assets/mtn/idle.mtn","path":"live2d_models/z16/assets/mtn/idle.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/chitose/assets/moc/chitose.2048/texture_00.png","path":"live2d_models/chitose/assets/moc/chitose.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/moc/Epsilon2.1.2048/texture_00.png","path":"live2d_models/epsilon2_1/assets/moc/Epsilon2.1.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_00.png","path":"live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_01.png","path":"live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_01.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_02.png","path":"live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_02.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_06.png","path":"live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_06.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/exp/f01.exp.json","path":"live2d_models/haru/01/assets/exp/f01.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_03.png","path":"live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_03.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/exp/f02.exp.json","path":"live2d_models/haru/01/assets/exp/f02.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_04.png","path":"live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_04.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_05.png","path":"live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_05.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/exp/f03.exp.json","path":"live2d_models/haru/01/assets/exp/f03.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/exp/f04.exp.json","path":"live2d_models/haru/01/assets/exp/f04.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/exp/f05.exp.json","path":"live2d_models/haru/01/assets/exp/f05.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/exp/f07.exp.json","path":"live2d_models/haru/01/assets/exp/f07.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/exp/f08.exp.json","path":"live2d_models/haru/01/assets/exp/f08.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/flickHead_00.mtn","path":"live2d_models/haru/01/assets/mtn/flickHead_00.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/idle_00.mtn","path":"live2d_models/haru/01/assets/mtn/idle_00.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/idle_01.mtn","path":"live2d_models/haru/01/assets/mtn/idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/exp/f06.exp.json","path":"live2d_models/haru/01/assets/exp/f06.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/pinchIn_00.mtn","path":"live2d_models/haru/01/assets/mtn/pinchIn_00.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/idle_02.mtn","path":"live2d_models/haru/01/assets/mtn/idle_02.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/pinchOut_00.mtn","path":"live2d_models/haru/01/assets/mtn/pinchOut_00.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/shake_00.mtn","path":"live2d_models/haru/01/assets/mtn/shake_00.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/tapBody_03.mtn","path":"live2d_models/haru/01/assets/mtn/tapBody_03.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/tapBody_00.mtn","path":"live2d_models/haru/01/assets/mtn/tapBody_00.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/tapBody_01.mtn","path":"live2d_models/haru/01/assets/mtn/tapBody_01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/tapBody_02.mtn","path":"live2d_models/haru/01/assets/mtn/tapBody_02.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/tapBody_05.mtn","path":"live2d_models/haru/01/assets/mtn/tapBody_05.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/tapBody_07.mtn","path":"live2d_models/haru/01/assets/mtn/tapBody_07.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/tapBody_04.mtn","path":"live2d_models/haru/01/assets/mtn/tapBody_04.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/tapBody_06.mtn","path":"live2d_models/haru/01/assets/mtn/tapBody_06.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/tapBody_08.mtn","path":"live2d_models/haru/01/assets/mtn/tapBody_08.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/tapBody_09.mtn","path":"live2d_models/haru/01/assets/mtn/tapBody_09.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/moc/haru01.moc","path":"live2d_models/haru/01/assets/moc/haru01.moc","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/snd/flickHead_00.mp3","path":"live2d_models/haru/01/assets/snd/flickHead_00.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/snd/pinchIn_00.mp3","path":"live2d_models/haru/01/assets/snd/pinchIn_00.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/snd/pinchOut_00.mp3","path":"live2d_models/haru/01/assets/snd/pinchOut_00.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/snd/shake_00.mp3","path":"live2d_models/haru/01/assets/snd/shake_00.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/snd/tapBody_00.mp3","path":"live2d_models/haru/01/assets/snd/tapBody_00.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/snd/tapBody_01.mp3","path":"live2d_models/haru/01/assets/snd/tapBody_01.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/snd/tapBody_02.mp3","path":"live2d_models/haru/01/assets/snd/tapBody_02.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/exp/f04.exp.json","path":"live2d_models/haru/02/assets/exp/f04.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/exp/f02.exp.json","path":"live2d_models/haru/02/assets/exp/f02.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/exp/f01.exp.json","path":"live2d_models/haru/02/assets/exp/f01.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/exp/f03.exp.json","path":"live2d_models/haru/02/assets/exp/f03.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/exp/f05.exp.json","path":"live2d_models/haru/02/assets/exp/f05.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/exp/f07.exp.json","path":"live2d_models/haru/02/assets/exp/f07.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/exp/f08.exp.json","path":"live2d_models/haru/02/assets/exp/f08.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/exp/f06.exp.json","path":"live2d_models/haru/02/assets/exp/f06.exp.json","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/moc/haru02.moc","path":"live2d_models/haru/02/assets/moc/haru02.moc","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/snd/flickHead_00.mp3","path":"live2d_models/haru/02/assets/snd/flickHead_00.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/snd/pinchIn_00.mp3","path":"live2d_models/haru/02/assets/snd/pinchIn_00.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/snd/pinchOut_00.mp3","path":"live2d_models/haru/02/assets/snd/pinchOut_00.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/snd/shake_00.mp3","path":"live2d_models/haru/02/assets/snd/shake_00.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/snd/tapBody_02.mp3","path":"live2d_models/haru/02/assets/snd/tapBody_02.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/snd/tapBody_00.mp3","path":"live2d_models/haru/02/assets/snd/tapBody_00.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/snd/tapBody_01.mp3","path":"live2d_models/haru/02/assets/snd/tapBody_01.mp3","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/flickHead_00.mtn","path":"live2d_models/haru/02/assets/mtn/flickHead_00.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/idle_01.mtn","path":"live2d_models/haru/02/assets/mtn/idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/idle_00.mtn","path":"live2d_models/haru/02/assets/mtn/idle_00.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/pinchIn_00.mtn","path":"live2d_models/haru/02/assets/mtn/pinchIn_00.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/idle_02.mtn","path":"live2d_models/haru/02/assets/mtn/idle_02.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/pinchOut_00.mtn","path":"live2d_models/haru/02/assets/mtn/pinchOut_00.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/tapBody_00.mtn","path":"live2d_models/haru/02/assets/mtn/tapBody_00.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/shake_00.mtn","path":"live2d_models/haru/02/assets/mtn/shake_00.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/tapBody_01.mtn","path":"live2d_models/haru/02/assets/mtn/tapBody_01.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/tapBody_02.mtn","path":"live2d_models/haru/02/assets/mtn/tapBody_02.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/tapBody_03.mtn","path":"live2d_models/haru/02/assets/mtn/tapBody_03.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/tapBody_05.mtn","path":"live2d_models/haru/02/assets/mtn/tapBody_05.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/tapBody_04.mtn","path":"live2d_models/haru/02/assets/mtn/tapBody_04.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/tapBody_06.mtn","path":"live2d_models/haru/02/assets/mtn/tapBody_06.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/tapBody_07.mtn","path":"live2d_models/haru/02/assets/mtn/tapBody_07.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/tapBody_08.mtn","path":"live2d_models/haru/02/assets/mtn/tapBody_08.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/tapBody_09.mtn","path":"live2d_models/haru/02/assets/mtn/tapBody_09.mtn","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haruto/assets/moc/haruto.2048/texture_00.png","path":"live2d_models/haruto/assets/moc/haruto.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/moc/hibiki.2048/texture_00.png","path":"live2d_models/hibiki/assets/moc/hibiki.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/hijiki/assets/moc/hijiki.2048/texture_00.png","path":"live2d_models/hijiki/assets/moc/hijiki.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_00.png","path":"live2d_models/izumi/assets/moc/izumi_illust.1024/texture_00.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_01.png","path":"live2d_models/izumi/assets/moc/izumi_illust.1024/texture_01.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_02.png","path":"live2d_models/izumi/assets/moc/izumi_illust.1024/texture_02.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_03.png","path":"live2d_models/izumi/assets/moc/izumi_illust.1024/texture_03.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/koharu/assets/moc/koharu.2048/texture_00.png","path":"live2d_models/koharu/assets/moc/koharu.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/miku/assets/moc/miku.2048/texture_00.png","path":"live2d_models/miku/assets/moc/miku.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/moc/ni-j.2048/texture_00.png","path":"live2d_models/ni-j/assets/moc/ni-j.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/moc/ni-j.2048/texture_01.png","path":"live2d_models/ni-j/assets/moc/ni-j.2048/texture_01.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nico/assets/moc/nico.2048/texture_00.png","path":"live2d_models/nico/assets/moc/nico.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nico/assets/moc/nico.2048/texture_01.png","path":"live2d_models/nico/assets/moc/nico.2048/texture_01.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nico/assets/moc/nico.2048/texture_02.png","path":"live2d_models/nico/assets/moc/nico.2048/texture_02.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_00.png","path":"live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_01.png","path":"live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_01.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_02.png","path":"live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_02.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_00.png","path":"live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_01.png","path":"live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_01.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_02.png","path":"live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_02.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nito/assets/moc/nito.2048/texture_00.png","path":"live2d_models/nito/assets/moc/nito.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/nito/assets/moc/nito.2048/texture_01.png","path":"live2d_models/nito/assets/moc/nito.2048/texture_01.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_00.png","path":"live2d_models/shizuku/assets/moc/shizuku.1024/texture_00.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_01.png","path":"live2d_models/shizuku/assets/moc/shizuku.1024/texture_01.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_02.png","path":"live2d_models/shizuku/assets/moc/shizuku.1024/texture_02.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_03.png","path":"live2d_models/shizuku/assets/moc/shizuku.1024/texture_03.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_04.png","path":"live2d_models/shizuku/assets/moc/shizuku.1024/texture_04.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_05.png","path":"live2d_models/shizuku/assets/moc/shizuku.1024/texture_05.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tororo/assets/moc/tororo.2048/texture_00.png","path":"live2d_models/tororo/assets/moc/tororo.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/moc/tsumiki.2048/texture_00.png","path":"live2d_models/tsumiki/assets/moc/tsumiki.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/moc/tsumiki.2048/texture_01.png","path":"live2d_models/tsumiki/assets/moc/tsumiki.2048/texture_01.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/moc/unitychan.2048/texture_00.png","path":"live2d_models/unitychan/assets/moc/unitychan.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/wanko/assets/moc/wanko.1024/texture_00.png","path":"live2d_models/wanko/assets/moc/wanko.1024/texture_00.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/z16/assets/moc/z16.1024/texture_00.png","path":"live2d_models/z16/assets/moc/z16.1024/texture_00.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/z16/assets/moc/z16.256/texture_00.png","path":"live2d_models/z16/assets/moc/z16.256/texture_00.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/z16/assets/moc/z16.512/texture_00.png","path":"live2d_models/z16/assets/moc/z16.512/texture_00.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/moc/haru01.1024/texture_00.png","path":"live2d_models/haru/01/assets/moc/haru01.1024/texture_00.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/moc/haru01.1024/texture_01.png","path":"live2d_models/haru/01/assets/moc/haru01.1024/texture_01.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/moc/haru01.1024/texture_02.png","path":"live2d_models/haru/01/assets/moc/haru01.1024/texture_02.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/moc/haru02.1024/texture_00.png","path":"live2d_models/haru/02/assets/moc/haru02.1024/texture_00.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/moc/haru02.1024/texture_01.png","path":"live2d_models/haru/02/assets/moc/haru02.1024/texture_01.png","modified":0,"renderable":1},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/moc/haru02.1024/texture_02.png","path":"live2d_models/haru/02/assets/moc/haru02.1024/texture_02.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/2019-03-05-数据库.md","hash":"c6f43110e37fad581c7db65fcfd79a8cf2d0e24b","modified":1606204384741},{"_id":"source/_posts/2019-03-12-代理服务器的搭建.md","hash":"32970dce89331fd1c2e34e73218c3d92f68fc3e2","modified":1606204384742},{"_id":"source/_posts/2019-03-19-ruby基本知识.md","hash":"99bbe2751d0912471c3f6455f8d2e87161c3c841","modified":1606204384743},{"_id":"source/_posts/2019-03-12-DataTable使用正则.md","hash":"b8f42a9a6e2d5c0728a1bb481fb64f88afe44cde","modified":1606204384742},{"_id":"source/_posts/2019-03-20-Ruby-Rails学习资料.md","hash":"d2ae8f34a598da1a3fc8226f141d264f4a921fa8","modified":1606204384743},{"_id":"source/_posts/2019-04-03-git环境配置.md","hash":"2d4bcb2da541966672f56e6a41ebedcd07340819","modified":1606204384745},{"_id":"source/_posts/2019-03-29-ruby-open3死锁.md","hash":"7e7175e0e6085a9fc51db2828668ae417bd982e8","modified":1606204384744},{"_id":"source/_posts/2019-05-22-css居中详解.md","hash":"5ab46e2a111bded25a93d9cd1b444b6b85ed0cd5","modified":1606204384746},{"_id":"source/_posts/2019-07-12-网站推荐.md","hash":"fee01fa6299559415a932be47184a3a760ab57a9","modified":1606204384747},{"_id":"source/_posts/2019-05-08-js事件委托机制.md","hash":"9778fbd415e3a049a970c2021732600947e6a361","modified":1606204384745},{"_id":"source/_posts/2019-05-27-flex布局.md","hash":"3d0dc542fa0976ee1e4de5c24adf23493a5a88fe","modified":1619780020455},{"_id":"source/_posts/2019-10-29-proxy-of-docker.md","hash":"33f589a8144f667046e6b86269a721cfc89b8a9c","modified":1608705628997},{"_id":"source/_posts/2020-09-06-interview-css.md","hash":"9742470aea9480a82b07f9efb7482c7638b46be3","modified":1620388528882},{"_id":"source/_posts/2020-05-11-linux-connect-blueteeth.md","hash":"bbcd3d47d3dea0d03463cac0497eea78842bc50c","modified":1606204384749},{"_id":"source/_posts/2020-09-04-centos-install-k8s.md","hash":"62c7e9b2b4f737104fb4c53edc863d145448ca59","modified":1606204384749},{"_id":"source/_posts/2020-09-14-ruby-rare-knowledge.md","hash":"2353d24cc192800618a0b15b19572cbdca8276e5","modified":1606204384751},{"_id":"source/_posts/2020-09-10-debian-install-k8s.md","hash":"7f363f54b394197bed64b7b2c3a27aa42668b497","modified":1606204384751},{"_id":"source/_posts/2020-09-27-debian-install-command.md","hash":"a0f74e1fd82dfff3521087a5a3276b0dcaa7241b","modified":1606204384752},{"_id":"source/_posts/2020-09-17-k8s-add-new-domain-name.md","hash":"923e0d823b6235f336fe387c7218e8a54cf283bf","modified":1606204384752},{"_id":"source/_posts/2019-10-22-percentage-of-css.md","hash":"0e886b267c1cbec0c36e2924307b13207b08ec76","modified":1606204384748},{"_id":"source/_posts/2020-09-27-node-http-server.md","hash":"8b947daa49ccc76933d0e384d192638ab8bfada6","modified":1606204384754},{"_id":"source/_posts/2020-09-27-debian-install-k8s-offline.md","hash":"eef920b94d857759f3c3a21e708b5e7004c51950","modified":1606204384753},{"_id":"source/_posts/2020-09-27-docker-install-offline.md","hash":"eaac53621a14687d9a92b7b3efb3cfb786307038","modified":1606204384754},{"_id":"source/_posts/2020-10-21-browser-window-size.md","hash":"2a5d97861d828aee324c345fa7fb13289aec4e95","modified":1606204384757},{"_id":"source/_posts/2020-09-30-hexo-add-article-nav.md","hash":"ac1978858f2f2b3ed8243a047da684e66ef8b583","modified":1606204384755},{"_id":"source/_posts/2020-10-11-gitee-update-pages-auto.md","hash":"953c59fc46dbbe2bfc4c4e13e14ce4d96c92333f","modified":1606204384756},{"_id":"source/_posts/2020-10-07-deploy-hexo.md","hash":"a01a1b679161a848bcbaf4070a4735b191118b32","modified":1614651184635},{"_id":"source/_posts/2020-10-22-es6-async-methods.md","hash":"41a006a6e379b48bb2d1469f9a3e3c3fe1d891fb","modified":1606204384758},{"_id":"source/_posts/2020-10-11-hexo-new-page.md","hash":"85912b60c14f97869326523576de4349a66fd0dc","modified":1606204384756},{"_id":"source/_posts/2020-11-21-dataTable.md","hash":"b6e31d6be524af45f7fd37d3a6e94d2bef083efb","modified":1606815710818},{"_id":"source/_posts/2020-11-02-daterangepicker-default-null(1).md","hash":"783f186e9c310037837f712f65351daf3f3d1904","modified":1606204384759},{"_id":"source/_posts/2020-10-23-forEach-sync-execute.md","hash":"025d5b94f4005ca3b339c7ce6c1d308f2fe0f518","modified":1606204384758},{"_id":"source/_posts/2020-12-14-js-knowledge-md.md","hash":"5ff68254631eafb3df2ad0aa08575380b98e4545","modified":1620387237085},{"_id":"source/_posts/2020-12-01-npm-install-md.md","hash":"25ef45ff82b050bf04e66362590633eb708a7886","modified":1614566193486},{"_id":"source/_posts/2020-12-01-es6-uniq.md","hash":"91f9fbbb43fb677a7ee4a1bffaeb3af49cfc2611","modified":1606799452137},{"_id":"source/_posts/2020-12-01-jquery-subscribe-ajax-event-md.md","hash":"c4905df7bae137997c0e1017f7f85233d349cc9d","modified":1606814110508},{"_id":"source/_posts/2020-12-15-hls-js-video-md.md","hash":"543b51e8689ebe169e1c4280d440aa902027b8e6","modified":1608009667847},{"_id":"source/_posts/2020-12-01-js-float-calculate.md","hash":"7c9b0d3f989252f1183ec7d016098bcf881dfaef","modified":1606802476030},{"_id":"source/_posts/2020-12-23-vue-knownledge.md","hash":"f4b270a5af7519e632ceed64acaeb17d5d4728d8","modified":1620387510948},{"_id":"source/_posts/2020-12-20-vue-life-hook-function.md","hash":"4932413383839cc4de8c7a12f5123db53eae6cfe","modified":1612348414770},{"_id":"source/_posts/2020-12-21-css-common-attribute.md","hash":"ea2eacc7546a474c68fa218a000c414f46722b17","modified":1614651184641},{"_id":"source/_posts/2020-12-29-process-of-render-page.md","hash":"f534021419851973e3c8087961963af42896c3cc","modified":1609209196484},{"_id":"source/_posts/2020-12-20-js-event-loop.md","hash":"0bf8f6a1553b3ba1e3d2936f6a499476c10ca6e6","modified":1612348414769},{"_id":"source/_posts/2021-01-01-js-data-type-judge.md","hash":"54f770c37361875603a0d457761c2de7f84ce54d","modified":1612348414771},{"_id":"source/_posts/2021-01-16-css-match-principle.md","hash":"931e3f9792721b3c3d6f20424619e72b3db6034b","modified":1612348414773},{"_id":"source/_posts/2021-02-14-js-regex-method.md","hash":"706b15cd438e15fbe486048ec2af5bad63bcea60","modified":1619784071363},{"_id":"source/_posts/2021-01-16-diff-from-arrow-function-and-function.md","hash":"55c830ba2fa19f779839c1126f3f9fe31594f30f","modified":1612348414773},{"_id":"source/_posts/2021-01-02-diff-from-require-import.md","hash":"184a262809608316d85d90e88caa19c4daf1b3ee","modified":1612348414772},{"_id":"source/_posts/2021-02-03-js-fetch.md","hash":"85eda5696ea2a5b9421c8812f7c2d8beae8ee30d","modified":1614651184643},{"_id":"source/_posts/2021-03-20-angular-css-scope.md","hash":"73735ee85c4e6b32c1fae2e26fa62e786c14ca26","modified":1616231634577},{"_id":"source/_posts/2021-03-20-node-sass-failure.md","hash":"f7e8f79516dd972a70cfe4f1c3cfc977dd7b3f05","modified":1619784071345},{"_id":"source/_posts/2021-03-07-jsonp.md","hash":"0f08019026eb64086f6aa0a9c612a5a42afd6d86","modified":1617690127560},{"_id":"source/_posts/2021-03-20-four-angle-border-by-css.md","hash":"b50bf4518e66676776f7aa08c83c1b2cc71bb1e5","modified":1616233923526},{"_id":"source/_posts/2021-03-20-cross-domain-server.md","hash":"c1f018a4b9de2f26d9f01baaf073d21648548e3d","modified":1616234266428},{"_id":"source/_posts/2021-04-06-difference-sass-and-less.md","hash":"1679df1afc6cc260bda908316074353aaf5b86e2","modified":1619784071346},{"_id":"source/_posts/2021-04-20-angular-lifecycle.md","hash":"c05e2f0a076ea2899df02a00b29ac04c19e44127","modified":1620388540980},{"_id":"source/_posts/2021-05-06-css-block-format-context.md","hash":"ecb85308e6c9663dbd281c85be3f061125bccda9","modified":1620388540981},{"_id":"source/_posts/2021-05-06-css-diff-only-of-type-and-only-child.md","hash":"2ed2b058b3641b3aeeaedaf1b323f76b106442fe","modified":1620388540982},{"_id":"source/_posts/2021-05-06-css-interview.md","hash":"7334322d25cf37fb4917126678c7c45e30dacbb3","modified":1620388540983},{"_id":"source/_posts/2021-04-06-difference-escape-encodeURI-encodeURIComponent.md","hash":"d9ad931aa01cfd060ba4052431fc506a9555d0dc","modified":1618316504329},{"_id":"source/comment/index.md","hash":"037abfec55a35785290c17164e19ccef8ae69b84","modified":1606204384760},{"_id":"source/_posts/2021-02-10-linux-terminal-keyboard-shortcut.md","hash":"a4bcc5e0daed1a4077636563fc40f6e6bd444062","modified":1614651184646},{"_id":"source/_posts/2021-04-06-css-wrap-line.md","hash":"ed7540c2e9ee9ae3b38804bcd1262ffa4cb84deb","modified":1617693068842},{"_id":"source/website/index.md","hash":"e84b1135c8d19ff6ae9034ccb91ec8971bbcb73e","modified":1617690127562},{"_id":"source/_posts/2020-12-16-nginx-config.md","hash":"09aadaa243d161a17eed608aca2923f602c3bc7a","modified":1609223874999},{"_id":"themes/lucky/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1606799836984},{"_id":"themes/lucky/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1606799836929},{"_id":"themes/lucky/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1606799836928},{"_id":"themes/lucky/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1606799836929},{"_id":"themes/lucky/LICENSE","hash":"4bd4037a0093c20bfdfb637b93758402ca188d14","modified":1606799836933},{"_id":"themes/lucky/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1606799836930},{"_id":"themes/lucky/package.json","hash":"4656765287888094e8ac0a2c3c2a1f1c256b8676","modified":1606799836993},{"_id":"themes/lucky/README.md","hash":"8e82a12deaa0aae0e3662870fc5d1616d283aa69","modified":1606799836934},{"_id":"themes/lucky/_config.yml","hash":"c2b100a4433001e668f2206014ef308630c97335","modified":1617002302965},{"_id":"themes/lucky/.gitignore","hash":"b09bbb3bf1d74cc29a8a5eaa293d921f4cd4ee7b","modified":1606799836931},{"_id":"themes/lucky/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1606799836948},{"_id":"themes/lucky/webpack.config.js","hash":"08f653daa4794a76d5ff2011751593a5102e21aa","modified":1606799837942},{"_id":"themes/lucky/.vscode/settings.json","hash":"0f536a72f302812f9add043f0dc128ccfd657347","modified":1606799836932},{"_id":"themes/lucky/languages/default.yml","hash":"af81d39fd3422cdb118165461f231b2429a09d6c","modified":1606799836947},{"_id":"themes/lucky/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1606799836949},{"_id":"themes/lucky/languages/en.yml","hash":"5b7e0730101edd49167f9c09c93279ad745b2098","modified":1606799836947},{"_id":"themes/lucky/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1606799836949},{"_id":"themes/lucky/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1606799836950},{"_id":"themes/lucky/examples/index.html","hash":"e8b56b7ca7e3f7bcf51060b78c011a91014d2ce0","modified":1606799836945},{"_id":"themes/lucky/languages/zh-CN.yml","hash":"af81d39fd3422cdb118165461f231b2429a09d6c","modified":1606799836951},{"_id":"themes/lucky/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1606799836987},{"_id":"themes/lucky/languages/zh-Hans.yml","hash":"3d62bb14cc58cce82a8e05ca4bcb3813902c92d8","modified":1606799836952},{"_id":"themes/lucky/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1606799836988},{"_id":"themes/lucky/layout/index.ejs","hash":"5ef42c7cc4556048579c5ab9aa95bf81caa4f09c","modified":1606799836989},{"_id":"themes/lucky/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1606799836991},{"_id":"themes/lucky/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1606799836992},{"_id":"themes/lucky/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1606799836992},{"_id":"themes/lucky/languages/zh-tw.yml","hash":"6663e4b0affd13320af416a765b4e7f88b55b8be","modified":1606799836952},{"_id":"themes/lucky/scripts/yilia_plus_log.js","hash":"954041c88b15f471c87ca1f8595eed2bd2a2c693","modified":1606799837003},{"_id":"themes/lucky/source/baidu_verify_code-DKptWBbgP9.html","hash":"34d1d7847f24e014fac17bc9cb450ce9d690db48","modified":1606799837066},{"_id":"themes/lucky/layout/layout.ejs","hash":"9aaf4a7282f8ea3ebae4767ab1362ed797f2c5fc","modified":1606799836990},{"_id":"themes/lucky/source/main.0ac1d1.css","hash":"a575f5dcf6651c45c4ec270798bf748ec6c406e7","modified":1617002302981},{"_id":"themes/lucky/source-src/css.ejs","hash":"c6a8a27b9d678271aac3ca0661409c9e9d703097","modified":1606799837005},{"_id":"themes/lucky/scripts/default_config.js","hash":"6b057e793003ad025690e03a7524a7c7d8d81ad2","modified":1606799836994},{"_id":"themes/lucky/source/slider.5d8892.js","hash":"f21eb7aaf6011a4a7b6fb7098b7616d51f4a0548","modified":1617002302996},{"_id":"themes/lucky/source-src/script.ejs","hash":"b886ac88de6e49e2a359082c4bf8818bd74f14d9","modified":1606799837065},{"_id":"themes/lucky/examples/images/alipay.jpeg","hash":"7eb57147bd42d499f8ef0351d46673158b209f75","modified":1606799836939},{"_id":"themes/lucky/examples/images/qrcode.png","hash":"061607c067991f03bab78904fdba6e8b4bc174b0","modified":1606799836940},{"_id":"themes/lucky/layout/_partial/activate-power-mode.ejs","hash":"45b8a294251185c041a645eb974bfd552bb283d4","modified":1606799836954},{"_id":"themes/lucky/layout/_partial/after-footer.ejs","hash":"5d4ce98ba7fc0262a2878b0f52f37c3c6496410c","modified":1606799836955},{"_id":"themes/lucky/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1606799836956},{"_id":"themes/lucky/examples/images/weixin.png","hash":"a1201bdc06e1467fea1f78cd56d8af45fdcfd5c0","modified":1606799836944},{"_id":"themes/lucky/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1606799836957},{"_id":"themes/lucky/layout/_partial/article.ejs","hash":"a77e9ca76f2abe2cf69a9ac7b727702e44bcbbf2","modified":1606799836958},{"_id":"themes/lucky/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1606799836960},{"_id":"themes/lucky/layout/_partial/baidu-push.ejs","hash":"d2c68b78e246d0bdd831d5bbc291cad168fd7ff7","modified":1606799836961},{"_id":"themes/lucky/layout/_partial/css.ejs","hash":"31a89891e128fef98f689cea18f7c0e991047c7c","modified":1617002302968},{"_id":"themes/lucky/layout/_partial/google-analytics.ejs","hash":"3a23d6ae48305c9f1b5c400da780288c2425254b","modified":1606799836963},{"_id":"themes/lucky/layout/_partial/aside.ejs","hash":"751e5deab5365348be5243688b419c82d337ab9a","modified":1606799836959},{"_id":"themes/lucky/layout/_partial/background.ejs","hash":"ac8968f04ece57e132189daffb3f4b5aeb182722","modified":1606799836960},{"_id":"themes/lucky/layout/_partial/footer.ejs","hash":"67f36ce6694ee1485f9728f8bef4f23d7de177b0","modified":1606799836962},{"_id":"themes/lucky/layout/_partial/header.ejs","hash":"91e3d97a87522a6e67fef1f403f014e6843eafa7","modified":1606799836965},{"_id":"themes/lucky/layout/_partial/head.ejs","hash":"f43ae0ec9fff66695830add6fc381e9e7ef1e296","modified":1606799836964},{"_id":"themes/lucky/layout/_partial/hover-effect.ejs","hash":"eecc81afad47a708056870500660f1228f2a301f","modified":1606799836966},{"_id":"themes/lucky/layout/_partial/left-col.ejs","hash":"70a9c60cd66ba51baccf8802d5dcce9ef1593af6","modified":1606799836966},{"_id":"themes/lucky/layout/_partial/mathjax.ejs","hash":"8609596b62c4412d260f54f8d604d6da6e709887","modified":1606799836968},{"_id":"themes/lucky/layout/_partial/tab-title-change.ejs","hash":"2fbf0ac7d95593c2e656a010e7d1136194070f4c","modified":1606799836984},{"_id":"themes/lucky/layout/_partial/live2d-widget.ejs","hash":"c2440d5df7115c92bde993e77c90b77180af9cab","modified":1606799836967},{"_id":"themes/lucky/scripts/filters/index.js","hash":"e0c3b821ecd1cb614569282fb4f6e6f555545f8b","modified":1606799836996},{"_id":"themes/lucky/layout/_partial/mobile-nav.ejs","hash":"8fd6180d0f13db8b619a79fe6e3a5bcaaa07af8e","modified":1606799836969},{"_id":"themes/lucky/scripts/filters/meta_generator.js","hash":"a1279b521b82c33a9747fc10013d363eed06f0f3","modified":1606799837000},{"_id":"themes/lucky/layout/_partial/tools.ejs","hash":"a9277c8c665a404c3c9547f1dc1669ccf0737314","modified":1606799836985},{"_id":"themes/lucky/scripts/helpers/wordcount.js","hash":"2014b5c5053ad737887b61014a045cc1b08799cd","modified":1606799837001},{"_id":"themes/lucky/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1606799836986},{"_id":"themes/lucky/scripts/lib/core.js","hash":"00509e97554914e5b0a20e0843dc90bcf53461aa","modified":1606799837003},{"_id":"themes/lucky/scripts/helpers/yilia-plus-vendors.js","hash":"a1d72be30b08c5d03226f6b8360afa19f56df8a1","modified":1606799837002},{"_id":"themes/lucky/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1606799837068},{"_id":"themes/lucky/source/fonts/fonteditor.3da1ef.woff","hash":"5a945ddf318d3ca68d0a1e8695b23287ff7e9816","modified":1606799837068},{"_id":"themes/lucky/source/fonts/fonteditor.60e1c3.svg","hash":"eeaa9848e17243743eedbdeced3c8c710f79ccc2","modified":1617002302979},{"_id":"themes/lucky/source/fonts/fonteditor.3e0d4a.svg","hash":"de1fbf8378d1966d43bf620b8acd6bf900a15a73","modified":1606799837069},{"_id":"themes/lucky/source/fonts/fonteditor.bbc4b5.woff2","hash":"c748dc092f066f7e12626c801d416e64b95dacea","modified":1606799837071},{"_id":"themes/lucky/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1606799837073},{"_id":"themes/lucky/source/fonts/fonteditor.fe4d8a.ttf","hash":"95d1a4991df9ce15562ff0344b318b5fc5f9ab70","modified":1606799837072},{"_id":"themes/lucky/source/fonts/tooltip.d04149.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1606799837074},{"_id":"themes/lucky/source/fonts/fonteditor.86c132.eot","hash":"c29905356fb2116a454a262d6f15cdeb593a6cec","modified":1606799837070},{"_id":"themes/lucky/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1606799837080},{"_id":"themes/lucky/source/img/biubiubiu.gif","hash":"cccda381f96abe91b4d698da793abd6496466d3d","modified":1606799837079},{"_id":"themes/lucky/source/img/forkme.png","hash":"b43e6e18b84edc40636204aa0eb9f266ef54a4e7","modified":1606799837081},{"_id":"themes/lucky/source/img/head.jpg","hash":"5b6f34880e460e77571126ad797ae2b9d88a4fe1","modified":1606799837083},{"_id":"themes/lucky/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1606799837084},{"_id":"themes/lucky/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1606799837085},{"_id":"themes/lucky/source/img/gitee.svg","hash":"5eda5e779b8407430aa53f3c6c38bd0ecc04b003","modified":1606799837081},{"_id":"themes/lucky/source/lib/busuanzi.pure.js","hash":"f54c44e2b30e551540b83640dd8c5ff266e157d5","modified":1606799837089},{"_id":"themes/lucky/source/lib/default.css","hash":"c9c344d5c98cc90b5583865e71726bab1046cdeb","modified":1606799837091},{"_id":"themes/lucky/source/lib/clickLove.js","hash":"a35dfb7ff19796c005ee30b55fd95e39d6d59a89","modified":1606799837090},{"_id":"themes/lucky/source/lib/gitment.css","hash":"cb2e0be2c7ebbcc3e756340c811864115bf0ec56","modified":1606799837096},{"_id":"themes/lucky/source/lib/oauthcallback.browser.js","hash":"989b9e2638336461a9911ebf60e9a839819dd11f","modified":1606799837104},{"_id":"themes/lucky/source-src/css/_core.scss","hash":"be6c986efe3912378d7c8aafdc305a5d01d190a1","modified":1606799837007},{"_id":"themes/lucky/source/lib/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1606799837105},{"_id":"themes/lucky/source/lib/snow.js","hash":"e64ca5217bb2f11257a8b212b8868ee9331ef0eb","modified":1606799837106},{"_id":"themes/lucky/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1606799837008},{"_id":"themes/lucky/source-src/css/archive.scss","hash":"eaa79e2f10ca713043f704feaafa001e1a339e50","modified":1606799837009},{"_id":"themes/lucky/source-src/css/article-inner.scss","hash":"a3de420ab47fe0c0de4cb1857f8f041abc7a3737","modified":1606799837010},{"_id":"themes/lucky/source-src/css/article-main.scss","hash":"6e6fd3ed5b906cbbe8345c3834ce645ade5a88a7","modified":1606799837010},{"_id":"themes/lucky/source-src/css/article-nav.scss","hash":"140f07d150836909853a16147ccbb7fb5d181e60","modified":1606799837011},{"_id":"themes/lucky/source-src/css/article.scss","hash":"49602a18b080df6f23d616d49b84a4ba905579de","modified":1606799837012},{"_id":"themes/lucky/source-src/css/aside.scss","hash":"353587950797f62e2f808e0f9183f82a0a4228d4","modified":1606799837013},{"_id":"themes/lucky/source-src/css/comment.scss","hash":"ada82b79907fde047bd415c9687917c6bc97b1d6","modified":1606799837013},{"_id":"themes/lucky/source-src/css/declare.scss","hash":"139b7fd4949ba829e75595af3797998c628a87c8","modified":1606799837019},{"_id":"themes/lucky/source-src/css/global.scss","hash":"f2785f59e80665805eec730034fe284329a1343a","modified":1606799837038},{"_id":"themes/lucky/source-src/css/fonts.scss","hash":"40da5972f7876205ed71b7ed9d6646fda2680de8","modified":1606799837020},{"_id":"themes/lucky/source-src/css/footer.scss","hash":"c435c8f5e79ee0eee8b0a1343c9ded2bf65e7570","modified":1606799837037},{"_id":"themes/lucky/source-src/css/hover-reveal.scss","hash":"2bdab19d10e9ca5805ed1c7a73873bf800a1f6a9","modified":1606799837041},{"_id":"themes/lucky/source-src/css/grid.scss","hash":"22c2ed05bd6ad48b1b538b0352c768674cd41a5f","modified":1606799837039},{"_id":"themes/lucky/source-src/css/highlight.scss","hash":"b9195a58b3f554df0a1f9a687deb79edc570b731","modified":1606799837040},{"_id":"themes/lucky/source-src/css/left.scss","hash":"8d48e1e96a97da533701c67f9ad925fb39edd39d","modified":1606799837044},{"_id":"themes/lucky/source-src/css/main.scss","hash":"9611a762cf9ade760f69f7d456d7958189f2b0fd","modified":1606799837045},{"_id":"themes/lucky/source-src/css/mobile-slider.scss","hash":"965781f40abb61930492f8937b5c4e4350a4a036","modified":1606799837045},{"_id":"themes/lucky/source-src/css/page.scss","hash":"950942bf4ebb20f0acc2edc3f949e8a0378a1de5","modified":1606799837047},{"_id":"themes/lucky/source-src/css/mobile.scss","hash":"e0e15f38b817df33144b87693f649b7419ca1e9d","modified":1606799837046},{"_id":"themes/lucky/source-src/css/reward.scss","hash":"87a8204da798cf240ab36dfa73dbb8638831c8a0","modified":1606799837048},{"_id":"themes/lucky/source-src/css/social.scss","hash":"9b20fdde88e07cd7155d5979d6173921edf2a3bb","modified":1606799837051},{"_id":"themes/lucky/source-src/css/share.scss","hash":"10599fdf0be5378cf91ceeedba9b513e852b96d3","modified":1606799837050},{"_id":"themes/lucky/source-src/css/scroll.scss","hash":"c94080252044b76c5af419067003fbfcc55997e9","modified":1606799837049},{"_id":"themes/lucky/source-src/css/tags-cloud.scss","hash":"a292581f6ffe0128f2717a4aa0bb406b54818645","modified":1606799837052},{"_id":"themes/lucky/source-src/css/tags.scss","hash":"5e4caea3c35a2c1bdea73f6308a42a2f550da521","modified":1606799837053},{"_id":"themes/lucky/source-src/css/tools.scss","hash":"0e025eb1324fdb5ff1d409e0c392c96dd64a6ef7","modified":1606799837054},{"_id":"themes/lucky/source-src/css/tooltip.scss","hash":"3a46ef562a15c85c80e862ccdaa6bfa8d599af35","modified":1606799837054},{"_id":"themes/lucky/source-src/js/anm.js","hash":"2603a975b97619b1d5ed3babdecf44691ccd5a97","modified":1606799837057},{"_id":"themes/lucky/source-src/js/aside.js","hash":"3cd3aa6fd80ee0d2717a5cbb805777e5582ec1eb","modified":1606799837058},{"_id":"themes/lucky/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1606799837056},{"_id":"themes/lucky/source-src/js/browser.js","hash":"e91e59c0cea4b29276735260eff59d2a9dbc30b8","modified":1606799837058},{"_id":"themes/lucky/source-src/js/main.js","hash":"e8980b7daf1ab77b1f4c74c576ce06331c34f784","modified":1606799837060},{"_id":"themes/lucky/source-src/js/fix.js","hash":"547e72b83d94611cead0bffce1f30be0cfd7cb0c","modified":1606799837059},{"_id":"themes/lucky/source-src/js/mobile.js","hash":"46f22cd3a993897aca51c1d494afeab28e2b2072","modified":1606799837061},{"_id":"themes/lucky/source-src/js/slider.js","hash":"a9d16e87200336af1231b33c79e69465dc0d2e65","modified":1606799837063},{"_id":"themes/lucky/source-src/js/share.js","hash":"d76a873435367fc8e2bca8c91fe198f88199c900","modified":1606799837062},{"_id":"themes/lucky/source-src/js/util.js","hash":"4809dac6af821f9da41b4a434b4f2c0fea09d508","modified":1606799837063},{"_id":"themes/lucky/layout/_partial/post/category.ejs","hash":"e777cbf959b11c4dfda649c562799899b90ab4a3","modified":1606799836970},{"_id":"themes/lucky/source-src/js/viewer.js","hash":"aeb3c1cc4d556279768756d0a255ac7c52c4d2c8","modified":1606799837064},{"_id":"themes/lucky/layout/_partial/post/date.ejs","hash":"ffad1d1e65f4d571059da085dc06bbcdfaf16081","modified":1617002302970},{"_id":"themes/lucky/layout/_partial/post/changyan.ejs","hash":"086c8a88fd3bcae7ec13258df58e25d6354af2fa","modified":1606799836971},{"_id":"themes/lucky/layout/_partial/post/giteement.ejs","hash":"063126e745534ddca7801a7a3f60fcee61fcad2f","modified":1606799836973},{"_id":"themes/lucky/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1606799836974},{"_id":"themes/lucky/layout/_partial/post/gitment.ejs","hash":"263bb5b60117bbefac0e74a761955cfb4026bc76","modified":1606799836974},{"_id":"themes/lucky/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1606799836976},{"_id":"themes/lucky/layout/_partial/post/toc.ejs","hash":"bd988e7bd00cd70271eb06e2b256279fb7adccd1","modified":1617002302973},{"_id":"themes/lucky/layout/_partial/post/title.ejs","hash":"c780794886a8a5b0dba633e06cd4eb7b6dceb783","modified":1606799836977},{"_id":"themes/lucky/source/live2d_models/chitose/.gitignore","hash":"a5a49e4d5dfb97857856eb6b0cdb2c93a387718f","modified":1606799837108},{"_id":"themes/lucky/layout/_partial/post/valine.ejs","hash":"58104139bf0350e42e348f4b5354274a4ade2b04","modified":1606799836978},{"_id":"themes/lucky/source/live2d_models/chitose/package-lock.json","hash":"4a6d05438080bc50d718aa70beb55d1740fe06a3","modified":1606799837142},{"_id":"themes/lucky/source/live2d_models/chitose/package.json","hash":"71f3860f8051115219e29d62d304530ff223d08d","modified":1606799837143},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/package.json","hash":"380561257da291db5ddb1e270cde12bcc290ddd4","modified":1606799837177},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/.gitignore","hash":"a5a49e4d5dfb97857856eb6b0cdb2c93a387718f","modified":1606799837144},{"_id":"themes/lucky/source/live2d_models/gf/.gitignore","hash":"a5a49e4d5dfb97857856eb6b0cdb2c93a387718f","modified":1606799837179},{"_id":"themes/lucky/layout/_partial/post/share.ejs","hash":"3591d3fdd846d7ad88d8e110848614803026f1da","modified":1606799836975},{"_id":"themes/lucky/source/live2d_models/gf/package-lock.json","hash":"3230e3a60dc2b86f462a489176a14a60511ec9be","modified":1606799837234},{"_id":"themes/lucky/source/live2d_models/haru/.gitignore","hash":"a5a49e4d5dfb97857856eb6b0cdb2c93a387718f","modified":1606799837236},{"_id":"themes/lucky/source/live2d_models/gf/package.json","hash":"d6f396725076a3c4b5f71bb5c1c7647ba4afb482","modified":1606799837235},{"_id":"themes/lucky/source/live2d_models/haru/package-lock.json","hash":"771c674e7c1e491ecdd07bb2ad3629d08ccebc94","modified":1606799837322},{"_id":"themes/lucky/source/live2d_models/haruto/.gitignore","hash":"a5a49e4d5dfb97857856eb6b0cdb2c93a387718f","modified":1606799837324},{"_id":"themes/lucky/source/live2d_models/haru/package.json","hash":"30e8dca84dcf308b1176890a54df1074f6abd224","modified":1606799837323},{"_id":"themes/lucky/source/live2d_models/haruto/package-lock.json","hash":"78674575e0e719c83ef394161bc55ca3c350b4ba","modified":1606799837346},{"_id":"themes/lucky/source/live2d_models/hibiki/.gitignore","hash":"a5a49e4d5dfb97857856eb6b0cdb2c93a387718f","modified":1606799837348},{"_id":"themes/lucky/source/live2d_models/haruto/package.json","hash":"b66008cfbefeaabb9665c2c120f421ac8510ef57","modified":1606799837347},{"_id":"themes/lucky/layout/_partial/post/word.ejs","hash":"dcfdc5eba0ac42ec469be6447e1be5f7ef5c0819","modified":1606799836979},{"_id":"themes/lucky/source/live2d_models/hibiki/package.json","hash":"8bb9ac8b7496d29da5338e5f49f08e0eef322bcc","modified":1606799837381},{"_id":"themes/lucky/source/live2d_models/hibiki/package-lock.json","hash":"28b70ca4da74fe4cd3095d4c60f5baf9cede691c","modified":1606799837381},{"_id":"themes/lucky/source/live2d_models/hijiki/package.json","hash":"dcdb3a8e061ce390eb60c4a7322cb2faf12de182","modified":1606799837403},{"_id":"themes/lucky/source/live2d_models/hijiki/.gitignore","hash":"a5a49e4d5dfb97857856eb6b0cdb2c93a387718f","modified":1606799837383},{"_id":"themes/lucky/source/live2d_models/izumi/package-lock.json","hash":"75316bdbc64951c5439683c692faa15ecc988f29","modified":1606799837468},{"_id":"themes/lucky/source/live2d_models/izumi/.gitignore","hash":"a5a49e4d5dfb97857856eb6b0cdb2c93a387718f","modified":1606799837405},{"_id":"themes/lucky/source/live2d_models/izumi/package.json","hash":"eed125d4cfbc4ec5e7f76c28137c14b6e171e3a1","modified":1606799837468},{"_id":"themes/lucky/source/live2d_models/koharu/package-lock.json","hash":"19ebf212538a260d4bbfd465a0fb51091fd98422","modified":1606799837490},{"_id":"themes/lucky/source/live2d_models/koharu/.gitignore","hash":"a5a49e4d5dfb97857856eb6b0cdb2c93a387718f","modified":1606799837470},{"_id":"themes/lucky/source/live2d_models/koharu/package.json","hash":"70086556d9bdeee2cb31ccdd4df1fd900862150a","modified":1606799837491},{"_id":"themes/lucky/source/live2d_models/miku/package-lock.json","hash":"d4a84613c4ed19998cd53a2d653c91c0df22eb11","modified":1606799837519},{"_id":"themes/lucky/source/live2d_models/miku/package.json","hash":"76d8e1d8c75a403075731cfddb16807604e12d27","modified":1606799837520},{"_id":"themes/lucky/source/live2d_models/miku/.gitignore","hash":"a5a49e4d5dfb97857856eb6b0cdb2c93a387718f","modified":1606799837493},{"_id":"themes/lucky/source/live2d_models/ni-j/.gitignore","hash":"a5a49e4d5dfb97857856eb6b0cdb2c93a387718f","modified":1606799837521},{"_id":"themes/lucky/source/live2d_models/ni-j/package-lock.json","hash":"fa1adef12428cf14a7ba86487fa313e2cdac1a47","modified":1606799837557},{"_id":"themes/lucky/source/live2d_models/hijiki/package-lock.json","hash":"4cada5114eba9ebcb15d28b4f8b283c8a1381cfc","modified":1606799837403},{"_id":"themes/lucky/source/live2d_models/ni-j/package.json","hash":"57588d4543fb95e044ae8cd07ee7cbba736eaf15","modified":1606799837557},{"_id":"themes/lucky/source/live2d_models/nico/.gitignore","hash":"a5a49e4d5dfb97857856eb6b0cdb2c93a387718f","modified":1606799837559},{"_id":"themes/lucky/source/live2d_models/nico/package-lock.json","hash":"935ccbc62777cd0715eccccdf1d51cd1f638fed1","modified":1606799837593},{"_id":"themes/lucky/source/live2d_models/nico/package.json","hash":"e213d396d67a72d64591379886b11f69cf4c252b","modified":1606799837593},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/package-lock.json","hash":"f624ef6cf5c5f0b67095a8b1ab4c5cd9b0b3a53f","modified":1606799837176},{"_id":"themes/lucky/source/live2d_models/nietzsche/.gitignore","hash":"a5a49e4d5dfb97857856eb6b0cdb2c93a387718f","modified":1606799837595},{"_id":"themes/lucky/source/live2d_models/nipsilon/.gitignore","hash":"a5a49e4d5dfb97857856eb6b0cdb2c93a387718f","modified":1606799837633},{"_id":"themes/lucky/source/live2d_models/nietzsche/package.json","hash":"76fb3f6a62693d3328c79fbfd947bff213b8aaf8","modified":1606799837632},{"_id":"themes/lucky/source/live2d_models/nipsilon/package-lock.json","hash":"e0fc08c90b3ad99055d3a0a67a7f77ee12d3d59e","modified":1606799837669},{"_id":"themes/lucky/source/live2d_models/nipsilon/package.json","hash":"53b630940813cb4446d5c0205acf52702423745a","modified":1606799837670},{"_id":"themes/lucky/source/live2d_models/nietzsche/package-lock.json","hash":"82a855b6236b599919dd223c673d73d605aa3f3a","modified":1606799837631},{"_id":"themes/lucky/source/live2d_models/nito/.gitignore","hash":"a5a49e4d5dfb97857856eb6b0cdb2c93a387718f","modified":1606799837671},{"_id":"themes/lucky/source/live2d_models/nito/package-lock.json","hash":"30dbd6efd2e8763111e6330de5d62e3fffa9ee3b","modified":1606799837702},{"_id":"themes/lucky/source/live2d_models/nito/package.json","hash":"877ec302bb775f2f804607e0fb1a0380309d32f6","modified":1606799837703},{"_id":"themes/lucky/source/live2d_models/shizuku/.gitignore","hash":"a5a49e4d5dfb97857856eb6b0cdb2c93a387718f","modified":1606799837704},{"_id":"themes/lucky/source/live2d_models/shizuku/package.json","hash":"a1a1858e42fb78ae8c18290fe134550bd69c77c7","modified":1606799837773},{"_id":"themes/lucky/source/live2d_models/shizuku/package-lock.json","hash":"dc79e1cdc06c92a270c7135fe92f2961e2e82511","modified":1606799837772},{"_id":"themes/lucky/source/live2d_models/tororo/.gitignore","hash":"a5a49e4d5dfb97857856eb6b0cdb2c93a387718f","modified":1606799837774},{"_id":"themes/lucky/source/live2d_models/tororo/package-lock.json","hash":"3aa551ab42dab5dace64ff98ada983a0c9bb890e","modified":1606799837793},{"_id":"themes/lucky/source/live2d_models/tsumiki/.gitignore","hash":"a5a49e4d5dfb97857856eb6b0cdb2c93a387718f","modified":1606799837795},{"_id":"themes/lucky/source/live2d_models/tororo/package.json","hash":"6136f636f8c3a624e88ba637495bc28c8224a11f","modified":1606799837794},{"_id":"themes/lucky/source/live2d_models/tsumiki/package-lock.json","hash":"5d1417d0740405455efca8bd605ac1889b5e878e","modified":1606799837843},{"_id":"themes/lucky/source/live2d_models/tsumiki/package.json","hash":"8710ba4a0168d9d9001b751f0707593d5edb2d3b","modified":1606799837844},{"_id":"themes/lucky/source/live2d_models/unitychan/package-lock.json","hash":"b8c183516fd3a2e77704864ac7f9f875501a4e6e","modified":1606799837868},{"_id":"themes/lucky/source/live2d_models/unitychan/.gitignore","hash":"a5a49e4d5dfb97857856eb6b0cdb2c93a387718f","modified":1606799837845},{"_id":"themes/lucky/source/live2d_models/wanko/.gitignore","hash":"a5a49e4d5dfb97857856eb6b0cdb2c93a387718f","modified":1606799837870},{"_id":"themes/lucky/source/live2d_models/unitychan/package.json","hash":"fa81ae690c83a3cd6e9c5060ab023c0174319a16","modified":1606799837869},{"_id":"themes/lucky/source/live2d_models/wanko/package-lock.json","hash":"aecf9030935b7a40e4aa0ec1711341e85c0dc431","modified":1606799837887},{"_id":"themes/lucky/source/live2d_models/wanko/package.json","hash":"8314b004ab7e61c9f126c0feec76f0798d9d94e3","modified":1606799837888},{"_id":"themes/lucky/source/live2d_models/z16/.gitignore","hash":"a5a49e4d5dfb97857856eb6b0cdb2c93a387718f","modified":1606799837890},{"_id":"themes/lucky/source/live2d_models/z16/package.json","hash":"669bdcdfcfb6b216f990761656c80b2c7695c729","modified":1606799837903},{"_id":"themes/lucky/source/live2d_models/z16/package-lock.json","hash":"98e33466bb72f3764016360dea3be1a82798964f","modified":1606799837902},{"_id":"themes/lucky/source/plugins/TweenMax/charming.min.js","hash":"26534e6a69842166331733e6343f083b5d94afdd","modified":1606799837916},{"_id":"themes/lucky/source/plugins/TweenMax/HoverImg.js","hash":"b1c7e1357556002f711a792fac71ac61519c90e0","modified":1606799837913},{"_id":"themes/lucky/source/plugins/activate-power-mode/activate-power-mode.js","hash":"4352d265479b9f5ca567e5143150f4a3c24e200d","modified":1606799837917},{"_id":"themes/lucky/source/plugins/live2d-widget.js/manifest.json","hash":"a2b43740af056dc5ccf5348f294fc6f7401b49b8","modified":1606799837935},{"_id":"themes/lucky/source/plugins/live2d-widget.js/L2Dwidget.min.js","hash":"ea13512df765f9cb10f96870b8ad3f1c23d14e32","modified":1606799837932},{"_id":"themes/lucky/source/plugins/ribbon.js/ribbon.min.js","hash":"e6136a6243e04faca95844f47c21b070ade3661a","modified":1606799837938},{"_id":"themes/lucky/source/plugins/ribbon.js/ribbon.js","hash":"62ff1ba692f3153d0288c514c42c6c92cc17e9b6","modified":1606799837938},{"_id":"themes/lucky/source-src/css/core/_animation.scss","hash":"8b4b490f55a3258cf805d787c446ab6c6625c181","modified":1606799837015},{"_id":"themes/lucky/source-src/css/core/_media-queries.scss","hash":"a3ec98ef49ba21740392098e353ea0d22f2afafa","modified":1606799837015},{"_id":"themes/lucky/source-src/css/core/_mixin.scss","hash":"3b764eeb59c0d42100bcde9999056a310cb9ee77","modified":1606799837016},{"_id":"themes/lucky/source-src/css/core/_reset.scss","hash":"cb4eab3a999a5de601f346254442480a64bc4f68","modified":1606799837017},{"_id":"themes/lucky/source-src/css/core/_variables.scss","hash":"bbf1bd784a6dd76dde57ea18a3532bc0f04ae690","modified":1606799837018},{"_id":"themes/lucky/source-src/css/fonts/fonteditor.eot","hash":"c29905356fb2116a454a262d6f15cdeb593a6cec","modified":1606799837027},{"_id":"themes/lucky/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1606799837042},{"_id":"themes/lucky/source-src/css/fonts/fonteditor.ttf","hash":"95d1a4991df9ce15562ff0344b318b5fc5f9ab70","modified":1606799837029},{"_id":"themes/lucky/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1606799837043},{"_id":"themes/lucky/source-src/css/fonts/fonteditor.woff2","hash":"c748dc092f066f7e12626c801d416e64b95dacea","modified":1606799837031},{"_id":"themes/lucky/source/live2d_models/chitose/assets/chitose.model.json","hash":"a9b9986e72b8245f036f6ada876b84a3986c4218","modified":1606799837109},{"_id":"themes/lucky/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1606799837042},{"_id":"themes/lucky/source-src/css/fonts/fonteditor.woff","hash":"5a945ddf318d3ca68d0a1e8695b23287ff7e9816","modified":1606799837030},{"_id":"themes/lucky/source/live2d_models/chitose/assets/chitose.pose.json","hash":"52f9b579ca15b4b2dc4c5fa71172472dd6924264","modified":1606799837111},{"_id":"themes/lucky/source-src/css/fonts/fonteditor.svg","hash":"de1fbf8378d1966d43bf620b8acd6bf900a15a73","modified":1606799837028},{"_id":"themes/lucky/source/live2d_models/chitose/assets/chitose.physics.json","hash":"5ff4acbc4cf23a7f2ff211f50e53df6f6b7c0995","modified":1606799837110},{"_id":"themes/lucky/source/live2d_models/gf/assets/Gantzert_Felixander.model.json","hash":"d5caeb1c758088ff03bc190cd8dcee98e6e02392","modified":1606799837180},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/Epsilon2.1.model.json","hash":"a47e7d1fd76d5a90d383fa049295c1cdd1546845","modified":1606799837146},{"_id":"themes/lucky/source/live2d_models/haruto/assets/haruto.model.json","hash":"76f915f7edbd9c47df0ca041dddb151c0c93a2bf","modified":1606799837326},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/Epsilon2.1.physics.json","hash":"bbf1a8cb496831fbf9715d8431b82fffc9f89257","modified":1606799837146},{"_id":"themes/lucky/source/live2d_models/hijiki/assets/hijiki.model.json","hash":"feff43bf7498d213982c3736c2c029664e4bcbd2","modified":1606799837384},{"_id":"themes/lucky/source/live2d_models/haruto/assets/haruto.physics.json","hash":"2fbf886979212357ba293bd35884f2cb5b26b6a6","modified":1606799837326},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/hibiki.physics.json","hash":"ba100c7a8c3fc777d05f41e3371d18c457febfa7","modified":1606799837356},{"_id":"themes/lucky/source/live2d_models/hijiki/assets/hijiki.pose.json","hash":"81438bf69b32c7c11e311b4fe043730cdc7b7ec2","modified":1606799837385},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/hibiki.model.json","hash":"73bbc0004fc21039452f80dc6dc3c287723aedc4","modified":1606799837356},{"_id":"themes/lucky/source/live2d_models/izumi/assets/izumi.physics.json","hash":"cee4a6e1c8ec3e1c2bfc8028ff49dc9c34c06258","modified":1606799837413},{"_id":"themes/lucky/source/live2d_models/izumi/assets/izumi.model.json","hash":"3ba8caa98a3af7b09d7a79419a691f543a1e3ea4","modified":1606799837412},{"_id":"themes/lucky/source/live2d_models/koharu/assets/koharu.model.json","hash":"ceccdefd776b7c9475a29cff0842796e4f58b7e9","modified":1606799837471},{"_id":"themes/lucky/source/live2d_models/miku/assets/miku.model.json","hash":"32e49dfc6cb4d9c537453bb083aab39ed708c476","modified":1606799837494},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/ni-j.physics.json","hash":"ef2dd194f934f129f5f4db7785a9c7b7e45671ff","modified":1606799837555},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/ni-j.pose.json","hash":"a8c949d20eebf1e716a495bf806b2eccff62a925","modified":1606799837556},{"_id":"themes/lucky/source/live2d_models/miku/assets/miku.physics.json","hash":"d5ca7f215044ba5bf1cdb8045a5c99b64ec258ce","modified":1606799837495},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/ni-j.model.json","hash":"3c77e66d6436136bf50d5fdbc8ee8cd543a35e01","modified":1606799837554},{"_id":"themes/lucky/source/live2d_models/koharu/assets/koharu.physics.json","hash":"2fbf886979212357ba293bd35884f2cb5b26b6a6","modified":1606799837472},{"_id":"themes/lucky/source/live2d_models/nico/assets/nico.pose.json","hash":"a8c949d20eebf1e716a495bf806b2eccff62a925","modified":1606799837592},{"_id":"themes/lucky/source/live2d_models/nico/assets/nico.model.json","hash":"9f007936f4748e80a1da60ca078daed595acffee","modified":1606799837590},{"_id":"themes/lucky/source/live2d_models/nico/assets/nico.physics.json","hash":"1db72a0413771e14d74de955af728224318e91d1","modified":1606799837591},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/nietzsche.pose.json","hash":"a8c949d20eebf1e716a495bf806b2eccff62a925","modified":1606799837630},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/nietzche.model.json","hash":"4f8fb457ddf9b0aa930cbcd4a3258ccdbf9e7506","modified":1606799837628},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/nietzsche.physics.json","hash":"5e83e055f99be8c8752fdcad30f9ed043111b83b","modified":1606799837629},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/nipsilon.physics.json","hash":"5e83e055f99be8c8752fdcad30f9ed043111b83b","modified":1606799837668},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/nipsilon.pose.json","hash":"a8c949d20eebf1e716a495bf806b2eccff62a925","modified":1606799837669},{"_id":"themes/lucky/source/live2d_models/nito/assets/nito.physics.json","hash":"27db548eec3c5f3c71330e675b3f602cd86f2242","modified":1606799837701},{"_id":"themes/lucky/source/live2d_models/nito/assets/nito.pose.json","hash":"a8c949d20eebf1e716a495bf806b2eccff62a925","modified":1606799837701},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/nipsilon.model.json","hash":"271e40dfe9c04c8b5f5e4c6a9aa4f7ee6c65cff9","modified":1606799837667},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/shizuku.pose.json","hash":"ac5505efbf80ba0a2e5783d67fe232bc5c6f1f80","modified":1606799837750},{"_id":"themes/lucky/source/live2d_models/tororo/assets/tororo.model.json","hash":"3b96ea33460642d288c98327444966d93a0c11ba","modified":1606799837792},{"_id":"themes/lucky/source/live2d_models/tororo/assets/tororo.pose.json","hash":"81438bf69b32c7c11e311b4fe043730cdc7b7ec2","modified":1606799837792},{"_id":"themes/lucky/source/live2d_models/nito/assets/nito.model.json","hash":"7d7930d1fc8114ae0e694624db457612dca64814","modified":1606799837700},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/shizuku.model.json","hash":"19a05bd41b806a935cea42c2000626fc82da2536","modified":1606799837749},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/unitychan.model.json","hash":"6baa976186d98050740e02eadc796036a16f6fa2","modified":1606799837866},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/shizuku.physics.json","hash":"6484d646e79a44c83784c6ae434cf7349746c5c8","modified":1606799837750},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/tsumiki.physics.json","hash":"737f5ef200fd8d33b75bf19176dcff311591bd8f","modified":1606799837842},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/tsumiki.model.json","hash":"3d5d18ccaf9dc5d4bb42e1c6c3a3d8d89b55524b","modified":1606799837842},{"_id":"themes/lucky/source/live2d_models/z16/assets/z16.model.json","hash":"e69f3d2ecc9bf51b3972ad9df8f6aaa31956910c","modified":1606799837901},{"_id":"themes/lucky/source/live2d_models/z16/assets/z16.physics.json","hash":"67f13f60030d7e4c7f824c001ab5254ce4b9bafd","modified":1606799837902},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/unitychan.physics.json","hash":"d32ffd9263044d17d46facb5d878ea3683b8023e","modified":1606799837867},{"_id":"themes/lucky/source/live2d_models/wanko/assets/wanko.model.json","hash":"b98a8ce54fbcf1606a489f1bc5f26b1a18c82d79","modified":1606799837887},{"_id":"themes/lucky/source/plugins/ribbon.js/demo/index.html","hash":"f3642f2c6a53e0dbbd4a493c7aeaa677508d21bc","modified":1606799837937},{"_id":"themes/lucky/source-src/css/fonts/bak/fonts.scss","hash":"db395b79fd10912d95a53af80e38019b3c75e207","modified":1606799837022},{"_id":"themes/lucky/source-src/css/fonts/bak/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1606799837023},{"_id":"themes/lucky/source-src/css/fonts/bak/iconfont.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1606799837024},{"_id":"themes/lucky/source-src/css/fonts/bak/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1606799837025},{"_id":"themes/lucky/source-src/css/fonts/yilia-plus/fonteditor.eot","hash":"de1e6a237496055048752b719dbbb4872bf6aaa9","modified":1606799837032},{"_id":"themes/lucky/source-src/css/fonts/yilia-plus/fonteditor.ttf","hash":"eab3ed2ad51d365b48c647a4ab0fae7e5a8368a1","modified":1606799837035},{"_id":"themes/lucky/source/live2d_models/chitose/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1606799837113},{"_id":"themes/lucky/source-src/css/fonts/yilia-plus/fonteditor.svg","hash":"c65b80c65e6042a778011798a4e60832ed424c92","modified":1606799837034},{"_id":"themes/lucky/source-src/css/fonts/yilia-plus/fonteditor.woff","hash":"555d609b08a87cee313fa64ce4677cc90aa9512d","modified":1606799837036},{"_id":"themes/lucky/source/live2d_models/chitose/assets/exp/f02.exp.json","hash":"5b3dfc33ba22945adb77efacb9c55efbfd4975f9","modified":1606799837113},{"_id":"themes/lucky/source/live2d_models/chitose/assets/exp/f03.exp.json","hash":"a506220e6b908154eea59f4bcfd73e7a457616b6","modified":1606799837114},{"_id":"themes/lucky/source/live2d_models/chitose/assets/exp/f06.exp.json","hash":"f3db49d621e2008b9eb59fba98e10db5dbd19d3d","modified":1606799837116},{"_id":"themes/lucky/source/live2d_models/chitose/assets/exp/f04.exp.json","hash":"6fee0e4d489e8ca3b7252b9dfc7c25cbe6a6a1e7","modified":1606799837115},{"_id":"themes/lucky/source/live2d_models/chitose/assets/exp/f05.exp.json","hash":"154b1b33701c61570e8adc5cab977ea3198ade6a","modified":1606799837116},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/exp/f02.exp.json","hash":"fb553024b5a62d0a54ba32c40b5d12598dc434e7","modified":1606799837148},{"_id":"themes/lucky/source/live2d_models/chitose/assets/exp/f07.exp.json","hash":"1ad00a1e4843b5b31b0c43fa292193bb049f6779","modified":1606799837117},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1606799837147},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/exp/f03.exp.json","hash":"02d1ac5b6d9019a1ee89b9d4d82894458deae35d","modified":1606799837149},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/exp/f05.exp.json","hash":"b53d5e42ca3105b19e5fe5fbf7fe4a6b4ced61f2","modified":1606799837150},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/exp/f04.exp.json","hash":"05dccc2eab9b9d019af1a9cc6f748276376dd828","modified":1606799837149},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/exp/f06.exp.json","hash":"0a7f5b3ac25b13d8688b1f529f3279a8342e3c75","modified":1606799837151},{"_id":"themes/lucky/source-src/css/fonts/bak/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1606799837026},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/exp/f08.exp.json","hash":"1dbb31e341c9fcc59475bd2594d60648c0c3e51c","modified":1606799837152},{"_id":"themes/lucky/source/live2d_models/chitose/assets/mtn/chitose_handwave.mtn","hash":"3d7a0f7ffda7d2ac3bb6fde6ccc49521c0d7713b","modified":1606799837139},{"_id":"themes/lucky/source/live2d_models/chitose/assets/mtn/chitose_kime01.mtn","hash":"97308ef8c5798374a6b1ba6cdec53d6732a4728a","modified":1606799837141},{"_id":"themes/lucky/source/live2d_models/chitose/assets/mtn/chitose_idle.mtn","hash":"f3d1ab532e49a20e98cadb0290c959d7f1086eb6","modified":1606799837140},{"_id":"themes/lucky/source/live2d_models/chitose/assets/mtn/chitose_kime02.mtn","hash":"3eed16b70dc2f7b7e50417f19207e3cabccaa166","modified":1606799837141},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/exp/f07.exp.json","hash":"d501ae71f1e36ff7e7834422900c0e84b8de8f28","modified":1606799837152},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_03.mtn","hash":"3568fc9f7ba95f2521abec8e1241da62581ab7cf","modified":1606799837166},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_02.mtn","hash":"7a000a218b098172eeeb8a81e551d558bbaa6f8a","modified":1606799837165},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_01.mtn","hash":"eecc2854bea6bf90c9f0a0013281ec600c32f2bc","modified":1606799837164},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_idle_01.mtn","hash":"b4e67d3091aba34efcf9ff3659fa36f6f1a4bd22","modified":1606799837163},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_05.mtn","hash":"f3a671a29f5d831f04284a8d5fe5adb90cd1e400","modified":1606799837168},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_07.mtn","hash":"2fd581bfc662b050c41afb904b9ae54b59d7d010","modified":1606799837169},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_08.mtn","hash":"e61753f72a1c170926c59c71490596aaeee30ca6","modified":1606799837170},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_04.mtn","hash":"b717b620d044859762716d104e137dc9c09c8cce","modified":1606799837167},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_02.mtn","hash":"08f6d29160ce7100441efdd8ac7bbd89fc9c5120","modified":1606799837172},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_06.mtn","hash":"fec328bedb7d5af53e0cfd0eb5991f4574c3676a","modified":1606799837169},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_03.mtn","hash":"55c11be6e505791de438c43ad25c31409713544a","modified":1606799837173},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_01.mtn","hash":"d72c01b4d9c4faf0f4cb472c390a35712b2ee7f5","modified":1606799837171},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_05.mtn","hash":"9eb78800c41148712ac30e1342f025110db0f8d3","modified":1606799837174},{"_id":"themes/lucky/source/live2d_models/gf/assets/mtn/A_00_idle.mtn","hash":"d383fc08986b4d1f746d71abbea6f7b5f54dcc95","modified":1606799837228},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_shake_01.mtn","hash":"8f81d974ada9b6800fa6eb852a41906a9e1f4c77","modified":1606799837175},{"_id":"themes/lucky/source/live2d_models/gf/assets/mtn/A_02.mtn","hash":"9283c809509daf3f580dcb92bab14960b5a89283","modified":1606799837230},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_04.mtn","hash":"42ae0fbe437cd97c623c09bee100c3695abb30ce","modified":1606799837174},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/haru01.physics.json","hash":"490ab4735f5cddca766344468591c0eb90cda1f7","modified":1606799837245},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/haru01.pose.json","hash":"4fb902065bd3f309fa0029fe2505424851fd489f","modified":1606799837246},{"_id":"themes/lucky/source/live2d_models/gf/assets/mtn/A_01.mtn","hash":"91d2def2e00393fcedaaca36cd80340fa95a2d1b","modified":1606799837229},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/haru02.physics.json","hash":"490ab4735f5cddca766344468591c0eb90cda1f7","modified":1606799837290},{"_id":"themes/lucky/source/live2d_models/gf/assets/mtn/A_05.mtn","hash":"40ad1e684108035c6478b76c9e4e1953104725da","modified":1606799837233},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/haru01.model.json","hash":"cab2aac3d697eafa420e8a02b1f52c1f19666ffd","modified":1606799837244},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/haru02.pose.json","hash":"4fb902065bd3f309fa0029fe2505424851fd489f","modified":1606799837290},{"_id":"themes/lucky/source/live2d_models/gf/assets/mtn/A_04.mtn","hash":"50360a6572518b447af3315236659a576aa1b248","modified":1606799837232},{"_id":"themes/lucky/source/live2d_models/gf/assets/mtn/A_03.mtn","hash":"afec07ed22acdf28a5c49b78c560e29c3c2cfaa0","modified":1606799837231},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/haru02.model.json","hash":"ffed6d4654deeb772e389213f84701940ee0126f","modified":1606799837289},{"_id":"themes/lucky/source/live2d_models/haruto/assets/mtn/01.mtn","hash":"61d7d590d9feb71b32fd6bd142b59410d75bc1fa","modified":1606799837337},{"_id":"themes/lucky/source/live2d_models/haruto/assets/mtn/02.mtn","hash":"efc99efdff39c93372cff0f6d62c4e748e1a5593","modified":1606799837338},{"_id":"themes/lucky/source/live2d_models/haruto/assets/mtn/05.mtn","hash":"637e00442da4042cd4b0ed2cc62ffb1559881814","modified":1606799837341},{"_id":"themes/lucky/source/live2d_models/haruto/assets/mtn/04.mtn","hash":"32c888667455a3ff6f1b04f910c1a5cc4de30af0","modified":1606799837340},{"_id":"themes/lucky/source/live2d_models/haruto/assets/mtn/09.mtn","hash":"ecf1283b72e1c4b7e3a97343cd97726813f18790","modified":1606799837344},{"_id":"themes/lucky/source/live2d_models/haruto/assets/mtn/03.mtn","hash":"a72b697a92a7cff40d15774b143b465b34cee5e6","modified":1606799837339},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1606799837351},{"_id":"themes/lucky/source/live2d_models/haruto/assets/mtn/06.mtn","hash":"df10cc1d333c96da1296a4853c1ddbd44d8a11f3","modified":1606799837342},{"_id":"themes/lucky/source/live2d_models/haruto/assets/mtn/08.mtn","hash":"9b95ef8548b979d1fca557c74f8d66fb15b34578","modified":1606799837344},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/exp/f02.exp.json","hash":"a5f786a8ebce6d2b14efcd4476179ed324c8def6","modified":1606799837351},{"_id":"themes/lucky/source/live2d_models/haruto/assets/mtn/07.mtn","hash":"d8c9410135c81604eba665b59808089808e0851a","modified":1606799837343},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/exp/f03.exp.json","hash":"b8f958f736acd4eb7433043fbae946487e872f5b","modified":1606799837352},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/exp/f05.exp.json","hash":"8fdbc6eabb1890bc5953f170f95e4404bd3d62b4","modified":1606799837354},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/exp/f04.exp.json","hash":"19fdb5558be54a9ec6d882e2d1780a369bc66b62","modified":1606799837353},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/exp/f06.exp.json","hash":"b8ee09beda85aff415e6598ecd6573a238e15d18","modified":1606799837355},{"_id":"themes/lucky/source/live2d_models/haruto/assets/mtn/idle_02.mtn","hash":"d130dd1d194f05b3eb5391289b0339999e37c3a6","modified":1606799837345},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/mtn/hibiki_01.mtn","hash":"cd220b89c26e1267fd7ab8f7cfc714fcd4c3b5a3","modified":1606799837365},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/mtn/hibiki_02.mtn","hash":"985154bee77e2934afe74a45071f51e0aa1ac84d","modified":1606799837366},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/mtn/hibiki_03.mtn","hash":"0b2e7cb2a32b70a629d9d21205863bb163d06d47","modified":1606799837367},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/mtn/hibiki_04.mtn","hash":"6a753859998d7afa17f119f37c5765f0c10b7bca","modified":1606799837368},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/mtn/idle_01.mtn","hash":"3fac7f98ab71858018cbbf21b5a3ad99166d275b","modified":1606799837370},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/mtn/idle_02.mtn","hash":"9f7dae129a20775b3209a16ee28e27f496e90ba5","modified":1606799837371},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/mtn/hibiki_05.mtn","hash":"67dc8d35f050e36d08010d55ddbfd06544fb7ad5","modified":1606799837369},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/mtn/idle_04.mtn","hash":"80d4e53606b3268623b03d12a28570efdb5739ad","modified":1606799837372},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/mtn/idle_03.mtn","hash":"c85916f8699673b0511fd00cd1953896879e0cc5","modified":1606799837372},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/snd/hibiki_02.mp3","hash":"75358d4c7ec03c4b1dc02ef60c716d94f031fe2f","modified":1606799837376},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/snd/hibiki_01.mp3","hash":"2880911aa4a85958fe02e54b912fbf7e6a1896c6","modified":1606799837374},{"_id":"themes/lucky/source/live2d_models/hijiki/assets/mtn/00_idle.mtn","hash":"b224c60e463b9f71ddbfc0c720e430496c175f4f","modified":1606799837395},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/snd/hibiki_03.mp3","hash":"df05cb8288b17e1ad00ed66a731f1558db28cf9b","modified":1606799837377},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/snd/hibiki_04.mp3","hash":"57d76906838b186bee2d47f768e54ac18e44d472","modified":1606799837378},{"_id":"themes/lucky/source/live2d_models/hijiki/assets/mtn/03.mtn","hash":"f900737c7a98441cbb2e05255427e6260e19ae68","modified":1606799837397},{"_id":"themes/lucky/source/live2d_models/hijiki/assets/mtn/02.mtn","hash":"7eafc52edc73b7cb80ae70d34b43c6ac778fa47b","modified":1606799837396},{"_id":"themes/lucky/source/live2d_models/hijiki/assets/mtn/01.mtn","hash":"fb550833ae22c9954c3e01df37ed29b2d61700f2","modified":1606799837396},{"_id":"themes/lucky/source/live2d_models/hijiki/assets/mtn/06.mtn","hash":"ad404bd852d276cdd3d054c953e23f90e4e45ae1","modified":1606799837400},{"_id":"themes/lucky/source/live2d_models/izumi/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1606799837406},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/snd/hibiki_05.mp3","hash":"e8788bb9e92467e21933ac2140114a21b9ad215a","modified":1606799837380},{"_id":"themes/lucky/source/live2d_models/hijiki/assets/mtn/05.mtn","hash":"dd20ad24b5d1830a5d44b9bccb28f922eea5e0e5","modified":1606799837399},{"_id":"themes/lucky/source/live2d_models/izumi/assets/exp/f02.exp.json","hash":"d4c339f80452528f6cacba3ffe97fbb9e2e4d144","modified":1606799837407},{"_id":"themes/lucky/source/live2d_models/hijiki/assets/mtn/07.mtn","hash":"b7f2e3a9fa4f3ffbb6e64a08f8d9f45ca1868ffb","modified":1606799837401},{"_id":"themes/lucky/source/live2d_models/hijiki/assets/mtn/04.mtn","hash":"c7a25d3c5d783639bae18db2f3cd284b819c3c85","modified":1606799837398},{"_id":"themes/lucky/source/live2d_models/hijiki/assets/mtn/08.mtn","hash":"4411c7651ff65195b113d95e7d5ebef8a59a37d9","modified":1606799837402},{"_id":"themes/lucky/source/live2d_models/izumi/assets/exp/f03.exp.json","hash":"fc1f79f65c09c845f08ee92d237f8cfabe90a3c6","modified":1606799837408},{"_id":"themes/lucky/source/live2d_models/izumi/assets/exp/f05.exp.json","hash":"b0c99350872f614a2a7f60e6479a4799d2d74986","modified":1606799837410},{"_id":"themes/lucky/source/live2d_models/izumi/assets/exp/f04.exp.json","hash":"2e4f19882061c1b9bf49537244550cb5c9dd8a18","modified":1606799837409},{"_id":"themes/lucky/source/live2d_models/izumi/assets/exp/f06.exp.json","hash":"fd90baab724e71a25c8fd1eba2fab97974906374","modified":1606799837411},{"_id":"themes/lucky/source/live2d_models/izumi/assets/exp/f07.exp.json","hash":"bb8dc60fc59444fee419265e68216bdcc0282b0b","modified":1606799837412},{"_id":"themes/lucky/source/live2d_models/izumi/assets/mtn/idle_01.mtn","hash":"ce50f5c562b282dcb11679f682fe0f9e1bb0f37b","modified":1606799837442},{"_id":"themes/lucky/source/live2d_models/izumi/assets/mtn/idle_02.mtn","hash":"0c6b52bf64db7bbfee81ee24240ca991320764b4","modified":1606799837443},{"_id":"themes/lucky/source/live2d_models/izumi/assets/mtn/idle_03.mtn","hash":"b374923d973970f2c8331b3420660952e2bd8bf5","modified":1606799837444},{"_id":"themes/lucky/source/live2d_models/izumi/assets/mtn/idle_04.mtn","hash":"97c0a45af4f0b9f4b828f43eccb1c77c360af637","modified":1606799837445},{"_id":"themes/lucky/source/live2d_models/izumi/assets/mtn/izumi_02.mtn","hash":"90add71910fd83c1c66bfb73db6d6d4766c98dac","modified":1606799837447},{"_id":"themes/lucky/source/live2d_models/izumi/assets/mtn/izumi_04.mtn","hash":"551b95d80d31ed4f06d19d99ccc4f795a8392ea3","modified":1606799837449},{"_id":"themes/lucky/source/live2d_models/izumi/assets/mtn/izumi_01.mtn","hash":"36286812dc692e00a0b69e71d7fe3c8a2b672281","modified":1606799837446},{"_id":"themes/lucky/source/live2d_models/izumi/assets/mtn/izumi_03.mtn","hash":"fc7f8e01f8e7744cbd13a8fea44dda8270f21aeb","modified":1606799837448},{"_id":"themes/lucky/source/live2d_models/izumi/assets/mtn/izumi_07.mtn","hash":"e2f9e8cb428fa83251a45166d8f9acad570a47d9","modified":1606799837452},{"_id":"themes/lucky/source/live2d_models/izumi/assets/mtn/izumi_05.mtn","hash":"dbfea56881f31a79bffb6d107e7b1fa867e2da0e","modified":1606799837450},{"_id":"themes/lucky/source/live2d_models/izumi/assets/mtn/izumi_06.mtn","hash":"c1a63e659fcc6d5b1b0eac7eaff60faf43e2cb28","modified":1606799837451},{"_id":"themes/lucky/source/live2d_models/izumi/assets/mtn/izumi_08.mtn","hash":"19fc90977a0ca30c18f4afae90d4c3ea27a9b094","modified":1606799837452},{"_id":"themes/lucky/source/live2d_models/izumi/assets/snd/izumi_01.mp3","hash":"11dd394ab4d11d3a3c6d6a1a305ff3a1d1fed21d","modified":1606799837455},{"_id":"themes/lucky/source/live2d_models/izumi/assets/mtn/izumi_09.mtn","hash":"97199471755394bed243a29b4cb8397518487296","modified":1606799837453},{"_id":"themes/lucky/source/live2d_models/izumi/assets/snd/izumi_02.mp3","hash":"d35189bae63cc6ef18d3a949c4a46dd5ed74c6b3","modified":1606799837457},{"_id":"themes/lucky/source/live2d_models/izumi/assets/snd/izumi_03.mp3","hash":"b3d6e98bc30eaf8ac0cf7ffe2f297742a819b380","modified":1606799837458},{"_id":"themes/lucky/source/live2d_models/izumi/assets/snd/izumi_04.mp3","hash":"7647fb1e8823bb48ee5f82dbeac35e3f61b74bef","modified":1606799837460},{"_id":"themes/lucky/source/live2d_models/izumi/assets/snd/izumi_05.mp3","hash":"05e44723c24b387a0eab37a0ab4120ef19ae317e","modified":1606799837461},{"_id":"themes/lucky/source/live2d_models/izumi/assets/snd/izumi_06.mp3","hash":"f39ee4b85ed9877100c028bf938a9a8fd0d2cb6b","modified":1606799837462},{"_id":"themes/lucky/source/live2d_models/izumi/assets/snd/izumi_08.mp3","hash":"0b73b4f9216ee6b944a91b599c942d567a39fe0f","modified":1606799837464},{"_id":"themes/lucky/source/live2d_models/izumi/assets/snd/izumi_07.mp3","hash":"0c13c0096d02ceb37b3bcce085206b5d6d8ae834","modified":1606799837463},{"_id":"themes/lucky/source/live2d_models/izumi/assets/mtn/izumi_10.mtn","hash":"244ae631fb963ed7619e5d63f189d947a2497eb2","modified":1606799837454},{"_id":"themes/lucky/source/live2d_models/izumi/assets/snd/izumi_09.mp3","hash":"f7bce48ee99bdad6fa187c484872eafce0b0e351","modified":1606799837465},{"_id":"themes/lucky/source/live2d_models/koharu/assets/mtn/01.mtn","hash":"61d7d590d9feb71b32fd6bd142b59410d75bc1fa","modified":1606799837481},{"_id":"themes/lucky/source/live2d_models/koharu/assets/mtn/02.mtn","hash":"efc99efdff39c93372cff0f6d62c4e748e1a5593","modified":1606799837482},{"_id":"themes/lucky/source/live2d_models/izumi/assets/snd/izumi_10.mp3","hash":"53013c1cc56296a3843d4c8e3f01fd67747b169b","modified":1606799837467},{"_id":"themes/lucky/source/live2d_models/koharu/assets/mtn/04.mtn","hash":"32c888667455a3ff6f1b04f910c1a5cc4de30af0","modified":1606799837484},{"_id":"themes/lucky/source/live2d_models/koharu/assets/mtn/05.mtn","hash":"637e00442da4042cd4b0ed2cc62ffb1559881814","modified":1606799837485},{"_id":"themes/lucky/source/live2d_models/koharu/assets/mtn/07.mtn","hash":"d8c9410135c81604eba665b59808089808e0851a","modified":1606799837486},{"_id":"themes/lucky/source/live2d_models/koharu/assets/mtn/03.mtn","hash":"a72b697a92a7cff40d15774b143b465b34cee5e6","modified":1606799837483},{"_id":"themes/lucky/source/live2d_models/koharu/assets/mtn/09.mtn","hash":"ecf1283b72e1c4b7e3a97343cd97726813f18790","modified":1606799837489},{"_id":"themes/lucky/source/live2d_models/koharu/assets/mtn/idle.mtn","hash":"058d4628ab04bf42c279501ba4fa37116d384e41","modified":1606799837490},{"_id":"themes/lucky/source/live2d_models/koharu/assets/mtn/06.mtn","hash":"df10cc1d333c96da1296a4853c1ddbd44d8a11f3","modified":1606799837485},{"_id":"themes/lucky/source/live2d_models/miku/assets/mtn/miku_idle_01.mtn","hash":"5633f73601cf8b0a318e7a7265f71cc782683251","modified":1606799837512},{"_id":"themes/lucky/source/live2d_models/miku/assets/mtn/miku_m_03.mtn","hash":"94ef9d31a78f7f90d3fb213c4353afbdb3462cff","modified":1606799837515},{"_id":"themes/lucky/source/live2d_models/miku/assets/mtn/miku_m_01.mtn","hash":"bd0ea5f2f0528b21c4e5632838b69e478b652e88","modified":1606799837513},{"_id":"themes/lucky/source/live2d_models/miku/assets/mtn/miku_m_04.mtn","hash":"5c440e8f4cd45e73a7c8044ea0e2ea11234f9fd9","modified":1606799837516},{"_id":"themes/lucky/source/live2d_models/miku/assets/mtn/miku_m_02.mtn","hash":"2eda9602d626d89285e0c0c5f564383964516cc8","modified":1606799837514},{"_id":"themes/lucky/source/live2d_models/miku/assets/mtn/miku_m_05.mtn","hash":"73b9b162c1dbf9a6747364ae47b12cba9da0bbec","modified":1606799837516},{"_id":"themes/lucky/source/live2d_models/miku/assets/mtn/miku_m_06.mtn","hash":"0bfd6ad29e5e171a1ce03a7acb8ffcca9f463902","modified":1606799837517},{"_id":"themes/lucky/source/live2d_models/koharu/assets/mtn/08.mtn","hash":"9b95ef8548b979d1fca557c74f8d66fb15b34578","modified":1606799837488},{"_id":"themes/lucky/source/live2d_models/miku/assets/mtn/miku_shake_01.mtn","hash":"190875ab6cdeee7ae87c4c296429b848c942dd8a","modified":1606799837518},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/01_happy.mtn","hash":"2020573671b39c81fbd784a8b873ebee019ca501","modified":1606799837536},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/00_idle.mtn","hash":"3686b7bfdb43f85f4fe1d94ed59379d2c4bee41d","modified":1606799837534},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/02_angry.mtn","hash":"f75e1f580c64695fbbf8ba3c5f49eafc7208411d","modified":1606799837537},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/04_surprise.mtn","hash":"4b911af06de9bc6f386aecd623851e5799edaa96","modified":1606799837538},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/03_fear.mtn","hash":"b6cdb8fa48960b2a6e66d78ea992221e8108437b","modified":1606799837538},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/06_love.mtn","hash":"c9f90cc2e2be55ac9c19cf6a962330dad3833fc1","modified":1606799837541},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/05_fun.mtn","hash":"4b956c9c028dce753fafa1859404a136975786d4","modified":1606799837539},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/07_bye.mtn","hash":"6a3e90e8efb64cd5b187196625a3d8915efb21c8","modified":1606799837541},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/09_yawn.mtn","hash":"e0e29a712b01be59ae8bba2e1a0d850e06260d20","modified":1606799837543},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/10_yeah.mtn","hash":"58c4bda1339f41fa8a7e554509a7a871bad392b8","modified":1606799837544},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/08_sad.mtn","hash":"63647d9320bf3928d658e1275adbfaeba88748b7","modified":1606799837542},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/12_stagger.mtn","hash":"3f1a0b25cb1b9fb150f7a9ef37e8c9ba8d4e6ba1","modified":1606799837546},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/11_muscle.mtn","hash":"7d0e3466a996f8704e86913c723ac4b82f14ff47","modified":1606799837545},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/14_ sigh.mtn","hash":"80c4e4f539253d86a7aa5faae2c5e5a3a7b1adcc","modified":1606799837547},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/18_no.mtn","hash":"9a18a2537bf6634da2bafd3a57d236de30c73b4e","modified":1606799837551},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/13_cry.mtn","hash":"27709b59d2e6cba73d69a67cadb8bf50413206a9","modified":1606799837546},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/15_joy.mtn","hash":"b76a24efc57e4c2cc4abf70c293b2e800029a20d","modified":1606799837548},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/19_walk.mtn","hash":"035516e8cdaa5b3c6e7524daca72294284a81126","modified":1606799837552},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/16_menace.mtn","hash":"6edb6b114d53d7f93cff164992db475b0b6f09c3","modified":1606799837549},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/17_yes.mtn","hash":"a023cc93e55b3940f1a8690dcfa7ad1cfa534fad","modified":1606799837550},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/mtn/20_sleep.mtn","hash":"914e4670825467e5e8d2f6983bd21c7190e57310","modified":1606799837553},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/01_happy.mtn","hash":"2020573671b39c81fbd784a8b873ebee019ca501","modified":1606799837572},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/00_idle.mtn","hash":"3686b7bfdb43f85f4fe1d94ed59379d2c4bee41d","modified":1606799837571},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/02_angry.mtn","hash":"f75e1f580c64695fbbf8ba3c5f49eafc7208411d","modified":1606799837573},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/03_fear.mtn","hash":"b6cdb8fa48960b2a6e66d78ea992221e8108437b","modified":1606799837574},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/04_surprise.mtn","hash":"4b911af06de9bc6f386aecd623851e5799edaa96","modified":1606799837575},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/06_love.mtn","hash":"c9f90cc2e2be55ac9c19cf6a962330dad3833fc1","modified":1606799837576},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/05_fun.mtn","hash":"4b956c9c028dce753fafa1859404a136975786d4","modified":1606799837575},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/07_bye.mtn","hash":"6a3e90e8efb64cd5b187196625a3d8915efb21c8","modified":1606799837577},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/08_sad.mtn","hash":"63647d9320bf3928d658e1275adbfaeba88748b7","modified":1606799837578},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/10_yeah.mtn","hash":"58c4bda1339f41fa8a7e554509a7a871bad392b8","modified":1606799837580},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/09_yawn.mtn","hash":"e0e29a712b01be59ae8bba2e1a0d850e06260d20","modified":1606799837579},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/11_muscle.mtn","hash":"7d0e3466a996f8704e86913c723ac4b82f14ff47","modified":1606799837581},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/13_cry.mtn","hash":"27709b59d2e6cba73d69a67cadb8bf50413206a9","modified":1606799837583},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/12_stagger.mtn","hash":"3f1a0b25cb1b9fb150f7a9ef37e8c9ba8d4e6ba1","modified":1606799837582},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/14_ sigh.mtn","hash":"80c4e4f539253d86a7aa5faae2c5e5a3a7b1adcc","modified":1606799837584},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/18_no.mtn","hash":"9a18a2537bf6634da2bafd3a57d236de30c73b4e","modified":1606799837587},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/15_joy.mtn","hash":"b76a24efc57e4c2cc4abf70c293b2e800029a20d","modified":1606799837585},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/17_yes.mtn","hash":"a023cc93e55b3940f1a8690dcfa7ad1cfa534fad","modified":1606799837586},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/16_menace.mtn","hash":"6edb6b114d53d7f93cff164992db475b0b6f09c3","modified":1606799837585},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/19_walk.mtn","hash":"035516e8cdaa5b3c6e7524daca72294284a81126","modified":1606799837588},{"_id":"themes/lucky/source/live2d_models/nico/assets/mtn/20_sleep.mtn","hash":"914e4670825467e5e8d2f6983bd21c7190e57310","modified":1606799837589},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/01_happy.mtn","hash":"2020573671b39c81fbd784a8b873ebee019ca501","modified":1606799837610},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/02_angry.mtn","hash":"f75e1f580c64695fbbf8ba3c5f49eafc7208411d","modified":1606799837611},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/00_idle.mtn","hash":"3686b7bfdb43f85f4fe1d94ed59379d2c4bee41d","modified":1606799837609},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/06_love.mtn","hash":"c9f90cc2e2be55ac9c19cf6a962330dad3833fc1","modified":1606799837615},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/04_surprise.mtn","hash":"4b911af06de9bc6f386aecd623851e5799edaa96","modified":1606799837613},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/03_fear.mtn","hash":"b6cdb8fa48960b2a6e66d78ea992221e8108437b","modified":1606799837612},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/05_fun.mtn","hash":"4b956c9c028dce753fafa1859404a136975786d4","modified":1606799837614},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/07_bye.mtn","hash":"6a3e90e8efb64cd5b187196625a3d8915efb21c8","modified":1606799837616},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/10_yeah.mtn","hash":"58c4bda1339f41fa8a7e554509a7a871bad392b8","modified":1606799837618},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/08_sad.mtn","hash":"63647d9320bf3928d658e1275adbfaeba88748b7","modified":1606799837616},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/09_yawn.mtn","hash":"e0e29a712b01be59ae8bba2e1a0d850e06260d20","modified":1606799837617},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/14_ sigh.mtn","hash":"80c4e4f539253d86a7aa5faae2c5e5a3a7b1adcc","modified":1606799837622},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/11_muscle.mtn","hash":"7d0e3466a996f8704e86913c723ac4b82f14ff47","modified":1606799837619},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/12_stagger.mtn","hash":"3f1a0b25cb1b9fb150f7a9ef37e8c9ba8d4e6ba1","modified":1606799837620},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/13_cry.mtn","hash":"27709b59d2e6cba73d69a67cadb8bf50413206a9","modified":1606799837621},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/15_joy.mtn","hash":"b76a24efc57e4c2cc4abf70c293b2e800029a20d","modified":1606799837623},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/16_menace.mtn","hash":"6edb6b114d53d7f93cff164992db475b0b6f09c3","modified":1606799837624},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/19_walk.mtn","hash":"035516e8cdaa5b3c6e7524daca72294284a81126","modified":1606799837626},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/18_no.mtn","hash":"9a18a2537bf6634da2bafd3a57d236de30c73b4e","modified":1606799837626},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/20_sleep.mtn","hash":"914e4670825467e5e8d2f6983bd21c7190e57310","modified":1606799837628},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/00_idle.mtn","hash":"3686b7bfdb43f85f4fe1d94ed59379d2c4bee41d","modified":1606799837649},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/01_happy.mtn","hash":"2020573671b39c81fbd784a8b873ebee019ca501","modified":1606799837650},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/02_angry.mtn","hash":"f75e1f580c64695fbbf8ba3c5f49eafc7208411d","modified":1606799837651},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/mtn/17_yes.mtn","hash":"a023cc93e55b3940f1a8690dcfa7ad1cfa534fad","modified":1606799837625},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/03_fear.mtn","hash":"b6cdb8fa48960b2a6e66d78ea992221e8108437b","modified":1606799837652},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/04_surprise.mtn","hash":"4b911af06de9bc6f386aecd623851e5799edaa96","modified":1606799837652},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/06_love.mtn","hash":"c9f90cc2e2be55ac9c19cf6a962330dad3833fc1","modified":1606799837654},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/05_fun.mtn","hash":"4b956c9c028dce753fafa1859404a136975786d4","modified":1606799837653},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/07_bye.mtn","hash":"6a3e90e8efb64cd5b187196625a3d8915efb21c8","modified":1606799837655},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/09_yawn.mtn","hash":"e0e29a712b01be59ae8bba2e1a0d850e06260d20","modified":1606799837657},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/08_sad.mtn","hash":"63647d9320bf3928d658e1275adbfaeba88748b7","modified":1606799837656},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/11_muscle.mtn","hash":"7d0e3466a996f8704e86913c723ac4b82f14ff47","modified":1606799837658},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/10_yeah.mtn","hash":"58c4bda1339f41fa8a7e554509a7a871bad392b8","modified":1606799837658},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/13_cry.mtn","hash":"27709b59d2e6cba73d69a67cadb8bf50413206a9","modified":1606799837661},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/12_stagger.mtn","hash":"3f1a0b25cb1b9fb150f7a9ef37e8c9ba8d4e6ba1","modified":1606799837659},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/14_ sigh.mtn","hash":"80c4e4f539253d86a7aa5faae2c5e5a3a7b1adcc","modified":1606799837661},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/15_joy.mtn","hash":"b76a24efc57e4c2cc4abf70c293b2e800029a20d","modified":1606799837662},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/17_yes.mtn","hash":"a023cc93e55b3940f1a8690dcfa7ad1cfa534fad","modified":1606799837664},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/16_menace.mtn","hash":"6edb6b114d53d7f93cff164992db475b0b6f09c3","modified":1606799837663},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/19_walk.mtn","hash":"035516e8cdaa5b3c6e7524daca72294284a81126","modified":1606799837666},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/18_no.mtn","hash":"9a18a2537bf6634da2bafd3a57d236de30c73b4e","modified":1606799837665},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/mtn/20_sleep.mtn","hash":"914e4670825467e5e8d2f6983bd21c7190e57310","modified":1606799837667},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/00_idle.mtn","hash":"3686b7bfdb43f85f4fe1d94ed59379d2c4bee41d","modified":1606799837683},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/01_happy.mtn","hash":"2020573671b39c81fbd784a8b873ebee019ca501","modified":1606799837683},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/02_angry.mtn","hash":"f75e1f580c64695fbbf8ba3c5f49eafc7208411d","modified":1606799837684},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/03_fear.mtn","hash":"b6cdb8fa48960b2a6e66d78ea992221e8108437b","modified":1606799837685},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/05_fun.mtn","hash":"4b956c9c028dce753fafa1859404a136975786d4","modified":1606799837687},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/04_surprise.mtn","hash":"4b911af06de9bc6f386aecd623851e5799edaa96","modified":1606799837686},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/06_love.mtn","hash":"c9f90cc2e2be55ac9c19cf6a962330dad3833fc1","modified":1606799837688},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/07_bye.mtn","hash":"6a3e90e8efb64cd5b187196625a3d8915efb21c8","modified":1606799837688},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/08_sad.mtn","hash":"63647d9320bf3928d658e1275adbfaeba88748b7","modified":1606799837689},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/11_muscle.mtn","hash":"7d0e3466a996f8704e86913c723ac4b82f14ff47","modified":1606799837692},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/10_yeah.mtn","hash":"58c4bda1339f41fa8a7e554509a7a871bad392b8","modified":1606799837691},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/09_yawn.mtn","hash":"e0e29a712b01be59ae8bba2e1a0d850e06260d20","modified":1606799837690},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/14_ sigh.mtn","hash":"80c4e4f539253d86a7aa5faae2c5e5a3a7b1adcc","modified":1606799837694},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/15_joy.mtn","hash":"b76a24efc57e4c2cc4abf70c293b2e800029a20d","modified":1606799837695},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/12_stagger.mtn","hash":"3f1a0b25cb1b9fb150f7a9ef37e8c9ba8d4e6ba1","modified":1606799837693},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/13_cry.mtn","hash":"27709b59d2e6cba73d69a67cadb8bf50413206a9","modified":1606799837694},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/16_menace.mtn","hash":"6edb6b114d53d7f93cff164992db475b0b6f09c3","modified":1606799837696},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/18_no.mtn","hash":"9a18a2537bf6634da2bafd3a57d236de30c73b4e","modified":1606799837697},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/19_walk.mtn","hash":"035516e8cdaa5b3c6e7524daca72294284a81126","modified":1606799837698},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/20_sleep.mtn","hash":"914e4670825467e5e8d2f6983bd21c7190e57310","modified":1606799837699},{"_id":"themes/lucky/source/live2d_models/nito/assets/mtn/17_yes.mtn","hash":"a023cc93e55b3940f1a8690dcfa7ad1cfa534fad","modified":1606799837697},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1606799837705},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/exp/f03.exp.json","hash":"fbf7729e504f14f83f976827fcf62301a6579a34","modified":1606799837708},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/exp/f04.exp.json","hash":"35e746ede62e7090e7dfb08561d77772f58b4153","modified":1606799837708},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/exp/f02.exp.json","hash":"241b6afafa2e25c6d7a54692a8b5aa060a137ab1","modified":1606799837707},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/flickHead_01.mtn","hash":"a1011d6bf397bcd3c3c968d9616f88fe1ffbc83c","modified":1606799837734},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/flickHead_00.mtn","hash":"f64c79c9171660db5c440bef229ac2e35a1597d5","modified":1606799837733},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/flickHead_02.mtn","hash":"d3c9c0acb4dc25a2274f3b9faa71e5ce60ad92e4","modified":1606799837734},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/idle_00.mtn","hash":"378b4577217c604c9d28ab4edf8b707c8d8c2fbb","modified":1606799837735},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/idle_01.mtn","hash":"88c2494655dbb712b842f03232b619f381753d52","modified":1606799837736},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/idle_02.mtn","hash":"7f5d2cf8706007c8659938eba132a68c470a4c26","modified":1606799837737},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/pinchIn_00.mtn","hash":"70978b4c983f6a9fd6d3d9c24571586f7d6eac30","modified":1606799837738},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/pinchIn_01.mtn","hash":"a5fefb45115695db72b9499e627a51b2b9394f2c","modified":1606799837739},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/pinchOut_00.mtn","hash":"e07fe8fd8c2810e3c1d28b730bd49c8c25849bad","modified":1606799837741},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/pinchOut_01.mtn","hash":"e05df948d08b17f34c993a9c1f901190509d5db0","modified":1606799837742},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/pinchIn_02.mtn","hash":"aa0d66ca9b06c374577fd7e64e89756de1e1f2ae","modified":1606799837740},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/pinchOut_02.mtn","hash":"b323fd350d334b33bbdfb31194ae664089986c27","modified":1606799837743},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/shake_00.mtn","hash":"5185d02c7ab9f0bec3d4a890b54b2378e553373d","modified":1606799837744},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/tapBody_02.mtn","hash":"a75acb51c1191ce5050d3ee1af6f2dcc787c7c5e","modified":1606799837748},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/tapBody_01.mtn","hash":"78fca17436ab5e065e27f419f135aa6c0a0b52ef","modified":1606799837747},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/snd/flickHead_00.mp3","hash":"356388d939006b03cf9e6158c603b58d4800bec1","modified":1606799837752},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/shake_01.mtn","hash":"e812985a56796e122018f9d57d1606a4866ff7d1","modified":1606799837745},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/shake_02.mtn","hash":"2702970805e07777974c383613e631730982bcff","modified":1606799837746},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/mtn/tapBody_00.mtn","hash":"835aa3d4a8fbd26c0bb66b164a19464fa3f17a99","modified":1606799837746},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/snd/flickHead_01.mp3","hash":"436d0bbccf6e7a2744447554947eee4563608970","modified":1606799837753},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/snd/flickHead_02.mp3","hash":"5f63477ce63f2073e24d68fea906fe136fe6349e","modified":1606799837754},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/snd/pinchIn_01.mp3","hash":"d5c8cc6f61b56222a83a5174f75006f83c3b88da","modified":1606799837758},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/snd/pinchIn_00.mp3","hash":"f9baa3b7cadec20b714135fc49cfab3ff6adeeb4","modified":1606799837757},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/snd/shake_01.mp3","hash":"c1e0e8a07ff268ee06c2b7825d1b645e193f21b9","modified":1606799837766},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/snd/shake_00.mp3","hash":"f65dd58e7b44ec5c865d13c190316070b625b5fe","modified":1606799837765},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/snd/shake_02.mp3","hash":"8882b94bce00f09232588b7301badb105fa8acab","modified":1606799837767},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/snd/tapBody_00.mp3","hash":"003e68a59a9c8392e230f34c91860efbd946277a","modified":1606799837769},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/snd/tapBody_01.mp3","hash":"5314b50f153df71559e51e2586581c006df00722","modified":1606799837770},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/snd/tapBody_02.mp3","hash":"15e7815ed0a0e5164e18e0c53b97aedc742a134d","modified":1606799837772},{"_id":"themes/lucky/source/live2d_models/tororo/assets/mtn/01.mtn","hash":"fb550833ae22c9954c3e01df37ed29b2d61700f2","modified":1606799837785},{"_id":"themes/lucky/source/live2d_models/tororo/assets/mtn/00_idle.mtn","hash":"b224c60e463b9f71ddbfc0c720e430496c175f4f","modified":1606799837784},{"_id":"themes/lucky/source/live2d_models/tororo/assets/mtn/03.mtn","hash":"f900737c7a98441cbb2e05255427e6260e19ae68","modified":1606799837787},{"_id":"themes/lucky/source/live2d_models/tororo/assets/mtn/02.mtn","hash":"7eafc52edc73b7cb80ae70d34b43c6ac778fa47b","modified":1606799837786},{"_id":"themes/lucky/source/live2d_models/tororo/assets/mtn/04.mtn","hash":"c7a25d3c5d783639bae18db2f3cd284b819c3c85","modified":1606799837788},{"_id":"themes/lucky/source/live2d_models/tororo/assets/mtn/05.mtn","hash":"dd20ad24b5d1830a5d44b9bccb28f922eea5e0e5","modified":1606799837789},{"_id":"themes/lucky/source/live2d_models/tororo/assets/mtn/06.mtn","hash":"ad404bd852d276cdd3d054c953e23f90e4e45ae1","modified":1606799837789},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/exp/F01.exp.json","hash":"7c0a23a6f3f0a584887be3d3b482ecc7a359306e","modified":1606799837797},{"_id":"themes/lucky/source/live2d_models/tororo/assets/mtn/08.mtn","hash":"4411c7651ff65195b113d95e7d5ebef8a59a37d9","modified":1606799837791},{"_id":"themes/lucky/source/live2d_models/tororo/assets/mtn/07.mtn","hash":"b7f2e3a9fa4f3ffbb6e64a08f8d9f45ca1868ffb","modified":1606799837790},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/exp/F02.exp.json","hash":"5e7fffd67c06aee0cdcab0b8f816fd6a125db260","modified":1606799837797},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/exp/F05.exp.json","hash":"afd807b47a00389374949731dd97087aeeec28d7","modified":1606799837799},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/exp/F03.exp.json","hash":"ab92d6fd93d152a4739d93cc6a650c36623dcf72","modified":1606799837798},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/exp/F04.exp.json","hash":"19c9ad9d05ea7cb15ccdabeaa14ec84c2763af9c","modified":1606799837799},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/exp/F06.exp.json","hash":"8dd11423a36822927463c3adfdd629d4126f2205","modified":1606799837800},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/exp/F09.exp.json","hash":"eb7d53e7617247158e4d538e2e7f1a602cfe21a5","modified":1606799837803},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/exp/F07.exp.json","hash":"65441e1c9d27f4af55b45759e3c8407af2b72c3e","modified":1606799837801},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/exp/F08.exp.json","hash":"03284527751a22b05336329df15e103fdc7e95ec","modified":1606799837802},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/exp/F10.exp.json","hash":"61bccc68a43662888862fe46c91f579958097ed9","modified":1606799837803},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/P01.mtn","hash":"4b6d266d9fe31e01c4e13ac2049435b5d70b5589","modified":1606799837817},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_01_df.mtn","hash":"4b008605c2f61f37fd295d929df8b51e9f1f447e","modified":1606799837820},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_02.mtn","hash":"43f73acf0ec68e5ddda2fb212b3bd62b4ec63829","modified":1606799837821},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_idle_01.mtn","hash":"dd178b1cb3817bd2d7e6f56f25daf3ffacd4afdd","modified":1606799837818},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_01.mtn","hash":"b1b0e2237926a52970703bcfdd5cf6bb6fc39248","modified":1606799837819},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_04.mtn","hash":"b6395b5acb2136c8265f37483cfe60b4a1bfb66d","modified":1606799837823},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_06.mtn","hash":"2641628ced0c982f214242744da73f1ab048c078","modified":1606799837825},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_05.mtn","hash":"c118b3bcbf03d0cc07c9f6a2a8e8c495f07f4091","modified":1606799837824},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_03.mtn","hash":"bbd6a2cbe87dea113024d9d953bb42864cad31a5","modified":1606799837822},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_08.mtn","hash":"98768aafeb239e75f788969eb995adbe7a89bc3f","modified":1606799837826},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_10.mtn","hash":"8e6d0609ae64f8dd4db0e5e85addbc677fac3a79","modified":1606799837828},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_07.mtn","hash":"ec5da8fb40ff26dc3e9f306cade5f4bfc2f15642","modified":1606799837825},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_09.mtn","hash":"c4f3635225ba606873a7c14cc91bf5a28a2afa95","modified":1606799837827},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_14.mtn","hash":"2480493fffb4fd8135ef1e88c5f717952b7d6542","modified":1606799837832},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_13.mtn","hash":"d20d09dfbdf42d13240c45f9d2fa4474a4541dd8","modified":1606799837831},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_15.mtn","hash":"4fa8d8667c41cd5b3c49cf4bdd8b36cf0a9158b9","modified":1606799837833},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_16.mtn","hash":"03843599008ab2ee23d9d03174924609ad042ce6","modified":1606799837835},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_18.mtn","hash":"34fbff31238e9b6a541f5f03a00bec5cbcec6649","modified":1606799837836},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_17.mtn","hash":"6346ebcf76b0780987f552b16c4c62c39732597f","modified":1606799837835},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_21.mtn","hash":"bd917f60537e4e9037c85bf356d4c25e75e2807c","modified":1606799837839},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_19.mtn","hash":"685fc0130899e903d9c9433ec1c1a987323d6c8c","modified":1606799837837},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_22.mtn","hash":"0fb02e4734ab8c455e1405dfed9546af583595ae","modified":1606799837840},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_23.mtn","hash":"d5a156e295e575c615b673350c025e3270afee8e","modified":1606799837840},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_20.mtn","hash":"076ca7be2c81e776794245a3865478b20428e416","modified":1606799837838},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_24.mtn","hash":"696502793e9917abc495645be784262e3b997bde","modified":1606799837841},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/idle_02.mtn","hash":"8c3929962a4991c94bf7aeaf33169d61ccaccb2c","modified":1606799837854},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/idle_01.mtn","hash":"e38a7dcfcad059b695f935b2071a1270c1ddf905","modified":1606799837854},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/m_01.mtn","hash":"97d08b57c3b07a854f69cdef3ce6d13a2b2ece1c","modified":1606799837855},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/m_02.mtn","hash":"a4dd9580452854f6adc7b30e9e85702a7641179c","modified":1606799837856},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/m_03.mtn","hash":"dd140c6c4702f3fbd785a85a4d5d8cfa32b9bc32","modified":1606799837857},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/m_05.mtn","hash":"ca1f068a2c9c56519e4306115b95d1f497f31124","modified":1606799837858},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/m_04.mtn","hash":"32f8515854a89878c5becbabf56dabd4c675d437","modified":1606799837857},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/m_06.mtn","hash":"cb16f119956346e4b15a1c432491423893cf2389","modified":1606799837859},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/m_08.mtn","hash":"fbd6ae1967446a421d8505a8d29d5f7f64b5c0d7","modified":1606799837861},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/m_10.mtn","hash":"837f0cda82543d87c12108957a16e482964f3796","modified":1606799837862},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/m_07.mtn","hash":"35caceb556d9bb4fc2a5ed4f8c51d766a6e70405","modified":1606799837860},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/m_11.mtn","hash":"2c5ec476b9e3246d8c7a5ae4611401d3420cfa1e","modified":1606799837863},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/m_12.mtn","hash":"90e96587969b78785c16cdffbdbe0b220cac39b7","modified":1606799837864},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/m_09.mtn","hash":"4b942bfbde2a82f19bb4aab7e54e3caae9691da6","modified":1606799837861},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/m_13.mtn","hash":"f08d7f660fda4029fec2acb1f1389f855b5d1b96","modified":1606799837865},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/mtn/m_14.mtn","hash":"4c5c7fdc05237a090341d4690bd7e07344728e9e","modified":1606799837866},{"_id":"themes/lucky/source/live2d_models/wanko/assets/mtn/idle_02.mtn","hash":"865874c50848fbc9a55011391531e2ec171c9b91","modified":1606799837877},{"_id":"themes/lucky/source/live2d_models/wanko/assets/mtn/idle_03.mtn","hash":"84684914ebf5dc5b2df160338bb97dcc0a978476","modified":1606799837878},{"_id":"themes/lucky/source/live2d_models/wanko/assets/mtn/idle_01.mtn","hash":"908abce18f6cf7fd4bc1486f048c25a517f4a34a","modified":1606799837877},{"_id":"themes/lucky/source/live2d_models/wanko/assets/mtn/shake_02.mtn","hash":"7b6c914f6c33450eda2e53d9b638fd7045c0f683","modified":1606799837881},{"_id":"themes/lucky/source/live2d_models/wanko/assets/mtn/idle_04.mtn","hash":"78e22091792abb0600f724a5dfd60371257954e8","modified":1606799837879},{"_id":"themes/lucky/source/live2d_models/wanko/assets/mtn/shake_01.mtn","hash":"dffc54733127832f8f5e91aced55a83da58fa215","modified":1606799837880},{"_id":"themes/lucky/source/live2d_models/wanko/assets/mtn/touch_01.mtn","hash":"99270ea8fe1f8f5d88eadb94f36bd0810009d1e6","modified":1606799837882},{"_id":"themes/lucky/source/live2d_models/wanko/assets/mtn/touch_02.mtn","hash":"4d1f099fbd18d15c598a644227ed5bf942a2ba71","modified":1606799837883},{"_id":"themes/lucky/source/live2d_models/wanko/assets/mtn/touch_03.mtn","hash":"9c394975083915f0f3786caff1762381348b041e","modified":1606799837884},{"_id":"themes/lucky/source/live2d_models/z16/assets/exp/f00.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1606799837891},{"_id":"themes/lucky/source/live2d_models/wanko/assets/mtn/touch_05.mtn","hash":"9610bb8a937ba9b11445a3894d8cc0733a2b67e5","modified":1606799837885},{"_id":"themes/lucky/source/live2d_models/wanko/assets/mtn/touch_04.mtn","hash":"8d2302cfdaec698e575048797ff4f30ae4d202de","modified":1606799837884},{"_id":"themes/lucky/source/live2d_models/wanko/assets/mtn/touch_06.mtn","hash":"feb9237c73f2045ed1704c01b5362c9a54ee5a18","modified":1606799837886},{"_id":"themes/lucky/source/live2d_models/z16/assets/mtn/idle.mtn","hash":"f6b879d9f1d096509a7edbc971b8fdd9697932e9","modified":1606799837900},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1606799837238},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/exp/f02.exp.json","hash":"461fe8077a2289e309ffc7edf561501a7edcce88","modified":1606799837239},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/exp/f03.exp.json","hash":"a65382a1a8d8f7034eac2c811b9f122a8b3f1403","modified":1606799837240},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/exp/f04.exp.json","hash":"3156286d7e0281e15c637a889aa415eef3224fa7","modified":1606799837240},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/exp/f05.exp.json","hash":"1123786fb0bb9c31f7d30cf14b2299f898cdc207","modified":1606799837241},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/exp/f07.exp.json","hash":"d55366c9bcf382e8273cf1803f65cdb8a4a0d336","modified":1606799837243},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/exp/f08.exp.json","hash":"4a9ba4b11d9797f59c7b043d2b807ed8253f3cc4","modified":1606799837243},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/exp/f06.exp.json","hash":"d962889ec7c563d818ddb5ab1e58cd337b5e62db","modified":1606799837242},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/flickHead_00.mtn","hash":"66577f6dde2bec905930fba0dd5f06de939c8f1e","modified":1606799837257},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/idle_00.mtn","hash":"bbaaafe4de159dd4fb73d137d283c640d3fede53","modified":1606799837258},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/pinchIn_00.mtn","hash":"ed792ed8226aa5a3e5bf059285b2c95855c11303","modified":1606799837261},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/idle_01.mtn","hash":"035c196f276ed177239ea05eeaece68b0fda2935","modified":1606799837259},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/idle_02.mtn","hash":"82291b3b78339d52f559a65d02b78e0b30180503","modified":1606799837260},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/pinchOut_00.mtn","hash":"db831991287e3a4724578f068a68e48168081d5a","modified":1606799837262},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/tapBody_03.mtn","hash":"fcd573576112ad5f4e4b7dc0b750de79f150f971","modified":1606799837266},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/tapBody_00.mtn","hash":"4041b2f1f2f4a84454180f9dab14e46d99e135c0","modified":1606799837264},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/shake_00.mtn","hash":"7e938c4abe83273766c4562a571301811dea1de6","modified":1606799837263},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/tapBody_01.mtn","hash":"91fbfe1870f7a0a5f5fdb87c213c41b2a8cb5648","modified":1606799837265},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/tapBody_02.mtn","hash":"e93a2163cbb85525338e11a520e317329b11fb65","modified":1606799837265},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/tapBody_05.mtn","hash":"5f48e50e938f98636519c370745a39b921907719","modified":1606799837268},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/tapBody_07.mtn","hash":"d299747aaf27377d552ef1f8b4fce9871a65c37d","modified":1606799837270},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/tapBody_04.mtn","hash":"557811c5f4ddbd393542366ef95794b19fc60387","modified":1606799837267},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/tapBody_06.mtn","hash":"3d06ac66c04eb12c64d36551dd85389f0b0ee51f","modified":1606799837269},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/tapBody_08.mtn","hash":"64a03a904d701039bf81e1296ee79537c2e8800e","modified":1606799837271},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/mtn/tapBody_09.mtn","hash":"4f50c17dcf352995e51a4d462b9ca7a9e9197d5c","modified":1606799837272},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/snd/pinchIn_00.mp3","hash":"d143662d2c8cfb1150f719d3d55c75d454535690","modified":1606799837274},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/snd/flickHead_00.mp3","hash":"0b447e7e38eb20f3f7e8ba2a5ea5f521f6e37a26","modified":1606799837273},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/snd/pinchOut_00.mp3","hash":"6872da79e1b515b2c996eecee4ca150e22aa48c0","modified":1606799837275},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/snd/shake_00.mp3","hash":"28b245865f200b61cb009dfbd3811d9e9b0748fb","modified":1606799837276},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/snd/tapBody_01.mp3","hash":"d3d5607dbe394225e2ee858531b7767f567c4e10","modified":1606799837278},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/exp/f04.exp.json","hash":"3156286d7e0281e15c637a889aa415eef3224fa7","modified":1606799837284},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/exp/f02.exp.json","hash":"461fe8077a2289e309ffc7edf561501a7edcce88","modified":1606799837283},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/snd/tapBody_00.mp3","hash":"23c998ca4549b7908aef029d28b6ae22cbfcdc82","modified":1606799837277},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/snd/tapBody_02.mp3","hash":"be111df9ecd006e992f94cb4280c2b66d9cd23ed","modified":1606799837280},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1606799837282},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/exp/f03.exp.json","hash":"a65382a1a8d8f7034eac2c811b9f122a8b3f1403","modified":1606799837284},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/exp/f05.exp.json","hash":"1123786fb0bb9c31f7d30cf14b2299f898cdc207","modified":1606799837285},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/exp/f07.exp.json","hash":"d55366c9bcf382e8273cf1803f65cdb8a4a0d336","modified":1606799837287},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/exp/f08.exp.json","hash":"4a9ba4b11d9797f59c7b043d2b807ed8253f3cc4","modified":1606799837288},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/exp/f06.exp.json","hash":"d962889ec7c563d818ddb5ab1e58cd337b5e62db","modified":1606799837286},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/snd/flickHead_00.mp3","hash":"0b447e7e38eb20f3f7e8ba2a5ea5f521f6e37a26","modified":1606799837315},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/snd/pinchIn_00.mp3","hash":"d143662d2c8cfb1150f719d3d55c75d454535690","modified":1606799837316},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/snd/pinchOut_00.mp3","hash":"6872da79e1b515b2c996eecee4ca150e22aa48c0","modified":1606799837317},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/snd/shake_00.mp3","hash":"28b245865f200b61cb009dfbd3811d9e9b0748fb","modified":1606799837318},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/snd/tapBody_02.mp3","hash":"be111df9ecd006e992f94cb4280c2b66d9cd23ed","modified":1606799837322},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/snd/tapBody_01.mp3","hash":"d3d5607dbe394225e2ee858531b7767f567c4e10","modified":1606799837320},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/flickHead_00.mtn","hash":"66577f6dde2bec905930fba0dd5f06de939c8f1e","modified":1606799837300},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/snd/tapBody_00.mp3","hash":"23c998ca4549b7908aef029d28b6ae22cbfcdc82","modified":1606799837319},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/idle_01.mtn","hash":"035c196f276ed177239ea05eeaece68b0fda2935","modified":1606799837302},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/idle_00.mtn","hash":"bbaaafe4de159dd4fb73d137d283c640d3fede53","modified":1606799837301},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/idle_02.mtn","hash":"82291b3b78339d52f559a65d02b78e0b30180503","modified":1606799837303},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/pinchIn_00.mtn","hash":"ed792ed8226aa5a3e5bf059285b2c95855c11303","modified":1606799837304},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/pinchOut_00.mtn","hash":"db831991287e3a4724578f068a68e48168081d5a","modified":1606799837305},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/tapBody_00.mtn","hash":"4041b2f1f2f4a84454180f9dab14e46d99e135c0","modified":1606799837307},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/shake_00.mtn","hash":"7e938c4abe83273766c4562a571301811dea1de6","modified":1606799837306},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/tapBody_01.mtn","hash":"91fbfe1870f7a0a5f5fdb87c213c41b2a8cb5648","modified":1606799837307},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/tapBody_02.mtn","hash":"e93a2163cbb85525338e11a520e317329b11fb65","modified":1606799837308},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/tapBody_03.mtn","hash":"fcd573576112ad5f4e4b7dc0b750de79f150f971","modified":1606799837309},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/tapBody_05.mtn","hash":"5f48e50e938f98636519c370745a39b921907719","modified":1606799837311},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/tapBody_04.mtn","hash":"557811c5f4ddbd393542366ef95794b19fc60387","modified":1606799837310},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/tapBody_06.mtn","hash":"3d06ac66c04eb12c64d36551dd85389f0b0ee51f","modified":1606799837311},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/tapBody_07.mtn","hash":"d299747aaf27377d552ef1f8b4fce9871a65c37d","modified":1606799837312},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/tapBody_08.mtn","hash":"64a03a904d701039bf81e1296ee79537c2e8800e","modified":1606799837313},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/mtn/tapBody_09.mtn","hash":"4f50c17dcf352995e51a4d462b9ca7a9e9197d5c","modified":1606799837313},{"_id":"themes/lucky/source/live2d_models/z16/assets/moc/z16.256/texture_00.png","hash":"19f22619c246067d519aa1e6e477497cc4342414","modified":1606799837896},{"_id":"themes/lucky/source/live2d_models/z16/assets/moc/z16.512/texture_00.png","hash":"251b9f944fb1575c01a62b8a9d7522fe76954b3b","modified":1606799837898},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/moc/haru01.1024/texture_00.png","hash":"f3c4103630bbf0660f793f90a14b51fdb7dfb7ea","modified":1606799837248},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/moc/haru02.1024/texture_00.png","hash":"f3c4103630bbf0660f793f90a14b51fdb7dfb7ea","modified":1606799837293},{"_id":"themes/lucky/source/main.0ac1d1.js","hash":"ac6bcb35dff6046630738fdea6d710d26a31299d","modified":1617002302989},{"_id":"themes/lucky/source/mobile.ae08fd.js","hash":"f9f37a04022276539d620f690e5579f66b9ec374","modified":1617002302992},{"_id":"themes/lucky/layout/_partial/script.ejs","hash":"c1ea9ea7fe145a7d3c4326a00ca0f2fb6cb82315","modified":1617002302976},{"_id":"themes/lucky/source/gitment/APlayer.min.js","hash":"b2ab8c0b6a50e884240d80c1a12435b1efc718f3","modified":1606799837076},{"_id":"themes/lucky/source/img/alipay.jpg","hash":"bda816152f1d7e5e52755a079d196850e62d6c97","modified":1606799837078},{"_id":"themes/lucky/source/img/weixin.png","hash":"3ad8925d382e7cb5599b827b1b8793bcaefb2a1f","modified":1606799837087},{"_id":"themes/lucky/source/lib/gitment.js.bak","hash":"ded86ac10cc79a7d28e2ea44778e792cef6c3470","modified":1606799837099},{"_id":"themes/lucky/source/lib/jquery-2.1.4.min.js","hash":"1327f754ff87d26bced46568543207e9df190aaa","modified":1606799837103},{"_id":"themes/lucky/source/plugins/TweenMax/TweenMax.min.js","hash":"1079921a545c4726cde7a043350a4e3da3dde80f","modified":1606799837915},{"_id":"themes/lucky/source/plugins/live2d-widget.js/L2Dwidget.min.js.map","hash":"75322ae0754f0580c0fb5ce9176ab72ce4009903","modified":1606799837934},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/moc/Epsilon2.1.moc","hash":"2148649bde741b6e1557c0ea3c076e5ce5a23632","modified":1606799837162},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/snd/pinchIn_02.mp3","hash":"5b63e02607571ac601c500995e836e6c861b1c62","modified":1606799837759},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/snd/pinchOut_00.mp3","hash":"0654f38f6e9fd623eaf8be11b5d58c9d12991949","modified":1606799837761},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/snd/pinchOut_01.mp3","hash":"8a081030fd53c07bffe3edd48f87a371ca77296b","modified":1606799837762},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/snd/pinchOut_02.mp3","hash":"554edb2f3838cbdc27d1a9c6b8a9cb6eb465cbdd","modified":1606799837764},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_11.mtn","hash":"63b0adf0414ebad9a3bec91417629d983c546975","modified":1606799837829},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_12.mtn","hash":"b68b20df9b695e0d7ac93a5865097b27c3123f21","modified":1606799837830},{"_id":"themes/lucky/source/live2d_models/wanko/assets/moc/wanko.moc","hash":"7b188cd4dcddfe5bdba8ec51a65cb1c21cd2e57a","modified":1606799837875},{"_id":"themes/lucky/source/live2d_models/z16/assets/moc/z16.moc","hash":"6b0241e80e94664d694b43ad05333960de2550c1","modified":1606799837899},{"_id":"themes/lucky/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_04.png","hash":"2c63a9622a875fea1abcdb9ef437b64556090d22","modified":1606799837210},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/moc/ni-j.2048/texture_00.png","hash":"413695bc00193e587b85c944df11d721192dd9a0","modified":1606799837525},{"_id":"themes/lucky/source/live2d_models/nico/assets/moc/nico.2048/texture_00.png","hash":"413695bc00193e587b85c944df11d721192dd9a0","modified":1606799837563},{"_id":"themes/lucky/source/live2d_models/nico/assets/moc/nico.2048/texture_02.png","hash":"8e4a632c61506e3cc07d8ba704aa4ec2567fe11b","modified":1606799837568},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_00.png","hash":"413695bc00193e587b85c944df11d721192dd9a0","modified":1606799837598},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_01.png","hash":"fc5a8b833e1b089808e893158a71b8597161fda0","modified":1606799837601},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_01.png","hash":"413695bc00193e587b85c944df11d721192dd9a0","modified":1606799837640},{"_id":"themes/lucky/source/live2d_models/nito/assets/moc/nito.2048/texture_01.png","hash":"413695bc00193e587b85c944df11d721192dd9a0","modified":1606799837678},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_00.png","hash":"21bdb28b31783e23b26b3aa061e90be4088665aa","modified":1606799837711},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_03.png","hash":"07f568a2bb8045b6bdff7783fb4daf62c821f9ab","modified":1606799837719},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_05.png","hash":"0cd00007fb8bff62a2eb08e1d7c43abab8722224","modified":1606799837725},{"_id":"themes/lucky/source/live2d_models/wanko/assets/moc/wanko.1024/texture_00.png","hash":"c405c1eeb82bcced7aa7a20f04a76168f60ad561","modified":1606799837874},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/moc/haru01.1024/texture_02.png","hash":"6a1e0b336da79557325da9f58a69a380d67ecbb1","modified":1606799837253},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/moc/haru01.1024/texture_01.png","hash":"dd05d6b7f8f0d0c167b040f41ffd7c10a3747d96","modified":1606799837250},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/moc/haru02.1024/texture_01.png","hash":"dd05d6b7f8f0d0c167b040f41ffd7c10a3747d96","modified":1606799837295},{"_id":"themes/lucky/examples/images/Yilia-plus.png","hash":"23884fe970ec806b05511288f52cd576f5ac1fff","modified":1606799836938},{"_id":"themes/lucky/source/lib/gitment.js","hash":"6efab6ebe558a6cab0e0004a737e3f739d614d5e","modified":1606799837098},{"_id":"themes/lucky/source/lib/gitment.js.bak2","hash":"8065a9364e25414c6a37d4be181f1c6052c4d590","modified":1606799837102},{"_id":"themes/lucky/source/plugins/live2d-widget.js/L2Dwidget.0.min.js","hash":"483c29206ea8370f6e700cb9c0f10836d97f68ac","modified":1606799837920},{"_id":"themes/lucky/source/plugins/live2d-widget.js/L2Dwidget.common.js","hash":"053bf325dfd46b3f3b470079d9e9e43313be6eeb","modified":1606799837926},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/moc/hibiki.moc","hash":"deff9b550df1e2dc47a57f1099e46de6737a0ec6","modified":1606799837364},{"_id":"themes/lucky/source/live2d_models/hijiki/assets/moc/hijiki.moc","hash":"44289e62545a7046e0f5231103a851750b78524e","modified":1606799837393},{"_id":"themes/lucky/source/live2d_models/izumi/assets/moc/izumi_illust.moc","hash":"819e029e0d81ed64c59d47fc747026d4bbe637d6","modified":1606799837441},{"_id":"themes/lucky/source/live2d_models/tororo/assets/moc/tororo.moc","hash":"44289e62545a7046e0f5231103a851750b78524e","modified":1606799837783},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/moc/unitychan.moc","hash":"94047b7bb9a99f43ab4dbe5b013a8fb9de854086","modified":1606799837852},{"_id":"themes/lucky/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_06.png","hash":"e04b38575cb49bf538d98d0bcc642be4eaf89f73","modified":1606799837216},{"_id":"themes/lucky/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_03.png","hash":"80f11d03197912296cd27ce7f59f490336396309","modified":1606799837207},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/moc/ni-j.2048/texture_01.png","hash":"f868cb3bffe97108ef677c43659a6ad7f6a906b2","modified":1606799837528},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_01.png","hash":"3d0e745f3e560071ee08beeecde186e5ea35d99e","modified":1606799837714},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_04.png","hash":"f764d594841905db8b2998dd61c329866125ad97","modified":1606799837723},{"_id":"themes/lucky/source/live2d_models/unitychan/assets/moc/unitychan.2048/texture_00.png","hash":"2268ef1522ce750bb63f59a6bd1022c8c531e307","modified":1606799837850},{"_id":"themes/lucky/source/live2d_models/z16/assets/moc/z16.1024/texture_00.png","hash":"c4f7c067d7d37601490554438ab801fce1feb92d","modified":1606799837894},{"_id":"themes/lucky/examples/images/web.png","hash":"9748de6b01c6b044c421d548993b1024abeb8b0c","modified":1606799836943},{"_id":"themes/lucky/source/live2d_models/chitose/assets/moc/chitose.moc","hash":"7e328a496119887e4caaaa5b81adb3aacb0dac19","modified":1606799837137},{"_id":"themes/lucky/source/live2d_models/miku/assets/moc/miku.moc","hash":"a57e92e12f1fcb21d4d3a9ac34f01badbeff3671","modified":1606799837511},{"_id":"themes/lucky/source/live2d_models/nito/assets/moc/nito.moc","hash":"aae6ab7a4687b166b30fb3bbfb1de5e91a5641e4","modified":1606799837681},{"_id":"themes/lucky/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_05.png","hash":"e6b2987797dbcf113879024df919aa716ded9d4e","modified":1606799837213},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/moc/haru02.moc","hash":"748cf01b45bebb3b217d6363f9d5ff81ab942787","modified":1606799837299},{"_id":"themes/lucky/source/live2d_models/haruto/assets/moc/haruto.2048/texture_00.png","hash":"62b970aa1480a1c18bdc4e74e297f2a1b34ca9fa","modified":1606799837332},{"_id":"themes/lucky/source/live2d_models/hibiki/assets/moc/hibiki.2048/texture_00.png","hash":"91349297cc411865cf5605a998b68a97fe67eec5","modified":1606799837361},{"_id":"themes/lucky/source/live2d_models/hijiki/assets/moc/hijiki.2048/texture_00.png","hash":"66464e0d96439695b5542c5e2f5be60739c29999","modified":1606799837390},{"_id":"themes/lucky/source/live2d_models/nico/assets/moc/nico.2048/texture_01.png","hash":"9a19b242b9309624de1e43703b240c1c72bf2205","modified":1606799837566},{"_id":"themes/lucky/source/live2d_models/haruto/assets/moc/haruto.moc","hash":"57bec0b245b49ea941d61ba3dee671f20441afae","modified":1606799837335},{"_id":"themes/lucky/source/live2d_models/haru/01/assets/moc/haru01.moc","hash":"d2223b555b3bdbbd955301c4c5bcbe7ebe19bec1","modified":1606799837256},{"_id":"themes/lucky/source/live2d_models/koharu/assets/moc/koharu.2048/texture_00.png","hash":"0879b61b745084781722636bba9f278f31ce5fc1","modified":1606799837478},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_00.png","hash":"8ea2e684b826d4a8548b237ab86b3bb701ca8d5b","modified":1606799837638},{"_id":"themes/lucky/source/live2d_models/nito/assets/moc/nito.2048/texture_00.png","hash":"8ea2e684b826d4a8548b237ab86b3bb701ca8d5b","modified":1606799837676},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/moc/tsumiki.2048/texture_00.png","hash":"0316bc67bc2bde4017530989f34d62981ed88ab5","modified":1606799837808},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/moc/tsumiki.2048/texture_01.png","hash":"ffbb082160de6e3bb664b1a4e16b503a80b549c2","modified":1606799837813},{"_id":"themes/lucky/source/live2d_models/haru/02/assets/moc/haru02.1024/texture_02.png","hash":"df02ff8355fca1389bbed5153dc1dadd8cd1c704","modified":1606799837297},{"_id":"themes/lucky/source/live2d_models/koharu/assets/moc/koharu.moc","hash":"5eec3fba21444dd6f774b913510b5955e2c0605b","modified":1606799837480},{"_id":"themes/lucky/source/live2d_models/ni-j/assets/moc/ni-j.moc","hash":"d846e2c4a4db0f003f2eda466f64cf2165e39ad8","modified":1606799837533},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/moc/nietzsche.moc","hash":"63e70620e9eee593dbb77b26209ad64afa82f571","modified":1606799837608},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_02.png","hash":"8052842f4b880ce16a01703a128d8881f63f8543","modified":1606799837646},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_02.png","hash":"055eb2da9c13e9116be93a1e60c0ea2b660af864","modified":1606799837718},{"_id":"themes/lucky/source/live2d_models/tororo/assets/moc/tororo.2048/texture_00.png","hash":"98af764b541083e87fc2f8e85f02d2db38c898cc","modified":1606799837780},{"_id":"themes/lucky/source/live2d_models/nipsilon/assets/moc/nipsilon.moc","hash":"77ea4fba30cd6f056d1175654a8c950523cdf37e","modified":1606799837648},{"_id":"themes/lucky/source/live2d_models/tsumiki/assets/moc/tsumiki.moc","hash":"cc023058ae61f70acf7580c4e2352b84eaf1a7b9","modified":1606799837816},{"_id":"themes/lucky/source/live2d_models/epsilon2_1/assets/moc/Epsilon2.1.2048/texture_00.png","hash":"5a245b4c78e6ebaad4d50e47361d1fada208ae5f","modified":1606799837159},{"_id":"themes/lucky/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_02.png","hash":"1c2cf2502769b3a359c121823f9ecdb114063288","modified":1606799837203},{"_id":"themes/lucky/source/live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_02.png","hash":"9abe0e1b8fe05ad4c678f17fd0f47a064f98908d","modified":1606799837605},{"_id":"themes/lucky/source/live2d_models/nico/assets/moc/nico.moc","hash":"371b0d972aca62a2b67d32398be091d792f0b3cb","modified":1606799837570},{"_id":"themes/lucky/source/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_01.png","hash":"274627b4750bac66b29a9c19a939aca1655b1d27","modified":1606799837426},{"_id":"themes/lucky/source/lib/giteement.browser.js","hash":"824925ebd507d6b6fe3005f6c90c64809638456b","modified":1606799837095},{"_id":"themes/lucky/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_00.png","hash":"ff5b30d94adfcca1e5b77a3b7d3d75d750707d83","modified":1606799837189},{"_id":"themes/lucky/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_01.png","hash":"da2a0785207727ba87a30ed6853dafd9978eb7b4","modified":1606799837197},{"_id":"themes/lucky/source/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_02.png","hash":"4b45fb19ee5b662678692132feae93119ff56d08","modified":1606799837432},{"_id":"themes/lucky/source/plugins/live2d-widget.js/L2Dwidget.0.min.js.map","hash":"3b3a7076b747b092d6e48f42a8a3497aa21280ee","modified":1606799837925},{"_id":"themes/lucky/source/plugins/live2d-widget.js/L2Dwidget.common.js.map","hash":"8de60ae490ab3d62c91c8ce60a256079b6afd3d8","modified":1606799837931},{"_id":"themes/lucky/source/live2d_models/shizuku/assets/moc/shizuku.moc","hash":"c2670a0f75830edc89d7fe6d074de4ee67e8dc5d","modified":1606799837732},{"_id":"themes/lucky/source/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_03.png","hash":"84005d6e75ed9db0f531b6e5e0d6d541da796b04","modified":1606799837438},{"_id":"themes/lucky/source/live2d_models/miku/assets/moc/miku.2048/texture_00.png","hash":"26fe101720ab8e55fb62c87b563d0dbb903c5eaf","modified":1606799837507},{"_id":"themes/lucky/source/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_00.png","hash":"bfcecfa399b328ac15eba45f2b6b3b18d50f2daf","modified":1606799837421},{"_id":"themes/lucky/source/live2d_models/chitose/assets/moc/chitose.2048/texture_00.png","hash":"505dbba0bec5d7fda0cead773caa540a0158a610","modified":1606799837134},{"_id":"themes/lucky/source/live2d_models/gf/assets/moc/Gantzert_Felixander.moc","hash":"67d418af2db593b0b6f318e95f49d4370515c8f0","modified":1606799837226},{"_id":"public/content.json","hash":"ea33de1027f5e971da7fc0610ceb43774ea21b17","modified":1620388560672},{"_id":"public/comment/index.html","hash":"8863babc90a9c9ef0f5b1f2481b5993e6280ac21","modified":1620388560672},{"_id":"public/website/index.html","hash":"63720d0852fa83bf709e393b74d7e919f72cb42c","modified":1620388560672},{"_id":"public/2021/05/06/2021-05-06-css-diff-only-of-type-and-only-child/index.html","hash":"792d5c753a0471f939fd9467e5850a21dd1e57b4","modified":1620388560672},{"_id":"public/2021/05/06/2021-05-06-css-block-format-context/index.html","hash":"d4e2f23fc9f9a892e73611af3b3bb7e665fc8182","modified":1620388560672},{"_id":"public/2021/05/06/2021-05-06-css-interview/index.html","hash":"dc10e3ea69fb0d787916534f436c565241e84037","modified":1620388560672},{"_id":"public/2021/04/20/2021-04-20-angular-lifecycle/index.html","hash":"5a64959044d9539fda0778bcadeeb175397e386c","modified":1620388560672},{"_id":"public/2021/04/06/2021-04-06-difference-sass-and-less/index.html","hash":"851660ffff270d7a6f36f6c093965ac7cf26cef3","modified":1620388560672},{"_id":"public/2021/04/06/2021-04-06-css-wrap-line/index.html","hash":"9a379fee240d70f3dd0d4e0cf64ae58d250598dd","modified":1620388560672},{"_id":"public/2021/04/06/2021-04-06-difference-escape-encodeURI-encodeURIComponent/index.html","hash":"acbb328850a6e1577fe5c8d5fd699816339dab42","modified":1620388560672},{"_id":"public/2021/03/20/2021-03-20-four-angle-border-by-css/index.html","hash":"07a09e545035df9bd330b6b60e3b3ea02407f015","modified":1620388560672},{"_id":"public/2021/03/20/2021-03-20-cross-domain-server/index.html","hash":"ccf0d6bc834a89fe19e4614ae8ed2502823577aa","modified":1620388560672},{"_id":"public/2021/03/20/2021-03-20-node-sass-failure/index.html","hash":"8b846654cc3f012b5b382ede6aeb82ce9fae055e","modified":1620388560672},{"_id":"public/2021/03/20/2021-03-20-angular-css-scope/index.html","hash":"abb70b063e8f10b26a5839dd84f5491d9c569060","modified":1620388560672},{"_id":"public/2021/03/07/2021-03-07-jsonp/index.html","hash":"9390b031c687b5c04c1c4e8ee1bb15f56e644279","modified":1620388560672},{"_id":"public/2021/02/14/2021-02-14-js-regex-method/index.html","hash":"2dc32c43e7f7689b04487c30fd625d08ea814420","modified":1620388560672},{"_id":"public/2021/02/10/2021-02-10-linux-terminal-keyboard-shortcut/index.html","hash":"261279ac2350783af0fcede238788f00846d2094","modified":1620388560672},{"_id":"public/2021/02/03/2021-02-03-js-fetch/index.html","hash":"3b279b5d70d8ce4ad4cf2437f138537025ecb9a8","modified":1620388560672},{"_id":"public/2021/01/16/2021-01-16-diff-from-arrow-function-and-function/index.html","hash":"583cd1ac2801aabeaa08093f656c9b29be79f96e","modified":1620388560672},{"_id":"public/2021/01/16/2021-01-16-css-match-principle/index.html","hash":"f1eb3e67e8dcc9b11f76f5608dd145026e5f9509","modified":1620388560672},{"_id":"public/2021/01/02/2021-01-02-diff-from-require-import/index.html","hash":"f081f7f2efa5f735f699db3b5e8a8c1cb476c481","modified":1620388560672},{"_id":"public/2021/01/01/2021-01-01-js-data-type-judge/index.html","hash":"632a009b2661fa2f46cd60b5e89afea2f4b8b213","modified":1620388560672},{"_id":"public/2020/12/29/2020-12-29-process-of-render-page/index.html","hash":"ce8beb465b9b88a0f30c520e081e964a85317f98","modified":1620388560672},{"_id":"public/2020/12/23/2020-12-23-vue-knownledge/index.html","hash":"0c49008abde7f2d08c8a99efbe6ac96aba0869be","modified":1620388560672},{"_id":"public/2020/12/21/2020-12-21-css-common-attribute/index.html","hash":"e2d6b1536fdf5d8e2fc1c046181d8a777058a988","modified":1620388560672},{"_id":"public/2020/12/20/2020-12-20-vue-life-hook-function/index.html","hash":"c3c28f3259eab5236fb23394738b8c6829dfc0cb","modified":1620388560672},{"_id":"public/2020/12/20/2020-12-20-js-event-loop/index.html","hash":"a17db82ffd7daf5f766b825fc6aa3776a762e155","modified":1620388560672},{"_id":"public/2020/12/16/2020-12-16-nginx-config/index.html","hash":"d2743ce32d49b7b36ae3adf7ef74a30cdf55d0e5","modified":1620388560672},{"_id":"public/2020/12/15/2020-12-15-hls-js-video-md/index.html","hash":"04bbd8f64a2125bbc1b7654875af88f2df1966db","modified":1620388560672},{"_id":"public/2020/12/14/2020-12-14-js-knowledge-md/index.html","hash":"9b96abf795918c5c45813bf029640c7a108b533a","modified":1620388560672},{"_id":"public/2020/12/01/2020-12-01-npm-install-md/index.html","hash":"afcbd39a490527a7bf9bd0f86608a3362ee278fc","modified":1620388560672},{"_id":"public/2020/12/01/2020-12-01-jquery-subscribe-ajax-event-md/index.html","hash":"6d82c7fce52244549ecfc3a4065319d592a05a17","modified":1620388560672},{"_id":"public/2020/12/01/2020-12-01-js-float-calculate/index.html","hash":"b9d820d1a542247179692f9ca7e8755fa7762757","modified":1620388560672},{"_id":"public/2020/12/01/2020-12-01-es6-uniq/index.html","hash":"0817f512d6b81b081ec09dd9f8a7746b57a02c66","modified":1620388560672},{"_id":"public/2020/11/21/2020-11-21-dataTable/index.html","hash":"1ecf253019819dfd72a0f48bb9482fd876ce2999","modified":1620388560672},{"_id":"public/2020/11/02/2020-11-02-daterangepicker-default-null(1)/index.html","hash":"706460234a44340151c8c685e88df39c1662a4b9","modified":1620388560672},{"_id":"public/2020/10/23/2020-10-23-forEach-sync-execute/index.html","hash":"6d510288993a15734bfc5f8f8a0e29f7722727fb","modified":1620388560672},{"_id":"public/2020/10/22/2020-10-22-es6-async-methods/index.html","hash":"37f80888b13a5eb0310b9f9a531f236d322d6c0e","modified":1620388560672},{"_id":"public/2020/10/21/2020-10-21-browser-window-size/index.html","hash":"70dfb781aaa1fad49f383376529b90836dd7fef7","modified":1620388560672},{"_id":"public/2020/10/11/2020-10-11-hexo-new-page/index.html","hash":"f5b881466b3fe12b8f132d8f7f48596709cb8f53","modified":1620388560672},{"_id":"public/2020/10/11/2020-10-11-gitee-update-pages-auto/index.html","hash":"5a49fefe2c74a50b0d54d3d0a850d6e90d11fb0b","modified":1620388560672},{"_id":"public/2020/10/07/2020-10-07-deploy-hexo/index.html","hash":"db4809fdc9ca7aa9dee882bbcc1bc48449cc2b2d","modified":1620388560672},{"_id":"public/2020/09/30/2020-09-30-hexo-add-article-nav/index.html","hash":"02cb098856f3b972d5f8820594f957680c243480","modified":1620388560672},{"_id":"public/2020/09/27/2020-09-27-docker-install-offline/index.html","hash":"4addb3f1a07309608075983b07d113a3c6d249d7","modified":1620388560672},{"_id":"public/2020/09/27/2020-09-27-debian-install-k8s-offline/index.html","hash":"58385453316f086bb47f75aaf569a709b06df921","modified":1620388560672},{"_id":"public/2020/09/27/2020-09-27-debian-install-command/index.html","hash":"a6c9fcef524288fffb54723bf255977dd63670bd","modified":1620388560672},{"_id":"public/2020/09/27/2020-09-27-node-http-server/index.html","hash":"f05d33d837a9296950548d0a12ba35352df7de25","modified":1620388560672},{"_id":"public/2020/09/17/2020-09-17-k8s-add-new-domain-name/index.html","hash":"c0924556bd4af0786816d9d78a1055e163be3470","modified":1620388560672},{"_id":"public/2020/09/14/2020-09-14-ruby-rare-knowledge/index.html","hash":"fcde317f9ff94b3d2658c9f97f15e1bccf8dc61a","modified":1620388560672},{"_id":"public/2020/09/10/2020-09-10-debian-install-k8s/index.html","hash":"7dcbedbed9f1916bd81105c19dacf18e2ec7651a","modified":1620388560672},{"_id":"public/2020/09/06/2020-09-06-interview-css/index.html","hash":"b70993379057e1a2923360644aefd1fa37df697e","modified":1620388560672},{"_id":"public/2020/09/04/2020-09-04-centos-install-k8s/index.html","hash":"c300df63ab952a2d8748ac3c31f4021afbd2672d","modified":1620388560672},{"_id":"public/2020/05/11/2020-05-11-linux-connect-blueteeth/index.html","hash":"0a752b8e8c01beeeafcf4b0832a4ed711feab79f","modified":1620388560672},{"_id":"public/2019/10/29/2019-10-29-proxy-of-docker/index.html","hash":"e8909fede27250dfa905ba025203fc445a129b3f","modified":1620388560672},{"_id":"public/2019/10/22/2019-10-22-percentage-of-css/index.html","hash":"6e62f44781c37af5bb8ae12a493b19d0ac1efd86","modified":1620388560672},{"_id":"public/2019/07/12/2019-07-12-网站推荐/index.html","hash":"fb88978481be35ea47af2c90f8e002e864feb650","modified":1620388560672},{"_id":"public/2019/05/27/2019-05-27-flex布局/index.html","hash":"36e32bf1575195ffa0f2713d9382fe32110cff8c","modified":1620388560672},{"_id":"public/2019/05/22/2019-05-22-css居中详解/index.html","hash":"bf1456552d6a5b8db333ce7d1093d4b1a568f820","modified":1620388560672},{"_id":"public/2019/05/08/2019-05-08-js事件委托机制/index.html","hash":"eb5dbaf90a0a520d9dbbffeb01b06c2338beee8e","modified":1620388560672},{"_id":"public/2019/04/03/2019-04-03-git环境配置/index.html","hash":"7e8d772ef1984dd7d5efae89fb83fc8ea8a685ca","modified":1620388560672},{"_id":"public/2019/03/29/2019-03-29-ruby-open3死锁/index.html","hash":"3373ed307498005211fe11f5134f1cc84bf5a988","modified":1620388560672},{"_id":"public/2019/03/20/2019-03-20-Ruby-Rails学习资料/index.html","hash":"d4d37e040b1be033db88ebd7aa339fb95d031f03","modified":1620388560672},{"_id":"public/2019/03/19/2019-03-19-ruby基本知识/index.html","hash":"49971e2588de76d53532f189e2166aefffda8c9d","modified":1620388560672},{"_id":"public/2019/03/15/2019-03-12-代理服务器的搭建/index.html","hash":"dffaac8047d92dc5f476ed01d96560aa7bfac177","modified":1620388560672},{"_id":"public/2019/03/12/2019-03-12-DataTable使用正则/index.html","hash":"249cdcd267994b5b7d07d05ab6bc54992a45d620","modified":1620388560672},{"_id":"public/2019/03/05/2019-03-05-数据库/index.html","hash":"155e915add9bc11674e31f87b7f704421dfac5aa","modified":1620388560672},{"_id":"public/archives/index.html","hash":"4b0475f682e26bb5e553845a780323d349f4f101","modified":1620388560672},{"_id":"public/archives/page/2/index.html","hash":"f790248d755df589d0011268fa41c0d1474766b8","modified":1620388560672},{"_id":"public/archives/page/3/index.html","hash":"c41608b458130530e1f17bae8802e05e963d6621","modified":1620388560672},{"_id":"public/archives/page/4/index.html","hash":"29271da3cac5cde2a94c86b35c3522c583c494c3","modified":1620388560672},{"_id":"public/archives/page/5/index.html","hash":"d3476e39f7f65732d06ee543e3cbc60aecf9d951","modified":1620388560672},{"_id":"public/archives/page/6/index.html","hash":"fd909436552c81d7055f0a9d50f7fc2cc7e0fb31","modified":1620388560672},{"_id":"public/archives/page/7/index.html","hash":"8644a48d810a396655f5af2b30c466d85b9a46f1","modified":1620388560672},{"_id":"public/archives/2019/index.html","hash":"bf6a896a407e45c93bacf80b0916608f9d4b9af1","modified":1620388560672},{"_id":"public/archives/2019/page/2/index.html","hash":"5a56d4f54fe3f4496a1b7898d1b303a55e94a725","modified":1620388560672},{"_id":"public/archives/2019/03/index.html","hash":"f8ffa813c81bd58cea40ca7f84dddaf003731997","modified":1620388560672},{"_id":"public/archives/2019/04/index.html","hash":"422ef11ceb0707264d8afbc13cc0ead2d7c0882e","modified":1620388560672},{"_id":"public/archives/2019/05/index.html","hash":"9ba067626032eca3695424b439022cb2ac04092e","modified":1620388560672},{"_id":"public/archives/2019/07/index.html","hash":"8a8a7ef33527d0fa2adf6c689d0be16335dabda0","modified":1620388560672},{"_id":"public/archives/2019/10/index.html","hash":"a6d5c5667cb297d51815ecfd886a750bafd32802","modified":1620388560672},{"_id":"public/archives/2020/index.html","hash":"ce3c321004da585a0f32873b88ca2c09d1d14f38","modified":1620388560672},{"_id":"public/archives/2020/page/2/index.html","hash":"4d6d2226a021ce8a50f0d38d1d0258b325953c7c","modified":1620388560672},{"_id":"public/archives/2020/page/3/index.html","hash":"9802e8af38def8f286cd6057b7f986fe5ee8deb6","modified":1620388560672},{"_id":"public/archives/2020/page/4/index.html","hash":"b28ab9d36c60f38afe8e6c5051ac02dd3662ec9c","modified":1620388560672},{"_id":"public/archives/2020/05/index.html","hash":"31fc34a64134c203dd3e41494388430f7fcbe99f","modified":1620388560672},{"_id":"public/archives/2020/09/index.html","hash":"2f1772638b08033949e3ca4ce6e7e90c6fa7acd7","modified":1620388560672},{"_id":"public/archives/2020/10/index.html","hash":"b6ff501f3d848e8baeef1632d6d71f14cc9fd4e5","modified":1620388560672},{"_id":"public/archives/2020/11/index.html","hash":"f1fb0867805f897c4c9d2ab5b23207795b7c657a","modified":1620388560672},{"_id":"public/archives/2020/12/index.html","hash":"243ccc2f71467fb27ada8d323d546286e6544acd","modified":1620388560672},{"_id":"public/archives/2020/12/page/2/index.html","hash":"5fdbaf582522d32397b3ea89638a94d91aae2c76","modified":1620388560672},{"_id":"public/archives/2021/index.html","hash":"0ec5de0a4ec1d58fa5705485af7f9fa46156e941","modified":1620388560672},{"_id":"public/archives/2021/page/2/index.html","hash":"dd34644191c7bece196ff83d3a6edfaf32d28039","modified":1620388560672},{"_id":"public/archives/2021/01/index.html","hash":"ce59017159b562a0d988bc34e33ac09fc112a34d","modified":1620388560672},{"_id":"public/archives/2021/02/index.html","hash":"1ad653bc3a3578593a23d95e2cc99e7e0cb5dbea","modified":1620388560672},{"_id":"public/archives/2021/03/index.html","hash":"1eedc0fbc61547bc1d92327d670d6152aedb47a8","modified":1620388560672},{"_id":"public/archives/2021/04/index.html","hash":"714496946550f66616eac77746334fe0e68c01ea","modified":1620388560672},{"_id":"public/archives/2021/05/index.html","hash":"79a84b0947088c4bb4137b9c153dae5ed597b26f","modified":1620388560672},{"_id":"public/categories/Vue/index.html","hash":"da9ca4e041cef64e5e629b54cc3af161ae638a71","modified":1620388560672},{"_id":"public/index.html","hash":"27c82fe875c84b9bd93824adf4e49b71b90d102c","modified":1620388560672},{"_id":"public/page/2/index.html","hash":"cc043c1993fbc77343478ce7ecac4dbbff7190e4","modified":1620388560672},{"_id":"public/page/3/index.html","hash":"39f48b1944f1cdb7574da71d605d4e645f1a4922","modified":1620388560672},{"_id":"public/page/4/index.html","hash":"8f65dbe49f20a814dd36ac48f400508ad98a2de4","modified":1620388560672},{"_id":"public/page/5/index.html","hash":"e864d85106e93d2df534991cb44f0c951e0f7f68","modified":1620388560672},{"_id":"public/page/6/index.html","hash":"ed0d5d6c0dca5cd24fdf8565dfce3f3136a8c6b9","modified":1620388560672},{"_id":"public/page/7/index.html","hash":"22f7b34a760041453195af792893393a2a8c6c55","modified":1620388560672},{"_id":"public/tags/mongo/index.html","hash":"e0aebaec38eeb62c6846c1d7a8acddcbae5e773d","modified":1620388560672},{"_id":"public/tags/ruby/index.html","hash":"8759d6180c906f4ab7fb5c748669996b5a4d367e","modified":1620388560672},{"_id":"public/tags/DataTable/index.html","hash":"a45c3c681a8dddf25a84c38e16abf8d274f1cce9","modified":1620388560672},{"_id":"public/tags/web/index.html","hash":"cc9bc24e8c5eab04a1d534ed9b9bc50ecf3f89df","modified":1620388560672},{"_id":"public/tags/web/page/2/index.html","hash":"3c814c070f0f0d842ce8e20d7bcbd284a9f7b83a","modified":1620388560672},{"_id":"public/tags/javascript/index.html","hash":"05cb02052e41994965a8b348b94e883edb02ee2c","modified":1620388560672},{"_id":"public/tags/javascript/page/2/index.html","hash":"80e1ca515e6b39e64858573c26baa70ec470a4c7","modified":1620388560672},{"_id":"public/tags/javascript/page/3/index.html","hash":"10b1f3fc7e41be9d8e4a032767f28d0a0b5c441e","modified":1620388560672},{"_id":"public/tags/linux/index.html","hash":"df0200dbf9acce44ca3520cff1e0ea66b25e8dc1","modified":1620388560672},{"_id":"public/tags/network/index.html","hash":"4aba4612f43d642b9a79ed4ab3ce0d166f148608","modified":1620388560672},{"_id":"public/tags/base/index.html","hash":"0e18c4851368a75ce38b3823f6fc426894c6836f","modified":1620388560672},{"_id":"public/tags/rails/index.html","hash":"d23b5739fd2977d8a97d57b6b3aff498dbf58e36","modified":1620388560672},{"_id":"public/tags/git/index.html","hash":"f583a2935a25deb18eb321f38450c1e1796c4a42","modified":1620388560672},{"_id":"public/tags/css/index.html","hash":"acfd075d72b7806454b6b57b91bcc63fcc9b5bda","modified":1620388560672},{"_id":"public/tags/css/page/2/index.html","hash":"bc49ba73ffaee2b6e6c660fd54da83acae49d2fc","modified":1620388560672},{"_id":"public/tags/projects/index.html","hash":"9cf153912b6ce2ad82f8220fb8787e340254cbb5","modified":1620388560672},{"_id":"public/tags/docker/index.html","hash":"8edc0287d823c130dd2e13a702a93795753cf384","modified":1620388560672},{"_id":"public/tags/html/index.html","hash":"75a41d25b7a6643307f1ba5df795d8d6628f750b","modified":1620388560672},{"_id":"public/tags/kubernetes/index.html","hash":"dbb670b9ff7db65fa0eb647e355c2f8f5e8f0566","modified":1620388560672},{"_id":"public/tags/debian/index.html","hash":"44a2a9414b47888b3928e3fcc8230bbde724fcb1","modified":1620388560672},{"_id":"public/tags/ubuntu/index.html","hash":"dcb042baca4b6dd2a4a6977f52641f3f36a7449c","modified":1620388560672},{"_id":"public/tags/hexo/index.html","hash":"38ed0cf8fc5d71d4c61056998f7e9d73d7055759","modified":1620388560672},{"_id":"public/tags/nodejs/index.html","hash":"7f237e9f15e215ced1502a5c983655764985a70a","modified":1620388560672},{"_id":"public/tags/jquery/index.html","hash":"e50bc3cef178a43d7d941792f26b65a65b5e9db3","modified":1620388560672},{"_id":"public/tags/es6/index.html","hash":"588e9e0427519583e7fca1fdd46147a1c534657e","modified":1620388560672},{"_id":"public/tags/dataTable/index.html","hash":"c6998239cacefe85538322520fb3f453a367a0c3","modified":1620388560672},{"_id":"public/tags/npm/index.html","hash":"79e03e5893c88420bfe3e240faf536aad038258c","modified":1620388560672},{"_id":"public/tags/video/index.html","hash":"25e7d8af171784b5d9374b942b4f2d97dddad5d9","modified":1620388560672},{"_id":"public/tags/vue/index.html","hash":"0acf366c5fda4732a942a54f67af990c1d756c7c","modified":1620388560672},{"_id":"public/tags/angular/index.html","hash":"a0d2d2085fb8ba1e832a7674f8d8eaf0587f59e9","modified":1620388560672},{"_id":"public/tags/sass/index.html","hash":"d05d055b50c0b47a628f82da36e129a59898b449","modified":1620388560672},{"_id":"public/tags/less/index.html","hash":"5135a967b296771a695749e6d5a2fd5b746618c9","modified":1620388560672},{"_id":"public/tags/angualr/index.html","hash":"c54a4f879e010ed94384e1d21fa3f39cb63e9448","modified":1620388560672},{"_id":"public/tags/nginx/index.html","hash":"f46b77190d0a67a03228720e39cd577d37e0a475","modified":1620388560672},{"_id":"public/tags/centos/index.html","hash":"786338759fffb1154325a26e3db005df11cecf48","modified":1620388560672},{"_id":"public/tags/面试/index.html","hash":"fd946245281dd10ac471cf1cb3ed56e157625ae9","modified":1620388560672},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1620388560672},{"_id":"public/fonts/fonteditor.3da1ef.woff","hash":"5a945ddf318d3ca68d0a1e8695b23287ff7e9816","modified":1620388560672},{"_id":"public/fonts/fonteditor.60e1c3.svg","hash":"eeaa9848e17243743eedbdeced3c8c710f79ccc2","modified":1620388560672},{"_id":"public/fonts/fonteditor.3e0d4a.svg","hash":"de1fbf8378d1966d43bf620b8acd6bf900a15a73","modified":1620388560672},{"_id":"public/fonts/fonteditor.bbc4b5.woff2","hash":"c748dc092f066f7e12626c801d416e64b95dacea","modified":1620388560672},{"_id":"public/fonts/fonteditor.fe4d8a.ttf","hash":"95d1a4991df9ce15562ff0344b318b5fc5f9ab70","modified":1620388560672},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1620388560672},{"_id":"public/fonts/fonteditor.86c132.eot","hash":"c29905356fb2116a454a262d6f15cdeb593a6cec","modified":1620388560672},{"_id":"public/fonts/tooltip.d04149.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1620388560672},{"_id":"public/img/biubiubiu.gif","hash":"cccda381f96abe91b4d698da793abd6496466d3d","modified":1620388560672},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1620388560672},{"_id":"public/img/forkme.png","hash":"b43e6e18b84edc40636204aa0eb9f266ef54a4e7","modified":1620388560672},{"_id":"public/img/head.jpg","hash":"5b6f34880e460e77571126ad797ae2b9d88a4fe1","modified":1620388560672},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1620388560672},{"_id":"public/img/gitee.svg","hash":"5eda5e779b8407430aa53f3c6c38bd0ecc04b003","modified":1620388560672},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1620388560672},{"_id":"public/live2d_models/chitose/assets/mtn/chitose_handwave.mtn","hash":"3d7a0f7ffda7d2ac3bb6fde6ccc49521c0d7713b","modified":1620388560672},{"_id":"public/live2d_models/chitose/assets/mtn/chitose_idle.mtn","hash":"f3d1ab532e49a20e98cadb0290c959d7f1086eb6","modified":1620388560672},{"_id":"public/live2d_models/chitose/assets/mtn/chitose_kime01.mtn","hash":"97308ef8c5798374a6b1ba6cdec53d6732a4728a","modified":1620388560672},{"_id":"public/live2d_models/chitose/assets/mtn/chitose_kime02.mtn","hash":"3eed16b70dc2f7b7e50417f19207e3cabccaa166","modified":1620388560672},{"_id":"public/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_idle_01.mtn","hash":"b4e67d3091aba34efcf9ff3659fa36f6f1a4bd22","modified":1620388560672},{"_id":"public/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_01.mtn","hash":"eecc2854bea6bf90c9f0a0013281ec600c32f2bc","modified":1620388560672},{"_id":"public/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_02.mtn","hash":"7a000a218b098172eeeb8a81e551d558bbaa6f8a","modified":1620388560672},{"_id":"public/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_03.mtn","hash":"3568fc9f7ba95f2521abec8e1241da62581ab7cf","modified":1620388560672},{"_id":"public/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_04.mtn","hash":"b717b620d044859762716d104e137dc9c09c8cce","modified":1620388560672},{"_id":"public/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_05.mtn","hash":"f3a671a29f5d831f04284a8d5fe5adb90cd1e400","modified":1620388560672},{"_id":"public/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_07.mtn","hash":"2fd581bfc662b050c41afb904b9ae54b59d7d010","modified":1620388560672},{"_id":"public/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_08.mtn","hash":"e61753f72a1c170926c59c71490596aaeee30ca6","modified":1620388560672},{"_id":"public/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_06.mtn","hash":"fec328bedb7d5af53e0cfd0eb5991f4574c3676a","modified":1620388560672},{"_id":"public/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_01.mtn","hash":"d72c01b4d9c4faf0f4cb472c390a35712b2ee7f5","modified":1620388560672},{"_id":"public/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_03.mtn","hash":"55c11be6e505791de438c43ad25c31409713544a","modified":1620388560672},{"_id":"public/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_02.mtn","hash":"08f6d29160ce7100441efdd8ac7bbd89fc9c5120","modified":1620388560672},{"_id":"public/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_04.mtn","hash":"42ae0fbe437cd97c623c09bee100c3695abb30ce","modified":1620388560672},{"_id":"public/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_05.mtn","hash":"9eb78800c41148712ac30e1342f025110db0f8d3","modified":1620388560672},{"_id":"public/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_shake_01.mtn","hash":"8f81d974ada9b6800fa6eb852a41906a9e1f4c77","modified":1620388560672},{"_id":"public/live2d_models/gf/assets/mtn/A_00_idle.mtn","hash":"d383fc08986b4d1f746d71abbea6f7b5f54dcc95","modified":1620388560672},{"_id":"public/live2d_models/gf/assets/mtn/A_01.mtn","hash":"91d2def2e00393fcedaaca36cd80340fa95a2d1b","modified":1620388560672},{"_id":"public/live2d_models/gf/assets/mtn/A_02.mtn","hash":"9283c809509daf3f580dcb92bab14960b5a89283","modified":1620388560672},{"_id":"public/live2d_models/gf/assets/mtn/A_04.mtn","hash":"50360a6572518b447af3315236659a576aa1b248","modified":1620388560672},{"_id":"public/live2d_models/haruto/assets/mtn/04.mtn","hash":"32c888667455a3ff6f1b04f910c1a5cc4de30af0","modified":1620388560672},{"_id":"public/live2d_models/gf/assets/mtn/A_03.mtn","hash":"afec07ed22acdf28a5c49b78c560e29c3c2cfaa0","modified":1620388560672},{"_id":"public/live2d_models/haruto/assets/mtn/03.mtn","hash":"a72b697a92a7cff40d15774b143b465b34cee5e6","modified":1620388560672},{"_id":"public/live2d_models/haruto/assets/mtn/02.mtn","hash":"efc99efdff39c93372cff0f6d62c4e748e1a5593","modified":1620388560672},{"_id":"public/live2d_models/haruto/assets/mtn/01.mtn","hash":"61d7d590d9feb71b32fd6bd142b59410d75bc1fa","modified":1620388560672},{"_id":"public/live2d_models/haruto/assets/mtn/05.mtn","hash":"637e00442da4042cd4b0ed2cc62ffb1559881814","modified":1620388560672},{"_id":"public/live2d_models/haruto/assets/mtn/08.mtn","hash":"9b95ef8548b979d1fca557c74f8d66fb15b34578","modified":1620388560672},{"_id":"public/live2d_models/haruto/assets/mtn/06.mtn","hash":"df10cc1d333c96da1296a4853c1ddbd44d8a11f3","modified":1620388560672},{"_id":"public/live2d_models/haruto/assets/mtn/09.mtn","hash":"ecf1283b72e1c4b7e3a97343cd97726813f18790","modified":1620388560672},{"_id":"public/live2d_models/haruto/assets/mtn/07.mtn","hash":"d8c9410135c81604eba665b59808089808e0851a","modified":1620388560672},{"_id":"public/live2d_models/haruto/assets/mtn/idle_02.mtn","hash":"d130dd1d194f05b3eb5391289b0339999e37c3a6","modified":1620388560672},{"_id":"public/live2d_models/hibiki/assets/mtn/hibiki_01.mtn","hash":"cd220b89c26e1267fd7ab8f7cfc714fcd4c3b5a3","modified":1620388560672},{"_id":"public/live2d_models/hibiki/assets/mtn/hibiki_02.mtn","hash":"985154bee77e2934afe74a45071f51e0aa1ac84d","modified":1620388560672},{"_id":"public/live2d_models/hibiki/assets/mtn/hibiki_03.mtn","hash":"0b2e7cb2a32b70a629d9d21205863bb163d06d47","modified":1620388560672},{"_id":"public/live2d_models/hibiki/assets/mtn/hibiki_04.mtn","hash":"6a753859998d7afa17f119f37c5765f0c10b7bca","modified":1620388560672},{"_id":"public/live2d_models/hibiki/assets/mtn/idle_01.mtn","hash":"3fac7f98ab71858018cbbf21b5a3ad99166d275b","modified":1620388560672},{"_id":"public/live2d_models/hibiki/assets/mtn/hibiki_05.mtn","hash":"67dc8d35f050e36d08010d55ddbfd06544fb7ad5","modified":1620388560672},{"_id":"public/live2d_models/hibiki/assets/mtn/idle_02.mtn","hash":"9f7dae129a20775b3209a16ee28e27f496e90ba5","modified":1620388560672},{"_id":"public/live2d_models/hibiki/assets/mtn/idle_03.mtn","hash":"c85916f8699673b0511fd00cd1953896879e0cc5","modified":1620388560672},{"_id":"public/live2d_models/hibiki/assets/mtn/idle_04.mtn","hash":"80d4e53606b3268623b03d12a28570efdb5739ad","modified":1620388560672},{"_id":"public/live2d_models/hibiki/assets/snd/hibiki_01.mp3","hash":"2880911aa4a85958fe02e54b912fbf7e6a1896c6","modified":1620388560672},{"_id":"public/live2d_models/hibiki/assets/snd/hibiki_02.mp3","hash":"75358d4c7ec03c4b1dc02ef60c716d94f031fe2f","modified":1620388560672},{"_id":"public/live2d_models/hibiki/assets/snd/hibiki_03.mp3","hash":"df05cb8288b17e1ad00ed66a731f1558db28cf9b","modified":1620388560672},{"_id":"public/live2d_models/hijiki/assets/mtn/02.mtn","hash":"7eafc52edc73b7cb80ae70d34b43c6ac778fa47b","modified":1620388560672},{"_id":"public/live2d_models/hijiki/assets/mtn/00_idle.mtn","hash":"b224c60e463b9f71ddbfc0c720e430496c175f4f","modified":1620388560672},{"_id":"public/live2d_models/hijiki/assets/mtn/01.mtn","hash":"fb550833ae22c9954c3e01df37ed29b2d61700f2","modified":1620388560672},{"_id":"public/live2d_models/hijiki/assets/mtn/03.mtn","hash":"f900737c7a98441cbb2e05255427e6260e19ae68","modified":1620388560672},{"_id":"public/live2d_models/hijiki/assets/mtn/06.mtn","hash":"ad404bd852d276cdd3d054c953e23f90e4e45ae1","modified":1620388560672},{"_id":"public/live2d_models/hijiki/assets/mtn/04.mtn","hash":"c7a25d3c5d783639bae18db2f3cd284b819c3c85","modified":1620388560672},{"_id":"public/live2d_models/hijiki/assets/mtn/05.mtn","hash":"dd20ad24b5d1830a5d44b9bccb28f922eea5e0e5","modified":1620388560672},{"_id":"public/live2d_models/hijiki/assets/mtn/07.mtn","hash":"b7f2e3a9fa4f3ffbb6e64a08f8d9f45ca1868ffb","modified":1620388560672},{"_id":"public/live2d_models/hijiki/assets/mtn/08.mtn","hash":"4411c7651ff65195b113d95e7d5ebef8a59a37d9","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/mtn/idle_01.mtn","hash":"ce50f5c562b282dcb11679f682fe0f9e1bb0f37b","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/mtn/idle_02.mtn","hash":"0c6b52bf64db7bbfee81ee24240ca991320764b4","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/mtn/idle_04.mtn","hash":"97c0a45af4f0b9f4b828f43eccb1c77c360af637","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/mtn/idle_03.mtn","hash":"b374923d973970f2c8331b3420660952e2bd8bf5","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/mtn/izumi_04.mtn","hash":"551b95d80d31ed4f06d19d99ccc4f795a8392ea3","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/mtn/izumi_01.mtn","hash":"36286812dc692e00a0b69e71d7fe3c8a2b672281","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/mtn/izumi_02.mtn","hash":"90add71910fd83c1c66bfb73db6d6d4766c98dac","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/mtn/izumi_03.mtn","hash":"fc7f8e01f8e7744cbd13a8fea44dda8270f21aeb","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/mtn/izumi_05.mtn","hash":"dbfea56881f31a79bffb6d107e7b1fa867e2da0e","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/mtn/izumi_07.mtn","hash":"e2f9e8cb428fa83251a45166d8f9acad570a47d9","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/mtn/izumi_06.mtn","hash":"c1a63e659fcc6d5b1b0eac7eaff60faf43e2cb28","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/mtn/izumi_08.mtn","hash":"19fc90977a0ca30c18f4afae90d4c3ea27a9b094","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/mtn/izumi_09.mtn","hash":"97199471755394bed243a29b4cb8397518487296","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/snd/izumi_01.mp3","hash":"11dd394ab4d11d3a3c6d6a1a305ff3a1d1fed21d","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/mtn/izumi_10.mtn","hash":"244ae631fb963ed7619e5d63f189d947a2497eb2","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/snd/izumi_02.mp3","hash":"d35189bae63cc6ef18d3a949c4a46dd5ed74c6b3","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/snd/izumi_03.mp3","hash":"b3d6e98bc30eaf8ac0cf7ffe2f297742a819b380","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/snd/izumi_05.mp3","hash":"05e44723c24b387a0eab37a0ab4120ef19ae317e","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/snd/izumi_04.mp3","hash":"7647fb1e8823bb48ee5f82dbeac35e3f61b74bef","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/snd/izumi_08.mp3","hash":"0b73b4f9216ee6b944a91b599c942d567a39fe0f","modified":1620388560672},{"_id":"public/live2d_models/koharu/assets/mtn/01.mtn","hash":"61d7d590d9feb71b32fd6bd142b59410d75bc1fa","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/snd/izumi_10.mp3","hash":"53013c1cc56296a3843d4c8e3f01fd67747b169b","modified":1620388560672},{"_id":"public/live2d_models/koharu/assets/mtn/03.mtn","hash":"a72b697a92a7cff40d15774b143b465b34cee5e6","modified":1620388560672},{"_id":"public/live2d_models/koharu/assets/mtn/04.mtn","hash":"32c888667455a3ff6f1b04f910c1a5cc4de30af0","modified":1620388560672},{"_id":"public/live2d_models/koharu/assets/mtn/02.mtn","hash":"efc99efdff39c93372cff0f6d62c4e748e1a5593","modified":1620388560672},{"_id":"public/live2d_models/koharu/assets/mtn/07.mtn","hash":"d8c9410135c81604eba665b59808089808e0851a","modified":1620388560672},{"_id":"public/live2d_models/koharu/assets/mtn/08.mtn","hash":"9b95ef8548b979d1fca557c74f8d66fb15b34578","modified":1620388560672},{"_id":"public/live2d_models/koharu/assets/mtn/05.mtn","hash":"637e00442da4042cd4b0ed2cc62ffb1559881814","modified":1620388560672},{"_id":"public/live2d_models/koharu/assets/mtn/09.mtn","hash":"ecf1283b72e1c4b7e3a97343cd97726813f18790","modified":1620388560672},{"_id":"public/live2d_models/koharu/assets/mtn/idle.mtn","hash":"058d4628ab04bf42c279501ba4fa37116d384e41","modified":1620388560672},{"_id":"public/live2d_models/koharu/assets/mtn/06.mtn","hash":"df10cc1d333c96da1296a4853c1ddbd44d8a11f3","modified":1620388560672},{"_id":"public/live2d_models/miku/assets/mtn/miku_idle_01.mtn","hash":"5633f73601cf8b0a318e7a7265f71cc782683251","modified":1620388560672},{"_id":"public/live2d_models/miku/assets/mtn/miku_m_01.mtn","hash":"bd0ea5f2f0528b21c4e5632838b69e478b652e88","modified":1620388560672},{"_id":"public/live2d_models/miku/assets/mtn/miku_m_02.mtn","hash":"2eda9602d626d89285e0c0c5f564383964516cc8","modified":1620388560672},{"_id":"public/live2d_models/miku/assets/mtn/miku_m_03.mtn","hash":"94ef9d31a78f7f90d3fb213c4353afbdb3462cff","modified":1620388560672},{"_id":"public/live2d_models/miku/assets/mtn/miku_m_05.mtn","hash":"73b9b162c1dbf9a6747364ae47b12cba9da0bbec","modified":1620388560672},{"_id":"public/live2d_models/miku/assets/mtn/miku_m_04.mtn","hash":"5c440e8f4cd45e73a7c8044ea0e2ea11234f9fd9","modified":1620388560672},{"_id":"public/live2d_models/miku/assets/mtn/miku_shake_01.mtn","hash":"190875ab6cdeee7ae87c4c296429b848c942dd8a","modified":1620388560672},{"_id":"public/live2d_models/miku/assets/mtn/miku_m_06.mtn","hash":"0bfd6ad29e5e171a1ce03a7acb8ffcca9f463902","modified":1620388560672},{"_id":"public/live2d_models/ni-j/assets/mtn/00_idle.mtn","hash":"3686b7bfdb43f85f4fe1d94ed59379d2c4bee41d","modified":1620388560672},{"_id":"public/live2d_models/ni-j/assets/mtn/01_happy.mtn","hash":"2020573671b39c81fbd784a8b873ebee019ca501","modified":1620388560672},{"_id":"public/live2d_models/ni-j/assets/mtn/02_angry.mtn","hash":"f75e1f580c64695fbbf8ba3c5f49eafc7208411d","modified":1620388560672},{"_id":"public/live2d_models/ni-j/assets/mtn/06_love.mtn","hash":"c9f90cc2e2be55ac9c19cf6a962330dad3833fc1","modified":1620388560672},{"_id":"public/live2d_models/ni-j/assets/mtn/03_fear.mtn","hash":"b6cdb8fa48960b2a6e66d78ea992221e8108437b","modified":1620388560672},{"_id":"public/live2d_models/ni-j/assets/mtn/04_surprise.mtn","hash":"4b911af06de9bc6f386aecd623851e5799edaa96","modified":1620388560672},{"_id":"public/live2d_models/ni-j/assets/mtn/09_yawn.mtn","hash":"e0e29a712b01be59ae8bba2e1a0d850e06260d20","modified":1620388560672},{"_id":"public/live2d_models/ni-j/assets/mtn/05_fun.mtn","hash":"4b956c9c028dce753fafa1859404a136975786d4","modified":1620388560672},{"_id":"public/live2d_models/ni-j/assets/mtn/08_sad.mtn","hash":"63647d9320bf3928d658e1275adbfaeba88748b7","modified":1620388560672},{"_id":"public/live2d_models/ni-j/assets/mtn/11_muscle.mtn","hash":"7d0e3466a996f8704e86913c723ac4b82f14ff47","modified":1620388560672},{"_id":"public/live2d_models/ni-j/assets/mtn/10_yeah.mtn","hash":"58c4bda1339f41fa8a7e554509a7a871bad392b8","modified":1620388560672},{"_id":"public/live2d_models/ni-j/assets/mtn/12_stagger.mtn","hash":"3f1a0b25cb1b9fb150f7a9ef37e8c9ba8d4e6ba1","modified":1620388560672},{"_id":"public/live2d_models/ni-j/assets/mtn/18_no.mtn","hash":"9a18a2537bf6634da2bafd3a57d236de30c73b4e","modified":1620388560672},{"_id":"public/live2d_models/ni-j/assets/mtn/15_joy.mtn","hash":"b76a24efc57e4c2cc4abf70c293b2e800029a20d","modified":1620388560672},{"_id":"public/live2d_models/ni-j/assets/mtn/19_walk.mtn","hash":"035516e8cdaa5b3c6e7524daca72294284a81126","modified":1620388560672},{"_id":"public/live2d_models/ni-j/assets/mtn/16_menace.mtn","hash":"6edb6b114d53d7f93cff164992db475b0b6f09c3","modified":1620388560672},{"_id":"public/live2d_models/ni-j/assets/mtn/17_yes.mtn","hash":"a023cc93e55b3940f1a8690dcfa7ad1cfa534fad","modified":1620388560672},{"_id":"public/live2d_models/nico/assets/mtn/00_idle.mtn","hash":"3686b7bfdb43f85f4fe1d94ed59379d2c4bee41d","modified":1620388560672},{"_id":"public/live2d_models/nico/assets/mtn/01_happy.mtn","hash":"2020573671b39c81fbd784a8b873ebee019ca501","modified":1620388560672},{"_id":"public/live2d_models/nico/assets/mtn/03_fear.mtn","hash":"b6cdb8fa48960b2a6e66d78ea992221e8108437b","modified":1620388560672},{"_id":"public/live2d_models/nico/assets/mtn/02_angry.mtn","hash":"f75e1f580c64695fbbf8ba3c5f49eafc7208411d","modified":1620388560672},{"_id":"public/live2d_models/nico/assets/mtn/05_fun.mtn","hash":"4b956c9c028dce753fafa1859404a136975786d4","modified":1620388560672},{"_id":"public/live2d_models/nico/assets/mtn/06_love.mtn","hash":"c9f90cc2e2be55ac9c19cf6a962330dad3833fc1","modified":1620388560672},{"_id":"public/live2d_models/nico/assets/mtn/07_bye.mtn","hash":"6a3e90e8efb64cd5b187196625a3d8915efb21c8","modified":1620388560672},{"_id":"public/live2d_models/nico/assets/mtn/04_surprise.mtn","hash":"4b911af06de9bc6f386aecd623851e5799edaa96","modified":1620388560672},{"_id":"public/live2d_models/nico/assets/mtn/11_muscle.mtn","hash":"7d0e3466a996f8704e86913c723ac4b82f14ff47","modified":1620388560672},{"_id":"public/live2d_models/nico/assets/mtn/08_sad.mtn","hash":"63647d9320bf3928d658e1275adbfaeba88748b7","modified":1620388560672},{"_id":"public/live2d_models/nico/assets/mtn/09_yawn.mtn","hash":"e0e29a712b01be59ae8bba2e1a0d850e06260d20","modified":1620388560672},{"_id":"public/live2d_models/nico/assets/mtn/10_yeah.mtn","hash":"58c4bda1339f41fa8a7e554509a7a871bad392b8","modified":1620388560672},{"_id":"public/live2d_models/nico/assets/mtn/13_cry.mtn","hash":"27709b59d2e6cba73d69a67cadb8bf50413206a9","modified":1620388560672},{"_id":"public/live2d_models/nico/assets/mtn/12_stagger.mtn","hash":"3f1a0b25cb1b9fb150f7a9ef37e8c9ba8d4e6ba1","modified":1620388560672},{"_id":"public/live2d_models/nico/assets/mtn/14_ sigh.mtn","hash":"80c4e4f539253d86a7aa5faae2c5e5a3a7b1adcc","modified":1620388560672},{"_id":"public/live2d_models/nico/assets/mtn/18_no.mtn","hash":"9a18a2537bf6634da2bafd3a57d236de30c73b4e","modified":1620388560672},{"_id":"public/live2d_models/nico/assets/mtn/15_joy.mtn","hash":"b76a24efc57e4c2cc4abf70c293b2e800029a20d","modified":1620388560672},{"_id":"public/live2d_models/nico/assets/mtn/16_menace.mtn","hash":"6edb6b114d53d7f93cff164992db475b0b6f09c3","modified":1620388560672},{"_id":"public/live2d_models/nico/assets/mtn/17_yes.mtn","hash":"a023cc93e55b3940f1a8690dcfa7ad1cfa534fad","modified":1620388560672},{"_id":"public/live2d_models/nico/assets/mtn/19_walk.mtn","hash":"035516e8cdaa5b3c6e7524daca72294284a81126","modified":1620388560672},{"_id":"public/live2d_models/nietzsche/assets/mtn/00_idle.mtn","hash":"3686b7bfdb43f85f4fe1d94ed59379d2c4bee41d","modified":1620388560672},{"_id":"public/live2d_models/nietzsche/assets/mtn/01_happy.mtn","hash":"2020573671b39c81fbd784a8b873ebee019ca501","modified":1620388560672},{"_id":"public/live2d_models/nietzsche/assets/mtn/02_angry.mtn","hash":"f75e1f580c64695fbbf8ba3c5f49eafc7208411d","modified":1620388560672},{"_id":"public/live2d_models/nietzsche/assets/mtn/03_fear.mtn","hash":"b6cdb8fa48960b2a6e66d78ea992221e8108437b","modified":1620388560672},{"_id":"public/live2d_models/nietzsche/assets/mtn/05_fun.mtn","hash":"4b956c9c028dce753fafa1859404a136975786d4","modified":1620388560672},{"_id":"public/live2d_models/nietzsche/assets/mtn/04_surprise.mtn","hash":"4b911af06de9bc6f386aecd623851e5799edaa96","modified":1620388560672},{"_id":"public/live2d_models/nietzsche/assets/mtn/10_yeah.mtn","hash":"58c4bda1339f41fa8a7e554509a7a871bad392b8","modified":1620388560672},{"_id":"public/live2d_models/nietzsche/assets/mtn/07_bye.mtn","hash":"6a3e90e8efb64cd5b187196625a3d8915efb21c8","modified":1620388560672},{"_id":"public/live2d_models/nietzsche/assets/mtn/08_sad.mtn","hash":"63647d9320bf3928d658e1275adbfaeba88748b7","modified":1620388560672},{"_id":"public/live2d_models/nietzsche/assets/mtn/11_muscle.mtn","hash":"7d0e3466a996f8704e86913c723ac4b82f14ff47","modified":1620388560672},{"_id":"public/live2d_models/nietzsche/assets/mtn/14_ sigh.mtn","hash":"80c4e4f539253d86a7aa5faae2c5e5a3a7b1adcc","modified":1620388560672},{"_id":"public/live2d_models/nietzsche/assets/mtn/09_yawn.mtn","hash":"e0e29a712b01be59ae8bba2e1a0d850e06260d20","modified":1620388560672},{"_id":"public/live2d_models/nietzsche/assets/mtn/12_stagger.mtn","hash":"3f1a0b25cb1b9fb150f7a9ef37e8c9ba8d4e6ba1","modified":1620388560672},{"_id":"public/live2d_models/nietzsche/assets/mtn/13_cry.mtn","hash":"27709b59d2e6cba73d69a67cadb8bf50413206a9","modified":1620388560672},{"_id":"public/live2d_models/nietzsche/assets/mtn/16_menace.mtn","hash":"6edb6b114d53d7f93cff164992db475b0b6f09c3","modified":1620388560672},{"_id":"public/live2d_models/nietzsche/assets/mtn/15_joy.mtn","hash":"b76a24efc57e4c2cc4abf70c293b2e800029a20d","modified":1620388560672},{"_id":"public/live2d_models/nietzsche/assets/mtn/17_yes.mtn","hash":"a023cc93e55b3940f1a8690dcfa7ad1cfa534fad","modified":1620388560672},{"_id":"public/live2d_models/nietzsche/assets/mtn/19_walk.mtn","hash":"035516e8cdaa5b3c6e7524daca72294284a81126","modified":1620388560672},{"_id":"public/live2d_models/nietzsche/assets/mtn/20_sleep.mtn","hash":"914e4670825467e5e8d2f6983bd21c7190e57310","modified":1620388560672},{"_id":"public/live2d_models/nietzsche/assets/mtn/18_no.mtn","hash":"9a18a2537bf6634da2bafd3a57d236de30c73b4e","modified":1620388560672},{"_id":"public/live2d_models/nipsilon/assets/mtn/02_angry.mtn","hash":"f75e1f580c64695fbbf8ba3c5f49eafc7208411d","modified":1620388560672},{"_id":"public/live2d_models/nipsilon/assets/mtn/00_idle.mtn","hash":"3686b7bfdb43f85f4fe1d94ed59379d2c4bee41d","modified":1620388560672},{"_id":"public/live2d_models/nipsilon/assets/mtn/01_happy.mtn","hash":"2020573671b39c81fbd784a8b873ebee019ca501","modified":1620388560672},{"_id":"public/live2d_models/nipsilon/assets/mtn/03_fear.mtn","hash":"b6cdb8fa48960b2a6e66d78ea992221e8108437b","modified":1620388560672},{"_id":"public/live2d_models/nipsilon/assets/mtn/06_love.mtn","hash":"c9f90cc2e2be55ac9c19cf6a962330dad3833fc1","modified":1620388560672},{"_id":"public/live2d_models/nipsilon/assets/mtn/04_surprise.mtn","hash":"4b911af06de9bc6f386aecd623851e5799edaa96","modified":1620388560672},{"_id":"public/live2d_models/nipsilon/assets/mtn/05_fun.mtn","hash":"4b956c9c028dce753fafa1859404a136975786d4","modified":1620388560672},{"_id":"public/live2d_models/nipsilon/assets/mtn/07_bye.mtn","hash":"6a3e90e8efb64cd5b187196625a3d8915efb21c8","modified":1620388560672},{"_id":"public/live2d_models/nipsilon/assets/mtn/09_yawn.mtn","hash":"e0e29a712b01be59ae8bba2e1a0d850e06260d20","modified":1620388560672},{"_id":"public/live2d_models/nipsilon/assets/mtn/08_sad.mtn","hash":"63647d9320bf3928d658e1275adbfaeba88748b7","modified":1620388560672},{"_id":"public/live2d_models/nipsilon/assets/mtn/10_yeah.mtn","hash":"58c4bda1339f41fa8a7e554509a7a871bad392b8","modified":1620388560672},{"_id":"public/live2d_models/nipsilon/assets/mtn/11_muscle.mtn","hash":"7d0e3466a996f8704e86913c723ac4b82f14ff47","modified":1620388560672},{"_id":"public/live2d_models/nipsilon/assets/mtn/12_stagger.mtn","hash":"3f1a0b25cb1b9fb150f7a9ef37e8c9ba8d4e6ba1","modified":1620388560672},{"_id":"public/live2d_models/nipsilon/assets/mtn/13_cry.mtn","hash":"27709b59d2e6cba73d69a67cadb8bf50413206a9","modified":1620388560672},{"_id":"public/live2d_models/nipsilon/assets/mtn/14_ sigh.mtn","hash":"80c4e4f539253d86a7aa5faae2c5e5a3a7b1adcc","modified":1620388560672},{"_id":"public/live2d_models/nipsilon/assets/mtn/15_joy.mtn","hash":"b76a24efc57e4c2cc4abf70c293b2e800029a20d","modified":1620388560672},{"_id":"public/live2d_models/nipsilon/assets/mtn/17_yes.mtn","hash":"a023cc93e55b3940f1a8690dcfa7ad1cfa534fad","modified":1620388560672},{"_id":"public/live2d_models/nipsilon/assets/mtn/16_menace.mtn","hash":"6edb6b114d53d7f93cff164992db475b0b6f09c3","modified":1620388560672},{"_id":"public/live2d_models/nipsilon/assets/mtn/18_no.mtn","hash":"9a18a2537bf6634da2bafd3a57d236de30c73b4e","modified":1620388560672},{"_id":"public/live2d_models/nipsilon/assets/mtn/19_walk.mtn","hash":"035516e8cdaa5b3c6e7524daca72294284a81126","modified":1620388560672},{"_id":"public/live2d_models/nito/assets/mtn/00_idle.mtn","hash":"3686b7bfdb43f85f4fe1d94ed59379d2c4bee41d","modified":1620388560672},{"_id":"public/live2d_models/nito/assets/mtn/03_fear.mtn","hash":"b6cdb8fa48960b2a6e66d78ea992221e8108437b","modified":1620388560672},{"_id":"public/live2d_models/nito/assets/mtn/01_happy.mtn","hash":"2020573671b39c81fbd784a8b873ebee019ca501","modified":1620388560672},{"_id":"public/live2d_models/nito/assets/mtn/02_angry.mtn","hash":"f75e1f580c64695fbbf8ba3c5f49eafc7208411d","modified":1620388560672},{"_id":"public/live2d_models/nito/assets/mtn/04_surprise.mtn","hash":"4b911af06de9bc6f386aecd623851e5799edaa96","modified":1620388560672},{"_id":"public/live2d_models/nito/assets/mtn/06_love.mtn","hash":"c9f90cc2e2be55ac9c19cf6a962330dad3833fc1","modified":1620388560672},{"_id":"public/live2d_models/nito/assets/mtn/11_muscle.mtn","hash":"7d0e3466a996f8704e86913c723ac4b82f14ff47","modified":1620388560672},{"_id":"public/live2d_models/nito/assets/mtn/08_sad.mtn","hash":"63647d9320bf3928d658e1275adbfaeba88748b7","modified":1620388560672},{"_id":"public/live2d_models/nito/assets/mtn/05_fun.mtn","hash":"4b956c9c028dce753fafa1859404a136975786d4","modified":1620388560672},{"_id":"public/live2d_models/nito/assets/mtn/07_bye.mtn","hash":"6a3e90e8efb64cd5b187196625a3d8915efb21c8","modified":1620388560672},{"_id":"public/live2d_models/nito/assets/mtn/09_yawn.mtn","hash":"e0e29a712b01be59ae8bba2e1a0d850e06260d20","modified":1620388560672},{"_id":"public/live2d_models/nito/assets/mtn/10_yeah.mtn","hash":"58c4bda1339f41fa8a7e554509a7a871bad392b8","modified":1620388560672},{"_id":"public/live2d_models/nito/assets/mtn/15_joy.mtn","hash":"b76a24efc57e4c2cc4abf70c293b2e800029a20d","modified":1620388560672},{"_id":"public/live2d_models/nito/assets/mtn/13_cry.mtn","hash":"27709b59d2e6cba73d69a67cadb8bf50413206a9","modified":1620388560672},{"_id":"public/live2d_models/nito/assets/mtn/14_ sigh.mtn","hash":"80c4e4f539253d86a7aa5faae2c5e5a3a7b1adcc","modified":1620388560672},{"_id":"public/live2d_models/nito/assets/mtn/12_stagger.mtn","hash":"3f1a0b25cb1b9fb150f7a9ef37e8c9ba8d4e6ba1","modified":1620388560672},{"_id":"public/live2d_models/nito/assets/mtn/16_menace.mtn","hash":"6edb6b114d53d7f93cff164992db475b0b6f09c3","modified":1620388560672},{"_id":"public/live2d_models/nito/assets/mtn/20_sleep.mtn","hash":"914e4670825467e5e8d2f6983bd21c7190e57310","modified":1620388560672},{"_id":"public/live2d_models/nito/assets/mtn/17_yes.mtn","hash":"a023cc93e55b3940f1a8690dcfa7ad1cfa534fad","modified":1620388560672},{"_id":"public/live2d_models/nito/assets/mtn/19_walk.mtn","hash":"035516e8cdaa5b3c6e7524daca72294284a81126","modified":1620388560672},{"_id":"public/live2d_models/nito/assets/mtn/18_no.mtn","hash":"9a18a2537bf6634da2bafd3a57d236de30c73b4e","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/mtn/flickHead_00.mtn","hash":"f64c79c9171660db5c440bef229ac2e35a1597d5","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/mtn/flickHead_01.mtn","hash":"a1011d6bf397bcd3c3c968d9616f88fe1ffbc83c","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/mtn/idle_00.mtn","hash":"378b4577217c604c9d28ab4edf8b707c8d8c2fbb","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/mtn/flickHead_02.mtn","hash":"d3c9c0acb4dc25a2274f3b9faa71e5ce60ad92e4","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/mtn/idle_02.mtn","hash":"7f5d2cf8706007c8659938eba132a68c470a4c26","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/mtn/idle_01.mtn","hash":"88c2494655dbb712b842f03232b619f381753d52","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/mtn/pinchIn_00.mtn","hash":"70978b4c983f6a9fd6d3d9c24571586f7d6eac30","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/mtn/pinchIn_01.mtn","hash":"a5fefb45115695db72b9499e627a51b2b9394f2c","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/mtn/pinchOut_01.mtn","hash":"e05df948d08b17f34c993a9c1f901190509d5db0","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/mtn/pinchOut_00.mtn","hash":"e07fe8fd8c2810e3c1d28b730bd49c8c25849bad","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/mtn/pinchIn_02.mtn","hash":"aa0d66ca9b06c374577fd7e64e89756de1e1f2ae","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/mtn/pinchOut_02.mtn","hash":"b323fd350d334b33bbdfb31194ae664089986c27","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/mtn/shake_00.mtn","hash":"5185d02c7ab9f0bec3d4a890b54b2378e553373d","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/mtn/tapBody_02.mtn","hash":"a75acb51c1191ce5050d3ee1af6f2dcc787c7c5e","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/snd/flickHead_00.mp3","hash":"356388d939006b03cf9e6158c603b58d4800bec1","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/mtn/tapBody_01.mtn","hash":"78fca17436ab5e065e27f419f135aa6c0a0b52ef","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/mtn/shake_01.mtn","hash":"e812985a56796e122018f9d57d1606a4866ff7d1","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/mtn/shake_02.mtn","hash":"2702970805e07777974c383613e631730982bcff","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/mtn/tapBody_00.mtn","hash":"835aa3d4a8fbd26c0bb66b164a19464fa3f17a99","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/snd/flickHead_01.mp3","hash":"436d0bbccf6e7a2744447554947eee4563608970","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/snd/flickHead_02.mp3","hash":"5f63477ce63f2073e24d68fea906fe136fe6349e","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/snd/pinchIn_00.mp3","hash":"f9baa3b7cadec20b714135fc49cfab3ff6adeeb4","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/snd/pinchIn_01.mp3","hash":"d5c8cc6f61b56222a83a5174f75006f83c3b88da","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/snd/shake_01.mp3","hash":"c1e0e8a07ff268ee06c2b7825d1b645e193f21b9","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/snd/shake_00.mp3","hash":"f65dd58e7b44ec5c865d13c190316070b625b5fe","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/snd/tapBody_00.mp3","hash":"003e68a59a9c8392e230f34c91860efbd946277a","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/snd/tapBody_02.mp3","hash":"15e7815ed0a0e5164e18e0c53b97aedc742a134d","modified":1620388560672},{"_id":"public/live2d_models/tororo/assets/mtn/00_idle.mtn","hash":"b224c60e463b9f71ddbfc0c720e430496c175f4f","modified":1620388560672},{"_id":"public/live2d_models/tororo/assets/mtn/02.mtn","hash":"7eafc52edc73b7cb80ae70d34b43c6ac778fa47b","modified":1620388560672},{"_id":"public/live2d_models/tororo/assets/mtn/01.mtn","hash":"fb550833ae22c9954c3e01df37ed29b2d61700f2","modified":1620388560672},{"_id":"public/live2d_models/tororo/assets/mtn/03.mtn","hash":"f900737c7a98441cbb2e05255427e6260e19ae68","modified":1620388560672},{"_id":"public/live2d_models/tororo/assets/mtn/07.mtn","hash":"b7f2e3a9fa4f3ffbb6e64a08f8d9f45ca1868ffb","modified":1620388560672},{"_id":"public/live2d_models/tororo/assets/mtn/06.mtn","hash":"ad404bd852d276cdd3d054c953e23f90e4e45ae1","modified":1620388560672},{"_id":"public/live2d_models/tororo/assets/mtn/04.mtn","hash":"c7a25d3c5d783639bae18db2f3cd284b819c3c85","modified":1620388560672},{"_id":"public/live2d_models/tororo/assets/mtn/05.mtn","hash":"dd20ad24b5d1830a5d44b9bccb28f922eea5e0e5","modified":1620388560672},{"_id":"public/live2d_models/tororo/assets/mtn/08.mtn","hash":"4411c7651ff65195b113d95e7d5ebef8a59a37d9","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/mtn/P01.mtn","hash":"4b6d266d9fe31e01c4e13ac2049435b5d70b5589","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_01_df.mtn","hash":"4b008605c2f61f37fd295d929df8b51e9f1f447e","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_idle_01.mtn","hash":"dd178b1cb3817bd2d7e6f56f25daf3ffacd4afdd","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_02.mtn","hash":"43f73acf0ec68e5ddda2fb212b3bd62b4ec63829","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_04.mtn","hash":"b6395b5acb2136c8265f37483cfe60b4a1bfb66d","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_01.mtn","hash":"b1b0e2237926a52970703bcfdd5cf6bb6fc39248","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_05.mtn","hash":"c118b3bcbf03d0cc07c9f6a2a8e8c495f07f4091","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_03.mtn","hash":"bbd6a2cbe87dea113024d9d953bb42864cad31a5","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_08.mtn","hash":"98768aafeb239e75f788969eb995adbe7a89bc3f","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_06.mtn","hash":"2641628ced0c982f214242744da73f1ab048c078","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_10.mtn","hash":"8e6d0609ae64f8dd4db0e5e85addbc677fac3a79","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_07.mtn","hash":"ec5da8fb40ff26dc3e9f306cade5f4bfc2f15642","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_09.mtn","hash":"c4f3635225ba606873a7c14cc91bf5a28a2afa95","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_14.mtn","hash":"2480493fffb4fd8135ef1e88c5f717952b7d6542","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_13.mtn","hash":"d20d09dfbdf42d13240c45f9d2fa4474a4541dd8","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_15.mtn","hash":"4fa8d8667c41cd5b3c49cf4bdd8b36cf0a9158b9","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_17.mtn","hash":"6346ebcf76b0780987f552b16c4c62c39732597f","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_21.mtn","hash":"bd917f60537e4e9037c85bf356d4c25e75e2807c","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_16.mtn","hash":"03843599008ab2ee23d9d03174924609ad042ce6","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_18.mtn","hash":"34fbff31238e9b6a541f5f03a00bec5cbcec6649","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_19.mtn","hash":"685fc0130899e903d9c9433ec1c1a987323d6c8c","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_20.mtn","hash":"076ca7be2c81e776794245a3865478b20428e416","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_22.mtn","hash":"0fb02e4734ab8c455e1405dfed9546af583595ae","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_23.mtn","hash":"d5a156e295e575c615b673350c025e3270afee8e","modified":1620388560672},{"_id":"public/live2d_models/unitychan/assets/mtn/idle_01.mtn","hash":"e38a7dcfcad059b695f935b2071a1270c1ddf905","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_24.mtn","hash":"696502793e9917abc495645be784262e3b997bde","modified":1620388560672},{"_id":"public/live2d_models/unitychan/assets/mtn/idle_02.mtn","hash":"8c3929962a4991c94bf7aeaf33169d61ccaccb2c","modified":1620388560672},{"_id":"public/live2d_models/unitychan/assets/mtn/m_01.mtn","hash":"97d08b57c3b07a854f69cdef3ce6d13a2b2ece1c","modified":1620388560672},{"_id":"public/live2d_models/unitychan/assets/mtn/m_02.mtn","hash":"a4dd9580452854f6adc7b30e9e85702a7641179c","modified":1620388560672},{"_id":"public/live2d_models/unitychan/assets/mtn/m_03.mtn","hash":"dd140c6c4702f3fbd785a85a4d5d8cfa32b9bc32","modified":1620388560672},{"_id":"public/live2d_models/unitychan/assets/mtn/m_04.mtn","hash":"32f8515854a89878c5becbabf56dabd4c675d437","modified":1620388560672},{"_id":"public/live2d_models/unitychan/assets/mtn/m_05.mtn","hash":"ca1f068a2c9c56519e4306115b95d1f497f31124","modified":1620388560672},{"_id":"public/live2d_models/unitychan/assets/mtn/m_08.mtn","hash":"fbd6ae1967446a421d8505a8d29d5f7f64b5c0d7","modified":1620388560672},{"_id":"public/live2d_models/unitychan/assets/mtn/m_06.mtn","hash":"cb16f119956346e4b15a1c432491423893cf2389","modified":1620388560672},{"_id":"public/live2d_models/unitychan/assets/mtn/m_07.mtn","hash":"35caceb556d9bb4fc2a5ed4f8c51d766a6e70405","modified":1620388560672},{"_id":"public/live2d_models/unitychan/assets/mtn/m_10.mtn","hash":"837f0cda82543d87c12108957a16e482964f3796","modified":1620388560672},{"_id":"public/live2d_models/unitychan/assets/mtn/m_09.mtn","hash":"4b942bfbde2a82f19bb4aab7e54e3caae9691da6","modified":1620388560672},{"_id":"public/live2d_models/unitychan/assets/mtn/m_11.mtn","hash":"2c5ec476b9e3246d8c7a5ae4611401d3420cfa1e","modified":1620388560672},{"_id":"public/live2d_models/unitychan/assets/mtn/m_12.mtn","hash":"90e96587969b78785c16cdffbdbe0b220cac39b7","modified":1620388560672},{"_id":"public/live2d_models/unitychan/assets/mtn/m_13.mtn","hash":"f08d7f660fda4029fec2acb1f1389f855b5d1b96","modified":1620388560672},{"_id":"public/live2d_models/unitychan/assets/mtn/m_14.mtn","hash":"4c5c7fdc05237a090341d4690bd7e07344728e9e","modified":1620388560672},{"_id":"public/live2d_models/wanko/assets/mtn/idle_01.mtn","hash":"908abce18f6cf7fd4bc1486f048c25a517f4a34a","modified":1620388560672},{"_id":"public/live2d_models/wanko/assets/mtn/idle_02.mtn","hash":"865874c50848fbc9a55011391531e2ec171c9b91","modified":1620388560672},{"_id":"public/live2d_models/wanko/assets/mtn/idle_03.mtn","hash":"84684914ebf5dc5b2df160338bb97dcc0a978476","modified":1620388560672},{"_id":"public/live2d_models/wanko/assets/mtn/shake_02.mtn","hash":"7b6c914f6c33450eda2e53d9b638fd7045c0f683","modified":1620388560672},{"_id":"public/live2d_models/wanko/assets/mtn/idle_04.mtn","hash":"78e22091792abb0600f724a5dfd60371257954e8","modified":1620388560672},{"_id":"public/live2d_models/wanko/assets/mtn/shake_01.mtn","hash":"dffc54733127832f8f5e91aced55a83da58fa215","modified":1620388560672},{"_id":"public/live2d_models/wanko/assets/mtn/touch_01.mtn","hash":"99270ea8fe1f8f5d88eadb94f36bd0810009d1e6","modified":1620388560672},{"_id":"public/live2d_models/wanko/assets/mtn/touch_02.mtn","hash":"4d1f099fbd18d15c598a644227ed5bf942a2ba71","modified":1620388560672},{"_id":"public/live2d_models/wanko/assets/mtn/touch_05.mtn","hash":"9610bb8a937ba9b11445a3894d8cc0733a2b67e5","modified":1620388560672},{"_id":"public/live2d_models/wanko/assets/mtn/touch_03.mtn","hash":"9c394975083915f0f3786caff1762381348b041e","modified":1620388560672},{"_id":"public/live2d_models/wanko/assets/mtn/touch_04.mtn","hash":"8d2302cfdaec698e575048797ff4f30ae4d202de","modified":1620388560672},{"_id":"public/live2d_models/wanko/assets/mtn/touch_06.mtn","hash":"feb9237c73f2045ed1704c01b5362c9a54ee5a18","modified":1620388560672},{"_id":"public/live2d_models/z16/assets/mtn/idle.mtn","hash":"f6b879d9f1d096509a7edbc971b8fdd9697932e9","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/mtn/flickHead_00.mtn","hash":"66577f6dde2bec905930fba0dd5f06de939c8f1e","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/mtn/idle_00.mtn","hash":"bbaaafe4de159dd4fb73d137d283c640d3fede53","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/mtn/idle_01.mtn","hash":"035c196f276ed177239ea05eeaece68b0fda2935","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/mtn/pinchOut_00.mtn","hash":"db831991287e3a4724578f068a68e48168081d5a","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/mtn/pinchIn_00.mtn","hash":"ed792ed8226aa5a3e5bf059285b2c95855c11303","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/mtn/idle_02.mtn","hash":"82291b3b78339d52f559a65d02b78e0b30180503","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/mtn/shake_00.mtn","hash":"7e938c4abe83273766c4562a571301811dea1de6","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/mtn/tapBody_03.mtn","hash":"fcd573576112ad5f4e4b7dc0b750de79f150f971","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/mtn/tapBody_00.mtn","hash":"4041b2f1f2f4a84454180f9dab14e46d99e135c0","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/mtn/tapBody_01.mtn","hash":"91fbfe1870f7a0a5f5fdb87c213c41b2a8cb5648","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/mtn/tapBody_02.mtn","hash":"e93a2163cbb85525338e11a520e317329b11fb65","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/mtn/tapBody_05.mtn","hash":"5f48e50e938f98636519c370745a39b921907719","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/mtn/tapBody_06.mtn","hash":"3d06ac66c04eb12c64d36551dd85389f0b0ee51f","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/mtn/tapBody_07.mtn","hash":"d299747aaf27377d552ef1f8b4fce9871a65c37d","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/mtn/tapBody_04.mtn","hash":"557811c5f4ddbd393542366ef95794b19fc60387","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/mtn/tapBody_08.mtn","hash":"64a03a904d701039bf81e1296ee79537c2e8800e","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/mtn/tapBody_09.mtn","hash":"4f50c17dcf352995e51a4d462b9ca7a9e9197d5c","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/snd/flickHead_00.mp3","hash":"0b447e7e38eb20f3f7e8ba2a5ea5f521f6e37a26","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/snd/pinchIn_00.mp3","hash":"d143662d2c8cfb1150f719d3d55c75d454535690","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/snd/pinchOut_00.mp3","hash":"6872da79e1b515b2c996eecee4ca150e22aa48c0","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/snd/shake_00.mp3","hash":"28b245865f200b61cb009dfbd3811d9e9b0748fb","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/snd/tapBody_00.mp3","hash":"23c998ca4549b7908aef029d28b6ae22cbfcdc82","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/snd/tapBody_01.mp3","hash":"d3d5607dbe394225e2ee858531b7767f567c4e10","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/snd/tapBody_02.mp3","hash":"be111df9ecd006e992f94cb4280c2b66d9cd23ed","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/snd/flickHead_00.mp3","hash":"0b447e7e38eb20f3f7e8ba2a5ea5f521f6e37a26","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/snd/pinchIn_00.mp3","hash":"d143662d2c8cfb1150f719d3d55c75d454535690","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/snd/pinchOut_00.mp3","hash":"6872da79e1b515b2c996eecee4ca150e22aa48c0","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/snd/tapBody_02.mp3","hash":"be111df9ecd006e992f94cb4280c2b66d9cd23ed","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/snd/shake_00.mp3","hash":"28b245865f200b61cb009dfbd3811d9e9b0748fb","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/snd/tapBody_00.mp3","hash":"23c998ca4549b7908aef029d28b6ae22cbfcdc82","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/snd/tapBody_01.mp3","hash":"d3d5607dbe394225e2ee858531b7767f567c4e10","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/mtn/flickHead_00.mtn","hash":"66577f6dde2bec905930fba0dd5f06de939c8f1e","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/mtn/idle_01.mtn","hash":"035c196f276ed177239ea05eeaece68b0fda2935","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/mtn/idle_00.mtn","hash":"bbaaafe4de159dd4fb73d137d283c640d3fede53","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/mtn/pinchOut_00.mtn","hash":"db831991287e3a4724578f068a68e48168081d5a","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/mtn/pinchIn_00.mtn","hash":"ed792ed8226aa5a3e5bf059285b2c95855c11303","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/mtn/tapBody_00.mtn","hash":"4041b2f1f2f4a84454180f9dab14e46d99e135c0","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/mtn/idle_02.mtn","hash":"82291b3b78339d52f559a65d02b78e0b30180503","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/mtn/shake_00.mtn","hash":"7e938c4abe83273766c4562a571301811dea1de6","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/mtn/tapBody_02.mtn","hash":"e93a2163cbb85525338e11a520e317329b11fb65","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/mtn/tapBody_01.mtn","hash":"91fbfe1870f7a0a5f5fdb87c213c41b2a8cb5648","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/mtn/tapBody_03.mtn","hash":"fcd573576112ad5f4e4b7dc0b750de79f150f971","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/mtn/tapBody_05.mtn","hash":"5f48e50e938f98636519c370745a39b921907719","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/mtn/tapBody_04.mtn","hash":"557811c5f4ddbd393542366ef95794b19fc60387","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/mtn/tapBody_06.mtn","hash":"3d06ac66c04eb12c64d36551dd85389f0b0ee51f","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/mtn/tapBody_07.mtn","hash":"d299747aaf27377d552ef1f8b4fce9871a65c37d","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/mtn/tapBody_08.mtn","hash":"64a03a904d701039bf81e1296ee79537c2e8800e","modified":1620388560672},{"_id":"public/live2d_models/z16/assets/moc/z16.512/texture_00.png","hash":"251b9f944fb1575c01a62b8a9d7522fe76954b3b","modified":1620388560672},{"_id":"public/live2d_models/z16/assets/moc/z16.256/texture_00.png","hash":"19f22619c246067d519aa1e6e477497cc4342414","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/mtn/tapBody_09.mtn","hash":"4f50c17dcf352995e51a4d462b9ca7a9e9197d5c","modified":1620388560672},{"_id":"public/img/alipay.jpg","hash":"bda816152f1d7e5e52755a079d196850e62d6c97","modified":1620388560672},{"_id":"public/lib/gitment.js.bak","hash":"ded86ac10cc79a7d28e2ea44778e792cef6c3470","modified":1620388560672},{"_id":"public/plugins/live2d-widget.js/L2Dwidget.min.js.map","hash":"75322ae0754f0580c0fb5ce9176ab72ce4009903","modified":1620388560672},{"_id":"public/live2d_models/gf/assets/mtn/A_05.mtn","hash":"40ad1e684108035c6478b76c9e4e1953104725da","modified":1620388560672},{"_id":"public/live2d_models/hibiki/assets/snd/hibiki_04.mp3","hash":"57d76906838b186bee2d47f768e54ac18e44d472","modified":1620388560672},{"_id":"public/live2d_models/hibiki/assets/snd/hibiki_05.mp3","hash":"e8788bb9e92467e21933ac2140114a21b9ad215a","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/snd/izumi_06.mp3","hash":"f39ee4b85ed9877100c028bf938a9a8fd0d2cb6b","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/snd/izumi_07.mp3","hash":"0c13c0096d02ceb37b3bcce085206b5d6d8ae834","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/snd/izumi_09.mp3","hash":"f7bce48ee99bdad6fa187c484872eafce0b0e351","modified":1620388560672},{"_id":"public/live2d_models/ni-j/assets/mtn/07_bye.mtn","hash":"6a3e90e8efb64cd5b187196625a3d8915efb21c8","modified":1620388560672},{"_id":"public/live2d_models/ni-j/assets/mtn/13_cry.mtn","hash":"27709b59d2e6cba73d69a67cadb8bf50413206a9","modified":1620388560672},{"_id":"public/live2d_models/ni-j/assets/mtn/14_ sigh.mtn","hash":"80c4e4f539253d86a7aa5faae2c5e5a3a7b1adcc","modified":1620388560672},{"_id":"public/live2d_models/ni-j/assets/mtn/20_sleep.mtn","hash":"914e4670825467e5e8d2f6983bd21c7190e57310","modified":1620388560672},{"_id":"public/live2d_models/nico/assets/mtn/20_sleep.mtn","hash":"914e4670825467e5e8d2f6983bd21c7190e57310","modified":1620388560672},{"_id":"public/live2d_models/nietzsche/assets/mtn/06_love.mtn","hash":"c9f90cc2e2be55ac9c19cf6a962330dad3833fc1","modified":1620388560672},{"_id":"public/live2d_models/nipsilon/assets/mtn/20_sleep.mtn","hash":"914e4670825467e5e8d2f6983bd21c7190e57310","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/snd/pinchIn_02.mp3","hash":"5b63e02607571ac601c500995e836e6c861b1c62","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/snd/pinchOut_00.mp3","hash":"0654f38f6e9fd623eaf8be11b5d58c9d12991949","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/snd/pinchOut_01.mp3","hash":"8a081030fd53c07bffe3edd48f87a371ca77296b","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/snd/shake_02.mp3","hash":"8882b94bce00f09232588b7301badb105fa8acab","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/snd/tapBody_01.mp3","hash":"5314b50f153df71559e51e2586581c006df00722","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/snd/pinchOut_02.mp3","hash":"554edb2f3838cbdc27d1a9c6b8a9cb6eb465cbdd","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_11.mtn","hash":"63b0adf0414ebad9a3bec91417629d983c546975","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_12.mtn","hash":"b68b20df9b695e0d7ac93a5865097b27c3123f21","modified":1620388560672},{"_id":"public/live2d_models/wanko/assets/moc/wanko.moc","hash":"7b188cd4dcddfe5bdba8ec51a65cb1c21cd2e57a","modified":1620388560672},{"_id":"public/live2d_models/z16/assets/moc/z16.moc","hash":"6b0241e80e94664d694b43ad05333960de2550c1","modified":1620388560672},{"_id":"public/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_04.png","hash":"2c63a9622a875fea1abcdb9ef437b64556090d22","modified":1620388560672},{"_id":"public/live2d_models/ni-j/assets/moc/ni-j.2048/texture_00.png","hash":"413695bc00193e587b85c944df11d721192dd9a0","modified":1620388560672},{"_id":"public/live2d_models/nico/assets/moc/nico.2048/texture_02.png","hash":"8e4a632c61506e3cc07d8ba704aa4ec2567fe11b","modified":1620388560672},{"_id":"public/live2d_models/nico/assets/moc/nico.2048/texture_00.png","hash":"413695bc00193e587b85c944df11d721192dd9a0","modified":1620388560672},{"_id":"public/live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_00.png","hash":"413695bc00193e587b85c944df11d721192dd9a0","modified":1620388560672},{"_id":"public/live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_01.png","hash":"413695bc00193e587b85c944df11d721192dd9a0","modified":1620388560672},{"_id":"public/live2d_models/nito/assets/moc/nito.2048/texture_01.png","hash":"413695bc00193e587b85c944df11d721192dd9a0","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/moc/shizuku.1024/texture_00.png","hash":"21bdb28b31783e23b26b3aa061e90be4088665aa","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/moc/shizuku.1024/texture_03.png","hash":"07f568a2bb8045b6bdff7783fb4daf62c821f9ab","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/moc/shizuku.1024/texture_05.png","hash":"0cd00007fb8bff62a2eb08e1d7c43abab8722224","modified":1620388560672},{"_id":"public/live2d_models/wanko/assets/moc/wanko.1024/texture_00.png","hash":"c405c1eeb82bcced7aa7a20f04a76168f60ad561","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/moc/haru01.1024/texture_00.png","hash":"f3c4103630bbf0660f793f90a14b51fdb7dfb7ea","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/moc/haru01.1024/texture_01.png","hash":"dd05d6b7f8f0d0c167b040f41ffd7c10a3747d96","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/moc/haru01.1024/texture_02.png","hash":"6a1e0b336da79557325da9f58a69a380d67ecbb1","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/moc/haru02.1024/texture_01.png","hash":"dd05d6b7f8f0d0c167b040f41ffd7c10a3747d96","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/moc/haru02.1024/texture_00.png","hash":"f3c4103630bbf0660f793f90a14b51fdb7dfb7ea","modified":1620388560672},{"_id":"public/img/weixin.png","hash":"3ad8925d382e7cb5599b827b1b8793bcaefb2a1f","modified":1620388560672},{"_id":"public/lib/gitment.js.bak2","hash":"8065a9364e25414c6a37d4be181f1c6052c4d590","modified":1620388560672},{"_id":"public/live2d_models/epsilon2_1/assets/moc/Epsilon2.1.moc","hash":"2148649bde741b6e1557c0ea3c076e5ce5a23632","modified":1620388560672},{"_id":"public/live2d_models/hibiki/assets/moc/hibiki.moc","hash":"deff9b550df1e2dc47a57f1099e46de6737a0ec6","modified":1620388560672},{"_id":"public/live2d_models/unitychan/assets/moc/unitychan.moc","hash":"94047b7bb9a99f43ab4dbe5b013a8fb9de854086","modified":1620388560672},{"_id":"public/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_06.png","hash":"e04b38575cb49bf538d98d0bcc642be4eaf89f73","modified":1620388560672},{"_id":"public/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_03.png","hash":"80f11d03197912296cd27ce7f59f490336396309","modified":1620388560672},{"_id":"public/live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_01.png","hash":"fc5a8b833e1b089808e893158a71b8597161fda0","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/moc/shizuku.1024/texture_01.png","hash":"3d0e745f3e560071ee08beeecde186e5ea35d99e","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/moc/shizuku.1024/texture_04.png","hash":"f764d594841905db8b2998dd61c329866125ad97","modified":1620388560672},{"_id":"public/live2d_models/unitychan/assets/moc/unitychan.2048/texture_00.png","hash":"2268ef1522ce750bb63f59a6bd1022c8c531e307","modified":1620388560672},{"_id":"public/live2d_models/z16/assets/moc/z16.1024/texture_00.png","hash":"c4f7c067d7d37601490554438ab801fce1feb92d","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/moc/haru02.1024/texture_02.png","hash":"df02ff8355fca1389bbed5153dc1dadd8cd1c704","modified":1620388560672},{"_id":"public/baidu_verify_code-DKptWBbgP9.html","hash":"34d1d7847f24e014fac17bc9cb450ce9d690db48","modified":1620388560672},{"_id":"public/lib/busuanzi.pure.js","hash":"f54c44e2b30e551540b83640dd8c5ff266e157d5","modified":1620388560672},{"_id":"public/lib/default.css","hash":"c9c344d5c98cc90b5583865e71726bab1046cdeb","modified":1620388560672},{"_id":"public/lib/clickLove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1620388560672},{"_id":"public/lib/gitment.css","hash":"cb2e0be2c7ebbcc3e756340c811864115bf0ec56","modified":1620388560672},{"_id":"public/lib/oauthcallback.browser.js","hash":"989b9e2638336461a9911ebf60e9a839819dd11f","modified":1620388560672},{"_id":"public/lib/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1620388560672},{"_id":"public/lib/snow.js","hash":"12ed5d697aa8a337064a1827ea94c0652c36b4e5","modified":1620388560672},{"_id":"public/live2d_models/chitose/package-lock.json","hash":"81416d5dc6eb73844dc5d23620d2d8926cf2cc16","modified":1620388560672},{"_id":"public/live2d_models/chitose/package.json","hash":"c5b1696877925757a369dde0b66ae857a184a1a3","modified":1620388560672},{"_id":"public/live2d_models/epsilon2_1/package.json","hash":"183bc1baa9ba97b40a74799a66a215665a8313c7","modified":1620388560672},{"_id":"public/live2d_models/gf/package-lock.json","hash":"a69cde4811a9868b17ecc5c30cd109a8dac31517","modified":1620388560672},{"_id":"public/live2d_models/gf/package.json","hash":"7db5654fd135fa7983df40d88969ad29a5ffb17d","modified":1620388560672},{"_id":"public/live2d_models/haru/package-lock.json","hash":"a7ec24dfd1ac820792945d002f940ac148e38f1d","modified":1620388560672},{"_id":"public/live2d_models/haru/package.json","hash":"db61eea30ab8ec7d54954006f80d2699cb9725ec","modified":1620388560672},{"_id":"public/live2d_models/haruto/package-lock.json","hash":"67e0274fdd53300f873656c9464cb1ee1f41cfe6","modified":1620388560672},{"_id":"public/live2d_models/haruto/package.json","hash":"c80910992505ea994a619b4a89423558e1b7892c","modified":1620388560672},{"_id":"public/live2d_models/hibiki/package.json","hash":"cf6af2a7188ed72fcbffbff207e000fa3f8a482f","modified":1620388560672},{"_id":"public/live2d_models/hibiki/package-lock.json","hash":"81a0982aba92efdbd98f9b5203319385aa3cad52","modified":1620388560672},{"_id":"public/live2d_models/hijiki/package.json","hash":"8f82d1cf92106d059f3a619910e5cc83bb6044d0","modified":1620388560672},{"_id":"public/live2d_models/izumi/package-lock.json","hash":"0e18be77e558654ef7eb84ac037226c6a2fc1e58","modified":1620388560672},{"_id":"public/live2d_models/izumi/package.json","hash":"2a15a868b8fbbf50a975ab23063585f0ece7f206","modified":1620388560672},{"_id":"public/live2d_models/koharu/package-lock.json","hash":"5ee7591c194c1f8c89dfe437863cd0a6b161f832","modified":1620388560672},{"_id":"public/live2d_models/koharu/package.json","hash":"4d7cb22cf4e1449b0babd18189a8dc1eb1ee9e0e","modified":1620388560672},{"_id":"public/live2d_models/miku/package-lock.json","hash":"ec31a7cc0e536e3c79d392a89674018ce2a3c488","modified":1620388560672},{"_id":"public/live2d_models/hijiki/package-lock.json","hash":"985ee74389f276692c88f3b039fcc632dc73819d","modified":1620388560672},{"_id":"public/live2d_models/miku/package.json","hash":"057f45aa125f0a95be51ba828d3e12a61058ee73","modified":1620388560672},{"_id":"public/live2d_models/ni-j/package-lock.json","hash":"2e6c14a3f4167e5de16492b0e8cbd6f9b5bc09e7","modified":1620388560672},{"_id":"public/live2d_models/ni-j/package.json","hash":"b1ca7b43b45ee03b4dfbaeded741b6edf9e1523b","modified":1620388560672},{"_id":"public/live2d_models/nico/package-lock.json","hash":"6ebcc37f9661edd9b03d4922cc6bdfe66d90e765","modified":1620388560672},{"_id":"public/live2d_models/nico/package.json","hash":"e9cdb3b41566fb453b0e38e7763cfbc36a8c9241","modified":1620388560672},{"_id":"public/live2d_models/epsilon2_1/package-lock.json","hash":"dcd7a1d062ac78cbc821b0aed14a5888f6ac6c66","modified":1620388560672},{"_id":"public/live2d_models/nietzsche/package.json","hash":"d89fe315b6a1b547c15eeef6ad5bbf38458f1bb6","modified":1620388560672},{"_id":"public/live2d_models/nipsilon/package-lock.json","hash":"afb471ff865ae1327beae650bfe0a602ad27a92a","modified":1620388560672},{"_id":"public/live2d_models/nipsilon/package.json","hash":"6b10ad8d148e29876559e9bf3dbfac3998f55c92","modified":1620388560672},{"_id":"public/live2d_models/nietzsche/package-lock.json","hash":"0ddcbcd20431260f3e25b3f1ee758357ef934cc5","modified":1620388560672},{"_id":"public/live2d_models/nito/package-lock.json","hash":"caf6080b25844aa44cb51dae30fb34691793eb07","modified":1620388560672},{"_id":"public/live2d_models/nito/package.json","hash":"09493580a6cd62f46859babec6c9f13dc617d4ea","modified":1620388560672},{"_id":"public/live2d_models/shizuku/package-lock.json","hash":"7a70380a9b50f5b7374fcf07af2fc8e59205e8d8","modified":1620388560672},{"_id":"public/live2d_models/shizuku/package.json","hash":"9ace1963033ab9a396ff7b8c90de4c8c48b51c0d","modified":1620388560672},{"_id":"public/live2d_models/tororo/package-lock.json","hash":"adca3b14a22758a9b5d6d392354a9916a4283505","modified":1620388560672},{"_id":"public/live2d_models/tororo/package.json","hash":"68f3ec7e366ec1c7c58112acb04a75ffc3feca58","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/package-lock.json","hash":"d96d7121a59557be2bad97237e784fbdb01d7096","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/package.json","hash":"baed56b3f5f732adb02aca10859687dcaf0faffc","modified":1620388560672},{"_id":"public/live2d_models/unitychan/package-lock.json","hash":"edb139e5fe6b99dbe2061533da424fef16c2a89d","modified":1620388560672},{"_id":"public/live2d_models/unitychan/package.json","hash":"fbd004c83803cc378e30a4dd4b942950add8dc5a","modified":1620388560672},{"_id":"public/live2d_models/wanko/package-lock.json","hash":"121d859582cd7a7cadec5ad7391d74461b179128","modified":1620388560672},{"_id":"public/live2d_models/wanko/package.json","hash":"2bca16153b313e3582df1438cf4bad8a9c8ffd16","modified":1620388560672},{"_id":"public/live2d_models/z16/package-lock.json","hash":"f3d9457756272106295c1b7b15b0cd65590aaf43","modified":1620388560672},{"_id":"public/live2d_models/z16/package.json","hash":"25eb264b356de9f58c7b068b601b292ed3950864","modified":1620388560672},{"_id":"public/plugins/TweenMax/HoverImg.js","hash":"ecc51aed76c22ca181870d4ba47765c0598e3a1b","modified":1620388560672},{"_id":"public/plugins/TweenMax/charming.min.js","hash":"0b11f943ec562c9031be07203058650eee74d73d","modified":1620388560672},{"_id":"public/plugins/activate-power-mode/activate-power-mode.js","hash":"8161c7d2b8fd7fa407db3c3429edd8d19f82ae81","modified":1620388560672},{"_id":"public/plugins/live2d-widget.js/manifest.json","hash":"d3c86ddfd62f3560e306910369745116005f3892","modified":1620388560672},{"_id":"public/plugins/ribbon.js/ribbon.js","hash":"65b1a8f12d04b15d7ed6eeb9d11dec760a799c5f","modified":1620388560672},{"_id":"public/plugins/ribbon.js/ribbon.min.js","hash":"3c8e4d717ca107f3723def1795c8ed62a5f1a8d0","modified":1620388560672},{"_id":"public/live2d_models/chitose/assets/chitose.model.json","hash":"a9b9986e72b8245f036f6ada876b84a3986c4218","modified":1620388560672},{"_id":"public/live2d_models/chitose/assets/chitose.physics.json","hash":"5ff4acbc4cf23a7f2ff211f50e53df6f6b7c0995","modified":1620388560672},{"_id":"public/live2d_models/chitose/assets/chitose.pose.json","hash":"52f9b579ca15b4b2dc4c5fa71172472dd6924264","modified":1620388560672},{"_id":"public/live2d_models/epsilon2_1/assets/Epsilon2.1.model.json","hash":"a47e7d1fd76d5a90d383fa049295c1cdd1546845","modified":1620388560672},{"_id":"public/live2d_models/gf/assets/Gantzert_Felixander.model.json","hash":"d5caeb1c758088ff03bc190cd8dcee98e6e02392","modified":1620388560672},{"_id":"public/live2d_models/epsilon2_1/assets/Epsilon2.1.physics.json","hash":"bbf1a8cb496831fbf9715d8431b82fffc9f89257","modified":1620388560672},{"_id":"public/live2d_models/haruto/assets/haruto.model.json","hash":"76f915f7edbd9c47df0ca041dddb151c0c93a2bf","modified":1620388560672},{"_id":"public/live2d_models/haruto/assets/haruto.physics.json","hash":"2fbf886979212357ba293bd35884f2cb5b26b6a6","modified":1620388560672},{"_id":"public/live2d_models/hibiki/assets/hibiki.model.json","hash":"73bbc0004fc21039452f80dc6dc3c287723aedc4","modified":1620388560672},{"_id":"public/live2d_models/hibiki/assets/hibiki.physics.json","hash":"ba100c7a8c3fc777d05f41e3371d18c457febfa7","modified":1620388560672},{"_id":"public/live2d_models/hijiki/assets/hijiki.model.json","hash":"feff43bf7498d213982c3736c2c029664e4bcbd2","modified":1620388560672},{"_id":"public/live2d_models/hijiki/assets/hijiki.pose.json","hash":"81438bf69b32c7c11e311b4fe043730cdc7b7ec2","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/izumi.physics.json","hash":"cee4a6e1c8ec3e1c2bfc8028ff49dc9c34c06258","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/izumi.model.json","hash":"3ba8caa98a3af7b09d7a79419a691f543a1e3ea4","modified":1620388560672},{"_id":"public/live2d_models/koharu/assets/koharu.physics.json","hash":"2fbf886979212357ba293bd35884f2cb5b26b6a6","modified":1620388560672},{"_id":"public/live2d_models/koharu/assets/koharu.model.json","hash":"ceccdefd776b7c9475a29cff0842796e4f58b7e9","modified":1620388560672},{"_id":"public/live2d_models/miku/assets/miku.physics.json","hash":"d5ca7f215044ba5bf1cdb8045a5c99b64ec258ce","modified":1620388560672},{"_id":"public/live2d_models/miku/assets/miku.model.json","hash":"32e49dfc6cb4d9c537453bb083aab39ed708c476","modified":1620388560672},{"_id":"public/live2d_models/ni-j/assets/ni-j.model.json","hash":"3c77e66d6436136bf50d5fdbc8ee8cd543a35e01","modified":1620388560672},{"_id":"public/live2d_models/ni-j/assets/ni-j.physics.json","hash":"ef2dd194f934f129f5f4db7785a9c7b7e45671ff","modified":1620388560672},{"_id":"public/live2d_models/ni-j/assets/ni-j.pose.json","hash":"a8c949d20eebf1e716a495bf806b2eccff62a925","modified":1620388560672},{"_id":"public/live2d_models/nico/assets/nico.model.json","hash":"9f007936f4748e80a1da60ca078daed595acffee","modified":1620388560672},{"_id":"public/live2d_models/nico/assets/nico.pose.json","hash":"a8c949d20eebf1e716a495bf806b2eccff62a925","modified":1620388560672},{"_id":"public/live2d_models/nico/assets/nico.physics.json","hash":"1db72a0413771e14d74de955af728224318e91d1","modified":1620388560672},{"_id":"public/live2d_models/nietzsche/assets/nietzche.model.json","hash":"4f8fb457ddf9b0aa930cbcd4a3258ccdbf9e7506","modified":1620388560672},{"_id":"public/live2d_models/nietzsche/assets/nietzsche.physics.json","hash":"5e83e055f99be8c8752fdcad30f9ed043111b83b","modified":1620388560672},{"_id":"public/live2d_models/nietzsche/assets/nietzsche.pose.json","hash":"a8c949d20eebf1e716a495bf806b2eccff62a925","modified":1620388560672},{"_id":"public/live2d_models/nipsilon/assets/nipsilon.model.json","hash":"271e40dfe9c04c8b5f5e4c6a9aa4f7ee6c65cff9","modified":1620388560672},{"_id":"public/live2d_models/nipsilon/assets/nipsilon.physics.json","hash":"5e83e055f99be8c8752fdcad30f9ed043111b83b","modified":1620388560672},{"_id":"public/live2d_models/nipsilon/assets/nipsilon.pose.json","hash":"a8c949d20eebf1e716a495bf806b2eccff62a925","modified":1620388560672},{"_id":"public/live2d_models/nito/assets/nito.model.json","hash":"7d7930d1fc8114ae0e694624db457612dca64814","modified":1620388560672},{"_id":"public/live2d_models/nito/assets/nito.physics.json","hash":"27db548eec3c5f3c71330e675b3f602cd86f2242","modified":1620388560672},{"_id":"public/live2d_models/nito/assets/nito.pose.json","hash":"a8c949d20eebf1e716a495bf806b2eccff62a925","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/shizuku.model.json","hash":"19a05bd41b806a935cea42c2000626fc82da2536","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/shizuku.physics.json","hash":"6484d646e79a44c83784c6ae434cf7349746c5c8","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/shizuku.pose.json","hash":"ac5505efbf80ba0a2e5783d67fe232bc5c6f1f80","modified":1620388560672},{"_id":"public/live2d_models/tororo/assets/tororo.model.json","hash":"3b96ea33460642d288c98327444966d93a0c11ba","modified":1620388560672},{"_id":"public/live2d_models/tororo/assets/tororo.pose.json","hash":"81438bf69b32c7c11e311b4fe043730cdc7b7ec2","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/tsumiki.model.json","hash":"3d5d18ccaf9dc5d4bb42e1c6c3a3d8d89b55524b","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/tsumiki.physics.json","hash":"737f5ef200fd8d33b75bf19176dcff311591bd8f","modified":1620388560672},{"_id":"public/live2d_models/unitychan/assets/unitychan.model.json","hash":"6baa976186d98050740e02eadc796036a16f6fa2","modified":1620388560672},{"_id":"public/live2d_models/unitychan/assets/unitychan.physics.json","hash":"d32ffd9263044d17d46facb5d878ea3683b8023e","modified":1620388560672},{"_id":"public/live2d_models/wanko/assets/wanko.model.json","hash":"b98a8ce54fbcf1606a489f1bc5f26b1a18c82d79","modified":1620388560672},{"_id":"public/live2d_models/z16/assets/z16.model.json","hash":"e69f3d2ecc9bf51b3972ad9df8f6aaa31956910c","modified":1620388560672},{"_id":"public/live2d_models/z16/assets/z16.physics.json","hash":"67f13f60030d7e4c7f824c001ab5254ce4b9bafd","modified":1620388560672},{"_id":"public/plugins/ribbon.js/demo/index.html","hash":"97ff0bb6307330d15d81075eba56bd85eb589905","modified":1620388560672},{"_id":"public/live2d_models/chitose/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1620388560672},{"_id":"public/live2d_models/chitose/assets/exp/f03.exp.json","hash":"a506220e6b908154eea59f4bcfd73e7a457616b6","modified":1620388560672},{"_id":"public/live2d_models/chitose/assets/exp/f02.exp.json","hash":"5b3dfc33ba22945adb77efacb9c55efbfd4975f9","modified":1620388560672},{"_id":"public/live2d_models/chitose/assets/exp/f05.exp.json","hash":"154b1b33701c61570e8adc5cab977ea3198ade6a","modified":1620388560672},{"_id":"public/live2d_models/chitose/assets/exp/f06.exp.json","hash":"f3db49d621e2008b9eb59fba98e10db5dbd19d3d","modified":1620388560672},{"_id":"public/live2d_models/chitose/assets/exp/f04.exp.json","hash":"6fee0e4d489e8ca3b7252b9dfc7c25cbe6a6a1e7","modified":1620388560672},{"_id":"public/live2d_models/chitose/assets/exp/f07.exp.json","hash":"1ad00a1e4843b5b31b0c43fa292193bb049f6779","modified":1620388560672},{"_id":"public/live2d_models/epsilon2_1/assets/exp/f02.exp.json","hash":"fb553024b5a62d0a54ba32c40b5d12598dc434e7","modified":1620388560672},{"_id":"public/live2d_models/epsilon2_1/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1620388560672},{"_id":"public/live2d_models/epsilon2_1/assets/exp/f03.exp.json","hash":"02d1ac5b6d9019a1ee89b9d4d82894458deae35d","modified":1620388560672},{"_id":"public/live2d_models/epsilon2_1/assets/exp/f04.exp.json","hash":"05dccc2eab9b9d019af1a9cc6f748276376dd828","modified":1620388560672},{"_id":"public/live2d_models/epsilon2_1/assets/exp/f05.exp.json","hash":"b53d5e42ca3105b19e5fe5fbf7fe4a6b4ced61f2","modified":1620388560672},{"_id":"public/live2d_models/epsilon2_1/assets/exp/f06.exp.json","hash":"0a7f5b3ac25b13d8688b1f529f3279a8342e3c75","modified":1620388560672},{"_id":"public/live2d_models/epsilon2_1/assets/exp/f08.exp.json","hash":"1dbb31e341c9fcc59475bd2594d60648c0c3e51c","modified":1620388560672},{"_id":"public/live2d_models/epsilon2_1/assets/exp/f07.exp.json","hash":"d501ae71f1e36ff7e7834422900c0e84b8de8f28","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/haru01.model.json","hash":"cab2aac3d697eafa420e8a02b1f52c1f19666ffd","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/haru01.physics.json","hash":"490ab4735f5cddca766344468591c0eb90cda1f7","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/haru01.pose.json","hash":"4fb902065bd3f309fa0029fe2505424851fd489f","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/haru02.model.json","hash":"ffed6d4654deeb772e389213f84701940ee0126f","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/haru02.physics.json","hash":"490ab4735f5cddca766344468591c0eb90cda1f7","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/haru02.pose.json","hash":"4fb902065bd3f309fa0029fe2505424851fd489f","modified":1620388560672},{"_id":"public/live2d_models/hibiki/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1620388560672},{"_id":"public/live2d_models/hibiki/assets/exp/f02.exp.json","hash":"a5f786a8ebce6d2b14efcd4476179ed324c8def6","modified":1620388560672},{"_id":"public/live2d_models/hibiki/assets/exp/f03.exp.json","hash":"b8f958f736acd4eb7433043fbae946487e872f5b","modified":1620388560672},{"_id":"public/live2d_models/hibiki/assets/exp/f04.exp.json","hash":"19fdb5558be54a9ec6d882e2d1780a369bc66b62","modified":1620388560672},{"_id":"public/live2d_models/hibiki/assets/exp/f05.exp.json","hash":"8fdbc6eabb1890bc5953f170f95e4404bd3d62b4","modified":1620388560672},{"_id":"public/live2d_models/hibiki/assets/exp/f06.exp.json","hash":"b8ee09beda85aff415e6598ecd6573a238e15d18","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/exp/f02.exp.json","hash":"d4c339f80452528f6cacba3ffe97fbb9e2e4d144","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/exp/f03.exp.json","hash":"fc1f79f65c09c845f08ee92d237f8cfabe90a3c6","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/exp/f04.exp.json","hash":"2e4f19882061c1b9bf49537244550cb5c9dd8a18","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/exp/f05.exp.json","hash":"b0c99350872f614a2a7f60e6479a4799d2d74986","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/exp/f06.exp.json","hash":"fd90baab724e71a25c8fd1eba2fab97974906374","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/exp/f07.exp.json","hash":"bb8dc60fc59444fee419265e68216bdcc0282b0b","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/exp/f02.exp.json","hash":"241b6afafa2e25c6d7a54692a8b5aa060a137ab1","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/exp/f03.exp.json","hash":"fbf7729e504f14f83f976827fcf62301a6579a34","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/exp/f04.exp.json","hash":"35e746ede62e7090e7dfb08561d77772f58b4153","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/exp/F01.exp.json","hash":"7c0a23a6f3f0a584887be3d3b482ecc7a359306e","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/exp/F05.exp.json","hash":"afd807b47a00389374949731dd97087aeeec28d7","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/exp/F02.exp.json","hash":"5e7fffd67c06aee0cdcab0b8f816fd6a125db260","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/exp/F04.exp.json","hash":"19c9ad9d05ea7cb15ccdabeaa14ec84c2763af9c","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/exp/F06.exp.json","hash":"8dd11423a36822927463c3adfdd629d4126f2205","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/exp/F08.exp.json","hash":"03284527751a22b05336329df15e103fdc7e95ec","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/exp/F09.exp.json","hash":"eb7d53e7617247158e4d538e2e7f1a602cfe21a5","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/exp/F07.exp.json","hash":"65441e1c9d27f4af55b45759e3c8407af2b72c3e","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/exp/F10.exp.json","hash":"61bccc68a43662888862fe46c91f579958097ed9","modified":1620388560672},{"_id":"public/live2d_models/z16/assets/exp/f00.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/exp/f02.exp.json","hash":"461fe8077a2289e309ffc7edf561501a7edcce88","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/exp/F03.exp.json","hash":"ab92d6fd93d152a4739d93cc6a650c36623dcf72","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/exp/f03.exp.json","hash":"a65382a1a8d8f7034eac2c811b9f122a8b3f1403","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/exp/f04.exp.json","hash":"3156286d7e0281e15c637a889aa415eef3224fa7","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/exp/f05.exp.json","hash":"1123786fb0bb9c31f7d30cf14b2299f898cdc207","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/exp/f08.exp.json","hash":"4a9ba4b11d9797f59c7b043d2b807ed8253f3cc4","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/exp/f07.exp.json","hash":"d55366c9bcf382e8273cf1803f65cdb8a4a0d336","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/exp/f06.exp.json","hash":"d962889ec7c563d818ddb5ab1e58cd337b5e62db","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/exp/f04.exp.json","hash":"3156286d7e0281e15c637a889aa415eef3224fa7","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/exp/f02.exp.json","hash":"461fe8077a2289e309ffc7edf561501a7edcce88","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/exp/f03.exp.json","hash":"a65382a1a8d8f7034eac2c811b9f122a8b3f1403","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/exp/f08.exp.json","hash":"4a9ba4b11d9797f59c7b043d2b807ed8253f3cc4","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/exp/f07.exp.json","hash":"d55366c9bcf382e8273cf1803f65cdb8a4a0d336","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/exp/f05.exp.json","hash":"1123786fb0bb9c31f7d30cf14b2299f898cdc207","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/exp/f06.exp.json","hash":"d962889ec7c563d818ddb5ab1e58cd337b5e62db","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1620388560672},{"_id":"public/live2d_models/miku/assets/moc/miku.moc","hash":"a57e92e12f1fcb21d4d3a9ac34f01badbeff3671","modified":1620388560672},{"_id":"public/live2d_models/ni-j/assets/moc/ni-j.moc","hash":"d846e2c4a4db0f003f2eda466f64cf2165e39ad8","modified":1620388560672},{"_id":"public/live2d_models/nietzsche/assets/moc/nietzsche.moc","hash":"63e70620e9eee593dbb77b26209ad64afa82f571","modified":1620388560672},{"_id":"public/live2d_models/nipsilon/assets/moc/nipsilon.moc","hash":"77ea4fba30cd6f056d1175654a8c950523cdf37e","modified":1620388560672},{"_id":"public/live2d_models/tororo/assets/moc/tororo.moc","hash":"44289e62545a7046e0f5231103a851750b78524e","modified":1620388560672},{"_id":"public/live2d_models/hibiki/assets/moc/hibiki.2048/texture_00.png","hash":"91349297cc411865cf5605a998b68a97fe67eec5","modified":1620388560672},{"_id":"public/live2d_models/hijiki/assets/moc/hijiki.2048/texture_00.png","hash":"66464e0d96439695b5542c5e2f5be60739c29999","modified":1620388560672},{"_id":"public/live2d_models/nico/assets/moc/nico.2048/texture_01.png","hash":"9a19b242b9309624de1e43703b240c1c72bf2205","modified":1620388560672},{"_id":"public/plugins/live2d-widget.js/L2Dwidget.min.js","hash":"189df71cee9f1273f134fd78114c72c69b5a44c1","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/moc/izumi_illust.moc","hash":"819e029e0d81ed64c59d47fc747026d4bbe637d6","modified":1620388560672},{"_id":"public/live2d_models/nito/assets/moc/nito.moc","hash":"aae6ab7a4687b166b30fb3bbfb1de5e91a5641e4","modified":1620388560672},{"_id":"public/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_05.png","hash":"e6b2987797dbcf113879024df919aa716ded9d4e","modified":1620388560672},{"_id":"public/live2d_models/haru/01/assets/moc/haru01.moc","hash":"d2223b555b3bdbbd955301c4c5bcbe7ebe19bec1","modified":1620388560672},{"_id":"public/live2d_models/haru/02/assets/moc/haru02.moc","hash":"748cf01b45bebb3b217d6363f9d5ff81ab942787","modified":1620388560672},{"_id":"public/live2d_models/haruto/assets/moc/haruto.2048/texture_00.png","hash":"62b970aa1480a1c18bdc4e74e297f2a1b34ca9fa","modified":1620388560672},{"_id":"public/live2d_models/koharu/assets/moc/koharu.2048/texture_00.png","hash":"0879b61b745084781722636bba9f278f31ce5fc1","modified":1620388560672},{"_id":"public/live2d_models/ni-j/assets/moc/ni-j.2048/texture_01.png","hash":"f868cb3bffe97108ef677c43659a6ad7f6a906b2","modified":1620388560672},{"_id":"public/live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_00.png","hash":"8ea2e684b826d4a8548b237ab86b3bb701ca8d5b","modified":1620388560672},{"_id":"public/live2d_models/nito/assets/moc/nito.2048/texture_00.png","hash":"8ea2e684b826d4a8548b237ab86b3bb701ca8d5b","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/moc/tsumiki.2048/texture_01.png","hash":"ffbb082160de6e3bb664b1a4e16b503a80b549c2","modified":1620388560672},{"_id":"public/live2d_models/chitose/assets/moc/chitose.moc","hash":"7e328a496119887e4caaaa5b81adb3aacb0dac19","modified":1620388560672},{"_id":"public/live2d_models/hijiki/assets/moc/hijiki.moc","hash":"44289e62545a7046e0f5231103a851750b78524e","modified":1620388560672},{"_id":"public/live2d_models/koharu/assets/moc/koharu.moc","hash":"5eec3fba21444dd6f774b913510b5955e2c0605b","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/moc/tsumiki.moc","hash":"cc023058ae61f70acf7580c4e2352b84eaf1a7b9","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/moc/shizuku.1024/texture_02.png","hash":"055eb2da9c13e9116be93a1e60c0ea2b660af864","modified":1620388560672},{"_id":"public/live2d_models/tsumiki/assets/moc/tsumiki.2048/texture_00.png","hash":"0316bc67bc2bde4017530989f34d62981ed88ab5","modified":1620388560672},{"_id":"public/main.0ac1d1.css","hash":"a575f5dcf6651c45c4ec270798bf748ec6c406e7","modified":1620388560672},{"_id":"public/main.0ac1d1.js","hash":"19070ea83f35d947ebe48bc2b2bf9dbf72536c4c","modified":1620388560672},{"_id":"public/slider.5d8892.js","hash":"7ca3f775969ea2cb3a1ae077915a97f4dfa45b28","modified":1620388560672},{"_id":"public/live2d_models/haruto/assets/moc/haruto.moc","hash":"57bec0b245b49ea941d61ba3dee671f20441afae","modified":1620388560672},{"_id":"public/live2d_models/epsilon2_1/assets/moc/Epsilon2.1.2048/texture_00.png","hash":"5a245b4c78e6ebaad4d50e47361d1fada208ae5f","modified":1620388560672},{"_id":"public/live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_02.png","hash":"9abe0e1b8fe05ad4c678f17fd0f47a064f98908d","modified":1620388560672},{"_id":"public/live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_02.png","hash":"8052842f4b880ce16a01703a128d8881f63f8543","modified":1620388560672},{"_id":"public/live2d_models/tororo/assets/moc/tororo.2048/texture_00.png","hash":"98af764b541083e87fc2f8e85f02d2db38c898cc","modified":1620388560672},{"_id":"public/gitment/APlayer.min.js","hash":"9f131b6ca3b89e52545a279356b79530bbb52a64","modified":1620388560672},{"_id":"public/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_02.png","hash":"1c2cf2502769b3a359c121823f9ecdb114063288","modified":1620388560672},{"_id":"public/lib/jquery-2.1.4.min.js","hash":"43dc554608df885a59ddeece1598c6ace434d747","modified":1620388560672},{"_id":"public/live2d_models/nico/assets/moc/nico.moc","hash":"371b0d972aca62a2b67d32398be091d792f0b3cb","modified":1620388560672},{"_id":"public/mobile.ae08fd.js","hash":"30170be15e085a6c124dee48db173f6211d73483","modified":1620388560672},{"_id":"public/plugins/TweenMax/TweenMax.min.js","hash":"8598fc6507e8948a0f99a61bb1dc345ecc1e1f6f","modified":1620388560672},{"_id":"public/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_01.png","hash":"da2a0785207727ba87a30ed6853dafd9978eb7b4","modified":1620388560672},{"_id":"public/plugins/live2d-widget.js/L2Dwidget.0.min.js","hash":"3cfe69c7d1bf48ba529e243f3892f7919d57ccc0","modified":1620388560672},{"_id":"public/plugins/live2d-widget.js/L2Dwidget.common.js","hash":"b6a9fa8908ce9b64fe27b632935219eb10fd9283","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_01.png","hash":"274627b4750bac66b29a9c19a939aca1655b1d27","modified":1620388560672},{"_id":"public/lib/gitment.js","hash":"d1dd326c7b21f36ad78d55c451a1f0bbb13d201c","modified":1620388560672},{"_id":"public/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_00.png","hash":"ff5b30d94adfcca1e5b77a3b7d3d75d750707d83","modified":1620388560672},{"_id":"public/plugins/live2d-widget.js/L2Dwidget.common.js.map","hash":"8de60ae490ab3d62c91c8ce60a256079b6afd3d8","modified":1620388560672},{"_id":"public/live2d_models/shizuku/assets/moc/shizuku.moc","hash":"c2670a0f75830edc89d7fe6d074de4ee67e8dc5d","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_02.png","hash":"4b45fb19ee5b662678692132feae93119ff56d08","modified":1620388560672},{"_id":"public/plugins/live2d-widget.js/L2Dwidget.0.min.js.map","hash":"3b3a7076b747b092d6e48f42a8a3497aa21280ee","modified":1620388560672},{"_id":"public/live2d_models/miku/assets/moc/miku.2048/texture_00.png","hash":"26fe101720ab8e55fb62c87b563d0dbb903c5eaf","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_00.png","hash":"bfcecfa399b328ac15eba45f2b6b3b18d50f2daf","modified":1620388560672},{"_id":"public/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_03.png","hash":"84005d6e75ed9db0f531b6e5e0d6d541da796b04","modified":1620388560672},{"_id":"public/live2d_models/gf/assets/moc/Gantzert_Felixander.moc","hash":"67d418af2db593b0b6f318e95f49d4370515c8f0","modified":1620388560672},{"_id":"public/lib/giteement.browser.js","hash":"824925ebd507d6b6fe3005f6c90c64809638456b","modified":1620388560672},{"_id":"public/live2d_models/chitose/assets/moc/chitose.2048/texture_00.png","hash":"505dbba0bec5d7fda0cead773caa540a0158a610","modified":1620388560672}],"Category":[{"name":"Vue","_id":"ckoe9igyu006j8cpn2fi826yf"}],"Data":[],"Page":[{"title":"留言板","layout":"comment","date":"2020-10-11T12:24:21.000Z","_content":"前端攻城狮一枚，略懂后端，处于不停的学习中。。。\n\n本主题基于[yilia-plus](https://github.com/JoeyBling/hexo-theme-yilia-plus)\n欢迎各位友好交流，留言无需登录，可以匿名留言\n","source":"comment/index.md","raw":"---\ntitle: 留言板\nlayout: comment\ndate: 2020-10-11 20:24:21\n---\n前端攻城狮一枚，略懂后端，处于不停的学习中。。。\n\n本主题基于[yilia-plus](https://github.com/JoeyBling/hexo-theme-yilia-plus)\n欢迎各位友好交流，留言无需登录，可以匿名留言\n","updated":"2020-11-24T07:53:04.760Z","path":"comment/index.html","comments":1,"_id":"ckoe9igsw00008cpn57gt5eip","content":"<p>前端攻城狮一枚，略懂后端，处于不停的学习中。。。</p>\n<p>本主题基于<a href=\"https://github.com/JoeyBling/hexo-theme-yilia-plus\">yilia-plus</a><br>欢迎各位友好交流，留言无需登录，可以匿名留言</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前端攻城狮一枚，略懂后端，处于不停的学习中。。。</p>\n<p>本主题基于<a href=\"https://github.com/JoeyBling/hexo-theme-yilia-plus\">yilia-plus</a><br>欢迎各位友好交流，留言无需登录，可以匿名留言</p>\n"},{"title":"知识库","date":"2020-12-01T08:40:53.000Z","_content":"\n[菜鸟工具](https://c.runoob.com/)  \n[前端工具](http://www.jsons.cn/img2base64/)  \n[Chart.js](https://www.chartjs.org/docs/latest/)  \n[css小图标大全](https://fontawesome.com/v4.7.0/)  \n[精美图片](http://pic.netbian.com/)  \n[阿里镜像](https://developer.aliyun.com/mirror/)  \n[淘宝镜像](https://npm.taobao.org/mirrors/)  \n[友链](http://mydearest.cn/)  \n[友链2](https://blog.ihoey.com/)  \n[chrome插件](https://www.extfans.com/)  \n[ssr](https://github.com/Alvin9999/new-pac/wiki/ss%E5%85%8D%E8%B4%B9%E8%B4%A6%E5%8F%B7)  \n[友链](http://mydearest.cn/)\n[chrome插件](https://www.extfans.com/)\n[webpack阮一峰](https://blog.csdn.net/userkang/article/details/83504048)\n[webpack官方文档](https://webpack.docschina.org/)\n[jquery api文档大全](https://oscarotero.com/jquery/)\n[快速启动vue、angular、react项目](https://stackblitz.com/)\n","source":"website/index.md","raw":"---\ntitle: 知识库\ndate: 2020-12-01 16:40:53\n---\n\n[菜鸟工具](https://c.runoob.com/)  \n[前端工具](http://www.jsons.cn/img2base64/)  \n[Chart.js](https://www.chartjs.org/docs/latest/)  \n[css小图标大全](https://fontawesome.com/v4.7.0/)  \n[精美图片](http://pic.netbian.com/)  \n[阿里镜像](https://developer.aliyun.com/mirror/)  \n[淘宝镜像](https://npm.taobao.org/mirrors/)  \n[友链](http://mydearest.cn/)  \n[友链2](https://blog.ihoey.com/)  \n[chrome插件](https://www.extfans.com/)  \n[ssr](https://github.com/Alvin9999/new-pac/wiki/ss%E5%85%8D%E8%B4%B9%E8%B4%A6%E5%8F%B7)  \n[友链](http://mydearest.cn/)\n[chrome插件](https://www.extfans.com/)\n[webpack阮一峰](https://blog.csdn.net/userkang/article/details/83504048)\n[webpack官方文档](https://webpack.docschina.org/)\n[jquery api文档大全](https://oscarotero.com/jquery/)\n[快速启动vue、angular、react项目](https://stackblitz.com/)\n","updated":"2021-04-06T06:22:07.562Z","path":"website/index.html","comments":1,"layout":"page","_id":"ckoe9igtf00028cpn2xtk6zvt","content":"<p><a href=\"https://c.runoob.com/\">菜鸟工具</a><br><a href=\"http://www.jsons.cn/img2base64/\">前端工具</a><br><a href=\"https://www.chartjs.org/docs/latest/\">Chart.js</a><br><a href=\"https://fontawesome.com/v4.7.0/\">css小图标大全</a><br><a href=\"http://pic.netbian.com/\">精美图片</a><br><a href=\"https://developer.aliyun.com/mirror/\">阿里镜像</a><br><a href=\"https://npm.taobao.org/mirrors/\">淘宝镜像</a><br><a href=\"http://mydearest.cn/\">友链</a><br><a href=\"https://blog.ihoey.com/\">友链2</a><br><a href=\"https://www.extfans.com/\">chrome插件</a><br><a href=\"https://github.com/Alvin9999/new-pac/wiki/ss%E5%85%8D%E8%B4%B9%E8%B4%A6%E5%8F%B7\">ssr</a><br><a href=\"http://mydearest.cn/\">友链</a><br><a href=\"https://www.extfans.com/\">chrome插件</a><br><a href=\"https://blog.csdn.net/userkang/article/details/83504048\">webpack阮一峰</a><br><a href=\"https://webpack.docschina.org/\">webpack官方文档</a><br><a href=\"https://oscarotero.com/jquery/\">jquery api文档大全</a><br><a href=\"https://stackblitz.com/\">快速启动vue、angular、react项目</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://c.runoob.com/\">菜鸟工具</a><br><a href=\"http://www.jsons.cn/img2base64/\">前端工具</a><br><a href=\"https://www.chartjs.org/docs/latest/\">Chart.js</a><br><a href=\"https://fontawesome.com/v4.7.0/\">css小图标大全</a><br><a href=\"http://pic.netbian.com/\">精美图片</a><br><a href=\"https://developer.aliyun.com/mirror/\">阿里镜像</a><br><a href=\"https://npm.taobao.org/mirrors/\">淘宝镜像</a><br><a href=\"http://mydearest.cn/\">友链</a><br><a href=\"https://blog.ihoey.com/\">友链2</a><br><a href=\"https://www.extfans.com/\">chrome插件</a><br><a href=\"https://github.com/Alvin9999/new-pac/wiki/ss%E5%85%8D%E8%B4%B9%E8%B4%A6%E5%8F%B7\">ssr</a><br><a href=\"http://mydearest.cn/\">友链</a><br><a href=\"https://www.extfans.com/\">chrome插件</a><br><a href=\"https://blog.csdn.net/userkang/article/details/83504048\">webpack阮一峰</a><br><a href=\"https://webpack.docschina.org/\">webpack官方文档</a><br><a href=\"https://oscarotero.com/jquery/\">jquery api文档大全</a><br><a href=\"https://stackblitz.com/\">快速启动vue、angular、react项目</a></p>\n"}],"Post":[{"layout":"post","title":"mongodb索引","date":"2019-03-04T16:00:00.000Z","excerpt":"索引通常能够极大的提高查询的效率","comments":1,"_content":"\n索引通常能够极大的提高查询的效率，如果没有索引，MongoDB在读取数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。\n\n这种扫描全集合的查询效率是非常低的，特别在处理大量的数据时，查询可以要花费几十秒甚至几分钟，这对网站的性能是非常致命的。\n\n索引是特殊的数据结构，索引存储在一个易于遍历读取的数据集合中，索引是对数据库表中一列或多列的值进行排序的一种结构\n\n## 实例\n```\n>db.col.createIndex({\"title\":1})\n>\n```\n## api方法\n1、查看集合索引\n>db.col.getIndexes()\n\n2、查看集合索引大小\n>db.col.totalIndexSize()\n\n3、删除集合所有索引\n>db.col.dropIndexes()\n\n4、删除集合指定索引\n>db.col.dropIndex(\"索引名称\")\n\n## 参考\nhttp://www.runoob.com/mongodb/mongodb-indexing.html","source":"_posts/2019-03-05-数据库.md","raw":"---\nlayout: post\ntitle: \"mongodb索引\"\ndate: 2019-03-05\nexcerpt: \"索引通常能够极大的提高查询的效率\"\ntags: [mongo, ruby]\ncomments: true\n---\n\n索引通常能够极大的提高查询的效率，如果没有索引，MongoDB在读取数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。\n\n这种扫描全集合的查询效率是非常低的，特别在处理大量的数据时，查询可以要花费几十秒甚至几分钟，这对网站的性能是非常致命的。\n\n索引是特殊的数据结构，索引存储在一个易于遍历读取的数据集合中，索引是对数据库表中一列或多列的值进行排序的一种结构\n\n## 实例\n```\n>db.col.createIndex({\"title\":1})\n>\n```\n## api方法\n1、查看集合索引\n>db.col.getIndexes()\n\n2、查看集合索引大小\n>db.col.totalIndexSize()\n\n3、删除集合所有索引\n>db.col.dropIndexes()\n\n4、删除集合指定索引\n>db.col.dropIndex(\"索引名称\")\n\n## 参考\nhttp://www.runoob.com/mongodb/mongodb-indexing.html","slug":"2019-03-05-数据库","published":1,"updated":"2020-11-24T07:53:04.741Z","photos":[],"link":"","_id":"ckoe9igt800018cpngzb5cjjc","content":"<p>索引通常能够极大的提高查询的效率，如果没有索引，MongoDB在读取数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。</p>\n<p>这种扫描全集合的查询效率是非常低的，特别在处理大量的数据时，查询可以要花费几十秒甚至几分钟，这对网站的性能是非常致命的。</p>\n<p>索引是特殊的数据结构，索引存储在一个易于遍历读取的数据集合中，索引是对数据库表中一列或多列的值进行排序的一种结构</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">db.col.createIndex(&#123;<span class=\"string\">&quot;title&quot;</span>:1&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"api方法\"><a href=\"#api方法\" class=\"headerlink\" title=\"api方法\"></a>api方法</h2><p>1、查看集合索引</p>\n<blockquote>\n<p>db.col.getIndexes()</p>\n</blockquote>\n<p>2、查看集合索引大小</p>\n<blockquote>\n<p>db.col.totalIndexSize()</p>\n</blockquote>\n<p>3、删除集合所有索引</p>\n<blockquote>\n<p>db.col.dropIndexes()</p>\n</blockquote>\n<p>4、删除集合指定索引</p>\n<blockquote>\n<p>db.col.dropIndex(“索引名称”)</p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://www.runoob.com/mongodb/mongodb-indexing.html\">http://www.runoob.com/mongodb/mongodb-indexing.html</a></p>\n","site":{"data":{}},"more":"<p>索引通常能够极大的提高查询的效率，如果没有索引，MongoDB在读取数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。</p>\n<p>这种扫描全集合的查询效率是非常低的，特别在处理大量的数据时，查询可以要花费几十秒甚至几分钟，这对网站的性能是非常致命的。</p>\n<p>索引是特殊的数据结构，索引存储在一个易于遍历读取的数据集合中，索引是对数据库表中一列或多列的值进行排序的一种结构</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">db.col.createIndex(&#123;<span class=\"string\">&quot;title&quot;</span>:1&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"api方法\"><a href=\"#api方法\" class=\"headerlink\" title=\"api方法\"></a>api方法</h2><p>1、查看集合索引</p>\n<blockquote>\n<p>db.col.getIndexes()</p>\n</blockquote>\n<p>2、查看集合索引大小</p>\n<blockquote>\n<p>db.col.totalIndexSize()</p>\n</blockquote>\n<p>3、删除集合所有索引</p>\n<blockquote>\n<p>db.col.dropIndexes()</p>\n</blockquote>\n<p>4、删除集合指定索引</p>\n<blockquote>\n<p>db.col.dropIndex(“索引名称”)</p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://www.runoob.com/mongodb/mongodb-indexing.html\">http://www.runoob.com/mongodb/mongodb-indexing.html</a></p>\n"},{"layout":"post","title":"DataTable搜索框，正则匹配规则","date":"2019-03-11T16:00:00.000Z","excerpt":"每一行代表的字符串是以2个空格将每一列连成一个字符串","comments":1,"_content":"\n`DataTable`中的`search`搜索框功能非常强大，可以匹配表格中的任意数据。不仅如此`DataTable`还提供了`regex`选项可以使用正则表达式。\n\n```\n$('#example').dataTable( {\n  \"search\": {\n    \"regex\": true\n  }\n} );\n```\n值的一提的是，DataTable搜索结果以行显示，那么每一行是怎么匹配正则的？\n\n>每一行代表的字符串是以2个空格将没一列连成一个字符串\n\n>例如：\n\n|example1|example2|example3|\n|:-:|:-:|:-:|\n|a|c|d|\n|e|f|g|\n|h|i|j|\n\n如果我们在输入框中输入: `^a  c  d`  \n即可匹配到第一行\n\n>如果想要更多的验证DataTable的正则匹配规则，[可以点击连接验证](https://datatables.net/examples/api/regex.html)\n\n\n\n","source":"_posts/2019-03-12-DataTable使用正则.md","raw":"---\nlayout: post\ntitle: \"DataTable搜索框，正则匹配规则\"\ndate: 2019-03-12\nexcerpt: \"每一行代表的字符串是以2个空格将每一列连成一个字符串\"\ntags: [DataTable, web, javascript]\ncomments: true\n---\n\n`DataTable`中的`search`搜索框功能非常强大，可以匹配表格中的任意数据。不仅如此`DataTable`还提供了`regex`选项可以使用正则表达式。\n\n```\n$('#example').dataTable( {\n  \"search\": {\n    \"regex\": true\n  }\n} );\n```\n值的一提的是，DataTable搜索结果以行显示，那么每一行是怎么匹配正则的？\n\n>每一行代表的字符串是以2个空格将没一列连成一个字符串\n\n>例如：\n\n|example1|example2|example3|\n|:-:|:-:|:-:|\n|a|c|d|\n|e|f|g|\n|h|i|j|\n\n如果我们在输入框中输入: `^a  c  d`  \n即可匹配到第一行\n\n>如果想要更多的验证DataTable的正则匹配规则，[可以点击连接验证](https://datatables.net/examples/api/regex.html)\n\n\n\n","slug":"2019-03-12-DataTable使用正则","published":1,"updated":"2020-11-24T07:53:04.742Z","photos":[],"link":"","_id":"ckoe9igtg00038cpn11sjgu4j","content":"<p><code>DataTable</code>中的<code>search</code>搜索框功能非常强大，可以匹配表格中的任意数据。不仅如此<code>DataTable</code>还提供了<code>regex</code>选项可以使用正则表达式。</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#example&#x27;</span>).dataTable( &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;search&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;regex&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; );</span><br></pre></td></tr></table></figure>\n<p>值的一提的是，DataTable搜索结果以行显示，那么每一行是怎么匹配正则的？</p>\n<blockquote>\n<p>每一行代表的字符串是以2个空格将没一列连成一个字符串</p>\n</blockquote>\n<blockquote>\n<p>例如：</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">example1</th>\n<th align=\"center\">example2</th>\n<th align=\"center\">example3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">a</td>\n<td align=\"center\">c</td>\n<td align=\"center\">d</td>\n</tr>\n<tr>\n<td align=\"center\">e</td>\n<td align=\"center\">f</td>\n<td align=\"center\">g</td>\n</tr>\n<tr>\n<td align=\"center\">h</td>\n<td align=\"center\">i</td>\n<td align=\"center\">j</td>\n</tr>\n</tbody></table>\n<p>如果我们在输入框中输入: <code>^a  c  d</code><br>即可匹配到第一行</p>\n<blockquote>\n<p>如果想要更多的验证DataTable的正则匹配规则，<a href=\"https://datatables.net/examples/api/regex.html\">可以点击连接验证</a></p>\n</blockquote>\n","site":{"data":{}},"more":"<p><code>DataTable</code>中的<code>search</code>搜索框功能非常强大，可以匹配表格中的任意数据。不仅如此<code>DataTable</code>还提供了<code>regex</code>选项可以使用正则表达式。</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#example&#x27;</span>).dataTable( &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;search&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;regex&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; );</span><br></pre></td></tr></table></figure>\n<p>值的一提的是，DataTable搜索结果以行显示，那么每一行是怎么匹配正则的？</p>\n<blockquote>\n<p>每一行代表的字符串是以2个空格将没一列连成一个字符串</p>\n</blockquote>\n<blockquote>\n<p>例如：</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">example1</th>\n<th align=\"center\">example2</th>\n<th align=\"center\">example3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">a</td>\n<td align=\"center\">c</td>\n<td align=\"center\">d</td>\n</tr>\n<tr>\n<td align=\"center\">e</td>\n<td align=\"center\">f</td>\n<td align=\"center\">g</td>\n</tr>\n<tr>\n<td align=\"center\">h</td>\n<td align=\"center\">i</td>\n<td align=\"center\">j</td>\n</tr>\n</tbody></table>\n<p>如果我们在输入框中输入: <code>^a  c  d</code><br>即可匹配到第一行</p>\n<blockquote>\n<p>如果想要更多的验证DataTable的正则匹配规则，<a href=\"https://datatables.net/examples/api/regex.html\">可以点击连接验证</a></p>\n</blockquote>\n"},{"layout":"post","title":"使用privoxy搭建代理服务器","date":"2019-03-14T16:00:00.000Z","excerpt":"使用privoxy搭建代理服务器","comments":1,"_content":"\n### 安装privoxy\n```\nyum install -y epel-release\nyum install -y privoxy\n```\n### 修改配置文件\n```\nvim /etc/privoxy/config\n```\n>修改ip(此处为你想作为代理的服务器的ip)\n\n```\nlisten-address  127.0.0.1:8118\n```\n### 启动\n```\n# 启动\nsystemctl start privoxy\n# 开机启动\nsystemctl enable privoxy\n```\n### 参考\n[https://www.cnblogs.com/straycats/p/8452354.html](https://www.cnblogs.com/straycats/p/8452354.html '参考')\n","source":"_posts/2019-03-12-代理服务器的搭建.md","raw":"---\nlayout: post\ntitle: \"使用privoxy搭建代理服务器\"\ndate: 2019-03-15\nexcerpt: \"使用privoxy搭建代理服务器\"\ntags: [linux, network]\ncomments: true\n---\n\n### 安装privoxy\n```\nyum install -y epel-release\nyum install -y privoxy\n```\n### 修改配置文件\n```\nvim /etc/privoxy/config\n```\n>修改ip(此处为你想作为代理的服务器的ip)\n\n```\nlisten-address  127.0.0.1:8118\n```\n### 启动\n```\n# 启动\nsystemctl start privoxy\n# 开机启动\nsystemctl enable privoxy\n```\n### 参考\n[https://www.cnblogs.com/straycats/p/8452354.html](https://www.cnblogs.com/straycats/p/8452354.html '参考')\n","slug":"2019-03-12-代理服务器的搭建","published":1,"updated":"2020-11-24T07:53:04.742Z","photos":[],"link":"","_id":"ckoe9igtp00058cpn6udj9y7x","content":"<h3 id=\"安装privoxy\"><a href=\"#安装privoxy\" class=\"headerlink\" title=\"安装privoxy\"></a>安装privoxy</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum <span class=\"keyword\">install</span> -y epel-<span class=\"keyword\">release</span></span><br><span class=\"line\">yum <span class=\"keyword\">install</span> -y privoxy</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim <span class=\"regexp\">/etc/</span>privoxy/config</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>修改ip(此处为你想作为代理的服务器的ip)</p>\n</blockquote>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">listen-address  <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8118</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\"><span class=\"attr\">systemctl</span> <span class=\"string\">start privoxy</span></span><br><span class=\"line\"><span class=\"comment\"># 开机启动</span></span><br><span class=\"line\"><span class=\"attr\">systemctl</span> <span class=\"string\">enable privoxy</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.cnblogs.com/straycats/p/8452354.html\" title=\"参考\">https://www.cnblogs.com/straycats/p/8452354.html</a></p>\n","site":{"data":{}},"more":"<h3 id=\"安装privoxy\"><a href=\"#安装privoxy\" class=\"headerlink\" title=\"安装privoxy\"></a>安装privoxy</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum <span class=\"keyword\">install</span> -y epel-<span class=\"keyword\">release</span></span><br><span class=\"line\">yum <span class=\"keyword\">install</span> -y privoxy</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim <span class=\"regexp\">/etc/</span>privoxy/config</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>修改ip(此处为你想作为代理的服务器的ip)</p>\n</blockquote>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">listen-address  <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8118</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\"><span class=\"attr\">systemctl</span> <span class=\"string\">start privoxy</span></span><br><span class=\"line\"><span class=\"comment\"># 开机启动</span></span><br><span class=\"line\"><span class=\"attr\">systemctl</span> <span class=\"string\">enable privoxy</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.cnblogs.com/straycats/p/8452354.html\" title=\"参考\">https://www.cnblogs.com/straycats/p/8452354.html</a></p>\n"},{"layout":"post","title":"ruby 基本知识","date":"2019-03-18T16:00:00.000Z","excerpt":"部分常用的ruby数组方法","comments":1,"_content":"\n* slice\n* clear\n* collect\n* map\n* compact\n* concat\n* delete(delete_if)\n* each\n* empty?\n* eql?\n* flatten\n* include?\n* insert\n* join\n* pop\n* push\n* reject\n* replace\n* reverse\n* select\n* shift\n* sort\n* uniq\n* unshift\n\n## 补充\n* first\n* last\n* sub\n* gsub\n* group_by\n* round\n* inject\n* partition\n* strip\n* start_with?\n* to_a, to_i, to_s\n* merge\n* flat_map\n* rjust\n* negative?, positive?, zero?\n* max, min\n* all，any，every\n\n\n### 参考\n[ruby api查找](http://doc.rubyfans.com/)","source":"_posts/2019-03-19-ruby基本知识.md","raw":"---\nlayout: post\ntitle: \"ruby 基本知识\"\ndate: 2019-03-19\nexcerpt: \"部分常用的ruby数组方法\"\ntags: [ruby, base]\ncomments: true\n---\n\n* slice\n* clear\n* collect\n* map\n* compact\n* concat\n* delete(delete_if)\n* each\n* empty?\n* eql?\n* flatten\n* include?\n* insert\n* join\n* pop\n* push\n* reject\n* replace\n* reverse\n* select\n* shift\n* sort\n* uniq\n* unshift\n\n## 补充\n* first\n* last\n* sub\n* gsub\n* group_by\n* round\n* inject\n* partition\n* strip\n* start_with?\n* to_a, to_i, to_s\n* merge\n* flat_map\n* rjust\n* negative?, positive?, zero?\n* max, min\n* all，any，every\n\n\n### 参考\n[ruby api查找](http://doc.rubyfans.com/)","slug":"2019-03-19-ruby基本知识","published":1,"updated":"2020-11-24T07:53:04.743Z","photos":[],"link":"","_id":"ckoe9igts00068cpnh1572g8n","content":"<ul>\n<li>slice</li>\n<li>clear</li>\n<li>collect</li>\n<li>map</li>\n<li>compact</li>\n<li>concat</li>\n<li>delete(delete_if)</li>\n<li>each</li>\n<li>empty?</li>\n<li>eql?</li>\n<li>flatten</li>\n<li>include?</li>\n<li>insert</li>\n<li>join</li>\n<li>pop</li>\n<li>push</li>\n<li>reject</li>\n<li>replace</li>\n<li>reverse</li>\n<li>select</li>\n<li>shift</li>\n<li>sort</li>\n<li>uniq</li>\n<li>unshift</li>\n</ul>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><ul>\n<li>first</li>\n<li>last</li>\n<li>sub</li>\n<li>gsub</li>\n<li>group_by</li>\n<li>round</li>\n<li>inject</li>\n<li>partition</li>\n<li>strip</li>\n<li>start_with?</li>\n<li>to_a, to_i, to_s</li>\n<li>merge</li>\n<li>flat_map</li>\n<li>rjust</li>\n<li>negative?, positive?, zero?</li>\n<li>max, min</li>\n<li>all，any，every</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://doc.rubyfans.com/\">ruby api查找</a></p>\n","site":{"data":{}},"more":"<ul>\n<li>slice</li>\n<li>clear</li>\n<li>collect</li>\n<li>map</li>\n<li>compact</li>\n<li>concat</li>\n<li>delete(delete_if)</li>\n<li>each</li>\n<li>empty?</li>\n<li>eql?</li>\n<li>flatten</li>\n<li>include?</li>\n<li>insert</li>\n<li>join</li>\n<li>pop</li>\n<li>push</li>\n<li>reject</li>\n<li>replace</li>\n<li>reverse</li>\n<li>select</li>\n<li>shift</li>\n<li>sort</li>\n<li>uniq</li>\n<li>unshift</li>\n</ul>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><ul>\n<li>first</li>\n<li>last</li>\n<li>sub</li>\n<li>gsub</li>\n<li>group_by</li>\n<li>round</li>\n<li>inject</li>\n<li>partition</li>\n<li>strip</li>\n<li>start_with?</li>\n<li>to_a, to_i, to_s</li>\n<li>merge</li>\n<li>flat_map</li>\n<li>rjust</li>\n<li>negative?, positive?, zero?</li>\n<li>max, min</li>\n<li>all，any，every</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://doc.rubyfans.com/\">ruby api查找</a></p>\n"},{"layout":"post","title":"Ruby Rails 学习资料","date":"2019-03-19T16:00:00.000Z","excerpt":"相关教程及Api检索","comments":1,"_content":"\n\n### Ruby入门教程\n[Ruby 教程](http://www.runoob.com/ruby/ruby-tutorial.html)\n### Ruby Rails Api 检索\n[Ruby开发文档](http://doc.rubyfans.com/)\n### Ruby On Rails\n[Ruby On Rails指南（中文）](https://ruby-china.github.io/rails-guides/)\n","source":"_posts/2019-03-20-Ruby-Rails学习资料.md","raw":"---\nlayout: post\ntitle: \"Ruby Rails 学习资料\"\ndate: 2019-03-20\nexcerpt: \"相关教程及Api检索\"\ntags: [ruby, rails, base]\ncomments: true\n---\n\n\n### Ruby入门教程\n[Ruby 教程](http://www.runoob.com/ruby/ruby-tutorial.html)\n### Ruby Rails Api 检索\n[Ruby开发文档](http://doc.rubyfans.com/)\n### Ruby On Rails\n[Ruby On Rails指南（中文）](https://ruby-china.github.io/rails-guides/)\n","slug":"2019-03-20-Ruby-Rails学习资料","published":1,"updated":"2020-11-24T07:53:04.743Z","photos":[],"link":"","_id":"ckoe9igtu00078cpn6j1r842y","content":"<h3 id=\"Ruby入门教程\"><a href=\"#Ruby入门教程\" class=\"headerlink\" title=\"Ruby入门教程\"></a>Ruby入门教程</h3><p><a href=\"http://www.runoob.com/ruby/ruby-tutorial.html\">Ruby 教程</a></p>\n<h3 id=\"Ruby-Rails-Api-检索\"><a href=\"#Ruby-Rails-Api-检索\" class=\"headerlink\" title=\"Ruby Rails Api 检索\"></a>Ruby Rails Api 检索</h3><p><a href=\"http://doc.rubyfans.com/\">Ruby开发文档</a></p>\n<h3 id=\"Ruby-On-Rails\"><a href=\"#Ruby-On-Rails\" class=\"headerlink\" title=\"Ruby On Rails\"></a>Ruby On Rails</h3><p><a href=\"https://ruby-china.github.io/rails-guides/\">Ruby On Rails指南（中文）</a></p>\n","site":{"data":{}},"more":"<h3 id=\"Ruby入门教程\"><a href=\"#Ruby入门教程\" class=\"headerlink\" title=\"Ruby入门教程\"></a>Ruby入门教程</h3><p><a href=\"http://www.runoob.com/ruby/ruby-tutorial.html\">Ruby 教程</a></p>\n<h3 id=\"Ruby-Rails-Api-检索\"><a href=\"#Ruby-Rails-Api-检索\" class=\"headerlink\" title=\"Ruby Rails Api 检索\"></a>Ruby Rails Api 检索</h3><p><a href=\"http://doc.rubyfans.com/\">Ruby开发文档</a></p>\n<h3 id=\"Ruby-On-Rails\"><a href=\"#Ruby-On-Rails\" class=\"headerlink\" title=\"Ruby On Rails\"></a>Ruby On Rails</h3><p><a href=\"https://ruby-china.github.io/rails-guides/\">Ruby On Rails指南（中文）</a></p>\n"},{"layout":"post","title":"Ruby open3 死锁","date":"2019-03-28T16:00:00.000Z","excerpt":"open3 死锁的原因和解决方法","comments":1,"_content":"\n## open3死锁\n根据open3的死锁条件，当需要构建大量输出在stderr中，open3就会死锁。\n\n```\nstdin, stdout, stderr, wait_thr = Open3.popen3([env,] cmd... [, opts])\n```\n我遇到的情况是stdout的输出内容较多，所以推测如果有错的话，stderr也会有大量输出，这样就会造成open3死锁。\n\n## 解决\n根据官方文档提示，需要同时读取stderr和stdout，我们使用``IO.select``实现\n\n```\ninp,out,err = open3(\"process\",\"args\")\ninp.close # we pass everything via command-line, so close child's stdin at once\nstill_open = [out,err]  # Array that only contains the opened streams\nwhile not still_open.empty?\n  fhs = select(still_open,nil,nil,nil) # wait for data available in the pipes\n  # fhs[0] is an array that contains filehandlers we can read from\n  if fhs[0].include? out\n    begin\n      printf(\"%s\",out.readline())\n    rescue EOFError  # If we have read everything from the pipe\n      # Remove out from the list of open pipes\n      still_open.delete_if {|s| s==out}\n    end\n  end\n  if fhs[0].include? err\n    begin\n      printf(\"ERROR: %s\",err.readline())\n    rescue EOFError  # If we have read everything from the pipe\n      # Remove err from the list of open pipes\n      still_open.delete_if {|s| s==err}\n    end\n  end\nend\n```\n\n## 参考\n[open3定义](https://www.rubydoc.info/stdlib/open3/Open3.popen3)  \n[避免open3死锁的方法](http://coldattic.info/post/63/)","source":"_posts/2019-03-29-ruby-open3死锁.md","raw":"---\nlayout: post\ntitle: \"Ruby open3 死锁\"\ndate: 2019-03-29\nexcerpt: \"open3 死锁的原因和解决方法\"\ntags: [ruby]\ncomments: true\n---\n\n## open3死锁\n根据open3的死锁条件，当需要构建大量输出在stderr中，open3就会死锁。\n\n```\nstdin, stdout, stderr, wait_thr = Open3.popen3([env,] cmd... [, opts])\n```\n我遇到的情况是stdout的输出内容较多，所以推测如果有错的话，stderr也会有大量输出，这样就会造成open3死锁。\n\n## 解决\n根据官方文档提示，需要同时读取stderr和stdout，我们使用``IO.select``实现\n\n```\ninp,out,err = open3(\"process\",\"args\")\ninp.close # we pass everything via command-line, so close child's stdin at once\nstill_open = [out,err]  # Array that only contains the opened streams\nwhile not still_open.empty?\n  fhs = select(still_open,nil,nil,nil) # wait for data available in the pipes\n  # fhs[0] is an array that contains filehandlers we can read from\n  if fhs[0].include? out\n    begin\n      printf(\"%s\",out.readline())\n    rescue EOFError  # If we have read everything from the pipe\n      # Remove out from the list of open pipes\n      still_open.delete_if {|s| s==out}\n    end\n  end\n  if fhs[0].include? err\n    begin\n      printf(\"ERROR: %s\",err.readline())\n    rescue EOFError  # If we have read everything from the pipe\n      # Remove err from the list of open pipes\n      still_open.delete_if {|s| s==err}\n    end\n  end\nend\n```\n\n## 参考\n[open3定义](https://www.rubydoc.info/stdlib/open3/Open3.popen3)  \n[避免open3死锁的方法](http://coldattic.info/post/63/)","slug":"2019-03-29-ruby-open3死锁","published":1,"updated":"2020-11-24T07:53:04.744Z","photos":[],"link":"","_id":"ckoe9igtx00098cpn8i3l8ep3","content":"<h2 id=\"open3死锁\"><a href=\"#open3死锁\" class=\"headerlink\" title=\"open3死锁\"></a>open3死锁</h2><p>根据open3的死锁条件，当需要构建大量输出在stderr中，open3就会死锁。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">stdin</span>, <span class=\"built_in\">stdout</span>, <span class=\"built_in\">stderr</span>, wait_thr = Open3.popen3([env,] cmd... [, opts])</span><br></pre></td></tr></table></figure>\n<p>我遇到的情况是stdout的输出内容较多，所以推测如果有错的话，stderr也会有大量输出，这样就会造成open3死锁。</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>根据官方文档提示，需要同时读取stderr和stdout，我们使用<code>IO.select</code>实现</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"code\"><pre><span class=\"line\">inp,<span class=\"keyword\">out</span>,err = open3(<span class=\"string\">&quot;process&quot;</span>,<span class=\"string\">&quot;args&quot;</span>)</span><br><span class=\"line\">inp.close <span class=\"comment\"># we pass everything via command-line, so close child&#x27;s stdin at once</span></span><br><span class=\"line\">still_open = [<span class=\"keyword\">out</span>,err]  <span class=\"comment\"># Array that only contains the opened streams</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> not still_open.empty?</span><br><span class=\"line\">  fhs = <span class=\"keyword\">select</span>(still_open,<span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>) <span class=\"comment\"># wait for data available in the pipes</span></span><br><span class=\"line\">  <span class=\"comment\"># fhs[0] is an array that contains filehandlers we can read from</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> fhs[<span class=\"number\">0</span>].<span class=\"keyword\">include</span>? <span class=\"keyword\">out</span></span><br><span class=\"line\">    <span class=\"keyword\">begin</span></span><br><span class=\"line\">      printf(<span class=\"string\">&quot;%s&quot;</span>,<span class=\"keyword\">out</span>.readline())</span><br><span class=\"line\">    <span class=\"keyword\">rescue</span> EOFError  <span class=\"comment\"># If we have read everything from the pipe</span></span><br><span class=\"line\">      <span class=\"comment\"># Remove out from the list of open pipes</span></span><br><span class=\"line\">      still_open.delete_if &#123;|s| s==<span class=\"keyword\">out</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> fhs[<span class=\"number\">0</span>].<span class=\"keyword\">include</span>? err</span><br><span class=\"line\">    <span class=\"keyword\">begin</span></span><br><span class=\"line\">      printf(<span class=\"string\">&quot;ERROR: %s&quot;</span>,err.readline())</span><br><span class=\"line\">    <span class=\"keyword\">rescue</span> EOFError  <span class=\"comment\"># If we have read everything from the pipe</span></span><br><span class=\"line\">      <span class=\"comment\"># Remove err from the list of open pipes</span></span><br><span class=\"line\">      still_open.delete_if &#123;|s| s==err&#125;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.rubydoc.info/stdlib/open3/Open3.popen3\">open3定义</a><br><a href=\"http://coldattic.info/post/63/\">避免open3死锁的方法</a></p>\n","site":{"data":{}},"more":"<h2 id=\"open3死锁\"><a href=\"#open3死锁\" class=\"headerlink\" title=\"open3死锁\"></a>open3死锁</h2><p>根据open3的死锁条件，当需要构建大量输出在stderr中，open3就会死锁。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">stdin</span>, <span class=\"built_in\">stdout</span>, <span class=\"built_in\">stderr</span>, wait_thr = Open3.popen3([env,] cmd... [, opts])</span><br></pre></td></tr></table></figure>\n<p>我遇到的情况是stdout的输出内容较多，所以推测如果有错的话，stderr也会有大量输出，这样就会造成open3死锁。</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>根据官方文档提示，需要同时读取stderr和stdout，我们使用<code>IO.select</code>实现</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"code\"><pre><span class=\"line\">inp,<span class=\"keyword\">out</span>,err = open3(<span class=\"string\">&quot;process&quot;</span>,<span class=\"string\">&quot;args&quot;</span>)</span><br><span class=\"line\">inp.close <span class=\"comment\"># we pass everything via command-line, so close child&#x27;s stdin at once</span></span><br><span class=\"line\">still_open = [<span class=\"keyword\">out</span>,err]  <span class=\"comment\"># Array that only contains the opened streams</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> not still_open.empty?</span><br><span class=\"line\">  fhs = <span class=\"keyword\">select</span>(still_open,<span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>) <span class=\"comment\"># wait for data available in the pipes</span></span><br><span class=\"line\">  <span class=\"comment\"># fhs[0] is an array that contains filehandlers we can read from</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> fhs[<span class=\"number\">0</span>].<span class=\"keyword\">include</span>? <span class=\"keyword\">out</span></span><br><span class=\"line\">    <span class=\"keyword\">begin</span></span><br><span class=\"line\">      printf(<span class=\"string\">&quot;%s&quot;</span>,<span class=\"keyword\">out</span>.readline())</span><br><span class=\"line\">    <span class=\"keyword\">rescue</span> EOFError  <span class=\"comment\"># If we have read everything from the pipe</span></span><br><span class=\"line\">      <span class=\"comment\"># Remove out from the list of open pipes</span></span><br><span class=\"line\">      still_open.delete_if &#123;|s| s==<span class=\"keyword\">out</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> fhs[<span class=\"number\">0</span>].<span class=\"keyword\">include</span>? err</span><br><span class=\"line\">    <span class=\"keyword\">begin</span></span><br><span class=\"line\">      printf(<span class=\"string\">&quot;ERROR: %s&quot;</span>,err.readline())</span><br><span class=\"line\">    <span class=\"keyword\">rescue</span> EOFError  <span class=\"comment\"># If we have read everything from the pipe</span></span><br><span class=\"line\">      <span class=\"comment\"># Remove err from the list of open pipes</span></span><br><span class=\"line\">      still_open.delete_if &#123;|s| s==err&#125;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.rubydoc.info/stdlib/open3/Open3.popen3\">open3定义</a><br><a href=\"http://coldattic.info/post/63/\">避免open3死锁的方法</a></p>\n"},{"layout":"post","title":"Git 环境配置","date":"2019-04-02T16:00:00.000Z","excerpt":"配置全局name, email, 使用ssh clone代码","comments":1,"_content":"\n### 配置name, email等\n\n```\n$ cat ~/.gitconfig\n[user]\n\temail = chaox.a.xu@intel.com\n\tname = Xu Chao\n\n[core]\n\teditor = vim -U none           # git commit -sv 可以用vim\n\n```\n\n### 使用ssh clone代码\n\n```\ngit clone ssh://user@host/path\n```","source":"_posts/2019-04-03-git环境配置.md","raw":"---\nlayout: post\ntitle: \"Git 环境配置\"\ndate: 2019-04-03\nexcerpt: \"配置全局name, email, 使用ssh clone代码\"\ntags: [git]\ncomments: true\n---\n\n### 配置name, email等\n\n```\n$ cat ~/.gitconfig\n[user]\n\temail = chaox.a.xu@intel.com\n\tname = Xu Chao\n\n[core]\n\teditor = vim -U none           # git commit -sv 可以用vim\n\n```\n\n### 使用ssh clone代码\n\n```\ngit clone ssh://user@host/path\n```","slug":"2019-04-03-git环境配置","published":1,"updated":"2020-11-24T07:53:04.745Z","photos":[],"link":"","_id":"ckoe9igu3000a8cpngafudu36","content":"<h3 id=\"配置name-email等\"><a href=\"#配置name-email等\" class=\"headerlink\" title=\"配置name, email等\"></a>配置name, email等</h3><figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">cat</span> ~/.gitconfig</span><br><span class=\"line\">[user]</span><br><span class=\"line\">\temail = chaox.<span class=\"keyword\">a</span>.xu@intel.<span class=\"keyword\">com</span></span><br><span class=\"line\">\tname = Xu Chao</span><br><span class=\"line\"></span><br><span class=\"line\">[core]</span><br><span class=\"line\">\teditor = <span class=\"keyword\">vim</span> -U none           # git commit -<span class=\"keyword\">sv</span> 可以用<span class=\"keyword\">vim</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用ssh-clone代码\"><a href=\"#使用ssh-clone代码\" class=\"headerlink\" title=\"使用ssh clone代码\"></a>使用ssh clone代码</h3><figure class=\"highlight crmsh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">clone</span> <span class=\"title\">ssh</span>://user@host/path</span><br></pre></td></tr></table></figure>","site":{"data":{}},"more":"<h3 id=\"配置name-email等\"><a href=\"#配置name-email等\" class=\"headerlink\" title=\"配置name, email等\"></a>配置name, email等</h3><figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">cat</span> ~/.gitconfig</span><br><span class=\"line\">[user]</span><br><span class=\"line\">\temail = chaox.<span class=\"keyword\">a</span>.xu@intel.<span class=\"keyword\">com</span></span><br><span class=\"line\">\tname = Xu Chao</span><br><span class=\"line\"></span><br><span class=\"line\">[core]</span><br><span class=\"line\">\teditor = <span class=\"keyword\">vim</span> -U none           # git commit -<span class=\"keyword\">sv</span> 可以用<span class=\"keyword\">vim</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用ssh-clone代码\"><a href=\"#使用ssh-clone代码\" class=\"headerlink\" title=\"使用ssh clone代码\"></a>使用ssh clone代码</h3><figure class=\"highlight crmsh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">clone</span> <span class=\"title\">ssh</span>://user@host/path</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"css 居中","date":"2019-05-21T16:00:00.000Z","excerpt":"利用各种css的特性实现居中","comments":1,"_content":"\ncss中有很多不同的居中方法，适应不同的情况，下面简单介绍几种常见的：\n\n## 1. 文字居中,边距居中\n这种居中方法一般使用较多。`text-align: center` 规定文字居中，`margin: 0 auto` 规定水平居中。\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>center</title>\n  <style type=\"text/css\">\n    .wrap {\n      text-align: center;\n    }\n    .div {\n      margin: 0 auto;\n      border: 1px solid red;\n      width: 200px;\n    }\n  </style>\n</head>\n<body>\n<div class=\"wrap\">\n  <div class=\"div\">test</div>\n</div>\n</body>\n</html>\n```\n<iframe width=\"100%\" height=\"100px\" srcdoc=\"\n<style type='text/css'>\n  .wrap { text-align: center; }\n  .div { margin: 0 auto; border: 1px solid red; width: 200px; }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n\n## 2. 绝对定位居中\n用于没有父元素包裹，需要居中的元素是绝对定位。\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>center</title>\n  <style type=\"text/css\">\n    .wrap .div{\n      width: 10%; \n      height: 60%; \n      border: 1px solid red;\n      margin: auto; \n      position: absolute;\n      top: 0; left: 0; bottom: 0; right: 0;\n      text-align: center;\n    }\n  </style>\n</head>\n<body>\n<div class=\"wrap\">\n  <div class=\"div\">test</div>\n</div>\n</body>\n</html>\n```\n<iframe width=\"100%\" height=\"100px\" srcdoc=\"\n<style type='text/css'>\n    .wrap .div{\n      width: 10%; \n      height: 60%; \n      border: 1px solid red;\n      margin: auto; \n      position: absolute;\n      top: 0; left: 0; bottom: 0; right: 0;\n      text-align: center;\n    }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n### 总结\n上述都需要`margin:auto`，这是利用了`margin`把元素在页面上的剩余位置用边距填满，为边距赋统一值`auto`，这样就可以使元素2边相等。  \n如果元素的`width:100%`，那么这个元素就相当于居中，如果`width`不等于100%，就可以用`margin`把剩下的位置填满, 因为`margin`也是盒子模型中的成员，所以它在盒子中占据空间和`width:100%`一样。\n\n## 3. table-cell\n利用表格中`vertical-align: middle`可以垂直居中的特性，使用方便。不过这种方法的水平居中有局限性，内部元素不可以设置宽度\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>center</title>\n  <style type=\"text/css\">\n  .wrap {\n    display: table-cell;\n    vertical-align: middle;\n    text-align: center;\n    width: 100px;\n    height: 100px;\n    border: 1px solid red;\n  }\n  .div {\n    border: 1px solid red;\n  }\n  </style>\n</head>\n<body>\n  <div class=\"wrap\">\n    <div class=\"div\">test</div>\n  </div>\n</body>\n</html>\n```\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n\t\t.wrap {\n\t\t\tdisplay: table-cell;\n\t\t\tvertical-align: middle;\n\t\t\ttext-align: center;\n      width: 100px;\n      height: 100px;\n      border: 1px solid red;\n\t\t}\n    .div {\n      border: 1px solid red;\n    }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n## 4. 绝对定位和负边距\n这种方法本质上是使用计算解决偏离的问题，但只能用于居中元素确定宽度和高度。\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>center</title>\n  <style type=\"text/css\">\n    .div {\n      position: absolute;\n      width:100px;\n      height: 50px;\n      top:50%;\n      left:50%;\n      margin-left:-50px;\n      margin-top:-25px;\n      text-align: center;\n      border: 1px solid red;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"wrap\">\n    <div class=\"div\">test</div>\n  </div>\n</body>\n</html>\n```\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n    .div {\n      position: absolute;\n      width:100px;\n      height: 50px;\n      top:50%;\n      left:50%;\n      margin-left:-50px;\n      margin-top:-25px;\n      text-align: center;\n      border: 1px solid red;\n    }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n## 5. css3 translate\n原理和上一种方法一样，但是没有宽度的限制。不过与其他css3技术一样，可能需要解决兼容问题。\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>center</title>\n  <style type=\"text/css\">\n    .div {\n      position: absolute;\n      top:50%;\n      left:50%;\n      width:100px;\n      transform:translate(-50%,-50%);\n      text-align: center;\n      border: 1px solid red;\n    }\n\t</style>\n</head>\n<body>\n  <div class=\"wrap\">\n  \t<div class=\"div\">test</div>\n  </div>\n</body>\n</html>\n```\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n    .div {\n      position: absolute;\n      top:50%;\n      left:50%;\n      width:100px;\n      transform:translate(-50%,-50%);\n      text-align: center;\n      border: 1px solid red;\n    }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n## 6. display:flex\n代码量最少的方法，不过父元素宽、高需要确定。\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>center</title>\n\t<style type=\"text/css\">\n    .wrap {\n      height: 100px;\n      width: 100px;\n      border: 1px solid red;\n      display: flex;\n      justify-content:center;\n      align-items:center;\n    }\n    .div {\n      border: 1px solid red;\n    }\n\t</style>\n</head>\n<body>\n  <div class=\"wrap\">\n  \t<div class=\"div\">test</div>\n  </div>\n</body>\n</html>\n```\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n    .wrap {\n      height: 100px;\n      width: 100px;\n      border: 1px solid red;\n      display: flex;\n      justify-content:center;\n      align-items:center;\n    }\n    .div {\n      border: 1px solid red;\n    }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n---\n下面是一些不常见的方法，用于拓展\n\n---\n\n## 7. 通过伪元素:after占位\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>center</title>\n  <style type=\"text/css\">\n    .wrap {\n      text-align:center;\n      font-size:0;\n    }\n    .wrap:after {\n      content:'';\n      width:0;\n      height:100%;\n      display:inline-block;\n      vertical-align:middle;\n    }\n    .div {\n      vertical-align:middle;\n      display:inline-block;\n      font-size:16px;\n      border: 1px solid red;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"wrap\">\n  \t<div class=\"div\">test</div>\n  </div>\n</body>\n</html>\n```\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n    .wrap {\n      text-align:center;\n      font-size:0;\n    }\n    .wrap:after {\n      content:'';\n      width:0;\n      height:100%;\n      display:inline-block;\n      vertical-align:middle;\n    }\n    .div {\n      vertical-align:middle;\n      display:inline-block;\n      font-size:16px;\n      border: 1px solid red;\n    }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n## 8. display:-webkit-box\n利用了css3的属性\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>center</title>\n  <style type=\"text/css\">\n    .wrap {\n      display: -webkit-box;\n      -webkit-box-pack:center;\n      -webkit-box-align:center;\n      -webkit-box-orient: vertical;\n      text-align: center;\n    }\n    .div {\n      border: 1px solid red;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"wrap\">\n    <div class=\"div\">test</div>\n  </div>\n</body>\n</html>\n```\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n    .wrap {\n      text-align:center;\n      font-size:0;\n    }\n    .wrap:after {\n      content:'';\n      width:0;\n      height:100%;\n      display:inline-block;\n      vertical-align:middle;\n    }\n    .div {\n      vertical-align:middle;\n      display:inline-block;\n      font-size:16px;\n      border: 1px solid red;\n    }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n","source":"_posts/2019-05-22-css居中详解.md","raw":"---\nlayout: post\ntitle: \"css 居中\"\ndate: 2019-05-22\nexcerpt: \"利用各种css的特性实现居中\"\ntags: [css]\ncomments: true\n---\n\ncss中有很多不同的居中方法，适应不同的情况，下面简单介绍几种常见的：\n\n## 1. 文字居中,边距居中\n这种居中方法一般使用较多。`text-align: center` 规定文字居中，`margin: 0 auto` 规定水平居中。\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>center</title>\n  <style type=\"text/css\">\n    .wrap {\n      text-align: center;\n    }\n    .div {\n      margin: 0 auto;\n      border: 1px solid red;\n      width: 200px;\n    }\n  </style>\n</head>\n<body>\n<div class=\"wrap\">\n  <div class=\"div\">test</div>\n</div>\n</body>\n</html>\n```\n<iframe width=\"100%\" height=\"100px\" srcdoc=\"\n<style type='text/css'>\n  .wrap { text-align: center; }\n  .div { margin: 0 auto; border: 1px solid red; width: 200px; }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n\n## 2. 绝对定位居中\n用于没有父元素包裹，需要居中的元素是绝对定位。\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>center</title>\n  <style type=\"text/css\">\n    .wrap .div{\n      width: 10%; \n      height: 60%; \n      border: 1px solid red;\n      margin: auto; \n      position: absolute;\n      top: 0; left: 0; bottom: 0; right: 0;\n      text-align: center;\n    }\n  </style>\n</head>\n<body>\n<div class=\"wrap\">\n  <div class=\"div\">test</div>\n</div>\n</body>\n</html>\n```\n<iframe width=\"100%\" height=\"100px\" srcdoc=\"\n<style type='text/css'>\n    .wrap .div{\n      width: 10%; \n      height: 60%; \n      border: 1px solid red;\n      margin: auto; \n      position: absolute;\n      top: 0; left: 0; bottom: 0; right: 0;\n      text-align: center;\n    }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n### 总结\n上述都需要`margin:auto`，这是利用了`margin`把元素在页面上的剩余位置用边距填满，为边距赋统一值`auto`，这样就可以使元素2边相等。  \n如果元素的`width:100%`，那么这个元素就相当于居中，如果`width`不等于100%，就可以用`margin`把剩下的位置填满, 因为`margin`也是盒子模型中的成员，所以它在盒子中占据空间和`width:100%`一样。\n\n## 3. table-cell\n利用表格中`vertical-align: middle`可以垂直居中的特性，使用方便。不过这种方法的水平居中有局限性，内部元素不可以设置宽度\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>center</title>\n  <style type=\"text/css\">\n  .wrap {\n    display: table-cell;\n    vertical-align: middle;\n    text-align: center;\n    width: 100px;\n    height: 100px;\n    border: 1px solid red;\n  }\n  .div {\n    border: 1px solid red;\n  }\n  </style>\n</head>\n<body>\n  <div class=\"wrap\">\n    <div class=\"div\">test</div>\n  </div>\n</body>\n</html>\n```\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n\t\t.wrap {\n\t\t\tdisplay: table-cell;\n\t\t\tvertical-align: middle;\n\t\t\ttext-align: center;\n      width: 100px;\n      height: 100px;\n      border: 1px solid red;\n\t\t}\n    .div {\n      border: 1px solid red;\n    }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n## 4. 绝对定位和负边距\n这种方法本质上是使用计算解决偏离的问题，但只能用于居中元素确定宽度和高度。\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>center</title>\n  <style type=\"text/css\">\n    .div {\n      position: absolute;\n      width:100px;\n      height: 50px;\n      top:50%;\n      left:50%;\n      margin-left:-50px;\n      margin-top:-25px;\n      text-align: center;\n      border: 1px solid red;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"wrap\">\n    <div class=\"div\">test</div>\n  </div>\n</body>\n</html>\n```\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n    .div {\n      position: absolute;\n      width:100px;\n      height: 50px;\n      top:50%;\n      left:50%;\n      margin-left:-50px;\n      margin-top:-25px;\n      text-align: center;\n      border: 1px solid red;\n    }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n## 5. css3 translate\n原理和上一种方法一样，但是没有宽度的限制。不过与其他css3技术一样，可能需要解决兼容问题。\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>center</title>\n  <style type=\"text/css\">\n    .div {\n      position: absolute;\n      top:50%;\n      left:50%;\n      width:100px;\n      transform:translate(-50%,-50%);\n      text-align: center;\n      border: 1px solid red;\n    }\n\t</style>\n</head>\n<body>\n  <div class=\"wrap\">\n  \t<div class=\"div\">test</div>\n  </div>\n</body>\n</html>\n```\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n    .div {\n      position: absolute;\n      top:50%;\n      left:50%;\n      width:100px;\n      transform:translate(-50%,-50%);\n      text-align: center;\n      border: 1px solid red;\n    }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n## 6. display:flex\n代码量最少的方法，不过父元素宽、高需要确定。\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>center</title>\n\t<style type=\"text/css\">\n    .wrap {\n      height: 100px;\n      width: 100px;\n      border: 1px solid red;\n      display: flex;\n      justify-content:center;\n      align-items:center;\n    }\n    .div {\n      border: 1px solid red;\n    }\n\t</style>\n</head>\n<body>\n  <div class=\"wrap\">\n  \t<div class=\"div\">test</div>\n  </div>\n</body>\n</html>\n```\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n    .wrap {\n      height: 100px;\n      width: 100px;\n      border: 1px solid red;\n      display: flex;\n      justify-content:center;\n      align-items:center;\n    }\n    .div {\n      border: 1px solid red;\n    }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n---\n下面是一些不常见的方法，用于拓展\n\n---\n\n## 7. 通过伪元素:after占位\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>center</title>\n  <style type=\"text/css\">\n    .wrap {\n      text-align:center;\n      font-size:0;\n    }\n    .wrap:after {\n      content:'';\n      width:0;\n      height:100%;\n      display:inline-block;\n      vertical-align:middle;\n    }\n    .div {\n      vertical-align:middle;\n      display:inline-block;\n      font-size:16px;\n      border: 1px solid red;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"wrap\">\n  \t<div class=\"div\">test</div>\n  </div>\n</body>\n</html>\n```\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n    .wrap {\n      text-align:center;\n      font-size:0;\n    }\n    .wrap:after {\n      content:'';\n      width:0;\n      height:100%;\n      display:inline-block;\n      vertical-align:middle;\n    }\n    .div {\n      vertical-align:middle;\n      display:inline-block;\n      font-size:16px;\n      border: 1px solid red;\n    }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n## 8. display:-webkit-box\n利用了css3的属性\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>center</title>\n  <style type=\"text/css\">\n    .wrap {\n      display: -webkit-box;\n      -webkit-box-pack:center;\n      -webkit-box-align:center;\n      -webkit-box-orient: vertical;\n      text-align: center;\n    }\n    .div {\n      border: 1px solid red;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"wrap\">\n    <div class=\"div\">test</div>\n  </div>\n</body>\n</html>\n```\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n    .wrap {\n      text-align:center;\n      font-size:0;\n    }\n    .wrap:after {\n      content:'';\n      width:0;\n      height:100%;\n      display:inline-block;\n      vertical-align:middle;\n    }\n    .div {\n      vertical-align:middle;\n      display:inline-block;\n      font-size:16px;\n      border: 1px solid red;\n    }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n","slug":"2019-05-22-css居中详解","published":1,"updated":"2020-11-24T07:53:04.746Z","photos":[],"link":"","_id":"ckoe9igu6000d8cpngryqcf9b","content":"<p>css中有很多不同的居中方法，适应不同的情况，下面简单介绍几种常见的：</p>\n<h2 id=\"1-文字居中-边距居中\"><a href=\"#1-文字居中-边距居中\" class=\"headerlink\" title=\"1. 文字居中,边距居中\"></a>1. 文字居中,边距居中</h2><p>这种居中方法一般使用较多。<code>text-align: center</code> 规定文字居中，<code>margin: 0 auto</code> 规定水平居中。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>center<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrap</span> &#123;</span></span><br><span class=\"line\">      text-align: center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.div</span> &#123;</span></span><br><span class=\"line\">      margin: 0 auto;</span><br><span class=\"line\">      border: 1px solid red;</span><br><span class=\"line\">      width: 200px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wrap&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;div&quot;</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<iframe width=\"100%\" height=\"100px\" srcdoc=\"\n<style type='text/css'>\n  .wrap { text-align: center; }\n  .div { margin: 0 auto; border: 1px solid red; width: 200px; }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n\n<h2 id=\"2-绝对定位居中\"><a href=\"#2-绝对定位居中\" class=\"headerlink\" title=\"2. 绝对定位居中\"></a>2. 绝对定位居中</h2><p>用于没有父元素包裹，需要居中的元素是绝对定位。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>center<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrap</span> <span class=\"selector-class\">.div</span>&#123;</span></span><br><span class=\"line\">      width: 10%; </span><br><span class=\"line\">      height: 60%; </span><br><span class=\"line\">      border: 1px solid red;</span><br><span class=\"line\">      margin: auto; </span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">      top: 0; left: 0; bottom: 0; right: 0;</span><br><span class=\"line\">      text-align: center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wrap&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;div&quot;</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<iframe width=\"100%\" height=\"100px\" srcdoc=\"\n<style type='text/css'>\n    .wrap .div{\n      width: 10%; \n      height: 60%; \n      border: 1px solid red;\n      margin: auto; \n      position: absolute;\n      top: 0; left: 0; bottom: 0; right: 0;\n      text-align: center;\n    }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>上述都需要<code>margin:auto</code>，这是利用了<code>margin</code>把元素在页面上的剩余位置用边距填满，为边距赋统一值<code>auto</code>，这样就可以使元素2边相等。<br>如果元素的<code>width:100%</code>，那么这个元素就相当于居中，如果<code>width</code>不等于100%，就可以用<code>margin</code>把剩下的位置填满, 因为<code>margin</code>也是盒子模型中的成员，所以它在盒子中占据空间和<code>width:100%</code>一样。</p>\n<h2 id=\"3-table-cell\"><a href=\"#3-table-cell\" class=\"headerlink\" title=\"3. table-cell\"></a>3. table-cell</h2><p>利用表格中<code>vertical-align: middle</code>可以垂直居中的特性，使用方便。不过这种方法的水平居中有局限性，内部元素不可以设置宽度</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>center<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.wrap</span> &#123;</span></span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    border: 1px solid red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.div</span> &#123;</span></span><br><span class=\"line\">    border: 1px solid red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wrap&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;div&quot;</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n        .wrap {\n            display: table-cell;\n            vertical-align: middle;\n            text-align: center;\n      width: 100px;\n      height: 100px;\n      border: 1px solid red;\n        }\n    .div {\n      border: 1px solid red;\n    }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n<h2 id=\"4-绝对定位和负边距\"><a href=\"#4-绝对定位和负边距\" class=\"headerlink\" title=\"4. 绝对定位和负边距\"></a>4. 绝对定位和负边距</h2><p>这种方法本质上是使用计算解决偏离的问题，但只能用于居中元素确定宽度和高度。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>center<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.div</span> &#123;</span></span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:100px</span>;</span></span><br><span class=\"line\">      height: 50px;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:50</span>%;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:50</span>%;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">margin-left</span><span class=\"selector-pseudo\">:-50px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">margin-top</span><span class=\"selector-pseudo\">:-25px</span>;</span></span><br><span class=\"line\">      text-align: center;</span><br><span class=\"line\">      border: 1px solid red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wrap&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;div&quot;</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n    .div {\n      position: absolute;\n      width:100px;\n      height: 50px;\n      top:50%;\n      left:50%;\n      margin-left:-50px;\n      margin-top:-25px;\n      text-align: center;\n      border: 1px solid red;\n    }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n<h2 id=\"5-css3-translate\"><a href=\"#5-css3-translate\" class=\"headerlink\" title=\"5. css3 translate\"></a>5. css3 translate</h2><p>原理和上一种方法一样，但是没有宽度的限制。不过与其他css3技术一样，可能需要解决兼容问题。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>center<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.div</span> &#123;</span></span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:50</span>%;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:50</span>%;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:translate(-50</span>%,<span class=\"selector-tag\">-50</span>%);</span></span><br><span class=\"line\">      text-align: center;</span><br><span class=\"line\">      border: 1px solid red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wrap&quot;</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;div&quot;</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n    .div {\n      position: absolute;\n      top:50%;\n      left:50%;\n      width:100px;\n      transform:translate(-50%,-50%);\n      text-align: center;\n      border: 1px solid red;\n    }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n<h2 id=\"6-display-flex\"><a href=\"#6-display-flex\" class=\"headerlink\" title=\"6. display:flex\"></a>6. display:flex</h2><p>代码量最少的方法，不过父元素宽、高需要确定。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>center<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrap</span> &#123;</span></span><br><span class=\"line\">      height: 100px;</span><br><span class=\"line\">      width: 100px;</span><br><span class=\"line\">      border: 1px solid red;</span><br><span class=\"line\">      display: flex;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">justify-content</span><span class=\"selector-pseudo\">:center</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">align-items</span><span class=\"selector-pseudo\">:center</span>;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.div</span> &#123;</span></span><br><span class=\"line\">      border: 1px solid red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wrap&quot;</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;div&quot;</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n    .wrap {\n      height: 100px;\n      width: 100px;\n      border: 1px solid red;\n      display: flex;\n      justify-content:center;\n      align-items:center;\n    }\n    .div {\n      border: 1px solid red;\n    }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n<hr>\n<p>下面是一些不常见的方法，用于拓展</p>\n<hr>\n<h2 id=\"7-通过伪元素-after占位\"><a href=\"#7-通过伪元素-after占位\" class=\"headerlink\" title=\"7. 通过伪元素:after占位\"></a>7. 通过伪元素:after占位</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>center<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrap</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">text-align</span><span class=\"selector-pseudo\">:center</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">font-size</span><span class=\"selector-pseudo\">:0</span>;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrap</span><span class=\"selector-pseudo\">:after</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">content</span><span class=\"selector-pseudo\">:&#x27;&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:0</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:100</span>%;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">display</span><span class=\"selector-pseudo\">:inline-block</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">vertical-align</span><span class=\"selector-pseudo\">:middle</span>;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.div</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">vertical-align</span><span class=\"selector-pseudo\">:middle</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">display</span><span class=\"selector-pseudo\">:inline-block</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">font-size</span><span class=\"selector-pseudo\">:16px</span>;</span></span><br><span class=\"line\">      border: 1px solid red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wrap&quot;</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;div&quot;</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n    .wrap {\n      text-align:center;\n      font-size:0;\n    }\n    .wrap:after {\n      content:'';\n      width:0;\n      height:100%;\n      display:inline-block;\n      vertical-align:middle;\n    }\n    .div {\n      vertical-align:middle;\n      display:inline-block;\n      font-size:16px;\n      border: 1px solid red;\n    }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n<h2 id=\"8-display-webkit-box\"><a href=\"#8-display-webkit-box\" class=\"headerlink\" title=\"8. display:-webkit-box\"></a>8. display:-webkit-box</h2><p>利用了css3的属性</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>center<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrap</span> &#123;</span></span><br><span class=\"line\">      display: -webkit-box;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">-webkit-box-pack</span><span class=\"selector-pseudo\">:center</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">-webkit-box-align</span><span class=\"selector-pseudo\">:center</span>;</span></span><br><span class=\"line\">      -webkit-box-orient: vertical;</span><br><span class=\"line\">      text-align: center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.div</span> &#123;</span></span><br><span class=\"line\">      border: 1px solid red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wrap&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;div&quot;</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n    .wrap {\n      text-align:center;\n      font-size:0;\n    }\n    .wrap:after {\n      content:'';\n      width:0;\n      height:100%;\n      display:inline-block;\n      vertical-align:middle;\n    }\n    .div {\n      vertical-align:middle;\n      display:inline-block;\n      font-size:16px;\n      border: 1px solid red;\n    }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n","site":{"data":{}},"more":"<p>css中有很多不同的居中方法，适应不同的情况，下面简单介绍几种常见的：</p>\n<h2 id=\"1-文字居中-边距居中\"><a href=\"#1-文字居中-边距居中\" class=\"headerlink\" title=\"1. 文字居中,边距居中\"></a>1. 文字居中,边距居中</h2><p>这种居中方法一般使用较多。<code>text-align: center</code> 规定文字居中，<code>margin: 0 auto</code> 规定水平居中。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>center<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrap</span> &#123;</span></span><br><span class=\"line\">      text-align: center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.div</span> &#123;</span></span><br><span class=\"line\">      margin: 0 auto;</span><br><span class=\"line\">      border: 1px solid red;</span><br><span class=\"line\">      width: 200px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wrap&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;div&quot;</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<iframe width=\"100%\" height=\"100px\" srcdoc=\"\n<style type='text/css'>\n  .wrap { text-align: center; }\n  .div { margin: 0 auto; border: 1px solid red; width: 200px; }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n\n<h2 id=\"2-绝对定位居中\"><a href=\"#2-绝对定位居中\" class=\"headerlink\" title=\"2. 绝对定位居中\"></a>2. 绝对定位居中</h2><p>用于没有父元素包裹，需要居中的元素是绝对定位。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>center<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrap</span> <span class=\"selector-class\">.div</span>&#123;</span></span><br><span class=\"line\">      width: 10%; </span><br><span class=\"line\">      height: 60%; </span><br><span class=\"line\">      border: 1px solid red;</span><br><span class=\"line\">      margin: auto; </span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">      top: 0; left: 0; bottom: 0; right: 0;</span><br><span class=\"line\">      text-align: center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wrap&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;div&quot;</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<iframe width=\"100%\" height=\"100px\" srcdoc=\"\n<style type='text/css'>\n    .wrap .div{\n      width: 10%; \n      height: 60%; \n      border: 1px solid red;\n      margin: auto; \n      position: absolute;\n      top: 0; left: 0; bottom: 0; right: 0;\n      text-align: center;\n    }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>上述都需要<code>margin:auto</code>，这是利用了<code>margin</code>把元素在页面上的剩余位置用边距填满，为边距赋统一值<code>auto</code>，这样就可以使元素2边相等。<br>如果元素的<code>width:100%</code>，那么这个元素就相当于居中，如果<code>width</code>不等于100%，就可以用<code>margin</code>把剩下的位置填满, 因为<code>margin</code>也是盒子模型中的成员，所以它在盒子中占据空间和<code>width:100%</code>一样。</p>\n<h2 id=\"3-table-cell\"><a href=\"#3-table-cell\" class=\"headerlink\" title=\"3. table-cell\"></a>3. table-cell</h2><p>利用表格中<code>vertical-align: middle</code>可以垂直居中的特性，使用方便。不过这种方法的水平居中有局限性，内部元素不可以设置宽度</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>center<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.wrap</span> &#123;</span></span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    border: 1px solid red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.div</span> &#123;</span></span><br><span class=\"line\">    border: 1px solid red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wrap&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;div&quot;</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n        .wrap {\n            display: table-cell;\n            vertical-align: middle;\n            text-align: center;\n      width: 100px;\n      height: 100px;\n      border: 1px solid red;\n        }\n    .div {\n      border: 1px solid red;\n    }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n<h2 id=\"4-绝对定位和负边距\"><a href=\"#4-绝对定位和负边距\" class=\"headerlink\" title=\"4. 绝对定位和负边距\"></a>4. 绝对定位和负边距</h2><p>这种方法本质上是使用计算解决偏离的问题，但只能用于居中元素确定宽度和高度。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>center<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.div</span> &#123;</span></span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:100px</span>;</span></span><br><span class=\"line\">      height: 50px;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:50</span>%;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:50</span>%;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">margin-left</span><span class=\"selector-pseudo\">:-50px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">margin-top</span><span class=\"selector-pseudo\">:-25px</span>;</span></span><br><span class=\"line\">      text-align: center;</span><br><span class=\"line\">      border: 1px solid red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wrap&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;div&quot;</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n    .div {\n      position: absolute;\n      width:100px;\n      height: 50px;\n      top:50%;\n      left:50%;\n      margin-left:-50px;\n      margin-top:-25px;\n      text-align: center;\n      border: 1px solid red;\n    }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n<h2 id=\"5-css3-translate\"><a href=\"#5-css3-translate\" class=\"headerlink\" title=\"5. css3 translate\"></a>5. css3 translate</h2><p>原理和上一种方法一样，但是没有宽度的限制。不过与其他css3技术一样，可能需要解决兼容问题。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>center<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.div</span> &#123;</span></span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:50</span>%;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:50</span>%;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:translate(-50</span>%,<span class=\"selector-tag\">-50</span>%);</span></span><br><span class=\"line\">      text-align: center;</span><br><span class=\"line\">      border: 1px solid red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wrap&quot;</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;div&quot;</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n    .div {\n      position: absolute;\n      top:50%;\n      left:50%;\n      width:100px;\n      transform:translate(-50%,-50%);\n      text-align: center;\n      border: 1px solid red;\n    }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n<h2 id=\"6-display-flex\"><a href=\"#6-display-flex\" class=\"headerlink\" title=\"6. display:flex\"></a>6. display:flex</h2><p>代码量最少的方法，不过父元素宽、高需要确定。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>center<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrap</span> &#123;</span></span><br><span class=\"line\">      height: 100px;</span><br><span class=\"line\">      width: 100px;</span><br><span class=\"line\">      border: 1px solid red;</span><br><span class=\"line\">      display: flex;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">justify-content</span><span class=\"selector-pseudo\">:center</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">align-items</span><span class=\"selector-pseudo\">:center</span>;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.div</span> &#123;</span></span><br><span class=\"line\">      border: 1px solid red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wrap&quot;</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;div&quot;</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n    .wrap {\n      height: 100px;\n      width: 100px;\n      border: 1px solid red;\n      display: flex;\n      justify-content:center;\n      align-items:center;\n    }\n    .div {\n      border: 1px solid red;\n    }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n<hr>\n<p>下面是一些不常见的方法，用于拓展</p>\n<hr>\n<h2 id=\"7-通过伪元素-after占位\"><a href=\"#7-通过伪元素-after占位\" class=\"headerlink\" title=\"7. 通过伪元素:after占位\"></a>7. 通过伪元素:after占位</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>center<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrap</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">text-align</span><span class=\"selector-pseudo\">:center</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">font-size</span><span class=\"selector-pseudo\">:0</span>;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrap</span><span class=\"selector-pseudo\">:after</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">content</span><span class=\"selector-pseudo\">:&#x27;&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:0</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:100</span>%;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">display</span><span class=\"selector-pseudo\">:inline-block</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">vertical-align</span><span class=\"selector-pseudo\">:middle</span>;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.div</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">vertical-align</span><span class=\"selector-pseudo\">:middle</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">display</span><span class=\"selector-pseudo\">:inline-block</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">font-size</span><span class=\"selector-pseudo\">:16px</span>;</span></span><br><span class=\"line\">      border: 1px solid red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wrap&quot;</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;div&quot;</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n    .wrap {\n      text-align:center;\n      font-size:0;\n    }\n    .wrap:after {\n      content:'';\n      width:0;\n      height:100%;\n      display:inline-block;\n      vertical-align:middle;\n    }\n    .div {\n      vertical-align:middle;\n      display:inline-block;\n      font-size:16px;\n      border: 1px solid red;\n    }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n<h2 id=\"8-display-webkit-box\"><a href=\"#8-display-webkit-box\" class=\"headerlink\" title=\"8. display:-webkit-box\"></a>8. display:-webkit-box</h2><p>利用了css3的属性</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>center<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrap</span> &#123;</span></span><br><span class=\"line\">      display: -webkit-box;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">-webkit-box-pack</span><span class=\"selector-pseudo\">:center</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">-webkit-box-align</span><span class=\"selector-pseudo\">:center</span>;</span></span><br><span class=\"line\">      -webkit-box-orient: vertical;</span><br><span class=\"line\">      text-align: center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.div</span> &#123;</span></span><br><span class=\"line\">      border: 1px solid red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wrap&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;div&quot;</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n    .wrap {\n      text-align:center;\n      font-size:0;\n    }\n    .wrap:after {\n      content:'';\n      width:0;\n      height:100%;\n      display:inline-block;\n      vertical-align:middle;\n    }\n    .div {\n      vertical-align:middle;\n      display:inline-block;\n      font-size:16px;\n      border: 1px solid red;\n    }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n"},{"layout":"post","title":"js 事件委托机制","date":"2019-05-07T16:00:00.000Z","excerpt":"js事件委托和冒泡的原理及应用","comments":1,"_content":"\n## 概述\n那什么叫事件委托呢？它还有一个名字叫事件代理，JavaScript高级程序设计上讲：事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。举个列子：\n有三个同事预计会在周一收到快递。为签收快递，有两种办法：一是三个人在公司门口等快递；二是委托给前台MM代为签收。现实当中，我们大都采用委托的方案（公司也不会容忍那么多员工站在门口就为了等快递）。前台MM收到快递后，她会判断收件人是谁，然后按照收件人的要求签收，甚至代为付款。这种方案还有一个优势，那就是即使公司里来了新员工（不管多少），前台MM也会在收到寄给新员工的快递后核实并代为签收。\n\n这里其实还有2层意思的：\n\n第一，现在委托前台的同事是可以代为签收的，即程序中的现有的dom节点是有事件的；\n\n第二，新员工也是可以被前台MM代为签收的，即程序中新添加的dom节点也是有事件的。\n\n## 应用场景\n* 提高性能  \n比如我们有100个li，每个li都有相同的click点击事件，可能我们会用for循环的方法，来遍历所有的li，然后给它们添加事件。  \n这是我们通常的做法，这不仅很low，而且会严重影响页面的性能，事件的数量直接影响页面渲染时需要的时间，所以我们可以利用事件委托来解决这个问题。\n* 为不存在元素创建事件  \n当需要为动态创建的元素添加事件时，初学者都会再元素上添加`onclick()`事件，在指向对应的函数。\n这种方法不够简洁明了。\n## 实例\n这里用父级ul做事件处理，当li被点击时，由于冒泡原理，事件就会冒泡到ul上，因为ul上有点击事件，所以事件就会触发，当然，这里当点击ul的时候，也是会触发的，那么问题就来了，如果我想让事件代理的效果跟直接给节点的事件效果一样怎么办，比如说只有点击li才会触发，不怕，我们有绝招：\n\nEvent对象提供了一个属性叫target，可以返回事件的目标节点，我们成为事件源，也就是说，target就可以表示为当前的事件操作的dom，但是不是真正操作dom，当然，这个是有兼容性的，标准浏览器用ev.target，IE浏览器用event.srcElement，此时只是获取了当前节点的位置，并不知道是什么节点名称，这里我们用nodeName来获取具体是什么标签名，这个返回的是一个大写的，我们需要转成小写再做比较（习惯问题）\n```\nwindow.onload = function(){\n　　var oUl = document.getElementById(\"ul1\");\n　　oUl.onclick = function(ev){\n　　　　var ev = ev || window.event;\n　　　　var target = ev.target || ev.srcElement;\n　　　　if(target.nodeName.toLowerCase() == 'li'){\n　 　　　　　　\talert(123);\n　　　　　　　  alert(target.innerHTML);\n　　　　}\n　　}\n}\n```\n在jquery中on的事件绑定也用到了委托机制\n```\n$('ele').on('click', 'div', callback)\n```\n第二个参数是指为选中元素下的div子元素绑定事件，这里的功能和我们的事件委托机制很像\n\n## 参考\n[js中的事件委托或是事件代理详解](http://www.cnblogs.com/liugang-vip/p/5616484.html)","source":"_posts/2019-05-08-js事件委托机制.md","raw":"---\nlayout: post\ntitle: \"js 事件委托机制\"\ndate: 2019-05-08\nexcerpt: \"js事件委托和冒泡的原理及应用\"\ntags: [javascript]\ncomments: true\n---\n\n## 概述\n那什么叫事件委托呢？它还有一个名字叫事件代理，JavaScript高级程序设计上讲：事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。举个列子：\n有三个同事预计会在周一收到快递。为签收快递，有两种办法：一是三个人在公司门口等快递；二是委托给前台MM代为签收。现实当中，我们大都采用委托的方案（公司也不会容忍那么多员工站在门口就为了等快递）。前台MM收到快递后，她会判断收件人是谁，然后按照收件人的要求签收，甚至代为付款。这种方案还有一个优势，那就是即使公司里来了新员工（不管多少），前台MM也会在收到寄给新员工的快递后核实并代为签收。\n\n这里其实还有2层意思的：\n\n第一，现在委托前台的同事是可以代为签收的，即程序中的现有的dom节点是有事件的；\n\n第二，新员工也是可以被前台MM代为签收的，即程序中新添加的dom节点也是有事件的。\n\n## 应用场景\n* 提高性能  \n比如我们有100个li，每个li都有相同的click点击事件，可能我们会用for循环的方法，来遍历所有的li，然后给它们添加事件。  \n这是我们通常的做法，这不仅很low，而且会严重影响页面的性能，事件的数量直接影响页面渲染时需要的时间，所以我们可以利用事件委托来解决这个问题。\n* 为不存在元素创建事件  \n当需要为动态创建的元素添加事件时，初学者都会再元素上添加`onclick()`事件，在指向对应的函数。\n这种方法不够简洁明了。\n## 实例\n这里用父级ul做事件处理，当li被点击时，由于冒泡原理，事件就会冒泡到ul上，因为ul上有点击事件，所以事件就会触发，当然，这里当点击ul的时候，也是会触发的，那么问题就来了，如果我想让事件代理的效果跟直接给节点的事件效果一样怎么办，比如说只有点击li才会触发，不怕，我们有绝招：\n\nEvent对象提供了一个属性叫target，可以返回事件的目标节点，我们成为事件源，也就是说，target就可以表示为当前的事件操作的dom，但是不是真正操作dom，当然，这个是有兼容性的，标准浏览器用ev.target，IE浏览器用event.srcElement，此时只是获取了当前节点的位置，并不知道是什么节点名称，这里我们用nodeName来获取具体是什么标签名，这个返回的是一个大写的，我们需要转成小写再做比较（习惯问题）\n```\nwindow.onload = function(){\n　　var oUl = document.getElementById(\"ul1\");\n　　oUl.onclick = function(ev){\n　　　　var ev = ev || window.event;\n　　　　var target = ev.target || ev.srcElement;\n　　　　if(target.nodeName.toLowerCase() == 'li'){\n　 　　　　　　\talert(123);\n　　　　　　　  alert(target.innerHTML);\n　　　　}\n　　}\n}\n```\n在jquery中on的事件绑定也用到了委托机制\n```\n$('ele').on('click', 'div', callback)\n```\n第二个参数是指为选中元素下的div子元素绑定事件，这里的功能和我们的事件委托机制很像\n\n## 参考\n[js中的事件委托或是事件代理详解](http://www.cnblogs.com/liugang-vip/p/5616484.html)","slug":"2019-05-08-js事件委托机制","published":1,"updated":"2020-11-24T07:53:04.745Z","photos":[],"link":"","_id":"ckoe9igu8000f8cpn0yti3t8y","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>那什么叫事件委托呢？它还有一个名字叫事件代理，JavaScript高级程序设计上讲：事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。举个列子：<br>有三个同事预计会在周一收到快递。为签收快递，有两种办法：一是三个人在公司门口等快递；二是委托给前台MM代为签收。现实当中，我们大都采用委托的方案（公司也不会容忍那么多员工站在门口就为了等快递）。前台MM收到快递后，她会判断收件人是谁，然后按照收件人的要求签收，甚至代为付款。这种方案还有一个优势，那就是即使公司里来了新员工（不管多少），前台MM也会在收到寄给新员工的快递后核实并代为签收。</p>\n<p>这里其实还有2层意思的：</p>\n<p>第一，现在委托前台的同事是可以代为签收的，即程序中的现有的dom节点是有事件的；</p>\n<p>第二，新员工也是可以被前台MM代为签收的，即程序中新添加的dom节点也是有事件的。</p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><ul>\n<li>提高性能<br>比如我们有100个li，每个li都有相同的click点击事件，可能我们会用for循环的方法，来遍历所有的li，然后给它们添加事件。<br>这是我们通常的做法，这不仅很low，而且会严重影响页面的性能，事件的数量直接影响页面渲染时需要的时间，所以我们可以利用事件委托来解决这个问题。</li>\n<li>为不存在元素创建事件<br>当需要为动态创建的元素添加事件时，初学者都会再元素上添加<code>onclick()</code>事件，在指向对应的函数。<br>这种方法不够简洁明了。<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2>这里用父级ul做事件处理，当li被点击时，由于冒泡原理，事件就会冒泡到ul上，因为ul上有点击事件，所以事件就会触发，当然，这里当点击ul的时候，也是会触发的，那么问题就来了，如果我想让事件代理的效果跟直接给节点的事件效果一样怎么办，比如说只有点击li才会触发，不怕，我们有绝招：</li>\n</ul>\n<p>Event对象提供了一个属性叫target，可以返回事件的目标节点，我们成为事件源，也就是说，target就可以表示为当前的事件操作的dom，但是不是真正操作dom，当然，这个是有兼容性的，标准浏览器用ev.target，IE浏览器用event.srcElement，此时只是获取了当前节点的位置，并不知道是什么节点名称，这里我们用nodeName来获取具体是什么标签名，这个返回的是一个大写的，我们需要转成小写再做比较（习惯问题）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> oUl = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;ul1&quot;</span>);</span><br><span class=\"line\">　　oUl.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ev</span>)</span>&#123;</span><br><span class=\"line\">　　　　<span class=\"keyword\">var</span> ev = ev || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">　　　　<span class=\"keyword\">var</span> target = ev.target || ev.srcElement;</span><br><span class=\"line\">　　　　<span class=\"keyword\">if</span>(target.nodeName.toLowerCase() == <span class=\"string\">&#x27;li&#x27;</span>)&#123;</span><br><span class=\"line\">　 　　　　　　\talert(<span class=\"number\">123</span>);</span><br><span class=\"line\">　　　　　　　  alert(target.innerHTML);</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在jquery中on的事件绑定也用到了委托机制</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;ele&#x27;</span>).on(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"string\">&#x27;div&#x27;</span>, callback)</span><br></pre></td></tr></table></figure>\n<p>第二个参数是指为选中元素下的div子元素绑定事件，这里的功能和我们的事件委托机制很像</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://www.cnblogs.com/liugang-vip/p/5616484.html\">js中的事件委托或是事件代理详解</a></p>\n","site":{"data":{}},"more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>那什么叫事件委托呢？它还有一个名字叫事件代理，JavaScript高级程序设计上讲：事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。举个列子：<br>有三个同事预计会在周一收到快递。为签收快递，有两种办法：一是三个人在公司门口等快递；二是委托给前台MM代为签收。现实当中，我们大都采用委托的方案（公司也不会容忍那么多员工站在门口就为了等快递）。前台MM收到快递后，她会判断收件人是谁，然后按照收件人的要求签收，甚至代为付款。这种方案还有一个优势，那就是即使公司里来了新员工（不管多少），前台MM也会在收到寄给新员工的快递后核实并代为签收。</p>\n<p>这里其实还有2层意思的：</p>\n<p>第一，现在委托前台的同事是可以代为签收的，即程序中的现有的dom节点是有事件的；</p>\n<p>第二，新员工也是可以被前台MM代为签收的，即程序中新添加的dom节点也是有事件的。</p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><ul>\n<li>提高性能<br>比如我们有100个li，每个li都有相同的click点击事件，可能我们会用for循环的方法，来遍历所有的li，然后给它们添加事件。<br>这是我们通常的做法，这不仅很low，而且会严重影响页面的性能，事件的数量直接影响页面渲染时需要的时间，所以我们可以利用事件委托来解决这个问题。</li>\n<li>为不存在元素创建事件<br>当需要为动态创建的元素添加事件时，初学者都会再元素上添加<code>onclick()</code>事件，在指向对应的函数。<br>这种方法不够简洁明了。<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2>这里用父级ul做事件处理，当li被点击时，由于冒泡原理，事件就会冒泡到ul上，因为ul上有点击事件，所以事件就会触发，当然，这里当点击ul的时候，也是会触发的，那么问题就来了，如果我想让事件代理的效果跟直接给节点的事件效果一样怎么办，比如说只有点击li才会触发，不怕，我们有绝招：</li>\n</ul>\n<p>Event对象提供了一个属性叫target，可以返回事件的目标节点，我们成为事件源，也就是说，target就可以表示为当前的事件操作的dom，但是不是真正操作dom，当然，这个是有兼容性的，标准浏览器用ev.target，IE浏览器用event.srcElement，此时只是获取了当前节点的位置，并不知道是什么节点名称，这里我们用nodeName来获取具体是什么标签名，这个返回的是一个大写的，我们需要转成小写再做比较（习惯问题）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> oUl = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;ul1&quot;</span>);</span><br><span class=\"line\">　　oUl.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ev</span>)</span>&#123;</span><br><span class=\"line\">　　　　<span class=\"keyword\">var</span> ev = ev || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">　　　　<span class=\"keyword\">var</span> target = ev.target || ev.srcElement;</span><br><span class=\"line\">　　　　<span class=\"keyword\">if</span>(target.nodeName.toLowerCase() == <span class=\"string\">&#x27;li&#x27;</span>)&#123;</span><br><span class=\"line\">　 　　　　　　\talert(<span class=\"number\">123</span>);</span><br><span class=\"line\">　　　　　　　  alert(target.innerHTML);</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在jquery中on的事件绑定也用到了委托机制</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;ele&#x27;</span>).on(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"string\">&#x27;div&#x27;</span>, callback)</span><br></pre></td></tr></table></figure>\n<p>第二个参数是指为选中元素下的div子元素绑定事件，这里的功能和我们的事件委托机制很像</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://www.cnblogs.com/liugang-vip/p/5616484.html\">js中的事件委托或是事件代理详解</a></p>\n"},{"layout":"post","title":"flex布局","date":"2019-05-26T16:00:00.000Z","excerpt":"简单介绍flex布局的各种属性","comments":1,"_content":"\n## flex布局是什么\nFlex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。\n\n任何一个容器都可以指定为Flex布局。\n\n```\n//块元素\n.box{\n  display: flex;\n}\n\n//行内元素\n.box{\n  display: inline-flex;\n}\n\n//webkit内核浏览器(chrome, safari)\n.box{\n  display: -webkit-flex; /* Safari */\n  display: flex;\n}\n```\n\n## 容器的属性\n* flex-direction\n* flex-wrap\n* flex-flow\n* justify-content\n* align-items\n* align-content\n\n### 1、flex-direction属性\nflex-direction属性决定主轴的方向（即项目的排列方向）。\n```\nrow（默认值）：主轴为水平方向，起点在左端。\nrow-reverse：主轴为水平方向，起点在右端。\ncolumn：主轴为垂直方向，起点在上沿。\ncolumn-reverse：主轴为垂直方向，起点在下沿。\n```\n### 2、flex-wrap属性\n默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。\n```\nnowrap（默认）：不换行。\nwrap：换行，第一行在上方。\nwrap-reverse：换行，第一行在下方。\n```\n### 3、flex-flow\nflex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。\n```\n.box {\n  flex-flow: <flex-direction> <flex-wrap>;\n}\n```\n### 4、justify-content属性\njustify-content属性定义了项目在主轴上的对齐方式。\n```\nflex-start（默认值）：左对齐\nflex-end：右对齐\ncenter： 居中\nspace-between：两端对齐，项目之间的间隔都相等。\nspace-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\n```\n### 5、align-items属性\nalign-items属性定义项目在交叉轴上如何对齐。\n```\nflex-start：交叉轴的起点对齐。\nflex-end：交叉轴的终点对齐。\ncenter：交叉轴的中点对齐。\nbaseline: 项目的第一行文字的基线对齐。\nstretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\n```\n### 6、align-content属性\nalign-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n```\nflex-start：与交叉轴的起点对齐。\nflex-end：与交叉轴的终点对齐。\ncenter：与交叉轴的中点对齐。\nspace-between：与交叉轴两端对齐，轴线之间的间隔平均分布。\nspace-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\nstretch（默认值）：轴线占满整个交叉轴。\n```\n## 项目的属性\n以下6个属性设置在项目上。\n* order\n* flex-grow\n* flex-shrink\n* flex-basis\n* flex\n* align-self\n### 1、order属性\norder属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。\n### 2、flex-grow属性\nflex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。  \n如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。\n### 3、flex-shrink属性\nflex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。  \n如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。  \n负值对该属性无效。\n### 4、flex-basis属性\nflex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。  \n它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。\n### 5、flex属性\nflex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。\n```\n.item {\n  flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n}\n```\n该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。  \n建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。\n### 6、align-self属性\nalign-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。\n```\n.item {\n  align-self: auto | flex-start | flex-end | center | baseline | stretch;\n}\n```\n该属性可能取6个值，除了auto，其他都与align-items属性完全一致。\n\n## flex中的margin\n实现一个元素在左侧，另外2个元素在右侧\n```\n<style type='text/css'>\n  .wrap { text-align: center; display: flex; justify-content: space-between;}\n  .div { border: 1px solid red; width: 200px; }\n  .right { margin-left: auto; }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n  <div class='div right'>test</div>\n  <div class='div'>test</div>\n</div>\n```\n<iframe width=\"100%\" height=\"100px\" srcdoc=\"\n<style type='text/css'>\n  .wrap { text-align: center; display: flex; justify-content: space-between;}\n  .div { border: 1px solid red; width: 200px; }\n  .right { margin-left: auto; }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n  <div class='div right'>test</div>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n\n## 参考\n[阮一峰教程](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)","source":"_posts/2019-05-27-flex布局.md","raw":"---\nlayout: post\ntitle: \"flex布局\"\ndate: 2019-05-27\nexcerpt: \"简单介绍flex布局的各种属性\"\ntags: [css]\ncomments: true\n---\n\n## flex布局是什么\nFlex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。\n\n任何一个容器都可以指定为Flex布局。\n\n```\n//块元素\n.box{\n  display: flex;\n}\n\n//行内元素\n.box{\n  display: inline-flex;\n}\n\n//webkit内核浏览器(chrome, safari)\n.box{\n  display: -webkit-flex; /* Safari */\n  display: flex;\n}\n```\n\n## 容器的属性\n* flex-direction\n* flex-wrap\n* flex-flow\n* justify-content\n* align-items\n* align-content\n\n### 1、flex-direction属性\nflex-direction属性决定主轴的方向（即项目的排列方向）。\n```\nrow（默认值）：主轴为水平方向，起点在左端。\nrow-reverse：主轴为水平方向，起点在右端。\ncolumn：主轴为垂直方向，起点在上沿。\ncolumn-reverse：主轴为垂直方向，起点在下沿。\n```\n### 2、flex-wrap属性\n默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。\n```\nnowrap（默认）：不换行。\nwrap：换行，第一行在上方。\nwrap-reverse：换行，第一行在下方。\n```\n### 3、flex-flow\nflex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。\n```\n.box {\n  flex-flow: <flex-direction> <flex-wrap>;\n}\n```\n### 4、justify-content属性\njustify-content属性定义了项目在主轴上的对齐方式。\n```\nflex-start（默认值）：左对齐\nflex-end：右对齐\ncenter： 居中\nspace-between：两端对齐，项目之间的间隔都相等。\nspace-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\n```\n### 5、align-items属性\nalign-items属性定义项目在交叉轴上如何对齐。\n```\nflex-start：交叉轴的起点对齐。\nflex-end：交叉轴的终点对齐。\ncenter：交叉轴的中点对齐。\nbaseline: 项目的第一行文字的基线对齐。\nstretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\n```\n### 6、align-content属性\nalign-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n```\nflex-start：与交叉轴的起点对齐。\nflex-end：与交叉轴的终点对齐。\ncenter：与交叉轴的中点对齐。\nspace-between：与交叉轴两端对齐，轴线之间的间隔平均分布。\nspace-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\nstretch（默认值）：轴线占满整个交叉轴。\n```\n## 项目的属性\n以下6个属性设置在项目上。\n* order\n* flex-grow\n* flex-shrink\n* flex-basis\n* flex\n* align-self\n### 1、order属性\norder属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。\n### 2、flex-grow属性\nflex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。  \n如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。\n### 3、flex-shrink属性\nflex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。  \n如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。  \n负值对该属性无效。\n### 4、flex-basis属性\nflex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。  \n它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。\n### 5、flex属性\nflex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。\n```\n.item {\n  flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n}\n```\n该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。  \n建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。\n### 6、align-self属性\nalign-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。\n```\n.item {\n  align-self: auto | flex-start | flex-end | center | baseline | stretch;\n}\n```\n该属性可能取6个值，除了auto，其他都与align-items属性完全一致。\n\n## flex中的margin\n实现一个元素在左侧，另外2个元素在右侧\n```\n<style type='text/css'>\n  .wrap { text-align: center; display: flex; justify-content: space-between;}\n  .div { border: 1px solid red; width: 200px; }\n  .right { margin-left: auto; }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n  <div class='div right'>test</div>\n  <div class='div'>test</div>\n</div>\n```\n<iframe width=\"100%\" height=\"100px\" srcdoc=\"\n<style type='text/css'>\n  .wrap { text-align: center; display: flex; justify-content: space-between;}\n  .div { border: 1px solid red; width: 200px; }\n  .right { margin-left: auto; }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n  <div class='div right'>test</div>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n\n## 参考\n[阮一峰教程](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)","slug":"2019-05-27-flex布局","published":1,"updated":"2021-04-30T10:53:40.455Z","photos":[],"link":"","_id":"ckoe9igub000i8cpn8leu8fs6","content":"<h2 id=\"flex布局是什么\"><a href=\"#flex布局是什么\" class=\"headerlink\" title=\"flex布局是什么\"></a>flex布局是什么</h2><p>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p>\n<p>任何一个容器都可以指定为Flex布局。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//块元素</span></span><br><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//行内元素</span></span><br><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//webkit内核浏览器(chrome, safari)</span></span><br><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: -webkit-flex; <span class=\"comment\">/* Safari */</span></span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"容器的属性\"><a href=\"#容器的属性\" class=\"headerlink\" title=\"容器的属性\"></a>容器的属性</h2><ul>\n<li>flex-direction</li>\n<li>flex-wrap</li>\n<li>flex-flow</li>\n<li>justify-content</li>\n<li>align-items</li>\n<li>align-content</li>\n</ul>\n<h3 id=\"1、flex-direction属性\"><a href=\"#1、flex-direction属性\" class=\"headerlink\" title=\"1、flex-direction属性\"></a>1、flex-direction属性</h3><p>flex-direction属性决定主轴的方向（即项目的排列方向）。</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">row</span>（默认值）：主轴为水平方向，起点在左端。</span><br><span class=\"line\"><span class=\"keyword\">row</span>-<span class=\"keyword\">reverse</span>：主轴为水平方向，起点在右端。</span><br><span class=\"line\"><span class=\"keyword\">column</span>：主轴为垂直方向，起点在上沿。</span><br><span class=\"line\"><span class=\"keyword\">column</span>-<span class=\"keyword\">reverse</span>：主轴为垂直方向，起点在下沿。</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、flex-wrap属性\"><a href=\"#2、flex-wrap属性\" class=\"headerlink\" title=\"2、flex-wrap属性\"></a>2、flex-wrap属性</h3><p>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"code\"><pre><span class=\"line\">nowrap（默认）：不换行。</span><br><span class=\"line\"><span class=\"built_in\">wrap</span>：换行，第一行在上方。</span><br><span class=\"line\"><span class=\"built_in\">wrap</span>-<span class=\"built_in\">reverse</span>：换行，第一行在下方。</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、flex-flow\"><a href=\"#3、flex-flow\" class=\"headerlink\" title=\"3、flex-flow\"></a>3、flex-flow</h3><p>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-flow</span>: &lt;flex-direction&gt; &lt;flex-wrap&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、justify-content属性\"><a href=\"#4、justify-content属性\" class=\"headerlink\" title=\"4、justify-content属性\"></a>4、justify-content属性</h3><p>justify-content属性定义了项目在主轴上的对齐方式。</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">flex-start（默认值）：左对齐</span><br><span class=\"line\">flex-<span class=\"keyword\">end</span>：右对齐</span><br><span class=\"line\">center： 居中</span><br><span class=\"line\"><span class=\"literal\">space</span>-<span class=\"keyword\">between</span>：两端对齐，项目之间的间隔都相等。</span><br><span class=\"line\"><span class=\"literal\">space</span>-<span class=\"keyword\">around</span>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</span><br></pre></td></tr></table></figure>\n<h3 id=\"5、align-items属性\"><a href=\"#5、align-items属性\" class=\"headerlink\" title=\"5、align-items属性\"></a>5、align-items属性</h3><p>align-items属性定义项目在交叉轴上如何对齐。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">flex</span>-start：交叉轴的起点对齐。</span><br><span class=\"line\"><span class=\"attribute\">flex</span>-end：交叉轴的终点对齐。</span><br><span class=\"line\">center：交叉轴的中点对齐。</span><br><span class=\"line\">baseline: 项目的第一行文字的基线对齐。</span><br><span class=\"line\">stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</span><br></pre></td></tr></table></figure>\n<h3 id=\"6、align-content属性\"><a href=\"#6、align-content属性\" class=\"headerlink\" title=\"6、align-content属性\"></a>6、align-content属性</h3><p>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">flex-start：与交叉轴的起点对齐。</span><br><span class=\"line\">flex-<span class=\"keyword\">end</span>：与交叉轴的终点对齐。</span><br><span class=\"line\">center：与交叉轴的中点对齐。</span><br><span class=\"line\"><span class=\"literal\">space</span>-<span class=\"keyword\">between</span>：与交叉轴两端对齐，轴线之间的间隔平均分布。</span><br><span class=\"line\"><span class=\"literal\">space</span>-<span class=\"keyword\">around</span>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</span><br><span class=\"line\">stretch（默认值）：轴线占满整个交叉轴。</span><br></pre></td></tr></table></figure>\n<h2 id=\"项目的属性\"><a href=\"#项目的属性\" class=\"headerlink\" title=\"项目的属性\"></a>项目的属性</h2><p>以下6个属性设置在项目上。</p>\n<ul>\n<li>order</li>\n<li>flex-grow</li>\n<li>flex-shrink</li>\n<li>flex-basis</li>\n<li>flex</li>\n<li>align-self<h3 id=\"1、order属性\"><a href=\"#1、order属性\" class=\"headerlink\" title=\"1、order属性\"></a>1、order属性</h3>order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。<h3 id=\"2、flex-grow属性\"><a href=\"#2、flex-grow属性\" class=\"headerlink\" title=\"2、flex-grow属性\"></a>2、flex-grow属性</h3>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。<br>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。<h3 id=\"3、flex-shrink属性\"><a href=\"#3、flex-shrink属性\" class=\"headerlink\" title=\"3、flex-shrink属性\"></a>3、flex-shrink属性</h3>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。<br>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。<br>负值对该属性无效。<h3 id=\"4、flex-basis属性\"><a href=\"#4、flex-basis属性\" class=\"headerlink\" title=\"4、flex-basis属性\"></a>4、flex-basis属性</h3>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。<br>它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。<h3 id=\"5、flex属性\"><a href=\"#5、flex属性\" class=\"headerlink\" title=\"5、flex属性\"></a>5、flex属性</h3>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>: none | [ &lt;<span class=\"string\">&#x27;flex-grow&#x27;</span>&gt; &lt;<span class=\"string\">&#x27;flex-shrink&#x27;</span>&gt;? || &lt;<span class=\"string\">&#x27;flex-basis&#x27;</span>&gt; ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。<br>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。<h3 id=\"6、align-self属性\"><a href=\"#6、align-self属性\" class=\"headerlink\" title=\"6、align-self属性\"></a>6、align-self属性</h3>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。<figure class=\"highlight coq\"><table><tr><td class=\"code\"><pre><span class=\"line\">.item &#123;</span><br><span class=\"line\">  align-self: <span class=\"built_in\">auto</span> | <span class=\"type\">flex</span>-start | <span class=\"type\">flex</span>-<span class=\"keyword\">end</span> | <span class=\"type\">center</span> | <span class=\"type\">baseline</span> | <span class=\"type\">stretch</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</li>\n</ul>\n<h2 id=\"flex中的margin\"><a href=\"#flex中的margin\" class=\"headerlink\" title=\"flex中的margin\"></a>flex中的margin</h2><p>实现一个元素在左侧，另外2个元素在右侧</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&#x27;text/css&#x27;</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.wrap</span> &#123; <span class=\"attribute\">text-align</span>: center; <span class=\"attribute\">display</span>: flex; <span class=\"attribute\">justify-content</span>: space-between;&#125;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.div</span> &#123; <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red; <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>; &#125;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.right</span> &#123; <span class=\"attribute\">margin-left</span>: auto; &#125;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;wrap&#x27;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;div&#x27;</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;div right&#x27;</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;div&#x27;</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<iframe width=\"100%\" height=\"100px\" srcdoc=\"\n<style type='text/css'>\n  .wrap { text-align: center; display: flex; justify-content: space-between;}\n  .div { border: 1px solid red; width: 200px; }\n  .right { margin-left: auto; }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n  <div class='div right'>test</div>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\">阮一峰教程</a></p>\n","site":{"data":{}},"more":"<h2 id=\"flex布局是什么\"><a href=\"#flex布局是什么\" class=\"headerlink\" title=\"flex布局是什么\"></a>flex布局是什么</h2><p>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p>\n<p>任何一个容器都可以指定为Flex布局。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//块元素</span></span><br><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//行内元素</span></span><br><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//webkit内核浏览器(chrome, safari)</span></span><br><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: -webkit-flex; <span class=\"comment\">/* Safari */</span></span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"容器的属性\"><a href=\"#容器的属性\" class=\"headerlink\" title=\"容器的属性\"></a>容器的属性</h2><ul>\n<li>flex-direction</li>\n<li>flex-wrap</li>\n<li>flex-flow</li>\n<li>justify-content</li>\n<li>align-items</li>\n<li>align-content</li>\n</ul>\n<h3 id=\"1、flex-direction属性\"><a href=\"#1、flex-direction属性\" class=\"headerlink\" title=\"1、flex-direction属性\"></a>1、flex-direction属性</h3><p>flex-direction属性决定主轴的方向（即项目的排列方向）。</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">row</span>（默认值）：主轴为水平方向，起点在左端。</span><br><span class=\"line\"><span class=\"keyword\">row</span>-<span class=\"keyword\">reverse</span>：主轴为水平方向，起点在右端。</span><br><span class=\"line\"><span class=\"keyword\">column</span>：主轴为垂直方向，起点在上沿。</span><br><span class=\"line\"><span class=\"keyword\">column</span>-<span class=\"keyword\">reverse</span>：主轴为垂直方向，起点在下沿。</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、flex-wrap属性\"><a href=\"#2、flex-wrap属性\" class=\"headerlink\" title=\"2、flex-wrap属性\"></a>2、flex-wrap属性</h3><p>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"code\"><pre><span class=\"line\">nowrap（默认）：不换行。</span><br><span class=\"line\"><span class=\"built_in\">wrap</span>：换行，第一行在上方。</span><br><span class=\"line\"><span class=\"built_in\">wrap</span>-<span class=\"built_in\">reverse</span>：换行，第一行在下方。</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、flex-flow\"><a href=\"#3、flex-flow\" class=\"headerlink\" title=\"3、flex-flow\"></a>3、flex-flow</h3><p>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-flow</span>: &lt;flex-direction&gt; &lt;flex-wrap&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、justify-content属性\"><a href=\"#4、justify-content属性\" class=\"headerlink\" title=\"4、justify-content属性\"></a>4、justify-content属性</h3><p>justify-content属性定义了项目在主轴上的对齐方式。</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">flex-start（默认值）：左对齐</span><br><span class=\"line\">flex-<span class=\"keyword\">end</span>：右对齐</span><br><span class=\"line\">center： 居中</span><br><span class=\"line\"><span class=\"literal\">space</span>-<span class=\"keyword\">between</span>：两端对齐，项目之间的间隔都相等。</span><br><span class=\"line\"><span class=\"literal\">space</span>-<span class=\"keyword\">around</span>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</span><br></pre></td></tr></table></figure>\n<h3 id=\"5、align-items属性\"><a href=\"#5、align-items属性\" class=\"headerlink\" title=\"5、align-items属性\"></a>5、align-items属性</h3><p>align-items属性定义项目在交叉轴上如何对齐。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">flex</span>-start：交叉轴的起点对齐。</span><br><span class=\"line\"><span class=\"attribute\">flex</span>-end：交叉轴的终点对齐。</span><br><span class=\"line\">center：交叉轴的中点对齐。</span><br><span class=\"line\">baseline: 项目的第一行文字的基线对齐。</span><br><span class=\"line\">stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</span><br></pre></td></tr></table></figure>\n<h3 id=\"6、align-content属性\"><a href=\"#6、align-content属性\" class=\"headerlink\" title=\"6、align-content属性\"></a>6、align-content属性</h3><p>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">flex-start：与交叉轴的起点对齐。</span><br><span class=\"line\">flex-<span class=\"keyword\">end</span>：与交叉轴的终点对齐。</span><br><span class=\"line\">center：与交叉轴的中点对齐。</span><br><span class=\"line\"><span class=\"literal\">space</span>-<span class=\"keyword\">between</span>：与交叉轴两端对齐，轴线之间的间隔平均分布。</span><br><span class=\"line\"><span class=\"literal\">space</span>-<span class=\"keyword\">around</span>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</span><br><span class=\"line\">stretch（默认值）：轴线占满整个交叉轴。</span><br></pre></td></tr></table></figure>\n<h2 id=\"项目的属性\"><a href=\"#项目的属性\" class=\"headerlink\" title=\"项目的属性\"></a>项目的属性</h2><p>以下6个属性设置在项目上。</p>\n<ul>\n<li>order</li>\n<li>flex-grow</li>\n<li>flex-shrink</li>\n<li>flex-basis</li>\n<li>flex</li>\n<li>align-self<h3 id=\"1、order属性\"><a href=\"#1、order属性\" class=\"headerlink\" title=\"1、order属性\"></a>1、order属性</h3>order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。<h3 id=\"2、flex-grow属性\"><a href=\"#2、flex-grow属性\" class=\"headerlink\" title=\"2、flex-grow属性\"></a>2、flex-grow属性</h3>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。<br>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。<h3 id=\"3、flex-shrink属性\"><a href=\"#3、flex-shrink属性\" class=\"headerlink\" title=\"3、flex-shrink属性\"></a>3、flex-shrink属性</h3>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。<br>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。<br>负值对该属性无效。<h3 id=\"4、flex-basis属性\"><a href=\"#4、flex-basis属性\" class=\"headerlink\" title=\"4、flex-basis属性\"></a>4、flex-basis属性</h3>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。<br>它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。<h3 id=\"5、flex属性\"><a href=\"#5、flex属性\" class=\"headerlink\" title=\"5、flex属性\"></a>5、flex属性</h3>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>: none | [ &lt;<span class=\"string\">&#x27;flex-grow&#x27;</span>&gt; &lt;<span class=\"string\">&#x27;flex-shrink&#x27;</span>&gt;? || &lt;<span class=\"string\">&#x27;flex-basis&#x27;</span>&gt; ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。<br>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。<h3 id=\"6、align-self属性\"><a href=\"#6、align-self属性\" class=\"headerlink\" title=\"6、align-self属性\"></a>6、align-self属性</h3>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。<figure class=\"highlight coq\"><table><tr><td class=\"code\"><pre><span class=\"line\">.item &#123;</span><br><span class=\"line\">  align-self: <span class=\"built_in\">auto</span> | <span class=\"type\">flex</span>-start | <span class=\"type\">flex</span>-<span class=\"keyword\">end</span> | <span class=\"type\">center</span> | <span class=\"type\">baseline</span> | <span class=\"type\">stretch</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</li>\n</ul>\n<h2 id=\"flex中的margin\"><a href=\"#flex中的margin\" class=\"headerlink\" title=\"flex中的margin\"></a>flex中的margin</h2><p>实现一个元素在左侧，另外2个元素在右侧</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&#x27;text/css&#x27;</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.wrap</span> &#123; <span class=\"attribute\">text-align</span>: center; <span class=\"attribute\">display</span>: flex; <span class=\"attribute\">justify-content</span>: space-between;&#125;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.div</span> &#123; <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red; <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>; &#125;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.right</span> &#123; <span class=\"attribute\">margin-left</span>: auto; &#125;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;wrap&#x27;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;div&#x27;</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;div right&#x27;</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;div&#x27;</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<iframe width=\"100%\" height=\"100px\" srcdoc=\"\n<style type='text/css'>\n  .wrap { text-align: center; display: flex; justify-content: space-between;}\n  .div { border: 1px solid red; width: 200px; }\n  .right { margin-left: auto; }\n</style>\n<div class='wrap'>\n  <div class='div'>test</div>\n  <div class='div right'>test</div>\n  <div class='div'>test</div>\n</div>\n\">\n</iframe>\n\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\">阮一峰教程</a></p>\n"},{"layout":"projects","title":"网站推荐","date":"2019-07-11T16:00:00.000Z","excerpt":"相关教程及Api检索","comments":1,"_content":"\n## [Chart.js](https://www.chartjs.org/docs/latest/)\n\n## [css小图标大全](https://fontawesome.com/v4.7.0/)\n\n## [精美图片](http://pic.netbian.com/)\n\nto be contined...","source":"_posts/2019-07-12-网站推荐.md","raw":"---\nlayout: projects\ntitle: \"网站推荐\"\ndate: 2019-07-12\nexcerpt: \"相关教程及Api检索\"\ntags: [projects]\ncomments: true\n---\n\n## [Chart.js](https://www.chartjs.org/docs/latest/)\n\n## [css小图标大全](https://fontawesome.com/v4.7.0/)\n\n## [精美图片](http://pic.netbian.com/)\n\nto be contined...","slug":"2019-07-12-网站推荐","published":1,"updated":"2020-11-24T07:53:04.747Z","photos":[],"link":"","_id":"ckoe9iguc000j8cpn7zxu2d2f","content":"<h2 id=\"Chart-js\"><a href=\"#Chart-js\" class=\"headerlink\" title=\"Chart.js\"></a><a href=\"https://www.chartjs.org/docs/latest/\">Chart.js</a></h2><h2 id=\"css小图标大全\"><a href=\"#css小图标大全\" class=\"headerlink\" title=\"css小图标大全\"></a><a href=\"https://fontawesome.com/v4.7.0/\">css小图标大全</a></h2><h2 id=\"精美图片\"><a href=\"#精美图片\" class=\"headerlink\" title=\"精美图片\"></a><a href=\"http://pic.netbian.com/\">精美图片</a></h2><p>to be contined…</p>\n","site":{"data":{}},"more":"<h2 id=\"Chart-js\"><a href=\"#Chart-js\" class=\"headerlink\" title=\"Chart.js\"></a><a href=\"https://www.chartjs.org/docs/latest/\">Chart.js</a></h2><h2 id=\"css小图标大全\"><a href=\"#css小图标大全\" class=\"headerlink\" title=\"css小图标大全\"></a><a href=\"https://fontawesome.com/v4.7.0/\">css小图标大全</a></h2><h2 id=\"精美图片\"><a href=\"#精美图片\" class=\"headerlink\" title=\"精美图片\"></a><a href=\"http://pic.netbian.com/\">精美图片</a></h2><p>to be contined…</p>\n"},{"layout":"post","title":"docker的http代理","date":"2019-10-28T16:00:00.000Z","excerpt":"docker无法访问网络，在需要网络代理的情况下，配置docker http代理","comments":1,"_content":"\n## 步骤\n解决代理的方法，参考官网教程   \n[https://docs.docker.com/config/daemon/systemd/#httphttps-proxy](https://docs.docker.com/config/daemon/systemd/#httphttps-proxy)\n\n### 创建文件夹\n```\nsudo mkdir -p /etc/systemd/system/docker.service.d\n```\n### 创建配置文件\n```\ncd /etc/systemd/system/docker.service.d\ntouch http-proxy.conf\n```\n### 在http-proxy.conf中添加http代理\n```\n[Service] Environment=\"HTTP_PROXY=http://proxy.example.com:80/\" \"NO_PROXY=localhost,127.0.0.1\"\n```\n### 更新，使配置文件生效\n```\nsudo systemctl daemon-reload\n```\n### 重启docker服务\n```\nsudo systemctl restart docker\n```\n### 检查配置是否生效\n```\n$ systemctl show --property=Environment docker\n```\n\n## docker换源、设置私有镜像仓库\n\n```\n[root@k8s-master ~]# cat /etc/docker/daemon.json\n{\n  \"registry-mirrors\": [\"https://gqk8w9va.mirror.aliyuncs.com\"],\n  \"insecure-registries\":[\"193.160.60.94\"]\n}\n```\n\n## 转载\n[配置Docker的HTTP代理](https://blog.csdn.net/talang376763947/article/details/79281009)","source":"_posts/2019-10-29-proxy-of-docker.md","raw":"---\nlayout: post\ntitle: \"docker的http代理\"\ndate: 2019-10-29\nexcerpt: \"docker无法访问网络，在需要网络代理的情况下，配置docker http代理\"\ntags: [docker]\ncomments: true\n---\n\n## 步骤\n解决代理的方法，参考官网教程   \n[https://docs.docker.com/config/daemon/systemd/#httphttps-proxy](https://docs.docker.com/config/daemon/systemd/#httphttps-proxy)\n\n### 创建文件夹\n```\nsudo mkdir -p /etc/systemd/system/docker.service.d\n```\n### 创建配置文件\n```\ncd /etc/systemd/system/docker.service.d\ntouch http-proxy.conf\n```\n### 在http-proxy.conf中添加http代理\n```\n[Service] Environment=\"HTTP_PROXY=http://proxy.example.com:80/\" \"NO_PROXY=localhost,127.0.0.1\"\n```\n### 更新，使配置文件生效\n```\nsudo systemctl daemon-reload\n```\n### 重启docker服务\n```\nsudo systemctl restart docker\n```\n### 检查配置是否生效\n```\n$ systemctl show --property=Environment docker\n```\n\n## docker换源、设置私有镜像仓库\n\n```\n[root@k8s-master ~]# cat /etc/docker/daemon.json\n{\n  \"registry-mirrors\": [\"https://gqk8w9va.mirror.aliyuncs.com\"],\n  \"insecure-registries\":[\"193.160.60.94\"]\n}\n```\n\n## 转载\n[配置Docker的HTTP代理](https://blog.csdn.net/talang376763947/article/details/79281009)","slug":"2019-10-29-proxy-of-docker","published":1,"updated":"2020-12-23T06:40:28.997Z","photos":[],"link":"","_id":"ckoe9igue000l8cpn53pi1qi6","content":"<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><p>解决代理的方法，参考官网教程<br><a href=\"https://docs.docker.com/config/daemon/systemd/#httphttps-proxy\">https://docs.docker.com/config/daemon/systemd/#httphttps-proxy</a></p>\n<h3 id=\"创建文件夹\"><a href=\"#创建文件夹\" class=\"headerlink\" title=\"创建文件夹\"></a>创建文件夹</h3><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p <span class=\"regexp\">/etc/</span>systemd<span class=\"regexp\">/system/</span>docker.service.d</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h3><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd <span class=\"regexp\">/etc/</span>systemd<span class=\"regexp\">/system/</span>docker.service.d</span><br><span class=\"line\">touch http-proxy.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"在http-proxy-conf中添加http代理\"><a href=\"#在http-proxy-conf中添加http代理\" class=\"headerlink\" title=\"在http-proxy.conf中添加http代理\"></a>在http-proxy.conf中添加http代理</h3><figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[Service]</span> <span class=\"attr\">Environment</span>=<span class=\"string\">&quot;HTTP_PROXY=http://proxy.example.com:80/&quot;</span> <span class=\"string\">&quot;NO_PROXY=localhost,127.0.0.1&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"更新，使配置文件生效\"><a href=\"#更新，使配置文件生效\" class=\"headerlink\" title=\"更新，使配置文件生效\"></a>更新，使配置文件生效</h3><figure class=\"highlight ebnf\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">sudo systemctl daemon-reload</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"重启docker服务\"><a href=\"#重启docker服务\" class=\"headerlink\" title=\"重启docker服务\"></a>重启docker服务</h3><figure class=\"highlight ebnf\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">sudo systemctl restart docker</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"检查配置是否生效\"><a href=\"#检查配置是否生效\" class=\"headerlink\" title=\"检查配置是否生效\"></a>检查配置是否生效</h3><figure class=\"highlight crmsh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ systemctl show --<span class=\"keyword\">property</span><span class=\"title\"></span>=Environment docker</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"docker换源、设置私有镜像仓库\"><a href=\"#docker换源、设置私有镜像仓库\" class=\"headerlink\" title=\"docker换源、设置私有镜像仓库\"></a>docker换源、设置私有镜像仓库</h2><figure class=\"highlight crmsh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-<span class=\"keyword\">master</span> <span class=\"title\">~]# cat</span> /etc/docker/daemon.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;registry-mirrors&quot;</span>: [<span class=\"string\">&quot;https://gqk8w9va.mirror.aliyuncs.com&quot;</span>],</span><br><span class=\"line\">  <span class=\"string\">&quot;insecure-registries&quot;</span>:[<span class=\"string\">&quot;193.160.60.94&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"转载\"><a href=\"#转载\" class=\"headerlink\" title=\"转载\"></a>转载</h2><p><a href=\"https://blog.csdn.net/talang376763947/article/details/79281009\">配置Docker的HTTP代理</a></p>\n","site":{"data":{}},"more":"<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><p>解决代理的方法，参考官网教程<br><a href=\"https://docs.docker.com/config/daemon/systemd/#httphttps-proxy\">https://docs.docker.com/config/daemon/systemd/#httphttps-proxy</a></p>\n<h3 id=\"创建文件夹\"><a href=\"#创建文件夹\" class=\"headerlink\" title=\"创建文件夹\"></a>创建文件夹</h3><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p <span class=\"regexp\">/etc/</span>systemd<span class=\"regexp\">/system/</span>docker.service.d</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h3><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd <span class=\"regexp\">/etc/</span>systemd<span class=\"regexp\">/system/</span>docker.service.d</span><br><span class=\"line\">touch http-proxy.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"在http-proxy-conf中添加http代理\"><a href=\"#在http-proxy-conf中添加http代理\" class=\"headerlink\" title=\"在http-proxy.conf中添加http代理\"></a>在http-proxy.conf中添加http代理</h3><figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[Service]</span> <span class=\"attr\">Environment</span>=<span class=\"string\">&quot;HTTP_PROXY=http://proxy.example.com:80/&quot;</span> <span class=\"string\">&quot;NO_PROXY=localhost,127.0.0.1&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"更新，使配置文件生效\"><a href=\"#更新，使配置文件生效\" class=\"headerlink\" title=\"更新，使配置文件生效\"></a>更新，使配置文件生效</h3><figure class=\"highlight ebnf\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">sudo systemctl daemon-reload</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"重启docker服务\"><a href=\"#重启docker服务\" class=\"headerlink\" title=\"重启docker服务\"></a>重启docker服务</h3><figure class=\"highlight ebnf\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">sudo systemctl restart docker</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"检查配置是否生效\"><a href=\"#检查配置是否生效\" class=\"headerlink\" title=\"检查配置是否生效\"></a>检查配置是否生效</h3><figure class=\"highlight crmsh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ systemctl show --<span class=\"keyword\">property</span><span class=\"title\"></span>=Environment docker</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"docker换源、设置私有镜像仓库\"><a href=\"#docker换源、设置私有镜像仓库\" class=\"headerlink\" title=\"docker换源、设置私有镜像仓库\"></a>docker换源、设置私有镜像仓库</h2><figure class=\"highlight crmsh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-<span class=\"keyword\">master</span> <span class=\"title\">~]# cat</span> /etc/docker/daemon.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;registry-mirrors&quot;</span>: [<span class=\"string\">&quot;https://gqk8w9va.mirror.aliyuncs.com&quot;</span>],</span><br><span class=\"line\">  <span class=\"string\">&quot;insecure-registries&quot;</span>:[<span class=\"string\">&quot;193.160.60.94&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"转载\"><a href=\"#转载\" class=\"headerlink\" title=\"转载\"></a>转载</h2><p><a href=\"https://blog.csdn.net/talang376763947/article/details/79281009\">配置Docker的HTTP代理</a></p>\n"},{"layout":"post","title":"linux连接蓝牙的方法","date":"2020-05-10T16:00:00.000Z","excerpt":"在linux上使用蓝牙，连接耳机、键盘等蓝牙设备","comments":1,"_content":"\n## 连接蓝牙\n\n首先确定有蓝牙设备，没有去网上购买蓝牙发射器  \n\n```bash\n$ lsusb\nBus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub\nBus 001 Device 004: ID 17ef:608d Lenovo\nBus 001 Device 003: ID 0a12:0001 Cambridge Silicon Radio, Ltd Bluetooth Dongle (HCI mode)\nBus 001 Device 002: ID 17ef:6099 Lenovo\nBus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\n```\n\n然后运行激活蓝牙设备\n\n```bash\n$ hciconfig\nhci0: Type: Primary  Bus: USB\n  BD Address: 00:1A:7D:DA:71:11  ACL MTU: 310:10  SCO MTU: 64:8\n  UP RUNNING PSCAN\n  RX bytes:1009522 acl:55943 sco:0 events:201 errors:0\n  TX bytes:4712 acl:49 sco:0 commands:90 errors:0\n$ sudo hciconfig hci0 up\n```\n\n使用bluetoothctl去连接蓝牙\n```\n$ bluetoothctl\n[bluetooth]# scan on 开始扫描\n[bluetooth]# pair 01:02:03:04:05:06 后面的mac地址是你的键盘mac地址\n[bluetooth]# trust 01:02:03:04:05:06 把键盘设置为可信设备\n\n[bluetooth]# connect 01:02:03:04:05:06 进行对接\n```\n\n### 参考\n[Linux下的蓝牙键盘对接](https://www.jianshu.com/p/a89c8a0fdd73)  \n[在Linux系统中使用蓝牙功能的基本方法](https://www.jb51.net/LINUXjishu/379648.html)\n","source":"_posts/2020-05-11-linux-connect-blueteeth.md","raw":"---\nlayout: post\ntitle: \"linux连接蓝牙的方法\"\ndate: 2020-05-11\nexcerpt: \"在linux上使用蓝牙，连接耳机、键盘等蓝牙设备\"\ntags: [linux]\ncomments: true\n---\n\n## 连接蓝牙\n\n首先确定有蓝牙设备，没有去网上购买蓝牙发射器  \n\n```bash\n$ lsusb\nBus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub\nBus 001 Device 004: ID 17ef:608d Lenovo\nBus 001 Device 003: ID 0a12:0001 Cambridge Silicon Radio, Ltd Bluetooth Dongle (HCI mode)\nBus 001 Device 002: ID 17ef:6099 Lenovo\nBus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\n```\n\n然后运行激活蓝牙设备\n\n```bash\n$ hciconfig\nhci0: Type: Primary  Bus: USB\n  BD Address: 00:1A:7D:DA:71:11  ACL MTU: 310:10  SCO MTU: 64:8\n  UP RUNNING PSCAN\n  RX bytes:1009522 acl:55943 sco:0 events:201 errors:0\n  TX bytes:4712 acl:49 sco:0 commands:90 errors:0\n$ sudo hciconfig hci0 up\n```\n\n使用bluetoothctl去连接蓝牙\n```\n$ bluetoothctl\n[bluetooth]# scan on 开始扫描\n[bluetooth]# pair 01:02:03:04:05:06 后面的mac地址是你的键盘mac地址\n[bluetooth]# trust 01:02:03:04:05:06 把键盘设置为可信设备\n\n[bluetooth]# connect 01:02:03:04:05:06 进行对接\n```\n\n### 参考\n[Linux下的蓝牙键盘对接](https://www.jianshu.com/p/a89c8a0fdd73)  \n[在Linux系统中使用蓝牙功能的基本方法](https://www.jb51.net/LINUXjishu/379648.html)\n","slug":"2020-05-11-linux-connect-blueteeth","published":1,"updated":"2020-11-24T07:53:04.749Z","photos":[],"link":"","_id":"ckoe9igug000m8cpn60ckdwkh","content":"<h2 id=\"连接蓝牙\"><a href=\"#连接蓝牙\" class=\"headerlink\" title=\"连接蓝牙\"></a>连接蓝牙</h2><p>首先确定有蓝牙设备，没有去网上购买蓝牙发射器  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ lsusb</span><br><span class=\"line\">Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class=\"line\">Bus 001 Device 004: ID 17ef:608d Lenovo</span><br><span class=\"line\">Bus 001 Device 003: ID 0a12:0001 Cambridge Silicon Radio, Ltd Bluetooth Dongle (HCI mode)</span><br><span class=\"line\">Bus 001 Device 002: ID 17ef:6099 Lenovo</span><br><span class=\"line\">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br></pre></td></tr></table></figure>\n\n<p>然后运行激活蓝牙设备</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hciconfig</span><br><span class=\"line\">hci0: Type: Primary  Bus: USB</span><br><span class=\"line\">  BD Address: 00:1A:7D:DA:71:11  ACL MTU: 310:10  SCO MTU: 64:8</span><br><span class=\"line\">  UP RUNNING PSCAN</span><br><span class=\"line\">  RX bytes:1009522 acl:55943 sco:0 events:201 errors:0</span><br><span class=\"line\">  TX bytes:4712 acl:49 sco:0 commands:90 errors:0</span><br><span class=\"line\">$ sudo hciconfig hci0 up</span><br></pre></td></tr></table></figure>\n\n<p>使用bluetoothctl去连接蓝牙</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ bluetoothctl</span><br><span class=\"line\">[bluetooth]# scan on 开始扫描</span><br><span class=\"line\">[bluetooth]# pair <span class=\"number\">01</span>:<span class=\"number\">02</span>:<span class=\"number\">03</span>:<span class=\"number\">04</span>:<span class=\"number\">05</span>:<span class=\"number\">06</span> 后面的mac地址是你的键盘mac地址</span><br><span class=\"line\">[bluetooth]# trust <span class=\"number\">01</span>:<span class=\"number\">02</span>:<span class=\"number\">03</span>:<span class=\"number\">04</span>:<span class=\"number\">05</span>:<span class=\"number\">06</span> 把键盘设置为可信设备</span><br><span class=\"line\"></span><br><span class=\"line\">[bluetooth]# connect <span class=\"number\">01</span>:<span class=\"number\">02</span>:<span class=\"number\">03</span>:<span class=\"number\">04</span>:<span class=\"number\">05</span>:<span class=\"number\">06</span> 进行对接</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.jianshu.com/p/a89c8a0fdd73\">Linux下的蓝牙键盘对接</a><br><a href=\"https://www.jb51.net/LINUXjishu/379648.html\">在Linux系统中使用蓝牙功能的基本方法</a></p>\n","site":{"data":{}},"more":"<h2 id=\"连接蓝牙\"><a href=\"#连接蓝牙\" class=\"headerlink\" title=\"连接蓝牙\"></a>连接蓝牙</h2><p>首先确定有蓝牙设备，没有去网上购买蓝牙发射器  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ lsusb</span><br><span class=\"line\">Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class=\"line\">Bus 001 Device 004: ID 17ef:608d Lenovo</span><br><span class=\"line\">Bus 001 Device 003: ID 0a12:0001 Cambridge Silicon Radio, Ltd Bluetooth Dongle (HCI mode)</span><br><span class=\"line\">Bus 001 Device 002: ID 17ef:6099 Lenovo</span><br><span class=\"line\">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br></pre></td></tr></table></figure>\n\n<p>然后运行激活蓝牙设备</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hciconfig</span><br><span class=\"line\">hci0: Type: Primary  Bus: USB</span><br><span class=\"line\">  BD Address: 00:1A:7D:DA:71:11  ACL MTU: 310:10  SCO MTU: 64:8</span><br><span class=\"line\">  UP RUNNING PSCAN</span><br><span class=\"line\">  RX bytes:1009522 acl:55943 sco:0 events:201 errors:0</span><br><span class=\"line\">  TX bytes:4712 acl:49 sco:0 commands:90 errors:0</span><br><span class=\"line\">$ sudo hciconfig hci0 up</span><br></pre></td></tr></table></figure>\n\n<p>使用bluetoothctl去连接蓝牙</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ bluetoothctl</span><br><span class=\"line\">[bluetooth]# scan on 开始扫描</span><br><span class=\"line\">[bluetooth]# pair <span class=\"number\">01</span>:<span class=\"number\">02</span>:<span class=\"number\">03</span>:<span class=\"number\">04</span>:<span class=\"number\">05</span>:<span class=\"number\">06</span> 后面的mac地址是你的键盘mac地址</span><br><span class=\"line\">[bluetooth]# trust <span class=\"number\">01</span>:<span class=\"number\">02</span>:<span class=\"number\">03</span>:<span class=\"number\">04</span>:<span class=\"number\">05</span>:<span class=\"number\">06</span> 把键盘设置为可信设备</span><br><span class=\"line\"></span><br><span class=\"line\">[bluetooth]# connect <span class=\"number\">01</span>:<span class=\"number\">02</span>:<span class=\"number\">03</span>:<span class=\"number\">04</span>:<span class=\"number\">05</span>:<span class=\"number\">06</span> 进行对接</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.jianshu.com/p/a89c8a0fdd73\">Linux下的蓝牙键盘对接</a><br><a href=\"https://www.jb51.net/LINUXjishu/379648.html\">在Linux系统中使用蓝牙功能的基本方法</a></p>\n"},{"layout":"post","title":"整理面试相关","date":"2020-09-05T16:00:00.000Z","excerpt":"主要是一些关于web的知识, 记录一些要点","comments":1,"_content":"\n简单记录一下面试的一些要点\n\n## javascript事件机制  \n先捕获，后冒泡，捕获从上到下，冒泡从下到上\n\n### 冒泡机制\nIE提出的事件流叫做事件冒泡，即事件开始时由最具体的元素接收，然后逐级向上传播到较为不具体的节点，看一下以下示例\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body onclick=\"bodyClick()\">\n\n    <div onclick=\"divClick()\">\n        <button onclick=\"btn()\">\n            <p onclick=\"p()\">点击冒泡</p>\n        </button>\n    </div>\n    <script>\n       \n       function p(){\n          console.log('p标签被点击')\n       }\n        function btn(){\n            console.log(\"button被点击\")\n        }\n         function divClick(event){\n             console.log('div被点击');\n         }\n        function bodyClick(){\n            console.log('body被点击')\n        }\n\n    </script>\n\n</body>\n</html>\n```\n结果显而易见\n```\np标签被点击\nbutton被点击\ndiv被点击\nbody被点击\n```\n### 捕获机制\n 事件捕获流的思想是不太具体的DOM节点应该更早接收到事件，而最具体的节点应该最后接收到事件，针对上面同样的例子，点击按钮，那么此时click事件会按照这样传播：（下面我们就借用addEventListener的第三个参数来模拟事件捕获流）\n ```\n <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n\n<div>\n    <button>\n        <p>点击捕获</p>\n    </button>\n</div>\n<script>\n    var oP=document.querySelector('p');\n    var oB=document.querySelector('button');\n    var oD=document.querySelector('div');\n    var oBody=document.querySelector('body');\n\n    oP.addEventListener('click',function(){\n        console.log('p标签被点击')\n    },true);\n\n    oB.addEventListener('click',function(){\n        console.log(\"button被点击\")\n    },true);\n\n    oD.addEventListener('click',  function(){\n        console.log('div被点击')\n    },true);\n\n    oBody.addEventListener('click',function(){\n        console.log('body被点击')\n    },true);\n\n</script>\n ```\n 与冒泡相反的结果\n ```\n body被点击\n div被点击\n button被点击\n p标签被点击\n ```\n\n \n### DOM 2级事件处理程序\n`DOM 2`级事件定义了两方法：用于处理添加事件和删除事件的操作： \n>添加事件 addEventListener()  \n>删除事件  removeEventListener()\n\n　　 所有DOM节点中都包含这两个方法，并且他们都包含3个参数： （1） 要处理的事件方式（例如：`click，mouseover,dbclick.....`） （2）事件处理的函数，可以为匿名函数，也可以为命名函数（但如果需要删除事件，必须是命名函数） （3）**一个布尔值，代表是处于事件冒泡阶段处理还是事件捕获阶段（true：表示在捕获阶段调用事件处理程序；false:表示在冒泡阶段调用事件处理程序）**\n\n　　使用`DOM 2`级事件处理程序的主要好处是可以添加多个事件处理程序，事件处理会按照他们的顺序触发，通过`addEventListener`添加的事件只能用`removeEventListener`来移除，移除时传入的参数与添加时使用的参数必须相同，这也意味着添加的匿名函数将无法移除，\n>（注意：我们默认的第三个参数都是默认`false`,是指在冒泡阶段添加，大多数情况下，都是将事件处理程序添加到事件的冒泡阶段，这样可以最大限度的兼容各个浏览器）\n\n ## css省略文字的实现\n\n ```\n overflow: hidden;\n white-space: nowrap;\n text-overflow: allipsis\n ```\n\n ## settimeout, setinterval，eval在赋值时有什么问题？\n ## vue解决跨域问题\n### 什么是跨域\n\n跨域：由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一个与当前页面地址不同即为跨域。存在跨域的情况：\n\n* 网络协议不同，如http协议访问https协议。\n* 端口不同，如80端口访问8080端口。\n* 域名不同，如qianduanblog.com访问baidu.com。\n* 子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。\n* 域名和域名对应ip,如www.a.com访问20.205.28.90.\n\n下面是项目使用vue-cli脚手架搭建  \n使用http-proxy-middleware 代理解决跨域问题  \n例如请求的url:“http://f.apiplus.cn/bj11x5.json”  \n1、打开config/index.js,在proxyTable中添写如下代码：\n```\nproxyTable: {\n  '/api': {  //使用\"/api\"来代替\"http://f.apiplus.c\"\n    target: 'http://f.apiplus.cn', //源地址\n    changeOrigin: true, //是否跨域\n    pathRewrite: {\n      '^/api': 'http://f.apiplus.cn' //路径重写\n      }\n  }\n}\n```\n2、使用axios请求数据时直接使用“/api”：\n```\ngetData () {\naxios.get('/api/bj11x5.json', function (res) {\n  console.log(res)\n})\n```\n通过这中方法去解决跨域，打包部署时还按这种方法会出问题。解决方法如下：\n```\nlet serverUrl = '/api/'  //本地调试时\n// let serverUrl = 'http://f.apiplus.cn/'  //打包部署上线时\n```\n## vue解决xss注入问题\n1.在终端引入xss,命令：\n```\nnpm install xss --save\n```\n2.在vue的页面进行引入\n```\nimport xss from 'xss'\n```\n3.定义一个变量进行测试   \n首先测试一个没有进行防止xss攻击的测试\n```\n<p v-html=\"test\"></p>\n \nexport default {\n  data () {\n    return {\n      test: `<a onclick='alert(\"xss攻击\")'>链接</a>`\n    }\n```\n结果，js事件直接被翻译了\n```\nxss攻击\n```\n因此应该杜绝这些情况，解决方法如下\n```\n<p v-html=\"$xss(test)\"></p>\nimport xss from 'xss'\nexport default {\n  data () {\n    return {\n      test: `<a onclick='alert(\"xss攻击\")'>链接</a>`\n    }\n}\n \nObject.defineProperty(Vue.prototype, '$xss', {\n  value: xss\n})\n```\n此时a标签会保留，但是onclick事件被拦截了\n\n## vue axios的几种请求方式\naxios的请求方法：get、post、put、patch、delete\n\n* get：获取数据\n* post：提交数据（表单提交+文件上传）\n* put：更新数据（所有数据推送到后端）\n* patch：更新数据（只将更改的数据推送到后端）\n* delete：删除数据\n```\n//axios的get请求第一种写法不带参数\naxios.get('/data.json').then((res)=>{\n  console.log(res)\n}),\n\n//axios的get请求第一种写法带参数\naxios.get('/data.json',{\n  params:{\n    id:12\n  }\n}).then((res)=>{\n  console.log(res)\n}),\n\n//axios的get请求第二种写法不带参数\naxios({\n  method:'get',\n  url:'/data.json',\n}).then(res=>{\n  console.log(res)\n}),\n\n//axios的get请求第二种写法带参数\naxios({\n  method:'get',\n  url:'/data.json',\n  params:{\n    id:12\n  },\n}).then(res=>{\n  console.log(res)\n}),\n\n//axios的post请求第一种写法\nlet data = {\n  id:12\n}\naxios.post('/post',data).then((res)=>{\n  console.log(res)\n}),\n\n//axios的post请求第二种写法\naxios({\n  method:'post',\n  url:'/post',\n  data:data\n}).then(res=>{\n  console.log(res)\n}),\n\n//form-data请求,图片上传、文件上传，文件格式为：multipart/form-data，其他请求为application/json\n\nlet formData = new formData()\nfor(let key in data){\n  formData.append(key,data[key])\n},\naxios.post('/post',formData).then(res=>{\n  console.log(res)\n})\n\n//axios之put请求\naxios.put('/put',data).then(res=>{\n  console.log(res)\n})\n\n//axios之patch请求\naxios.patch('/patch',data).then(res=>{\n  console.log(res)\n}),\n\n  //axios之delete请求的第一种写法\n  axios.delete('/delete',{\n    params:{\n      id:12\n    }\n  }).then(res=>{\n    console.log(res)\n  })\n//说明:当使用第一种写法参数为params时，请求接口时参数是放在URL里面的。\n// 例：http://localhost:8080/delete?id=12,而写成第二种方法data就不会，根据实际情况使用\n\n//axios之delete请求的第二种写法\naxios.delete('/delete',{\n  data:{\n    id:12\n  }\n}).then(res=>{\n  console.log(res)\n})\n```\n\n## js如何比较浮点数\n浮点数的定义，非整数的Number类型无法用`=`来比较，这就是为什么在JavaScript中，0.1+0.2不能=0.3：\n```\nconsole.log( 0.1 + 0.2 == 0.3);\nfalse\n```\n这里输出的结果是`false`，说明两边不相等的，这是浮点运算的特点，浮点数运算的精度问题导致等式左右的结果并不是严格相等，而是相差了个微小的值。\n\n所以实际上，这里错误的不是结论，而是比较的方法，正确的比较方法是使用`JavaScript`提供的最小精度值：\n```\nconsole.log( Math.abs(0.1 + 0.2 - 0.3) <= Number.EPSILON);\n```\n\n## 项目做过哪些优化\n* 减少 `HTTP` 请求数\n* 减少` DNS `查询\n* 使用 `CDN`\n* 避免重定向\n* 图片懒加载\n* 减少 `DOM` 元素数量\n* 减少 `DOM` 操作\n* 使用外部 `JavaScript` 和 `CSS`\n* 压缩 `JavaScript` 、 `CSS` 、字体、图片等\n* 优化 `CSS Sprite`\n* 使用 `iconfont`\n* 字体裁剪\n* 多域名分发划分内容到不同域名\n* 尽量减少 `iframe` 使用\n* 避免图片 `src` 为空\n* 把样式表放在 中\n* 把脚本放在页面底部\n\n## 重排和重绘\n* 部分渲染树（或者整个渲染树）需要重新分析并且节点尺寸需要重新计算。这被称为重排。注意这里至少会有一次重排-初始化页面布局。\n* 由于节点的几何属性发生改变或者由于样式发生改变，例如改变元素背景色时，屏幕上的部分内容需要更新。这样的更新被称为重绘。\n\n##  什么情况会触发重排和重绘？\n* 添加、删除、更新 `DOM` 节点\n* 通过 `display: none` 隐藏一个 `DOM` 节点-触发重排和重绘\n* 通过 `visibility: hidden` 隐藏一个 `DOM` 节点-只触发重绘，因为没有几何变化\n* 移动或者给页面中的 `DOM` 节点添加动画\n* 添加一个样式表，调整样式属性\n* 用户行为，例如调整窗口大小，改变字号，或者滚动。\n\n## 浏览器缓存\n* 浏览器缓存分为强缓存和协商缓存。当客户端请求某个资源时，获取缓存的流程如下：\n* 先根据这个资源的一些 http header 判断它是否命中强缓存，如果命中，则直接从本地获取缓存资源，不* 会发请求到服务器；\n* 当强缓存没有命中时，客户端会发送请求到服务器，服务器通过另一些request header验证这个资源是否命* 中协商缓存，称为http再验证，如果命中，服务器将请求返回，但不返回资源，而是告诉客户端直接从缓存* 中获取，客户端收到返回后就会从缓存中获取资源；\n* 强缓存和协商缓存共同之处在于，如果命中缓存，服务器都不会返回资源；\n* 区别是，强缓存不对发送请求到服务器，但协商缓存会。\n* 当协商缓存也没命中时，服务器就会将资源发送回客户端。\n* 当 ctrl+f5 强制刷新网页时，直接从服务器加载，跳过强缓存和协商缓存；\n* 当 f5 刷新网页时，跳过强缓存，但是会检查协商缓存；\n### 强缓存\n* Expires（该字段是 http1.0 时的规范，值为一个绝对时间的 GMT 格式的时间字符串，代表缓存资源的过* 期时间）\n* Cache-Control:max-age（该字段是 http1.1 的规范，强缓存利用其 max-age 值来判断缓存资源的最大生命周期，它的值单位为秒）\n\n### 协商缓存\n* Last-Modified（值为资源最后更新时间，随服务器response返回）\n* If-Modified-Since（通过比较两个时间来判断资源在两次请求期间是否有过修改，如果没有修改，则命中* 协商缓存）\n* ETag（表示资源内容的唯一标识，随服务器response返回）\n* If-None-Match（服务器通过比较请求头部的If-None-Match与当前资源的ETag是否一致来判断资源是否在两次请求之间有过修改，如果没有修改，则命中协商缓存）\n\n\n","source":"_posts/2020-09-06-interview-css.md","raw":"---\nlayout: post\ntitle: \"整理面试相关\"\ndate: 2020-09-06\nexcerpt: \"主要是一些关于web的知识, 记录一些要点\"\ntags: [web, javascript, html, css]\ncomments: true\n---\n\n简单记录一下面试的一些要点\n\n## javascript事件机制  \n先捕获，后冒泡，捕获从上到下，冒泡从下到上\n\n### 冒泡机制\nIE提出的事件流叫做事件冒泡，即事件开始时由最具体的元素接收，然后逐级向上传播到较为不具体的节点，看一下以下示例\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body onclick=\"bodyClick()\">\n\n    <div onclick=\"divClick()\">\n        <button onclick=\"btn()\">\n            <p onclick=\"p()\">点击冒泡</p>\n        </button>\n    </div>\n    <script>\n       \n       function p(){\n          console.log('p标签被点击')\n       }\n        function btn(){\n            console.log(\"button被点击\")\n        }\n         function divClick(event){\n             console.log('div被点击');\n         }\n        function bodyClick(){\n            console.log('body被点击')\n        }\n\n    </script>\n\n</body>\n</html>\n```\n结果显而易见\n```\np标签被点击\nbutton被点击\ndiv被点击\nbody被点击\n```\n### 捕获机制\n 事件捕获流的思想是不太具体的DOM节点应该更早接收到事件，而最具体的节点应该最后接收到事件，针对上面同样的例子，点击按钮，那么此时click事件会按照这样传播：（下面我们就借用addEventListener的第三个参数来模拟事件捕获流）\n ```\n <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n\n<div>\n    <button>\n        <p>点击捕获</p>\n    </button>\n</div>\n<script>\n    var oP=document.querySelector('p');\n    var oB=document.querySelector('button');\n    var oD=document.querySelector('div');\n    var oBody=document.querySelector('body');\n\n    oP.addEventListener('click',function(){\n        console.log('p标签被点击')\n    },true);\n\n    oB.addEventListener('click',function(){\n        console.log(\"button被点击\")\n    },true);\n\n    oD.addEventListener('click',  function(){\n        console.log('div被点击')\n    },true);\n\n    oBody.addEventListener('click',function(){\n        console.log('body被点击')\n    },true);\n\n</script>\n ```\n 与冒泡相反的结果\n ```\n body被点击\n div被点击\n button被点击\n p标签被点击\n ```\n\n \n### DOM 2级事件处理程序\n`DOM 2`级事件定义了两方法：用于处理添加事件和删除事件的操作： \n>添加事件 addEventListener()  \n>删除事件  removeEventListener()\n\n　　 所有DOM节点中都包含这两个方法，并且他们都包含3个参数： （1） 要处理的事件方式（例如：`click，mouseover,dbclick.....`） （2）事件处理的函数，可以为匿名函数，也可以为命名函数（但如果需要删除事件，必须是命名函数） （3）**一个布尔值，代表是处于事件冒泡阶段处理还是事件捕获阶段（true：表示在捕获阶段调用事件处理程序；false:表示在冒泡阶段调用事件处理程序）**\n\n　　使用`DOM 2`级事件处理程序的主要好处是可以添加多个事件处理程序，事件处理会按照他们的顺序触发，通过`addEventListener`添加的事件只能用`removeEventListener`来移除，移除时传入的参数与添加时使用的参数必须相同，这也意味着添加的匿名函数将无法移除，\n>（注意：我们默认的第三个参数都是默认`false`,是指在冒泡阶段添加，大多数情况下，都是将事件处理程序添加到事件的冒泡阶段，这样可以最大限度的兼容各个浏览器）\n\n ## css省略文字的实现\n\n ```\n overflow: hidden;\n white-space: nowrap;\n text-overflow: allipsis\n ```\n\n ## settimeout, setinterval，eval在赋值时有什么问题？\n ## vue解决跨域问题\n### 什么是跨域\n\n跨域：由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一个与当前页面地址不同即为跨域。存在跨域的情况：\n\n* 网络协议不同，如http协议访问https协议。\n* 端口不同，如80端口访问8080端口。\n* 域名不同，如qianduanblog.com访问baidu.com。\n* 子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。\n* 域名和域名对应ip,如www.a.com访问20.205.28.90.\n\n下面是项目使用vue-cli脚手架搭建  \n使用http-proxy-middleware 代理解决跨域问题  \n例如请求的url:“http://f.apiplus.cn/bj11x5.json”  \n1、打开config/index.js,在proxyTable中添写如下代码：\n```\nproxyTable: {\n  '/api': {  //使用\"/api\"来代替\"http://f.apiplus.c\"\n    target: 'http://f.apiplus.cn', //源地址\n    changeOrigin: true, //是否跨域\n    pathRewrite: {\n      '^/api': 'http://f.apiplus.cn' //路径重写\n      }\n  }\n}\n```\n2、使用axios请求数据时直接使用“/api”：\n```\ngetData () {\naxios.get('/api/bj11x5.json', function (res) {\n  console.log(res)\n})\n```\n通过这中方法去解决跨域，打包部署时还按这种方法会出问题。解决方法如下：\n```\nlet serverUrl = '/api/'  //本地调试时\n// let serverUrl = 'http://f.apiplus.cn/'  //打包部署上线时\n```\n## vue解决xss注入问题\n1.在终端引入xss,命令：\n```\nnpm install xss --save\n```\n2.在vue的页面进行引入\n```\nimport xss from 'xss'\n```\n3.定义一个变量进行测试   \n首先测试一个没有进行防止xss攻击的测试\n```\n<p v-html=\"test\"></p>\n \nexport default {\n  data () {\n    return {\n      test: `<a onclick='alert(\"xss攻击\")'>链接</a>`\n    }\n```\n结果，js事件直接被翻译了\n```\nxss攻击\n```\n因此应该杜绝这些情况，解决方法如下\n```\n<p v-html=\"$xss(test)\"></p>\nimport xss from 'xss'\nexport default {\n  data () {\n    return {\n      test: `<a onclick='alert(\"xss攻击\")'>链接</a>`\n    }\n}\n \nObject.defineProperty(Vue.prototype, '$xss', {\n  value: xss\n})\n```\n此时a标签会保留，但是onclick事件被拦截了\n\n## vue axios的几种请求方式\naxios的请求方法：get、post、put、patch、delete\n\n* get：获取数据\n* post：提交数据（表单提交+文件上传）\n* put：更新数据（所有数据推送到后端）\n* patch：更新数据（只将更改的数据推送到后端）\n* delete：删除数据\n```\n//axios的get请求第一种写法不带参数\naxios.get('/data.json').then((res)=>{\n  console.log(res)\n}),\n\n//axios的get请求第一种写法带参数\naxios.get('/data.json',{\n  params:{\n    id:12\n  }\n}).then((res)=>{\n  console.log(res)\n}),\n\n//axios的get请求第二种写法不带参数\naxios({\n  method:'get',\n  url:'/data.json',\n}).then(res=>{\n  console.log(res)\n}),\n\n//axios的get请求第二种写法带参数\naxios({\n  method:'get',\n  url:'/data.json',\n  params:{\n    id:12\n  },\n}).then(res=>{\n  console.log(res)\n}),\n\n//axios的post请求第一种写法\nlet data = {\n  id:12\n}\naxios.post('/post',data).then((res)=>{\n  console.log(res)\n}),\n\n//axios的post请求第二种写法\naxios({\n  method:'post',\n  url:'/post',\n  data:data\n}).then(res=>{\n  console.log(res)\n}),\n\n//form-data请求,图片上传、文件上传，文件格式为：multipart/form-data，其他请求为application/json\n\nlet formData = new formData()\nfor(let key in data){\n  formData.append(key,data[key])\n},\naxios.post('/post',formData).then(res=>{\n  console.log(res)\n})\n\n//axios之put请求\naxios.put('/put',data).then(res=>{\n  console.log(res)\n})\n\n//axios之patch请求\naxios.patch('/patch',data).then(res=>{\n  console.log(res)\n}),\n\n  //axios之delete请求的第一种写法\n  axios.delete('/delete',{\n    params:{\n      id:12\n    }\n  }).then(res=>{\n    console.log(res)\n  })\n//说明:当使用第一种写法参数为params时，请求接口时参数是放在URL里面的。\n// 例：http://localhost:8080/delete?id=12,而写成第二种方法data就不会，根据实际情况使用\n\n//axios之delete请求的第二种写法\naxios.delete('/delete',{\n  data:{\n    id:12\n  }\n}).then(res=>{\n  console.log(res)\n})\n```\n\n## js如何比较浮点数\n浮点数的定义，非整数的Number类型无法用`=`来比较，这就是为什么在JavaScript中，0.1+0.2不能=0.3：\n```\nconsole.log( 0.1 + 0.2 == 0.3);\nfalse\n```\n这里输出的结果是`false`，说明两边不相等的，这是浮点运算的特点，浮点数运算的精度问题导致等式左右的结果并不是严格相等，而是相差了个微小的值。\n\n所以实际上，这里错误的不是结论，而是比较的方法，正确的比较方法是使用`JavaScript`提供的最小精度值：\n```\nconsole.log( Math.abs(0.1 + 0.2 - 0.3) <= Number.EPSILON);\n```\n\n## 项目做过哪些优化\n* 减少 `HTTP` 请求数\n* 减少` DNS `查询\n* 使用 `CDN`\n* 避免重定向\n* 图片懒加载\n* 减少 `DOM` 元素数量\n* 减少 `DOM` 操作\n* 使用外部 `JavaScript` 和 `CSS`\n* 压缩 `JavaScript` 、 `CSS` 、字体、图片等\n* 优化 `CSS Sprite`\n* 使用 `iconfont`\n* 字体裁剪\n* 多域名分发划分内容到不同域名\n* 尽量减少 `iframe` 使用\n* 避免图片 `src` 为空\n* 把样式表放在 中\n* 把脚本放在页面底部\n\n## 重排和重绘\n* 部分渲染树（或者整个渲染树）需要重新分析并且节点尺寸需要重新计算。这被称为重排。注意这里至少会有一次重排-初始化页面布局。\n* 由于节点的几何属性发生改变或者由于样式发生改变，例如改变元素背景色时，屏幕上的部分内容需要更新。这样的更新被称为重绘。\n\n##  什么情况会触发重排和重绘？\n* 添加、删除、更新 `DOM` 节点\n* 通过 `display: none` 隐藏一个 `DOM` 节点-触发重排和重绘\n* 通过 `visibility: hidden` 隐藏一个 `DOM` 节点-只触发重绘，因为没有几何变化\n* 移动或者给页面中的 `DOM` 节点添加动画\n* 添加一个样式表，调整样式属性\n* 用户行为，例如调整窗口大小，改变字号，或者滚动。\n\n## 浏览器缓存\n* 浏览器缓存分为强缓存和协商缓存。当客户端请求某个资源时，获取缓存的流程如下：\n* 先根据这个资源的一些 http header 判断它是否命中强缓存，如果命中，则直接从本地获取缓存资源，不* 会发请求到服务器；\n* 当强缓存没有命中时，客户端会发送请求到服务器，服务器通过另一些request header验证这个资源是否命* 中协商缓存，称为http再验证，如果命中，服务器将请求返回，但不返回资源，而是告诉客户端直接从缓存* 中获取，客户端收到返回后就会从缓存中获取资源；\n* 强缓存和协商缓存共同之处在于，如果命中缓存，服务器都不会返回资源；\n* 区别是，强缓存不对发送请求到服务器，但协商缓存会。\n* 当协商缓存也没命中时，服务器就会将资源发送回客户端。\n* 当 ctrl+f5 强制刷新网页时，直接从服务器加载，跳过强缓存和协商缓存；\n* 当 f5 刷新网页时，跳过强缓存，但是会检查协商缓存；\n### 强缓存\n* Expires（该字段是 http1.0 时的规范，值为一个绝对时间的 GMT 格式的时间字符串，代表缓存资源的过* 期时间）\n* Cache-Control:max-age（该字段是 http1.1 的规范，强缓存利用其 max-age 值来判断缓存资源的最大生命周期，它的值单位为秒）\n\n### 协商缓存\n* Last-Modified（值为资源最后更新时间，随服务器response返回）\n* If-Modified-Since（通过比较两个时间来判断资源在两次请求期间是否有过修改，如果没有修改，则命中* 协商缓存）\n* ETag（表示资源内容的唯一标识，随服务器response返回）\n* If-None-Match（服务器通过比较请求头部的If-None-Match与当前资源的ETag是否一致来判断资源是否在两次请求之间有过修改，如果没有修改，则命中协商缓存）\n\n\n","slug":"2020-09-06-interview-css","published":1,"updated":"2021-05-07T11:55:28.882Z","photos":[],"link":"","_id":"ckoe9iguk000n8cpn9vyhatbl","content":"<p>简单记录一下面试的一些要点</p>\n<h2 id=\"javascript事件机制\"><a href=\"#javascript事件机制\" class=\"headerlink\" title=\"javascript事件机制\"></a>javascript事件机制</h2><p>先捕获，后冒泡，捕获从上到下，冒泡从下到上</p>\n<h3 id=\"冒泡机制\"><a href=\"#冒泡机制\" class=\"headerlink\" title=\"冒泡机制\"></a>冒泡机制</h3><p>IE提出的事件流叫做事件冒泡，即事件开始时由最具体的元素接收，然后逐级向上传播到较为不具体的节点，看一下以下示例</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;bodyClick()&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;divClick()&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;btn()&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;p()&quot;</span>&gt;</span>点击冒泡<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">       </span><br><span class=\"line\"><span class=\"javascript\">       <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">p</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;p标签被点击&#x27;</span>)</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">btn</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;button被点击&quot;</span>)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">         <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">divClick</span>(<span class=\"params\">event</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">             <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;div被点击&#x27;</span>);</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bodyClick</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;body被点击&#x27;</span>)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>结果显而易见</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\">p标签被点击</span><br><span class=\"line\"><span class=\"keyword\">button被点击</span></span><br><span class=\"line\"><span class=\"keyword\">div被点击</span></span><br><span class=\"line\"><span class=\"keyword\">body被点击</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"捕获机制\"><a href=\"#捕获机制\" class=\"headerlink\" title=\"捕获机制\"></a>捕获机制</h3><p> 事件捕获流的思想是不太具体的DOM节点应该更早接收到事件，而最具体的节点应该最后接收到事件，针对上面同样的例子，点击按钮，那么此时click事件会按照这样传播：（下面我们就借用addEventListener的第三个参数来模拟事件捕获流）<br> <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>点击捕获<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> oP=<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;p&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> oB=<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;button&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> oD=<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;div&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> oBody=<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;body&#x27;</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    oP.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;p标签被点击&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,<span class=\"literal\">true</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    oB.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;button被点击&quot;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,<span class=\"literal\">true</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    oD.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;div被点击&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,<span class=\"literal\">true</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    oBody.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;body被点击&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,<span class=\"literal\">true</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br> 与冒泡相反的结果<br> <figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">body被点击</span></span><br><span class=\"line\"><span class=\"keyword\">div被点击</span></span><br><span class=\"line\"><span class=\"keyword\">button被点击</span></span><br><span class=\"line\"><span class=\"keyword\">p标签被点击</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"DOM-2级事件处理程序\"><a href=\"#DOM-2级事件处理程序\" class=\"headerlink\" title=\"DOM 2级事件处理程序\"></a>DOM 2级事件处理程序</h3><p><code>DOM 2</code>级事件定义了两方法：用于处理添加事件和删除事件的操作： </p>\n<blockquote>\n<p>添加事件 addEventListener()<br>删除事件  removeEventListener()</p>\n</blockquote>\n<p>　　 所有DOM节点中都包含这两个方法，并且他们都包含3个参数： （1） 要处理的事件方式（例如：<code>click，mouseover,dbclick.....</code>） （2）事件处理的函数，可以为匿名函数，也可以为命名函数（但如果需要删除事件，必须是命名函数） （3）<strong>一个布尔值，代表是处于事件冒泡阶段处理还是事件捕获阶段（true：表示在捕获阶段调用事件处理程序；false:表示在冒泡阶段调用事件处理程序）</strong></p>\n<p>　　使用<code>DOM 2</code>级事件处理程序的主要好处是可以添加多个事件处理程序，事件处理会按照他们的顺序触发，通过<code>addEventListener</code>添加的事件只能用<code>removeEventListener</code>来移除，移除时传入的参数与添加时使用的参数必须相同，这也意味着添加的匿名函数将无法移除，</p>\n<blockquote>\n<p>（注意：我们默认的第三个参数都是默认<code>false</code>,是指在冒泡阶段添加，大多数情况下，都是将事件处理程序添加到事件的冒泡阶段，这样可以最大限度的兼容各个浏览器）</p>\n</blockquote>\n<h2 id=\"css省略文字的实现\"><a href=\"#css省略文字的实现\" class=\"headerlink\" title=\"css省略文字的实现\"></a>css省略文字的实现</h2> <figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\"><span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\"><span class=\"attribute\">text-overflow</span>: allipsis</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"settimeout-setinterval，eval在赋值时有什么问题？\"><a href=\"#settimeout-setinterval，eval在赋值时有什么问题？\" class=\"headerlink\" title=\"settimeout, setinterval，eval在赋值时有什么问题？\"></a>settimeout, setinterval，eval在赋值时有什么问题？</h2><h2 id=\"vue解决跨域问题\"><a href=\"#vue解决跨域问题\" class=\"headerlink\" title=\"vue解决跨域问题\"></a>vue解决跨域问题</h2><h3 id=\"什么是跨域\"><a href=\"#什么是跨域\" class=\"headerlink\" title=\"什么是跨域\"></a>什么是跨域</h3><p>跨域：由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一个与当前页面地址不同即为跨域。存在跨域的情况：</p>\n<ul>\n<li>网络协议不同，如http协议访问https协议。</li>\n<li>端口不同，如80端口访问8080端口。</li>\n<li>域名不同，如qianduanblog.com访问baidu.com。</li>\n<li>子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。</li>\n<li>域名和域名对应ip,如<a href=\"http://www.a.com访问20.205.28.90/\">www.a.com访问20.205.28.90</a>.</li>\n</ul>\n<p>下面是项目使用vue-cli脚手架搭建<br>使用http-proxy-middleware 代理解决跨域问题<br>例如请求的url:“<a href=\"http://f.apiplus.cn/bj11x5.json%E2%80%9D\">http://f.apiplus.cn/bj11x5.json”</a><br>1、打开config/index.js,在proxyTable中添写如下代码：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxyTable: &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;/api&#x27;</span>: &#123;  <span class=\"regexp\">//</span>使用<span class=\"string\">&quot;/api&quot;</span>来代替<span class=\"string\">&quot;http://f.apiplus.c&quot;</span></span><br><span class=\"line\">    target: <span class=\"string\">&#x27;http://f.apiplus.cn&#x27;</span>, <span class=\"regexp\">//</span>源地址</span><br><span class=\"line\">    changeOrigin: true, <span class=\"regexp\">//</span>是否跨域</span><br><span class=\"line\">    pathRewrite: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;^/api&#x27;</span>: <span class=\"string\">&#x27;http://f.apiplus.cn&#x27;</span> <span class=\"regexp\">//</span>路径重写</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、使用axios请求数据时直接使用“/api”：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">getData () &#123;</span><br><span class=\"line\">axios.<span class=\"built_in\">get</span>(<span class=\"string\">&#x27;/api/bj11x5.json&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(res)</span> &#123;</span></span><br><span class=\"line\">  console.<span class=\"built_in\">log</span>(<span class=\"keyword\">res</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>通过这中方法去解决跨域，打包部署时还按这种方法会出问题。解决方法如下：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">let serverUrl = <span class=\"string\">&#x27;/api/&#x27;</span>  <span class=\"regexp\">//</span>本地调试时</span><br><span class=\"line\"><span class=\"regexp\">//</span> let serverUrl = <span class=\"string\">&#x27;http://f.apiplus.cn/&#x27;</span>  <span class=\"regexp\">//</span>打包部署上线时</span><br></pre></td></tr></table></figure>\n<h2 id=\"vue解决xss注入问题\"><a href=\"#vue解决xss注入问题\" class=\"headerlink\" title=\"vue解决xss注入问题\"></a>vue解决xss注入问题</h2><p>1.在终端引入xss,命令：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> xss <span class=\"comment\">--save</span></span><br></pre></td></tr></table></figure>\n<p>2.在vue的页面进行引入</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> xss <span class=\"keyword\">from</span> <span class=\"string\">&#x27;xss&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>3.定义一个变量进行测试<br>首先测试一个没有进行防止xss攻击的测试</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;p <span class=\"attribute\">v-html</span>=<span class=\"string\">&quot;test&quot;</span>&gt;&lt;/p&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"builtin-name\">export</span><span class=\"built_in\"> default </span>&#123;</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      test: `&lt;a <span class=\"attribute\">onclick</span>=<span class=\"string\">&#x27;alert(&quot;xss攻击&quot;)&#x27;</span>&gt;链接&lt;/a&gt;`</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>结果，js事件直接被翻译了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">xss攻击</span><br></pre></td></tr></table></figure>\n<p>因此应该杜绝这些情况，解决方法如下</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;p <span class=\"attribute\">v-html</span>=<span class=\"string\">&quot;<span class=\"variable\">$xss</span>(test)&quot;</span>&gt;&lt;/p&gt;</span><br><span class=\"line\">import xss <span class=\"keyword\">from</span> <span class=\"string\">&#x27;xss&#x27;</span></span><br><span class=\"line\"><span class=\"builtin-name\">export</span><span class=\"built_in\"> default </span>&#123;</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      test: `&lt;a <span class=\"attribute\">onclick</span>=<span class=\"string\">&#x27;alert(&quot;xss攻击&quot;)&#x27;</span>&gt;链接&lt;/a&gt;`</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">Object.defineProperty(Vue.prototype, <span class=\"string\">&#x27;$xss&#x27;</span>, &#123;</span><br><span class=\"line\">  value: xss</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>此时a标签会保留，但是onclick事件被拦截了</p>\n<h2 id=\"vue-axios的几种请求方式\"><a href=\"#vue-axios的几种请求方式\" class=\"headerlink\" title=\"vue axios的几种请求方式\"></a>vue axios的几种请求方式</h2><p>axios的请求方法：get、post、put、patch、delete</p>\n<ul>\n<li>get：获取数据</li>\n<li>post：提交数据（表单提交+文件上传）</li>\n<li>put：更新数据（所有数据推送到后端）</li>\n<li>patch：更新数据（只将更改的数据推送到后端）</li>\n<li>delete：删除数据<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">//axios的<span class=\"built_in\">get</span>请求第一种写法不带参数</span><br><span class=\"line\">axios.<span class=\"built_in\">get</span>(<span class=\"string\">&#x27;/data.json&#x27;</span>).then((<span class=\"keyword\">res</span>)=&gt;&#123;</span><br><span class=\"line\">  console.<span class=\"built_in\">log</span>(<span class=\"keyword\">res</span>)</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">//axios的<span class=\"built_in\">get</span>请求第一种写法带参数</span><br><span class=\"line\">axios.<span class=\"built_in\">get</span>(<span class=\"string\">&#x27;/data.json&#x27;</span>,&#123;</span><br><span class=\"line\">  param<span class=\"variable\">s:</span>&#123;</span><br><span class=\"line\">    id:<span class=\"number\">12</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).then((<span class=\"keyword\">res</span>)=&gt;&#123;</span><br><span class=\"line\">  console.<span class=\"built_in\">log</span>(<span class=\"keyword\">res</span>)</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">//axios的<span class=\"built_in\">get</span>请求第二种写法不带参数</span><br><span class=\"line\">axios(&#123;</span><br><span class=\"line\">  method:<span class=\"string\">&#x27;get&#x27;</span>,</span><br><span class=\"line\">  ur<span class=\"variable\">l:</span><span class=\"string\">&#x27;/data.json&#x27;</span>,</span><br><span class=\"line\">&#125;).then(<span class=\"keyword\">res</span>=&gt;&#123;</span><br><span class=\"line\">  console.<span class=\"built_in\">log</span>(<span class=\"keyword\">res</span>)</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">//axios的<span class=\"built_in\">get</span>请求第二种写法带参数</span><br><span class=\"line\">axios(&#123;</span><br><span class=\"line\">  method:<span class=\"string\">&#x27;get&#x27;</span>,</span><br><span class=\"line\">  ur<span class=\"variable\">l:</span><span class=\"string\">&#x27;/data.json&#x27;</span>,</span><br><span class=\"line\">  param<span class=\"variable\">s:</span>&#123;</span><br><span class=\"line\">    id:<span class=\"number\">12</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;).then(<span class=\"keyword\">res</span>=&gt;&#123;</span><br><span class=\"line\">  console.<span class=\"built_in\">log</span>(<span class=\"keyword\">res</span>)</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">//axios的post请求第一种写法</span><br><span class=\"line\"><span class=\"keyword\">let</span> data = &#123;</span><br><span class=\"line\">  id:<span class=\"number\">12</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">axios.post(<span class=\"string\">&#x27;/post&#x27;</span>,data).then((<span class=\"keyword\">res</span>)=&gt;&#123;</span><br><span class=\"line\">  console.<span class=\"built_in\">log</span>(<span class=\"keyword\">res</span>)</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">//axios的post请求第二种写法</span><br><span class=\"line\">axios(&#123;</span><br><span class=\"line\">  method:<span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">  ur<span class=\"variable\">l:</span><span class=\"string\">&#x27;/post&#x27;</span>,</span><br><span class=\"line\">  dat<span class=\"variable\">a:data</span></span><br><span class=\"line\">&#125;).then(<span class=\"keyword\">res</span>=&gt;&#123;</span><br><span class=\"line\">  console.<span class=\"built_in\">log</span>(<span class=\"keyword\">res</span>)</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">//form-data请求,图片上传、文件上传，文件格式为：multipart/form-data，其他请求为application/json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> formData = <span class=\"keyword\">new</span> formData()</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key in data)&#123;</span><br><span class=\"line\">  formData.<span class=\"keyword\">append</span>(key,data[key])</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">axios.post(<span class=\"string\">&#x27;/post&#x27;</span>,formData).then(<span class=\"keyword\">res</span>=&gt;&#123;</span><br><span class=\"line\">  console.<span class=\"built_in\">log</span>(<span class=\"keyword\">res</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//axios之<span class=\"keyword\">put</span>请求</span><br><span class=\"line\">axios.<span class=\"keyword\">put</span>(<span class=\"string\">&#x27;/put&#x27;</span>,data).then(<span class=\"keyword\">res</span>=&gt;&#123;</span><br><span class=\"line\">  console.<span class=\"built_in\">log</span>(<span class=\"keyword\">res</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//axios之patch请求</span><br><span class=\"line\">axios.patch(<span class=\"string\">&#x27;/patch&#x27;</span>,data).then(<span class=\"keyword\">res</span>=&gt;&#123;</span><br><span class=\"line\">  console.<span class=\"built_in\">log</span>(<span class=\"keyword\">res</span>)</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">  //axios之<span class=\"keyword\">delete</span>请求的第一种写法</span><br><span class=\"line\">  axios.<span class=\"keyword\">delete</span>(<span class=\"string\">&#x27;/delete&#x27;</span>,&#123;</span><br><span class=\"line\">    param<span class=\"variable\">s:</span>&#123;</span><br><span class=\"line\">      id:<span class=\"number\">12</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;).then(<span class=\"keyword\">res</span>=&gt;&#123;</span><br><span class=\"line\">    console.<span class=\"built_in\">log</span>(<span class=\"keyword\">res</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">//说明:当使用第一种写法参数为params时，请求接口时参数是放在URL里面的。</span><br><span class=\"line\">// 例：http://localhos<span class=\"variable\">t:8080</span>/<span class=\"keyword\">delete</span>?id=<span class=\"number\">12</span>,而写成第二种方法data就不会，根据实际情况使用</span><br><span class=\"line\"></span><br><span class=\"line\">//axios之<span class=\"keyword\">delete</span>请求的第二种写法</span><br><span class=\"line\">axios.<span class=\"keyword\">delete</span>(<span class=\"string\">&#x27;/delete&#x27;</span>,&#123;</span><br><span class=\"line\">  dat<span class=\"variable\">a:</span>&#123;</span><br><span class=\"line\">    id:<span class=\"number\">12</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).then(<span class=\"keyword\">res</span>=&gt;&#123;</span><br><span class=\"line\">  console.<span class=\"built_in\">log</span>(<span class=\"keyword\">res</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"js如何比较浮点数\"><a href=\"#js如何比较浮点数\" class=\"headerlink\" title=\"js如何比较浮点数\"></a>js如何比较浮点数</h2><p>浮点数的定义，非整数的Number类型无法用<code>=</code>来比较，这就是为什么在JavaScript中，0.1+0.2不能=0.3：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">console</span>.log( <span class=\"number\">0</span>.<span class=\"number\">1</span> + <span class=\"number\">0</span>.<span class=\"number\">2</span> == <span class=\"number\">0</span>.<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"attribute\">false</span></span><br></pre></td></tr></table></figure>\n<p>这里输出的结果是<code>false</code>，说明两边不相等的，这是浮点运算的特点，浮点数运算的精度问题导致等式左右的结果并不是严格相等，而是相差了个微小的值。</p>\n<p>所以实际上，这里错误的不是结论，而是比较的方法，正确的比较方法是使用<code>JavaScript</code>提供的最小精度值：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">console</span>.log( Math.abs(<span class=\"number\">0</span>.<span class=\"number\">1</span> + <span class=\"number\">0</span>.<span class=\"number\">2</span> - <span class=\"number\">0</span>.<span class=\"number\">3</span>) &lt;= Number.EPSILON);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"项目做过哪些优化\"><a href=\"#项目做过哪些优化\" class=\"headerlink\" title=\"项目做过哪些优化\"></a>项目做过哪些优化</h2><ul>\n<li>减少 <code>HTTP</code> 请求数</li>\n<li>减少<code>DNS</code>查询</li>\n<li>使用 <code>CDN</code></li>\n<li>避免重定向</li>\n<li>图片懒加载</li>\n<li>减少 <code>DOM</code> 元素数量</li>\n<li>减少 <code>DOM</code> 操作</li>\n<li>使用外部 <code>JavaScript</code> 和 <code>CSS</code></li>\n<li>压缩 <code>JavaScript</code> 、 <code>CSS</code> 、字体、图片等</li>\n<li>优化 <code>CSS Sprite</code></li>\n<li>使用 <code>iconfont</code></li>\n<li>字体裁剪</li>\n<li>多域名分发划分内容到不同域名</li>\n<li>尽量减少 <code>iframe</code> 使用</li>\n<li>避免图片 <code>src</code> 为空</li>\n<li>把样式表放在 中</li>\n<li>把脚本放在页面底部</li>\n</ul>\n<h2 id=\"重排和重绘\"><a href=\"#重排和重绘\" class=\"headerlink\" title=\"重排和重绘\"></a>重排和重绘</h2><ul>\n<li>部分渲染树（或者整个渲染树）需要重新分析并且节点尺寸需要重新计算。这被称为重排。注意这里至少会有一次重排-初始化页面布局。</li>\n<li>由于节点的几何属性发生改变或者由于样式发生改变，例如改变元素背景色时，屏幕上的部分内容需要更新。这样的更新被称为重绘。</li>\n</ul>\n<h2 id=\"什么情况会触发重排和重绘？\"><a href=\"#什么情况会触发重排和重绘？\" class=\"headerlink\" title=\"什么情况会触发重排和重绘？\"></a>什么情况会触发重排和重绘？</h2><ul>\n<li>添加、删除、更新 <code>DOM</code> 节点</li>\n<li>通过 <code>display: none</code> 隐藏一个 <code>DOM</code> 节点-触发重排和重绘</li>\n<li>通过 <code>visibility: hidden</code> 隐藏一个 <code>DOM</code> 节点-只触发重绘，因为没有几何变化</li>\n<li>移动或者给页面中的 <code>DOM</code> 节点添加动画</li>\n<li>添加一个样式表，调整样式属性</li>\n<li>用户行为，例如调整窗口大小，改变字号，或者滚动。</li>\n</ul>\n<h2 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h2><ul>\n<li>浏览器缓存分为强缓存和协商缓存。当客户端请求某个资源时，获取缓存的流程如下：</li>\n<li>先根据这个资源的一些 http header 判断它是否命中强缓存，如果命中，则直接从本地获取缓存资源，不* 会发请求到服务器；</li>\n<li>当强缓存没有命中时，客户端会发送请求到服务器，服务器通过另一些request header验证这个资源是否命* 中协商缓存，称为http再验证，如果命中，服务器将请求返回，但不返回资源，而是告诉客户端直接从缓存* 中获取，客户端收到返回后就会从缓存中获取资源；</li>\n<li>强缓存和协商缓存共同之处在于，如果命中缓存，服务器都不会返回资源；</li>\n<li>区别是，强缓存不对发送请求到服务器，但协商缓存会。</li>\n<li>当协商缓存也没命中时，服务器就会将资源发送回客户端。</li>\n<li>当 ctrl+f5 强制刷新网页时，直接从服务器加载，跳过强缓存和协商缓存；</li>\n<li>当 f5 刷新网页时，跳过强缓存，但是会检查协商缓存；<h3 id=\"强缓存\"><a href=\"#强缓存\" class=\"headerlink\" title=\"强缓存\"></a>强缓存</h3></li>\n<li>Expires（该字段是 http1.0 时的规范，值为一个绝对时间的 GMT 格式的时间字符串，代表缓存资源的过* 期时间）</li>\n<li>Cache-Control:max-age（该字段是 http1.1 的规范，强缓存利用其 max-age 值来判断缓存资源的最大生命周期，它的值单位为秒）</li>\n</ul>\n<h3 id=\"协商缓存\"><a href=\"#协商缓存\" class=\"headerlink\" title=\"协商缓存\"></a>协商缓存</h3><ul>\n<li>Last-Modified（值为资源最后更新时间，随服务器response返回）</li>\n<li>If-Modified-Since（通过比较两个时间来判断资源在两次请求期间是否有过修改，如果没有修改，则命中* 协商缓存）</li>\n<li>ETag（表示资源内容的唯一标识，随服务器response返回）</li>\n<li>If-None-Match（服务器通过比较请求头部的If-None-Match与当前资源的ETag是否一致来判断资源是否在两次请求之间有过修改，如果没有修改，则命中协商缓存）</li>\n</ul>\n","site":{"data":{}},"more":"<p>简单记录一下面试的一些要点</p>\n<h2 id=\"javascript事件机制\"><a href=\"#javascript事件机制\" class=\"headerlink\" title=\"javascript事件机制\"></a>javascript事件机制</h2><p>先捕获，后冒泡，捕获从上到下，冒泡从下到上</p>\n<h3 id=\"冒泡机制\"><a href=\"#冒泡机制\" class=\"headerlink\" title=\"冒泡机制\"></a>冒泡机制</h3><p>IE提出的事件流叫做事件冒泡，即事件开始时由最具体的元素接收，然后逐级向上传播到较为不具体的节点，看一下以下示例</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;bodyClick()&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;divClick()&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;btn()&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;p()&quot;</span>&gt;</span>点击冒泡<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">       </span><br><span class=\"line\"><span class=\"javascript\">       <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">p</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;p标签被点击&#x27;</span>)</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">btn</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;button被点击&quot;</span>)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">         <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">divClick</span>(<span class=\"params\">event</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">             <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;div被点击&#x27;</span>);</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bodyClick</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;body被点击&#x27;</span>)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>结果显而易见</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\">p标签被点击</span><br><span class=\"line\"><span class=\"keyword\">button被点击</span></span><br><span class=\"line\"><span class=\"keyword\">div被点击</span></span><br><span class=\"line\"><span class=\"keyword\">body被点击</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"捕获机制\"><a href=\"#捕获机制\" class=\"headerlink\" title=\"捕获机制\"></a>捕获机制</h3><p> 事件捕获流的思想是不太具体的DOM节点应该更早接收到事件，而最具体的节点应该最后接收到事件，针对上面同样的例子，点击按钮，那么此时click事件会按照这样传播：（下面我们就借用addEventListener的第三个参数来模拟事件捕获流）<br> <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>点击捕获<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> oP=<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;p&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> oB=<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;button&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> oD=<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;div&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> oBody=<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;body&#x27;</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    oP.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;p标签被点击&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,<span class=\"literal\">true</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    oB.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;button被点击&quot;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,<span class=\"literal\">true</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    oD.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;div被点击&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,<span class=\"literal\">true</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    oBody.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;body被点击&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,<span class=\"literal\">true</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br> 与冒泡相反的结果<br> <figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">body被点击</span></span><br><span class=\"line\"><span class=\"keyword\">div被点击</span></span><br><span class=\"line\"><span class=\"keyword\">button被点击</span></span><br><span class=\"line\"><span class=\"keyword\">p标签被点击</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"DOM-2级事件处理程序\"><a href=\"#DOM-2级事件处理程序\" class=\"headerlink\" title=\"DOM 2级事件处理程序\"></a>DOM 2级事件处理程序</h3><p><code>DOM 2</code>级事件定义了两方法：用于处理添加事件和删除事件的操作： </p>\n<blockquote>\n<p>添加事件 addEventListener()<br>删除事件  removeEventListener()</p>\n</blockquote>\n<p>　　 所有DOM节点中都包含这两个方法，并且他们都包含3个参数： （1） 要处理的事件方式（例如：<code>click，mouseover,dbclick.....</code>） （2）事件处理的函数，可以为匿名函数，也可以为命名函数（但如果需要删除事件，必须是命名函数） （3）<strong>一个布尔值，代表是处于事件冒泡阶段处理还是事件捕获阶段（true：表示在捕获阶段调用事件处理程序；false:表示在冒泡阶段调用事件处理程序）</strong></p>\n<p>　　使用<code>DOM 2</code>级事件处理程序的主要好处是可以添加多个事件处理程序，事件处理会按照他们的顺序触发，通过<code>addEventListener</code>添加的事件只能用<code>removeEventListener</code>来移除，移除时传入的参数与添加时使用的参数必须相同，这也意味着添加的匿名函数将无法移除，</p>\n<blockquote>\n<p>（注意：我们默认的第三个参数都是默认<code>false</code>,是指在冒泡阶段添加，大多数情况下，都是将事件处理程序添加到事件的冒泡阶段，这样可以最大限度的兼容各个浏览器）</p>\n</blockquote>\n<h2 id=\"css省略文字的实现\"><a href=\"#css省略文字的实现\" class=\"headerlink\" title=\"css省略文字的实现\"></a>css省略文字的实现</h2> <figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\"><span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\"><span class=\"attribute\">text-overflow</span>: allipsis</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"settimeout-setinterval，eval在赋值时有什么问题？\"><a href=\"#settimeout-setinterval，eval在赋值时有什么问题？\" class=\"headerlink\" title=\"settimeout, setinterval，eval在赋值时有什么问题？\"></a>settimeout, setinterval，eval在赋值时有什么问题？</h2><h2 id=\"vue解决跨域问题\"><a href=\"#vue解决跨域问题\" class=\"headerlink\" title=\"vue解决跨域问题\"></a>vue解决跨域问题</h2><h3 id=\"什么是跨域\"><a href=\"#什么是跨域\" class=\"headerlink\" title=\"什么是跨域\"></a>什么是跨域</h3><p>跨域：由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一个与当前页面地址不同即为跨域。存在跨域的情况：</p>\n<ul>\n<li>网络协议不同，如http协议访问https协议。</li>\n<li>端口不同，如80端口访问8080端口。</li>\n<li>域名不同，如qianduanblog.com访问baidu.com。</li>\n<li>子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。</li>\n<li>域名和域名对应ip,如<a href=\"http://www.a.com访问20.205.28.90/\">www.a.com访问20.205.28.90</a>.</li>\n</ul>\n<p>下面是项目使用vue-cli脚手架搭建<br>使用http-proxy-middleware 代理解决跨域问题<br>例如请求的url:“<a href=\"http://f.apiplus.cn/bj11x5.json%E2%80%9D\">http://f.apiplus.cn/bj11x5.json”</a><br>1、打开config/index.js,在proxyTable中添写如下代码：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxyTable: &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;/api&#x27;</span>: &#123;  <span class=\"regexp\">//</span>使用<span class=\"string\">&quot;/api&quot;</span>来代替<span class=\"string\">&quot;http://f.apiplus.c&quot;</span></span><br><span class=\"line\">    target: <span class=\"string\">&#x27;http://f.apiplus.cn&#x27;</span>, <span class=\"regexp\">//</span>源地址</span><br><span class=\"line\">    changeOrigin: true, <span class=\"regexp\">//</span>是否跨域</span><br><span class=\"line\">    pathRewrite: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;^/api&#x27;</span>: <span class=\"string\">&#x27;http://f.apiplus.cn&#x27;</span> <span class=\"regexp\">//</span>路径重写</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、使用axios请求数据时直接使用“/api”：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">getData () &#123;</span><br><span class=\"line\">axios.<span class=\"built_in\">get</span>(<span class=\"string\">&#x27;/api/bj11x5.json&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(res)</span> &#123;</span></span><br><span class=\"line\">  console.<span class=\"built_in\">log</span>(<span class=\"keyword\">res</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>通过这中方法去解决跨域，打包部署时还按这种方法会出问题。解决方法如下：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">let serverUrl = <span class=\"string\">&#x27;/api/&#x27;</span>  <span class=\"regexp\">//</span>本地调试时</span><br><span class=\"line\"><span class=\"regexp\">//</span> let serverUrl = <span class=\"string\">&#x27;http://f.apiplus.cn/&#x27;</span>  <span class=\"regexp\">//</span>打包部署上线时</span><br></pre></td></tr></table></figure>\n<h2 id=\"vue解决xss注入问题\"><a href=\"#vue解决xss注入问题\" class=\"headerlink\" title=\"vue解决xss注入问题\"></a>vue解决xss注入问题</h2><p>1.在终端引入xss,命令：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> xss <span class=\"comment\">--save</span></span><br></pre></td></tr></table></figure>\n<p>2.在vue的页面进行引入</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> xss <span class=\"keyword\">from</span> <span class=\"string\">&#x27;xss&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>3.定义一个变量进行测试<br>首先测试一个没有进行防止xss攻击的测试</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;p <span class=\"attribute\">v-html</span>=<span class=\"string\">&quot;test&quot;</span>&gt;&lt;/p&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"builtin-name\">export</span><span class=\"built_in\"> default </span>&#123;</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      test: `&lt;a <span class=\"attribute\">onclick</span>=<span class=\"string\">&#x27;alert(&quot;xss攻击&quot;)&#x27;</span>&gt;链接&lt;/a&gt;`</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>结果，js事件直接被翻译了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">xss攻击</span><br></pre></td></tr></table></figure>\n<p>因此应该杜绝这些情况，解决方法如下</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;p <span class=\"attribute\">v-html</span>=<span class=\"string\">&quot;<span class=\"variable\">$xss</span>(test)&quot;</span>&gt;&lt;/p&gt;</span><br><span class=\"line\">import xss <span class=\"keyword\">from</span> <span class=\"string\">&#x27;xss&#x27;</span></span><br><span class=\"line\"><span class=\"builtin-name\">export</span><span class=\"built_in\"> default </span>&#123;</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      test: `&lt;a <span class=\"attribute\">onclick</span>=<span class=\"string\">&#x27;alert(&quot;xss攻击&quot;)&#x27;</span>&gt;链接&lt;/a&gt;`</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">Object.defineProperty(Vue.prototype, <span class=\"string\">&#x27;$xss&#x27;</span>, &#123;</span><br><span class=\"line\">  value: xss</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>此时a标签会保留，但是onclick事件被拦截了</p>\n<h2 id=\"vue-axios的几种请求方式\"><a href=\"#vue-axios的几种请求方式\" class=\"headerlink\" title=\"vue axios的几种请求方式\"></a>vue axios的几种请求方式</h2><p>axios的请求方法：get、post、put、patch、delete</p>\n<ul>\n<li>get：获取数据</li>\n<li>post：提交数据（表单提交+文件上传）</li>\n<li>put：更新数据（所有数据推送到后端）</li>\n<li>patch：更新数据（只将更改的数据推送到后端）</li>\n<li>delete：删除数据<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">//axios的<span class=\"built_in\">get</span>请求第一种写法不带参数</span><br><span class=\"line\">axios.<span class=\"built_in\">get</span>(<span class=\"string\">&#x27;/data.json&#x27;</span>).then((<span class=\"keyword\">res</span>)=&gt;&#123;</span><br><span class=\"line\">  console.<span class=\"built_in\">log</span>(<span class=\"keyword\">res</span>)</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">//axios的<span class=\"built_in\">get</span>请求第一种写法带参数</span><br><span class=\"line\">axios.<span class=\"built_in\">get</span>(<span class=\"string\">&#x27;/data.json&#x27;</span>,&#123;</span><br><span class=\"line\">  param<span class=\"variable\">s:</span>&#123;</span><br><span class=\"line\">    id:<span class=\"number\">12</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).then((<span class=\"keyword\">res</span>)=&gt;&#123;</span><br><span class=\"line\">  console.<span class=\"built_in\">log</span>(<span class=\"keyword\">res</span>)</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">//axios的<span class=\"built_in\">get</span>请求第二种写法不带参数</span><br><span class=\"line\">axios(&#123;</span><br><span class=\"line\">  method:<span class=\"string\">&#x27;get&#x27;</span>,</span><br><span class=\"line\">  ur<span class=\"variable\">l:</span><span class=\"string\">&#x27;/data.json&#x27;</span>,</span><br><span class=\"line\">&#125;).then(<span class=\"keyword\">res</span>=&gt;&#123;</span><br><span class=\"line\">  console.<span class=\"built_in\">log</span>(<span class=\"keyword\">res</span>)</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">//axios的<span class=\"built_in\">get</span>请求第二种写法带参数</span><br><span class=\"line\">axios(&#123;</span><br><span class=\"line\">  method:<span class=\"string\">&#x27;get&#x27;</span>,</span><br><span class=\"line\">  ur<span class=\"variable\">l:</span><span class=\"string\">&#x27;/data.json&#x27;</span>,</span><br><span class=\"line\">  param<span class=\"variable\">s:</span>&#123;</span><br><span class=\"line\">    id:<span class=\"number\">12</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;).then(<span class=\"keyword\">res</span>=&gt;&#123;</span><br><span class=\"line\">  console.<span class=\"built_in\">log</span>(<span class=\"keyword\">res</span>)</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">//axios的post请求第一种写法</span><br><span class=\"line\"><span class=\"keyword\">let</span> data = &#123;</span><br><span class=\"line\">  id:<span class=\"number\">12</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">axios.post(<span class=\"string\">&#x27;/post&#x27;</span>,data).then((<span class=\"keyword\">res</span>)=&gt;&#123;</span><br><span class=\"line\">  console.<span class=\"built_in\">log</span>(<span class=\"keyword\">res</span>)</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">//axios的post请求第二种写法</span><br><span class=\"line\">axios(&#123;</span><br><span class=\"line\">  method:<span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">  ur<span class=\"variable\">l:</span><span class=\"string\">&#x27;/post&#x27;</span>,</span><br><span class=\"line\">  dat<span class=\"variable\">a:data</span></span><br><span class=\"line\">&#125;).then(<span class=\"keyword\">res</span>=&gt;&#123;</span><br><span class=\"line\">  console.<span class=\"built_in\">log</span>(<span class=\"keyword\">res</span>)</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">//form-data请求,图片上传、文件上传，文件格式为：multipart/form-data，其他请求为application/json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> formData = <span class=\"keyword\">new</span> formData()</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key in data)&#123;</span><br><span class=\"line\">  formData.<span class=\"keyword\">append</span>(key,data[key])</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">axios.post(<span class=\"string\">&#x27;/post&#x27;</span>,formData).then(<span class=\"keyword\">res</span>=&gt;&#123;</span><br><span class=\"line\">  console.<span class=\"built_in\">log</span>(<span class=\"keyword\">res</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//axios之<span class=\"keyword\">put</span>请求</span><br><span class=\"line\">axios.<span class=\"keyword\">put</span>(<span class=\"string\">&#x27;/put&#x27;</span>,data).then(<span class=\"keyword\">res</span>=&gt;&#123;</span><br><span class=\"line\">  console.<span class=\"built_in\">log</span>(<span class=\"keyword\">res</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//axios之patch请求</span><br><span class=\"line\">axios.patch(<span class=\"string\">&#x27;/patch&#x27;</span>,data).then(<span class=\"keyword\">res</span>=&gt;&#123;</span><br><span class=\"line\">  console.<span class=\"built_in\">log</span>(<span class=\"keyword\">res</span>)</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">  //axios之<span class=\"keyword\">delete</span>请求的第一种写法</span><br><span class=\"line\">  axios.<span class=\"keyword\">delete</span>(<span class=\"string\">&#x27;/delete&#x27;</span>,&#123;</span><br><span class=\"line\">    param<span class=\"variable\">s:</span>&#123;</span><br><span class=\"line\">      id:<span class=\"number\">12</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;).then(<span class=\"keyword\">res</span>=&gt;&#123;</span><br><span class=\"line\">    console.<span class=\"built_in\">log</span>(<span class=\"keyword\">res</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">//说明:当使用第一种写法参数为params时，请求接口时参数是放在URL里面的。</span><br><span class=\"line\">// 例：http://localhos<span class=\"variable\">t:8080</span>/<span class=\"keyword\">delete</span>?id=<span class=\"number\">12</span>,而写成第二种方法data就不会，根据实际情况使用</span><br><span class=\"line\"></span><br><span class=\"line\">//axios之<span class=\"keyword\">delete</span>请求的第二种写法</span><br><span class=\"line\">axios.<span class=\"keyword\">delete</span>(<span class=\"string\">&#x27;/delete&#x27;</span>,&#123;</span><br><span class=\"line\">  dat<span class=\"variable\">a:</span>&#123;</span><br><span class=\"line\">    id:<span class=\"number\">12</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).then(<span class=\"keyword\">res</span>=&gt;&#123;</span><br><span class=\"line\">  console.<span class=\"built_in\">log</span>(<span class=\"keyword\">res</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"js如何比较浮点数\"><a href=\"#js如何比较浮点数\" class=\"headerlink\" title=\"js如何比较浮点数\"></a>js如何比较浮点数</h2><p>浮点数的定义，非整数的Number类型无法用<code>=</code>来比较，这就是为什么在JavaScript中，0.1+0.2不能=0.3：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">console</span>.log( <span class=\"number\">0</span>.<span class=\"number\">1</span> + <span class=\"number\">0</span>.<span class=\"number\">2</span> == <span class=\"number\">0</span>.<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"attribute\">false</span></span><br></pre></td></tr></table></figure>\n<p>这里输出的结果是<code>false</code>，说明两边不相等的，这是浮点运算的特点，浮点数运算的精度问题导致等式左右的结果并不是严格相等，而是相差了个微小的值。</p>\n<p>所以实际上，这里错误的不是结论，而是比较的方法，正确的比较方法是使用<code>JavaScript</code>提供的最小精度值：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">console</span>.log( Math.abs(<span class=\"number\">0</span>.<span class=\"number\">1</span> + <span class=\"number\">0</span>.<span class=\"number\">2</span> - <span class=\"number\">0</span>.<span class=\"number\">3</span>) &lt;= Number.EPSILON);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"项目做过哪些优化\"><a href=\"#项目做过哪些优化\" class=\"headerlink\" title=\"项目做过哪些优化\"></a>项目做过哪些优化</h2><ul>\n<li>减少 <code>HTTP</code> 请求数</li>\n<li>减少<code>DNS</code>查询</li>\n<li>使用 <code>CDN</code></li>\n<li>避免重定向</li>\n<li>图片懒加载</li>\n<li>减少 <code>DOM</code> 元素数量</li>\n<li>减少 <code>DOM</code> 操作</li>\n<li>使用外部 <code>JavaScript</code> 和 <code>CSS</code></li>\n<li>压缩 <code>JavaScript</code> 、 <code>CSS</code> 、字体、图片等</li>\n<li>优化 <code>CSS Sprite</code></li>\n<li>使用 <code>iconfont</code></li>\n<li>字体裁剪</li>\n<li>多域名分发划分内容到不同域名</li>\n<li>尽量减少 <code>iframe</code> 使用</li>\n<li>避免图片 <code>src</code> 为空</li>\n<li>把样式表放在 中</li>\n<li>把脚本放在页面底部</li>\n</ul>\n<h2 id=\"重排和重绘\"><a href=\"#重排和重绘\" class=\"headerlink\" title=\"重排和重绘\"></a>重排和重绘</h2><ul>\n<li>部分渲染树（或者整个渲染树）需要重新分析并且节点尺寸需要重新计算。这被称为重排。注意这里至少会有一次重排-初始化页面布局。</li>\n<li>由于节点的几何属性发生改变或者由于样式发生改变，例如改变元素背景色时，屏幕上的部分内容需要更新。这样的更新被称为重绘。</li>\n</ul>\n<h2 id=\"什么情况会触发重排和重绘？\"><a href=\"#什么情况会触发重排和重绘？\" class=\"headerlink\" title=\"什么情况会触发重排和重绘？\"></a>什么情况会触发重排和重绘？</h2><ul>\n<li>添加、删除、更新 <code>DOM</code> 节点</li>\n<li>通过 <code>display: none</code> 隐藏一个 <code>DOM</code> 节点-触发重排和重绘</li>\n<li>通过 <code>visibility: hidden</code> 隐藏一个 <code>DOM</code> 节点-只触发重绘，因为没有几何变化</li>\n<li>移动或者给页面中的 <code>DOM</code> 节点添加动画</li>\n<li>添加一个样式表，调整样式属性</li>\n<li>用户行为，例如调整窗口大小，改变字号，或者滚动。</li>\n</ul>\n<h2 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h2><ul>\n<li>浏览器缓存分为强缓存和协商缓存。当客户端请求某个资源时，获取缓存的流程如下：</li>\n<li>先根据这个资源的一些 http header 判断它是否命中强缓存，如果命中，则直接从本地获取缓存资源，不* 会发请求到服务器；</li>\n<li>当强缓存没有命中时，客户端会发送请求到服务器，服务器通过另一些request header验证这个资源是否命* 中协商缓存，称为http再验证，如果命中，服务器将请求返回，但不返回资源，而是告诉客户端直接从缓存* 中获取，客户端收到返回后就会从缓存中获取资源；</li>\n<li>强缓存和协商缓存共同之处在于，如果命中缓存，服务器都不会返回资源；</li>\n<li>区别是，强缓存不对发送请求到服务器，但协商缓存会。</li>\n<li>当协商缓存也没命中时，服务器就会将资源发送回客户端。</li>\n<li>当 ctrl+f5 强制刷新网页时，直接从服务器加载，跳过强缓存和协商缓存；</li>\n<li>当 f5 刷新网页时，跳过强缓存，但是会检查协商缓存；<h3 id=\"强缓存\"><a href=\"#强缓存\" class=\"headerlink\" title=\"强缓存\"></a>强缓存</h3></li>\n<li>Expires（该字段是 http1.0 时的规范，值为一个绝对时间的 GMT 格式的时间字符串，代表缓存资源的过* 期时间）</li>\n<li>Cache-Control:max-age（该字段是 http1.1 的规范，强缓存利用其 max-age 值来判断缓存资源的最大生命周期，它的值单位为秒）</li>\n</ul>\n<h3 id=\"协商缓存\"><a href=\"#协商缓存\" class=\"headerlink\" title=\"协商缓存\"></a>协商缓存</h3><ul>\n<li>Last-Modified（值为资源最后更新时间，随服务器response返回）</li>\n<li>If-Modified-Since（通过比较两个时间来判断资源在两次请求期间是否有过修改，如果没有修改，则命中* 协商缓存）</li>\n<li>ETag（表示资源内容的唯一标识，随服务器response返回）</li>\n<li>If-None-Match（服务器通过比较请求头部的If-None-Match与当前资源的ETag是否一致来判断资源是否在两次请求之间有过修改，如果没有修改，则命中协商缓存）</li>\n</ul>\n"},{"layout":"post","title":"在debian上使用kubeadm搭建 v1.16.3版本Kubernetes集群","date":"2020-09-09T16:00:00.000Z","excerpt":"在debian上使用一键安装工具kubeadm安装kubernete环境，摆脱繁琐的k8s配置","comments":1,"_content":"\n# 环境准备\ndebian 9 机器一台，作为master节点和node节点\n\n## 首先安装docker\n[离线安装docker](https://www.cnblogs.com/luoSteel/p/10038954.html)  \n[docker 安装包下载地址](https://download.docker.com/linux/static/stable/x86_64/)  \n### 解压\n```\ntar -xvf docker-18.06.1-ce.tgz\n```\n### 将解压出来的docker文件内容移动到 /usr/bin/ 目录下\n```\ncp docker/* /usr/bin/\n```\n### 将docker注册为service\n```\nvim /etc/systemd/system/docker.service\n```\n将下列配置复制到docker.service中并保存\n```\n[Unit]\n\nDescription=Docker Application Container Engine\n\nDocumentation=https://docs.docker.com\n\nAfter=network-online.target firewalld.service\n\nWants=network-online.target\n\n[Service]\n\nType=notify\n\n# the default is not to use systemd for cgroups because the delegate issues still\n\n# exists and systemd currently does not support the cgroup feature set required\n\n# for containers run by docker\n\nExecStart=/usr/bin/dockerd\n\nExecReload=/bin/kill -s HUP $MAINPID\n\n# Having non-zero Limit*s causes performance problems due to accounting overhead\n\n# in the kernel. We recommend using cgroups to do container-local accounting.\n\nLimitNOFILE=infinity\n\nLimitNPROC=infinity\n\nLimitCORE=infinity\n\n# Uncomment TasksMax if your systemd version supports it.\n\n# Only systemd 226 and above support this version.\n\n#TasksMax=infinity\n\nTimeoutStartSec=0\n\n# set delegate yes so that systemd does not reset the cgroups of docker containers\n\nDelegate=yes\n\n# kill only the docker process, not all processes in the cgroup\n\nKillMode=process\n\n# restart the docker process if it exits prematurely\n\nRestart=on-failure\n\nStartLimitBurst=3\n\nStartLimitInterval=60s\n\n \n\n[Install]\n\nWantedBy=multi-user.target\n```\n### 启动\n```\nchmod +x /etc/systemd/system/docker.service             #添加文件权限并启动docker\nsystemctl daemon-reload                                 #重载unit配置文件\nsystemctl start docker                                  #启动Docker\nsystemctl enable docker.service                         #设置开机自启\n```\n### 验证\n```\nsystemctl status docker                                 #查看Docker状态\ndocker -v                                               #查看Docker版本\n```\n\n## 关闭swap、selinux、防火墙\n```\nswapoff -a\n\nsystemctl stop firewalld\n```\n\n## 添加k8s官方源\n需要科学上网\n```\nsudo curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add\nsudo cat <<EOF >/etc/apt/sources.list.d/kubernetes.list\ndeb http://apt.kubernetes.io/ kubernetes-xenial main\nEOF\nsudo apt-get update\nsudo apt-get install kubelet=1.16.3-00 kubeadm=1.16.3-00 kubectl=1.16.3-00 kubernetes-cni\n```\n\n# 使用kubeadm部署k8s\n## 初始化环境\n因为官方镜像比较慢，所以使用阿里镜像\n```\n$ kubeadm init \\\n    --image-repository registry.aliyuncs.com/google_containers \\\n    --kubernetes-version v1.16.3 \\\n    --pod-network-cidr=10.244.0.0/16\n...\nYour Kubernetes control-plane has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  mkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n\nYou should now deploy a pod network to the cluster.\nRun \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nYou can now join any number of control-plane nodes by copying certificate authorities \nand service account keys on each node and then running the following as root:\n\n  kubeadm join 192.168.9.10:6443 --token px979r.mphk9ee5ya8fgy44 \\\n    --discovery-token-ca-cert-hash sha256:5e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51 \\\n    --control-plane \t  \n\nThen you can join any number of worker nodes by running the following on each as root:\n\nkubeadm join 192.168.9.10:6443 --token px979r.mphk9ee5ya8fgy44 \\\n    --discovery-token-ca-cert-hash sha256:5e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51 \n\n```\n根据提示设置`kubeconfig`，或者添加子节点\n## 设置k8s的网络插件\n使用`kubectl get pods -A`发现`coredns`状态不是`running`，需要配置网络插件\n```\n$ kubectl apply -f \"https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\\n')\"\n```\n## 安装helm\n### 去除节点污点\n只有一个master节点的情况下，master节点不允许运行资源，需要去掉污点\n```\n$ kubectl get nodes\nNAME       STATUS   ROLES    AGE    VERSION\nlinx-dev   Ready    master   138m   v1.16.3\n\n$ kubectl describe node linx-dev  | grep Taint\nTaints:             node-role.kubernetes.io/master:NoSchedule\n\n// 如果Taints是none，则不需要去除污点\nkubectl taint nodes linx-dev node-role.kubernetes.io/master:NoSchedule-\n```\n\n### 下载客户端\n```\nwget https://get.helm.sh/helm-v2.16.3-linux-amd64.tar.gz\n```\n### 解压缩并拷贝helm二进制文件\n```\ntar xf helm-v2.16.3-linux-amd64.tar.gz\ncp linux-amd64/helm /usr/local/bin\n```\n### 添加阿里云的仓库\n```\nhelm init --client-only --stable-repo-url https://aliacs-app-catalog.oss-cn-hangzhou.aliyuncs.com/charts/\nhelm repo add incubator https://aliacs-app-catalog.oss-cn-hangzhou.aliyuncs.com/charts-incubator/\nhelm repo update\n```\n### 创建 Kubernetes 的服务帐号和绑定角色\n```\n// 创建serviceaccount\nkubectl create serviceaccount --namespace kube-system tiller\n\n// 创建角色绑定\nkubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller\n```\n### 创建服务端 使用-i指定阿里云仓库\n```\nhelm init --service-account tiller --upgrade -i registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.16.3  --stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts\n```\n\n## 安装openebs存储服务\n### 部署openebs\n```\nkubectl apply -f https://openebs.github.io/charts/openebs-operator-1.5.0.yaml\n```\n### 设置默认存储\n```\n$ kubectl patch storageclass openebs-hostpath -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'\nstorageclass.storage.k8s.io/openebs-hostpath patched\n```\n## 安装kubesphere\n\n```\nkubectl apply -f https://raw.githubusercontent.com/kubesphere/ks-installer/master/kubesphere-minimal.yaml\n```\n\n## 参考\n[Helm离线安装](https://www.jianshu.com/p/2bb1dfdadee8)","source":"_posts/2020-09-10-debian-install-k8s.md","raw":"---\nlayout: post\ntitle: \"在debian上使用kubeadm搭建 v1.16.3版本Kubernetes集群\"\ndate: 2020-09-10\nexcerpt: \"在debian上使用一键安装工具kubeadm安装kubernete环境，摆脱繁琐的k8s配置\"\ntags: [linux, kubernetes, debian]\ncomments: true\n---\n\n# 环境准备\ndebian 9 机器一台，作为master节点和node节点\n\n## 首先安装docker\n[离线安装docker](https://www.cnblogs.com/luoSteel/p/10038954.html)  \n[docker 安装包下载地址](https://download.docker.com/linux/static/stable/x86_64/)  \n### 解压\n```\ntar -xvf docker-18.06.1-ce.tgz\n```\n### 将解压出来的docker文件内容移动到 /usr/bin/ 目录下\n```\ncp docker/* /usr/bin/\n```\n### 将docker注册为service\n```\nvim /etc/systemd/system/docker.service\n```\n将下列配置复制到docker.service中并保存\n```\n[Unit]\n\nDescription=Docker Application Container Engine\n\nDocumentation=https://docs.docker.com\n\nAfter=network-online.target firewalld.service\n\nWants=network-online.target\n\n[Service]\n\nType=notify\n\n# the default is not to use systemd for cgroups because the delegate issues still\n\n# exists and systemd currently does not support the cgroup feature set required\n\n# for containers run by docker\n\nExecStart=/usr/bin/dockerd\n\nExecReload=/bin/kill -s HUP $MAINPID\n\n# Having non-zero Limit*s causes performance problems due to accounting overhead\n\n# in the kernel. We recommend using cgroups to do container-local accounting.\n\nLimitNOFILE=infinity\n\nLimitNPROC=infinity\n\nLimitCORE=infinity\n\n# Uncomment TasksMax if your systemd version supports it.\n\n# Only systemd 226 and above support this version.\n\n#TasksMax=infinity\n\nTimeoutStartSec=0\n\n# set delegate yes so that systemd does not reset the cgroups of docker containers\n\nDelegate=yes\n\n# kill only the docker process, not all processes in the cgroup\n\nKillMode=process\n\n# restart the docker process if it exits prematurely\n\nRestart=on-failure\n\nStartLimitBurst=3\n\nStartLimitInterval=60s\n\n \n\n[Install]\n\nWantedBy=multi-user.target\n```\n### 启动\n```\nchmod +x /etc/systemd/system/docker.service             #添加文件权限并启动docker\nsystemctl daemon-reload                                 #重载unit配置文件\nsystemctl start docker                                  #启动Docker\nsystemctl enable docker.service                         #设置开机自启\n```\n### 验证\n```\nsystemctl status docker                                 #查看Docker状态\ndocker -v                                               #查看Docker版本\n```\n\n## 关闭swap、selinux、防火墙\n```\nswapoff -a\n\nsystemctl stop firewalld\n```\n\n## 添加k8s官方源\n需要科学上网\n```\nsudo curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add\nsudo cat <<EOF >/etc/apt/sources.list.d/kubernetes.list\ndeb http://apt.kubernetes.io/ kubernetes-xenial main\nEOF\nsudo apt-get update\nsudo apt-get install kubelet=1.16.3-00 kubeadm=1.16.3-00 kubectl=1.16.3-00 kubernetes-cni\n```\n\n# 使用kubeadm部署k8s\n## 初始化环境\n因为官方镜像比较慢，所以使用阿里镜像\n```\n$ kubeadm init \\\n    --image-repository registry.aliyuncs.com/google_containers \\\n    --kubernetes-version v1.16.3 \\\n    --pod-network-cidr=10.244.0.0/16\n...\nYour Kubernetes control-plane has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  mkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n\nYou should now deploy a pod network to the cluster.\nRun \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nYou can now join any number of control-plane nodes by copying certificate authorities \nand service account keys on each node and then running the following as root:\n\n  kubeadm join 192.168.9.10:6443 --token px979r.mphk9ee5ya8fgy44 \\\n    --discovery-token-ca-cert-hash sha256:5e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51 \\\n    --control-plane \t  \n\nThen you can join any number of worker nodes by running the following on each as root:\n\nkubeadm join 192.168.9.10:6443 --token px979r.mphk9ee5ya8fgy44 \\\n    --discovery-token-ca-cert-hash sha256:5e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51 \n\n```\n根据提示设置`kubeconfig`，或者添加子节点\n## 设置k8s的网络插件\n使用`kubectl get pods -A`发现`coredns`状态不是`running`，需要配置网络插件\n```\n$ kubectl apply -f \"https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\\n')\"\n```\n## 安装helm\n### 去除节点污点\n只有一个master节点的情况下，master节点不允许运行资源，需要去掉污点\n```\n$ kubectl get nodes\nNAME       STATUS   ROLES    AGE    VERSION\nlinx-dev   Ready    master   138m   v1.16.3\n\n$ kubectl describe node linx-dev  | grep Taint\nTaints:             node-role.kubernetes.io/master:NoSchedule\n\n// 如果Taints是none，则不需要去除污点\nkubectl taint nodes linx-dev node-role.kubernetes.io/master:NoSchedule-\n```\n\n### 下载客户端\n```\nwget https://get.helm.sh/helm-v2.16.3-linux-amd64.tar.gz\n```\n### 解压缩并拷贝helm二进制文件\n```\ntar xf helm-v2.16.3-linux-amd64.tar.gz\ncp linux-amd64/helm /usr/local/bin\n```\n### 添加阿里云的仓库\n```\nhelm init --client-only --stable-repo-url https://aliacs-app-catalog.oss-cn-hangzhou.aliyuncs.com/charts/\nhelm repo add incubator https://aliacs-app-catalog.oss-cn-hangzhou.aliyuncs.com/charts-incubator/\nhelm repo update\n```\n### 创建 Kubernetes 的服务帐号和绑定角色\n```\n// 创建serviceaccount\nkubectl create serviceaccount --namespace kube-system tiller\n\n// 创建角色绑定\nkubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller\n```\n### 创建服务端 使用-i指定阿里云仓库\n```\nhelm init --service-account tiller --upgrade -i registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.16.3  --stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts\n```\n\n## 安装openebs存储服务\n### 部署openebs\n```\nkubectl apply -f https://openebs.github.io/charts/openebs-operator-1.5.0.yaml\n```\n### 设置默认存储\n```\n$ kubectl patch storageclass openebs-hostpath -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'\nstorageclass.storage.k8s.io/openebs-hostpath patched\n```\n## 安装kubesphere\n\n```\nkubectl apply -f https://raw.githubusercontent.com/kubesphere/ks-installer/master/kubesphere-minimal.yaml\n```\n\n## 参考\n[Helm离线安装](https://www.jianshu.com/p/2bb1dfdadee8)","slug":"2020-09-10-debian-install-k8s","published":1,"updated":"2020-11-24T07:53:04.751Z","photos":[],"link":"","_id":"ckoe9igum000q8cpnfexh9niu","content":"<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><p>debian 9 机器一台，作为master节点和node节点</p>\n<h2 id=\"首先安装docker\"><a href=\"#首先安装docker\" class=\"headerlink\" title=\"首先安装docker\"></a>首先安装docker</h2><p><a href=\"https://www.cnblogs.com/luoSteel/p/10038954.html\">离线安装docker</a><br><a href=\"https://download.docker.com/linux/static/stable/x86_64/\">docker 安装包下载地址</a>  </p>\n<h3 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h3><figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">tar</span> -xvf docker-<span class=\"number\">18</span>.<span class=\"number\">06</span>.<span class=\"number\">1</span>-ce.tgz</span><br></pre></td></tr></table></figure>\n<h3 id=\"将解压出来的docker文件内容移动到-usr-bin-目录下\"><a href=\"#将解压出来的docker文件内容移动到-usr-bin-目录下\" class=\"headerlink\" title=\"将解压出来的docker文件内容移动到 /usr/bin/ 目录下\"></a>将解压出来的docker文件内容移动到 /usr/bin/ 目录下</h3><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">cp docker<span class=\"regexp\">/* /u</span>sr<span class=\"regexp\">/bin/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"将docker注册为service\"><a href=\"#将docker注册为service\" class=\"headerlink\" title=\"将docker注册为service\"></a>将docker注册为service</h3><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim <span class=\"regexp\">/etc/</span>systemd<span class=\"regexp\">/system/</span>docker.service</span><br></pre></td></tr></table></figure>\n<p>将下列配置复制到docker.service中并保存</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[Unit]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Description</span>=Docker Application Container Engine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Documentation</span>=https://docs.docker.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">After</span>=network-<span class=\"literal\">on</span>line.target firewalld.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Wants</span>=network-<span class=\"literal\">on</span>line.target</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Service]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Type</span>=notify</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># the default is not to use systemd for cgroups because the delegate issues still</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># exists and systemd currently does not support the cgroup feature set required</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># for containers run by docker</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">ExecStart</span>=/usr/bin/dockerd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">ExecReload</span>=/bin/kill -s HUP <span class=\"variable\">$MAINPID</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Having non-zero Limit*s causes performance problems due to accounting overhead</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># in the kernel. We recommend using cgroups to do container-local accounting.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">LimitNOFILE</span>=infinity</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">LimitNPROC</span>=infinity</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">LimitCORE</span>=infinity</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment TasksMax if your systemd version supports it.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Only systemd 226 and above support this version.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#TasksMax=infinity</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">TimeoutStartSec</span>=<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># set delegate yes so that systemd does not reset the cgroups of docker containers</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Delegate</span>=<span class=\"literal\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kill only the docker process, not all processes in the cgroup</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">KillMode</span>=process</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># restart the docker process if it exits prematurely</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Restart</span>=<span class=\"literal\">on</span>-failure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">StartLimitBurst</span>=<span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">StartLimitInterval</span>=<span class=\"number\">60</span>s</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Install]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">chmod +x <span class=\"regexp\">/etc/</span>systemd<span class=\"regexp\">/system/</span>docker.service             <span class=\"comment\">#添加文件权限并启动docker</span></span><br><span class=\"line\">systemctl daemon-reload                                 <span class=\"comment\">#重载unit配置文件</span></span><br><span class=\"line\">systemctl start docker                                  <span class=\"comment\">#启动Docker</span></span><br><span class=\"line\">systemctl enable docker.service                         <span class=\"comment\">#设置开机自启</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">systemctl</span> status docker                                 <span class=\"comment\">#查看Docker状态</span></span><br><span class=\"line\">docker -v                                               <span class=\"comment\">#查看Docker版本</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关闭swap、selinux、防火墙\"><a href=\"#关闭swap、selinux、防火墙\" class=\"headerlink\" title=\"关闭swap、selinux、防火墙\"></a>关闭swap、selinux、防火墙</h2><figure class=\"highlight livecodeserver\"><table><tr><td class=\"code\"><pre><span class=\"line\">swapoff -<span class=\"keyword\">a</span></span><br><span class=\"line\"></span><br><span class=\"line\">systemctl <span class=\"built_in\">stop</span> firewalld</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加k8s官方源\"><a href=\"#添加k8s官方源\" class=\"headerlink\" title=\"添加k8s官方源\"></a>添加k8s官方源</h2><p>需要科学上网</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">sudo</span> curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add</span><br><span class=\"line\"><span class=\"attribute\">sudo</span> cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span><br><span class=\"line\"><span class=\"attribute\">deb</span> http://apt.kubernetes.io/ kubernetes-xenial main</span><br><span class=\"line\"><span class=\"attribute\">EOF</span></span><br><span class=\"line\"><span class=\"attribute\">sudo</span> apt-get update</span><br><span class=\"line\"><span class=\"attribute\">sudo</span> apt-get install kubelet=<span class=\"number\">1</span>.<span class=\"number\">16</span>.<span class=\"number\">3</span>-<span class=\"number\">00</span> kubeadm=<span class=\"number\">1</span>.<span class=\"number\">16</span>.<span class=\"number\">3</span>-<span class=\"number\">00</span> kubectl=<span class=\"number\">1</span>.<span class=\"number\">16</span>.<span class=\"number\">3</span>-<span class=\"number\">00</span> kubernetes-cni</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用kubeadm部署k8s\"><a href=\"#使用kubeadm部署k8s\" class=\"headerlink\" title=\"使用kubeadm部署k8s\"></a>使用kubeadm部署k8s</h1><h2 id=\"初始化环境\"><a href=\"#初始化环境\" class=\"headerlink\" title=\"初始化环境\"></a>初始化环境</h2><p>因为官方镜像比较慢，所以使用阿里镜像</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubeadm init \\</span><br><span class=\"line\">    <span class=\"comment\">--image-repository registry.aliyuncs.com/google_containers \\</span></span><br><span class=\"line\">    <span class=\"comment\">--kubernetes-version v1.16.3 \\</span></span><br><span class=\"line\">    <span class=\"comment\">--pod-network-cidr=10.244.0.0/16</span></span><br><span class=\"line\">...</span><br><span class=\"line\">Your Kubernetes control-plane has initialized successfully!</span><br><span class=\"line\"></span><br><span class=\"line\">To <span class=\"keyword\">start</span> <span class=\"keyword\">using</span> your cluster, you need <span class=\"keyword\">to</span> run the <span class=\"keyword\">following</span> <span class=\"keyword\">as</span> a regular <span class=\"keyword\">user</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">  mkdir -p $HOME/.kube</span><br><span class=\"line\">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class=\"line\">  sudo chown $(<span class=\"keyword\">id</span> -u):$(<span class=\"keyword\">id</span> -g) $HOME/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\">You should <span class=\"keyword\">now</span> deploy a pod network <span class=\"keyword\">to</span> the cluster.</span><br><span class=\"line\">Run <span class=\"string\">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> <span class=\"keyword\">with</span> one <span class=\"keyword\">of</span> the options listed <span class=\"keyword\">at</span>:</span><br><span class=\"line\">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class=\"line\"></span><br><span class=\"line\">You can <span class=\"keyword\">now</span> <span class=\"keyword\">join</span> <span class=\"keyword\">any</span> <span class=\"built_in\">number</span> <span class=\"keyword\">of</span> control-plane nodes <span class=\"keyword\">by</span> copying certificate authorities </span><br><span class=\"line\"><span class=\"keyword\">and</span> service <span class=\"keyword\">account</span> <span class=\"keyword\">keys</span> <span class=\"keyword\">on</span> <span class=\"keyword\">each</span> node <span class=\"keyword\">and</span> <span class=\"keyword\">then</span> running the <span class=\"keyword\">following</span> <span class=\"keyword\">as</span> root:</span><br><span class=\"line\"></span><br><span class=\"line\">  kubeadm <span class=\"keyword\">join</span> <span class=\"number\">192.168</span><span class=\"number\">.9</span><span class=\"number\">.10</span>:<span class=\"number\">6443</span> <span class=\"comment\">--token px979r.mphk9ee5ya8fgy44 \\</span></span><br><span class=\"line\">    <span class=\"comment\">--discovery-token-ca-cert-hash sha256:5e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51 \\</span></span><br><span class=\"line\">    <span class=\"comment\">--control-plane \t  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Then</span> you can <span class=\"keyword\">join</span> <span class=\"keyword\">any</span> <span class=\"built_in\">number</span> <span class=\"keyword\">of</span> worker nodes <span class=\"keyword\">by</span> running the <span class=\"keyword\">following</span> <span class=\"keyword\">on</span> <span class=\"keyword\">each</span> <span class=\"keyword\">as</span> root:</span><br><span class=\"line\"></span><br><span class=\"line\">kubeadm <span class=\"keyword\">join</span> <span class=\"number\">192.168</span><span class=\"number\">.9</span><span class=\"number\">.10</span>:<span class=\"number\">6443</span> <span class=\"comment\">--token px979r.mphk9ee5ya8fgy44 \\</span></span><br><span class=\"line\">    <span class=\"comment\">--discovery-token-ca-cert-hash sha256:5e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51 </span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>根据提示设置<code>kubeconfig</code>，或者添加子节点</p>\n<h2 id=\"设置k8s的网络插件\"><a href=\"#设置k8s的网络插件\" class=\"headerlink\" title=\"设置k8s的网络插件\"></a>设置k8s的网络插件</h2><p>使用<code>kubectl get pods -A</code>发现<code>coredns</code>状态不是<code>running</code>，需要配置网络插件</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$</span> kubectl apply <span class=\"operator\">-f</span> <span class=\"string\">&quot;https://cloud.weave.works/k8s/net?k8s-version=<span class=\"variable\">$</span>(kubectl version | base64 | tr -d &#x27;\\n&#x27;)&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"安装helm\"><a href=\"#安装helm\" class=\"headerlink\" title=\"安装helm\"></a>安装helm</h2><h3 id=\"去除节点污点\"><a href=\"#去除节点污点\" class=\"headerlink\" title=\"去除节点污点\"></a>去除节点污点</h3><p>只有一个master节点的情况下，master节点不允许运行资源，需要去掉污点</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl get nodes</span><br><span class=\"line\">NAME       STATUS   ROLES    AGE    <span class=\"keyword\">VERSION</span></span><br><span class=\"line\">linx-dev   Ready    <span class=\"keyword\">master</span>   <span class=\"title\">138m</span>   v1.<span class=\"number\">16.3</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl describe <span class=\"keyword\">node</span> <span class=\"title\">linx-dev</span>  | grep Taint</span><br><span class=\"line\">Taints:             <span class=\"keyword\">node</span><span class=\"title\">-role</span>.kubernetes.io/<span class=\"literal\">master</span>:NoSchedule</span><br><span class=\"line\"></span><br><span class=\"line\">// 如果Taints是none，则不需要去除污点</span><br><span class=\"line\">kubectl taint nodes linx-dev <span class=\"keyword\">node</span><span class=\"title\">-role</span>.kubernetes.io/<span class=\"literal\">master</span>:NoSchedule-</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"下载客户端\"><a href=\"#下载客户端\" class=\"headerlink\" title=\"下载客户端\"></a>下载客户端</h3><figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">wget</span> https://get.helm.sh/helm-v<span class=\"number\">2</span>.<span class=\"number\">16</span>.<span class=\"number\">3</span>-linux-amd<span class=\"number\">64</span>.tar.gz</span><br></pre></td></tr></table></figure>\n<h3 id=\"解压缩并拷贝helm二进制文件\"><a href=\"#解压缩并拷贝helm二进制文件\" class=\"headerlink\" title=\"解压缩并拷贝helm二进制文件\"></a>解压缩并拷贝helm二进制文件</h3><figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">tar</span> xf helm-v<span class=\"number\">2</span>.<span class=\"number\">16</span>.<span class=\"number\">3</span>-linux-amd<span class=\"number\">64</span>.tar.gz</span><br><span class=\"line\"><span class=\"attribute\">cp</span> linux-amd<span class=\"number\">64</span>/helm /usr/local/bin</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加阿里云的仓库\"><a href=\"#添加阿里云的仓库\" class=\"headerlink\" title=\"添加阿里云的仓库\"></a>添加阿里云的仓库</h3><figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm init --client-<span class=\"keyword\">only</span> --stable-repo-url http<span class=\"variable\">s:</span>//aliacs-app-catalog.oss-<span class=\"keyword\">cn</span>-hangzhou.aliyuncs.<span class=\"keyword\">com</span>/charts/</span><br><span class=\"line\">helm repo <span class=\"built_in\">add</span> incubator http<span class=\"variable\">s:</span>//aliacs-app-catalog.oss-<span class=\"keyword\">cn</span>-hangzhou.aliyuncs.<span class=\"keyword\">com</span>/charts-incubator/</span><br><span class=\"line\">helm repo <span class=\"keyword\">update</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"创建-Kubernetes-的服务帐号和绑定角色\"><a href=\"#创建-Kubernetes-的服务帐号和绑定角色\" class=\"headerlink\" title=\"创建 Kubernetes 的服务帐号和绑定角色\"></a>创建 Kubernetes 的服务帐号和绑定角色</h3><figure class=\"highlight mel\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建serviceaccount</span></span><br><span class=\"line\">kubectl create serviceaccount --<span class=\"keyword\">namespace</span> kube-<span class=\"keyword\">system</span> tiller</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建角色绑定</span></span><br><span class=\"line\">kubectl create clusterrolebinding tiller-<span class=\"keyword\">cluster</span>-rule --clusterrole=<span class=\"keyword\">cluster</span>-admin --serviceaccount=kube-<span class=\"keyword\">system</span>:tiller</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建服务端-使用-i指定阿里云仓库\"><a href=\"#创建服务端-使用-i指定阿里云仓库\" class=\"headerlink\" title=\"创建服务端 使用-i指定阿里云仓库\"></a>创建服务端 使用-i指定阿里云仓库</h3><figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm init --service-account tiller --upgrade -i registry.<span class=\"keyword\">cn</span>-hangzhou.aliyuncs.<span class=\"keyword\">com</span>/google_containers/tiller:v2.<span class=\"number\">16.3</span>  --stable-repo-url http<span class=\"variable\">s:</span>//kubernetes.oss-<span class=\"keyword\">cn</span>-hangzhou.aliyuncs.<span class=\"keyword\">com</span>/charts</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装openebs存储服务\"><a href=\"#安装openebs存储服务\" class=\"headerlink\" title=\"安装openebs存储服务\"></a>安装openebs存储服务</h2><h3 id=\"部署openebs\"><a href=\"#部署openebs\" class=\"headerlink\" title=\"部署openebs\"></a>部署openebs</h3><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https:<span class=\"regexp\">//</span>openebs.github.io<span class=\"regexp\">/charts/</span>openebs-operator-<span class=\"number\">1.5</span>.<span class=\"number\">0</span>.yaml</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置默认存储\"><a href=\"#设置默认存储\" class=\"headerlink\" title=\"设置默认存储\"></a>设置默认存储</h3><figure class=\"highlight jboss-cli\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl <span class=\"keyword\">patch</span> storageclass openebs-hostpath -p &#x27;&#123;<span class=\"string\">&quot;metadata&quot;</span>: &#123;<span class=\"string\">&quot;annotations&quot;</span>:&#123;<span class=\"string\">&quot;storageclass.kubernetes.io/is-default-class&quot;</span>:<span class=\"string\">&quot;true&quot;</span>&#125;&#125;&#125;&#x27;</span><br><span class=\"line\">storageclass.storage.k8s.io/openebs-hostpath patched</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装kubesphere\"><a href=\"#安装kubesphere\" class=\"headerlink\" title=\"安装kubesphere\"></a>安装kubesphere</h2><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https:<span class=\"regexp\">//</span>raw.githubusercontent.com<span class=\"regexp\">/kubesphere/</span>ks-installer<span class=\"regexp\">/master/</span>kubesphere-minimal.yaml</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.jianshu.com/p/2bb1dfdadee8\">Helm离线安装</a></p>\n","site":{"data":{}},"more":"<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><p>debian 9 机器一台，作为master节点和node节点</p>\n<h2 id=\"首先安装docker\"><a href=\"#首先安装docker\" class=\"headerlink\" title=\"首先安装docker\"></a>首先安装docker</h2><p><a href=\"https://www.cnblogs.com/luoSteel/p/10038954.html\">离线安装docker</a><br><a href=\"https://download.docker.com/linux/static/stable/x86_64/\">docker 安装包下载地址</a>  </p>\n<h3 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h3><figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">tar</span> -xvf docker-<span class=\"number\">18</span>.<span class=\"number\">06</span>.<span class=\"number\">1</span>-ce.tgz</span><br></pre></td></tr></table></figure>\n<h3 id=\"将解压出来的docker文件内容移动到-usr-bin-目录下\"><a href=\"#将解压出来的docker文件内容移动到-usr-bin-目录下\" class=\"headerlink\" title=\"将解压出来的docker文件内容移动到 /usr/bin/ 目录下\"></a>将解压出来的docker文件内容移动到 /usr/bin/ 目录下</h3><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">cp docker<span class=\"regexp\">/* /u</span>sr<span class=\"regexp\">/bin/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"将docker注册为service\"><a href=\"#将docker注册为service\" class=\"headerlink\" title=\"将docker注册为service\"></a>将docker注册为service</h3><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim <span class=\"regexp\">/etc/</span>systemd<span class=\"regexp\">/system/</span>docker.service</span><br></pre></td></tr></table></figure>\n<p>将下列配置复制到docker.service中并保存</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[Unit]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Description</span>=Docker Application Container Engine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Documentation</span>=https://docs.docker.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">After</span>=network-<span class=\"literal\">on</span>line.target firewalld.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Wants</span>=network-<span class=\"literal\">on</span>line.target</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Service]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Type</span>=notify</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># the default is not to use systemd for cgroups because the delegate issues still</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># exists and systemd currently does not support the cgroup feature set required</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># for containers run by docker</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">ExecStart</span>=/usr/bin/dockerd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">ExecReload</span>=/bin/kill -s HUP <span class=\"variable\">$MAINPID</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Having non-zero Limit*s causes performance problems due to accounting overhead</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># in the kernel. We recommend using cgroups to do container-local accounting.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">LimitNOFILE</span>=infinity</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">LimitNPROC</span>=infinity</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">LimitCORE</span>=infinity</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment TasksMax if your systemd version supports it.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Only systemd 226 and above support this version.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#TasksMax=infinity</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">TimeoutStartSec</span>=<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># set delegate yes so that systemd does not reset the cgroups of docker containers</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Delegate</span>=<span class=\"literal\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kill only the docker process, not all processes in the cgroup</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">KillMode</span>=process</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># restart the docker process if it exits prematurely</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Restart</span>=<span class=\"literal\">on</span>-failure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">StartLimitBurst</span>=<span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">StartLimitInterval</span>=<span class=\"number\">60</span>s</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Install]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">chmod +x <span class=\"regexp\">/etc/</span>systemd<span class=\"regexp\">/system/</span>docker.service             <span class=\"comment\">#添加文件权限并启动docker</span></span><br><span class=\"line\">systemctl daemon-reload                                 <span class=\"comment\">#重载unit配置文件</span></span><br><span class=\"line\">systemctl start docker                                  <span class=\"comment\">#启动Docker</span></span><br><span class=\"line\">systemctl enable docker.service                         <span class=\"comment\">#设置开机自启</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">systemctl</span> status docker                                 <span class=\"comment\">#查看Docker状态</span></span><br><span class=\"line\">docker -v                                               <span class=\"comment\">#查看Docker版本</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关闭swap、selinux、防火墙\"><a href=\"#关闭swap、selinux、防火墙\" class=\"headerlink\" title=\"关闭swap、selinux、防火墙\"></a>关闭swap、selinux、防火墙</h2><figure class=\"highlight livecodeserver\"><table><tr><td class=\"code\"><pre><span class=\"line\">swapoff -<span class=\"keyword\">a</span></span><br><span class=\"line\"></span><br><span class=\"line\">systemctl <span class=\"built_in\">stop</span> firewalld</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加k8s官方源\"><a href=\"#添加k8s官方源\" class=\"headerlink\" title=\"添加k8s官方源\"></a>添加k8s官方源</h2><p>需要科学上网</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">sudo</span> curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add</span><br><span class=\"line\"><span class=\"attribute\">sudo</span> cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span><br><span class=\"line\"><span class=\"attribute\">deb</span> http://apt.kubernetes.io/ kubernetes-xenial main</span><br><span class=\"line\"><span class=\"attribute\">EOF</span></span><br><span class=\"line\"><span class=\"attribute\">sudo</span> apt-get update</span><br><span class=\"line\"><span class=\"attribute\">sudo</span> apt-get install kubelet=<span class=\"number\">1</span>.<span class=\"number\">16</span>.<span class=\"number\">3</span>-<span class=\"number\">00</span> kubeadm=<span class=\"number\">1</span>.<span class=\"number\">16</span>.<span class=\"number\">3</span>-<span class=\"number\">00</span> kubectl=<span class=\"number\">1</span>.<span class=\"number\">16</span>.<span class=\"number\">3</span>-<span class=\"number\">00</span> kubernetes-cni</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用kubeadm部署k8s\"><a href=\"#使用kubeadm部署k8s\" class=\"headerlink\" title=\"使用kubeadm部署k8s\"></a>使用kubeadm部署k8s</h1><h2 id=\"初始化环境\"><a href=\"#初始化环境\" class=\"headerlink\" title=\"初始化环境\"></a>初始化环境</h2><p>因为官方镜像比较慢，所以使用阿里镜像</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubeadm init \\</span><br><span class=\"line\">    <span class=\"comment\">--image-repository registry.aliyuncs.com/google_containers \\</span></span><br><span class=\"line\">    <span class=\"comment\">--kubernetes-version v1.16.3 \\</span></span><br><span class=\"line\">    <span class=\"comment\">--pod-network-cidr=10.244.0.0/16</span></span><br><span class=\"line\">...</span><br><span class=\"line\">Your Kubernetes control-plane has initialized successfully!</span><br><span class=\"line\"></span><br><span class=\"line\">To <span class=\"keyword\">start</span> <span class=\"keyword\">using</span> your cluster, you need <span class=\"keyword\">to</span> run the <span class=\"keyword\">following</span> <span class=\"keyword\">as</span> a regular <span class=\"keyword\">user</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">  mkdir -p $HOME/.kube</span><br><span class=\"line\">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class=\"line\">  sudo chown $(<span class=\"keyword\">id</span> -u):$(<span class=\"keyword\">id</span> -g) $HOME/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\">You should <span class=\"keyword\">now</span> deploy a pod network <span class=\"keyword\">to</span> the cluster.</span><br><span class=\"line\">Run <span class=\"string\">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> <span class=\"keyword\">with</span> one <span class=\"keyword\">of</span> the options listed <span class=\"keyword\">at</span>:</span><br><span class=\"line\">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class=\"line\"></span><br><span class=\"line\">You can <span class=\"keyword\">now</span> <span class=\"keyword\">join</span> <span class=\"keyword\">any</span> <span class=\"built_in\">number</span> <span class=\"keyword\">of</span> control-plane nodes <span class=\"keyword\">by</span> copying certificate authorities </span><br><span class=\"line\"><span class=\"keyword\">and</span> service <span class=\"keyword\">account</span> <span class=\"keyword\">keys</span> <span class=\"keyword\">on</span> <span class=\"keyword\">each</span> node <span class=\"keyword\">and</span> <span class=\"keyword\">then</span> running the <span class=\"keyword\">following</span> <span class=\"keyword\">as</span> root:</span><br><span class=\"line\"></span><br><span class=\"line\">  kubeadm <span class=\"keyword\">join</span> <span class=\"number\">192.168</span><span class=\"number\">.9</span><span class=\"number\">.10</span>:<span class=\"number\">6443</span> <span class=\"comment\">--token px979r.mphk9ee5ya8fgy44 \\</span></span><br><span class=\"line\">    <span class=\"comment\">--discovery-token-ca-cert-hash sha256:5e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51 \\</span></span><br><span class=\"line\">    <span class=\"comment\">--control-plane \t  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Then</span> you can <span class=\"keyword\">join</span> <span class=\"keyword\">any</span> <span class=\"built_in\">number</span> <span class=\"keyword\">of</span> worker nodes <span class=\"keyword\">by</span> running the <span class=\"keyword\">following</span> <span class=\"keyword\">on</span> <span class=\"keyword\">each</span> <span class=\"keyword\">as</span> root:</span><br><span class=\"line\"></span><br><span class=\"line\">kubeadm <span class=\"keyword\">join</span> <span class=\"number\">192.168</span><span class=\"number\">.9</span><span class=\"number\">.10</span>:<span class=\"number\">6443</span> <span class=\"comment\">--token px979r.mphk9ee5ya8fgy44 \\</span></span><br><span class=\"line\">    <span class=\"comment\">--discovery-token-ca-cert-hash sha256:5e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51 </span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>根据提示设置<code>kubeconfig</code>，或者添加子节点</p>\n<h2 id=\"设置k8s的网络插件\"><a href=\"#设置k8s的网络插件\" class=\"headerlink\" title=\"设置k8s的网络插件\"></a>设置k8s的网络插件</h2><p>使用<code>kubectl get pods -A</code>发现<code>coredns</code>状态不是<code>running</code>，需要配置网络插件</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$</span> kubectl apply <span class=\"operator\">-f</span> <span class=\"string\">&quot;https://cloud.weave.works/k8s/net?k8s-version=<span class=\"variable\">$</span>(kubectl version | base64 | tr -d &#x27;\\n&#x27;)&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"安装helm\"><a href=\"#安装helm\" class=\"headerlink\" title=\"安装helm\"></a>安装helm</h2><h3 id=\"去除节点污点\"><a href=\"#去除节点污点\" class=\"headerlink\" title=\"去除节点污点\"></a>去除节点污点</h3><p>只有一个master节点的情况下，master节点不允许运行资源，需要去掉污点</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl get nodes</span><br><span class=\"line\">NAME       STATUS   ROLES    AGE    <span class=\"keyword\">VERSION</span></span><br><span class=\"line\">linx-dev   Ready    <span class=\"keyword\">master</span>   <span class=\"title\">138m</span>   v1.<span class=\"number\">16.3</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl describe <span class=\"keyword\">node</span> <span class=\"title\">linx-dev</span>  | grep Taint</span><br><span class=\"line\">Taints:             <span class=\"keyword\">node</span><span class=\"title\">-role</span>.kubernetes.io/<span class=\"literal\">master</span>:NoSchedule</span><br><span class=\"line\"></span><br><span class=\"line\">// 如果Taints是none，则不需要去除污点</span><br><span class=\"line\">kubectl taint nodes linx-dev <span class=\"keyword\">node</span><span class=\"title\">-role</span>.kubernetes.io/<span class=\"literal\">master</span>:NoSchedule-</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"下载客户端\"><a href=\"#下载客户端\" class=\"headerlink\" title=\"下载客户端\"></a>下载客户端</h3><figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">wget</span> https://get.helm.sh/helm-v<span class=\"number\">2</span>.<span class=\"number\">16</span>.<span class=\"number\">3</span>-linux-amd<span class=\"number\">64</span>.tar.gz</span><br></pre></td></tr></table></figure>\n<h3 id=\"解压缩并拷贝helm二进制文件\"><a href=\"#解压缩并拷贝helm二进制文件\" class=\"headerlink\" title=\"解压缩并拷贝helm二进制文件\"></a>解压缩并拷贝helm二进制文件</h3><figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">tar</span> xf helm-v<span class=\"number\">2</span>.<span class=\"number\">16</span>.<span class=\"number\">3</span>-linux-amd<span class=\"number\">64</span>.tar.gz</span><br><span class=\"line\"><span class=\"attribute\">cp</span> linux-amd<span class=\"number\">64</span>/helm /usr/local/bin</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加阿里云的仓库\"><a href=\"#添加阿里云的仓库\" class=\"headerlink\" title=\"添加阿里云的仓库\"></a>添加阿里云的仓库</h3><figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm init --client-<span class=\"keyword\">only</span> --stable-repo-url http<span class=\"variable\">s:</span>//aliacs-app-catalog.oss-<span class=\"keyword\">cn</span>-hangzhou.aliyuncs.<span class=\"keyword\">com</span>/charts/</span><br><span class=\"line\">helm repo <span class=\"built_in\">add</span> incubator http<span class=\"variable\">s:</span>//aliacs-app-catalog.oss-<span class=\"keyword\">cn</span>-hangzhou.aliyuncs.<span class=\"keyword\">com</span>/charts-incubator/</span><br><span class=\"line\">helm repo <span class=\"keyword\">update</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"创建-Kubernetes-的服务帐号和绑定角色\"><a href=\"#创建-Kubernetes-的服务帐号和绑定角色\" class=\"headerlink\" title=\"创建 Kubernetes 的服务帐号和绑定角色\"></a>创建 Kubernetes 的服务帐号和绑定角色</h3><figure class=\"highlight mel\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建serviceaccount</span></span><br><span class=\"line\">kubectl create serviceaccount --<span class=\"keyword\">namespace</span> kube-<span class=\"keyword\">system</span> tiller</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建角色绑定</span></span><br><span class=\"line\">kubectl create clusterrolebinding tiller-<span class=\"keyword\">cluster</span>-rule --clusterrole=<span class=\"keyword\">cluster</span>-admin --serviceaccount=kube-<span class=\"keyword\">system</span>:tiller</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建服务端-使用-i指定阿里云仓库\"><a href=\"#创建服务端-使用-i指定阿里云仓库\" class=\"headerlink\" title=\"创建服务端 使用-i指定阿里云仓库\"></a>创建服务端 使用-i指定阿里云仓库</h3><figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm init --service-account tiller --upgrade -i registry.<span class=\"keyword\">cn</span>-hangzhou.aliyuncs.<span class=\"keyword\">com</span>/google_containers/tiller:v2.<span class=\"number\">16.3</span>  --stable-repo-url http<span class=\"variable\">s:</span>//kubernetes.oss-<span class=\"keyword\">cn</span>-hangzhou.aliyuncs.<span class=\"keyword\">com</span>/charts</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装openebs存储服务\"><a href=\"#安装openebs存储服务\" class=\"headerlink\" title=\"安装openebs存储服务\"></a>安装openebs存储服务</h2><h3 id=\"部署openebs\"><a href=\"#部署openebs\" class=\"headerlink\" title=\"部署openebs\"></a>部署openebs</h3><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https:<span class=\"regexp\">//</span>openebs.github.io<span class=\"regexp\">/charts/</span>openebs-operator-<span class=\"number\">1.5</span>.<span class=\"number\">0</span>.yaml</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置默认存储\"><a href=\"#设置默认存储\" class=\"headerlink\" title=\"设置默认存储\"></a>设置默认存储</h3><figure class=\"highlight jboss-cli\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl <span class=\"keyword\">patch</span> storageclass openebs-hostpath -p &#x27;&#123;<span class=\"string\">&quot;metadata&quot;</span>: &#123;<span class=\"string\">&quot;annotations&quot;</span>:&#123;<span class=\"string\">&quot;storageclass.kubernetes.io/is-default-class&quot;</span>:<span class=\"string\">&quot;true&quot;</span>&#125;&#125;&#125;&#x27;</span><br><span class=\"line\">storageclass.storage.k8s.io/openebs-hostpath patched</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装kubesphere\"><a href=\"#安装kubesphere\" class=\"headerlink\" title=\"安装kubesphere\"></a>安装kubesphere</h2><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https:<span class=\"regexp\">//</span>raw.githubusercontent.com<span class=\"regexp\">/kubesphere/</span>ks-installer<span class=\"regexp\">/master/</span>kubesphere-minimal.yaml</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.jianshu.com/p/2bb1dfdadee8\">Helm离线安装</a></p>\n"},{"layout":"post","title":"ruby的小技巧","date":"2020-09-13T16:00:00.000Z","excerpt":"ruby中一些常见的可以简化逻辑的用法","comments":1,"_content":"\n## &:的用法\n&:重要用于数组的方法，它可以让数组中的每一个元素都执行&:后的方法，相当于`item.fun()`，比如\n\n```\nirb(main):001:0> a = [1, 2, 3]\n=> [1, 2, 3]\nirb(main):002:0> a.map(&:to_s)\n=> [\"1\", \"2\", \"3\"]\n\n```\n等与\n```\nirb(main):004:0> a.map { |i| i.to_s  }\n=> [\"1\", \"2\", \"3\"]\n```\n\n## ruby中%的用法\n### %Q %q\n%Q用于替代双引号的字符串. 当你需要在字符串里放入很多引号时候, 可以直接用下面方法而不需要在引号前逐个添加反斜杠 (\")   \n%q用于代替单引号的字符串\n```\n2.3.0 :015 > %Q(rudy said, \"i'm not ruby\")\n => \"rudy said, \\\"i'm not ruby\\\"\"\n```\n```\n2.3.0 :031 > what_ruby = 'this is ruby'\n => \"this is ruby\"\n2.3.0 :032 > %Q!rudy said, \"#{what_ruby}\"!\n => \"rudy said, \\\"this is ruby\\\"\"\n2.3.0 :033 > %q!rudy said, \"#{what_ruby}\"!\n => \"rudy said, \\\"\\#{what_ruby}\\\"\"\n```\n(...)也可用其他非数字字母的符号或成对的符号代替, 诸如#...#,!...!, +...+,{...},[...], <...>,/.../等.\n```\n2.3.0 :016 > %Q/rudy said, \"i'm not ruby\"/\n => \"rudy said, \\\"i'm not ruby\\\"\"\n2.3.0 :017 > %Q#rudy said, \"i'm not ruby\"#\n => \"rudy said, \\\"i'm not ruby\\\"\"\n2.3.0 :018 > %Q!rudy said, \"i'm not ruby\"!\n => \"rudy said, \\\"i'm not ruby\\\"\"\n```\n\n### %W，%w\n%W语法近似于%Q, 用于表示其中元素被双引号括起的数组.\n%w语法近似于%q, 用于表示其中元素被单引号括起的数组.\n```\n2.3.0 :031 > what_ruby = 'this is ruby'\n => \"this is ruby\"\n2.3.0 :034 > %W(hello,kitty,cat,dog,what_ruby)\n => [\"hello,kitty,cat,dog,what_ruby\"]          ###不能用逗号隔开，只能用空格\n2.3.0 :035 > %W(hello kitty cat dog what_ruby)\n => [\"hello\", \"kitty\", \"cat\", \"dog\", \"what_ruby\"]\n2.3.0 :036 > %W(hello kitty cat dog #{what_ruby})\n => [\"hello\", \"kitty\", \"cat\", \"dog\", \"this is ruby\"]###双引号中可以被解析\n2.3.0 :037 > %w(hello kitty cat dog #{what_ruby})\n => [\"hello\", \"kitty\", \"cat\", \"dog\", \"\\#{what_ruby}\"]###单引号中不能被解析，被转义了。\n```\n### %x\n用于执行一段shell脚本，并返回输出内容。\n```\n2.3.0 :038 > %x(route -n)\n => \"Kernel IP routing table\\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\\n0.0.0.0         10.6.0.1        0.0.0.0         UG    100    0        0 eth0\\n10.6.0.0        0.0.0.0         255.255.252.0   U     0      0        0 eth0\\n\"\n2.3.0 :039 > %x(echo \"hello world\")\n => \"hello world\\n\"\n```\n### %r\n语法近似于%Q, 用于正则表达式.\n```\n2.3.0 :031 > what_ruby = 'this is ruby'\n => \"this is ruby\"\n2.3.0 :041 > %r(/home/#{what_ruby})\n => /\\/home\\/this is ruby/\n```\n### %s\n用于表示symbol, 但是不会对其中表达式等内容进行转化\n```\n2.3.0 :031 > what_ruby = 'this is ruby'\n => \"this is ruby\"\n2.3.0 :042 > %s(a b c)\n => :\"a b c\"\n2.3.0 :043 > %s(abc)\n => :abc\n2.3.0 :044 > %s(what_ruby)\n => :what_ruby\n2.3.0 :045 > %s(#{what_ruby})\n => :\"\\#{what_ruby}\"\n```\n### %i\nRuby 2.0 之后引入的语法, 用于生成一个symbol数组\n```\n2.3.0 :031 > what_ruby = 'this is ruby'\n => \"this is ruby\"\n2.3.0 :046 > %i(a b c)\n => [:a, :b, :c]\n2.3.0 :047 > %i(a b c #{what_ruby})\n => [:a, :b, :c, :\"\\#{what_ruby}\"]\n```\n\n## *的用法\n*可以代表数组, 比如可以用于剩余数组的赋值\n```\nirb(main):001:0> a = [1,2,3]\n=> [1, 2, 3]\nirb(main):002:0> b,*c = a\n=> [1, 2, 3]\nirb(main):003:0> c\n=> [2, 3]\nirb(main):004:0> b\n=> 1\n```\n可以用来代替多参数的函数\n```\nirb(main):001:0> def test(a, b)\nirb(main):002:1> puts a\nirb(main):003:1> puts b\nirb(main):004:1> end\n=> :test\nirb(main):005:0> c = [1,2]\n=> [1, 2]\nirb(main):006:0> test(*c)\n1\n2\n=> nil\n```\n\n## 数组可以运算\nruby中数组可以进行`+`和`-`的操作，主要说一下`-`的作用：减去2个数组共有的元素\n```\nirb(main):001:0> a = [1,2,3]\n=> [1, 2, 3]\nirb(main):002:0> b = [2,3,4]\n=> [2, 3, 4]\nirb(main):003:0> a - b\n=> [1]\nirb(main):004:0> a + b\n=> [1, 2, 3, 2, 3, 4]\n```\n\n## json数据格式化为symbol类型\n```\nirb(main):005:0> require 'json'\n=> true\nirb(main):006:0> a = {b:1, c:2}\n=> {:b=>1, :c=>2}\nirb(main):007:0> JSON.generate(a)                       # symbol类型的key被转为字符串\n=> \"{\\\"b\\\":1,\\\"c\\\":2}\"\nirb(main):008:0> JSON.parse(JSON.generate(a))\n=> {\"b\"=>1, \"c\"=>2}\nirb(main):009:0> JSON.parse(JSON.generate(a), symbolize_names: true)\n=> {:b=>1, :c=>2}\n```\n\n## send的用法\nsend用来调用不确定的函数名\n```\nirb(main):001:0> def test(a)\nirb(main):002:1> puts a\nirb(main):003:1> end\n=> :test\nirb(main):004:0> send('test', '2')\n2\n=> nil\n```\n\n## 函数的返回值\n可以不写`return`，默认返回最后一行的值\n\n## 查看类有哪些方法\n可以用`.methods`方法\n```\nirb(main):010:0> class A\nirb(main):011:1> class << self\nirb(main):012:2> def b\nirb(main):013:3> puts 'test'\nirb(main):014:3> end\nirb(main):015:2> end\nirb(main):016:1> end\n \nirb(main):021:0> A.methods.include?(:b)\n=> true\n```\n\n## $1的用法\n表示正则匹配中`()`中匹配的内容，数字表示第几个括号\n```\nirb(main):004:0> a = 'asdf123asd'\n=> \"asdf123asd\"\nirb(main):008:0> a =~ /asdf(123)/\n=> 0\nirb(main):009:0> $1\n=> \"123\"\n```","source":"_posts/2020-09-14-ruby-rare-knowledge.md","raw":"---\nlayout: post\ntitle: \"ruby的小技巧\"\ndate: 2020-09-14\nexcerpt: \"ruby中一些常见的可以简化逻辑的用法\"\ntags: [ruby]\ncomments: true\n---\n\n## &:的用法\n&:重要用于数组的方法，它可以让数组中的每一个元素都执行&:后的方法，相当于`item.fun()`，比如\n\n```\nirb(main):001:0> a = [1, 2, 3]\n=> [1, 2, 3]\nirb(main):002:0> a.map(&:to_s)\n=> [\"1\", \"2\", \"3\"]\n\n```\n等与\n```\nirb(main):004:0> a.map { |i| i.to_s  }\n=> [\"1\", \"2\", \"3\"]\n```\n\n## ruby中%的用法\n### %Q %q\n%Q用于替代双引号的字符串. 当你需要在字符串里放入很多引号时候, 可以直接用下面方法而不需要在引号前逐个添加反斜杠 (\")   \n%q用于代替单引号的字符串\n```\n2.3.0 :015 > %Q(rudy said, \"i'm not ruby\")\n => \"rudy said, \\\"i'm not ruby\\\"\"\n```\n```\n2.3.0 :031 > what_ruby = 'this is ruby'\n => \"this is ruby\"\n2.3.0 :032 > %Q!rudy said, \"#{what_ruby}\"!\n => \"rudy said, \\\"this is ruby\\\"\"\n2.3.0 :033 > %q!rudy said, \"#{what_ruby}\"!\n => \"rudy said, \\\"\\#{what_ruby}\\\"\"\n```\n(...)也可用其他非数字字母的符号或成对的符号代替, 诸如#...#,!...!, +...+,{...},[...], <...>,/.../等.\n```\n2.3.0 :016 > %Q/rudy said, \"i'm not ruby\"/\n => \"rudy said, \\\"i'm not ruby\\\"\"\n2.3.0 :017 > %Q#rudy said, \"i'm not ruby\"#\n => \"rudy said, \\\"i'm not ruby\\\"\"\n2.3.0 :018 > %Q!rudy said, \"i'm not ruby\"!\n => \"rudy said, \\\"i'm not ruby\\\"\"\n```\n\n### %W，%w\n%W语法近似于%Q, 用于表示其中元素被双引号括起的数组.\n%w语法近似于%q, 用于表示其中元素被单引号括起的数组.\n```\n2.3.0 :031 > what_ruby = 'this is ruby'\n => \"this is ruby\"\n2.3.0 :034 > %W(hello,kitty,cat,dog,what_ruby)\n => [\"hello,kitty,cat,dog,what_ruby\"]          ###不能用逗号隔开，只能用空格\n2.3.0 :035 > %W(hello kitty cat dog what_ruby)\n => [\"hello\", \"kitty\", \"cat\", \"dog\", \"what_ruby\"]\n2.3.0 :036 > %W(hello kitty cat dog #{what_ruby})\n => [\"hello\", \"kitty\", \"cat\", \"dog\", \"this is ruby\"]###双引号中可以被解析\n2.3.0 :037 > %w(hello kitty cat dog #{what_ruby})\n => [\"hello\", \"kitty\", \"cat\", \"dog\", \"\\#{what_ruby}\"]###单引号中不能被解析，被转义了。\n```\n### %x\n用于执行一段shell脚本，并返回输出内容。\n```\n2.3.0 :038 > %x(route -n)\n => \"Kernel IP routing table\\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\\n0.0.0.0         10.6.0.1        0.0.0.0         UG    100    0        0 eth0\\n10.6.0.0        0.0.0.0         255.255.252.0   U     0      0        0 eth0\\n\"\n2.3.0 :039 > %x(echo \"hello world\")\n => \"hello world\\n\"\n```\n### %r\n语法近似于%Q, 用于正则表达式.\n```\n2.3.0 :031 > what_ruby = 'this is ruby'\n => \"this is ruby\"\n2.3.0 :041 > %r(/home/#{what_ruby})\n => /\\/home\\/this is ruby/\n```\n### %s\n用于表示symbol, 但是不会对其中表达式等内容进行转化\n```\n2.3.0 :031 > what_ruby = 'this is ruby'\n => \"this is ruby\"\n2.3.0 :042 > %s(a b c)\n => :\"a b c\"\n2.3.0 :043 > %s(abc)\n => :abc\n2.3.0 :044 > %s(what_ruby)\n => :what_ruby\n2.3.0 :045 > %s(#{what_ruby})\n => :\"\\#{what_ruby}\"\n```\n### %i\nRuby 2.0 之后引入的语法, 用于生成一个symbol数组\n```\n2.3.0 :031 > what_ruby = 'this is ruby'\n => \"this is ruby\"\n2.3.0 :046 > %i(a b c)\n => [:a, :b, :c]\n2.3.0 :047 > %i(a b c #{what_ruby})\n => [:a, :b, :c, :\"\\#{what_ruby}\"]\n```\n\n## *的用法\n*可以代表数组, 比如可以用于剩余数组的赋值\n```\nirb(main):001:0> a = [1,2,3]\n=> [1, 2, 3]\nirb(main):002:0> b,*c = a\n=> [1, 2, 3]\nirb(main):003:0> c\n=> [2, 3]\nirb(main):004:0> b\n=> 1\n```\n可以用来代替多参数的函数\n```\nirb(main):001:0> def test(a, b)\nirb(main):002:1> puts a\nirb(main):003:1> puts b\nirb(main):004:1> end\n=> :test\nirb(main):005:0> c = [1,2]\n=> [1, 2]\nirb(main):006:0> test(*c)\n1\n2\n=> nil\n```\n\n## 数组可以运算\nruby中数组可以进行`+`和`-`的操作，主要说一下`-`的作用：减去2个数组共有的元素\n```\nirb(main):001:0> a = [1,2,3]\n=> [1, 2, 3]\nirb(main):002:0> b = [2,3,4]\n=> [2, 3, 4]\nirb(main):003:0> a - b\n=> [1]\nirb(main):004:0> a + b\n=> [1, 2, 3, 2, 3, 4]\n```\n\n## json数据格式化为symbol类型\n```\nirb(main):005:0> require 'json'\n=> true\nirb(main):006:0> a = {b:1, c:2}\n=> {:b=>1, :c=>2}\nirb(main):007:0> JSON.generate(a)                       # symbol类型的key被转为字符串\n=> \"{\\\"b\\\":1,\\\"c\\\":2}\"\nirb(main):008:0> JSON.parse(JSON.generate(a))\n=> {\"b\"=>1, \"c\"=>2}\nirb(main):009:0> JSON.parse(JSON.generate(a), symbolize_names: true)\n=> {:b=>1, :c=>2}\n```\n\n## send的用法\nsend用来调用不确定的函数名\n```\nirb(main):001:0> def test(a)\nirb(main):002:1> puts a\nirb(main):003:1> end\n=> :test\nirb(main):004:0> send('test', '2')\n2\n=> nil\n```\n\n## 函数的返回值\n可以不写`return`，默认返回最后一行的值\n\n## 查看类有哪些方法\n可以用`.methods`方法\n```\nirb(main):010:0> class A\nirb(main):011:1> class << self\nirb(main):012:2> def b\nirb(main):013:3> puts 'test'\nirb(main):014:3> end\nirb(main):015:2> end\nirb(main):016:1> end\n \nirb(main):021:0> A.methods.include?(:b)\n=> true\n```\n\n## $1的用法\n表示正则匹配中`()`中匹配的内容，数字表示第几个括号\n```\nirb(main):004:0> a = 'asdf123asd'\n=> \"asdf123asd\"\nirb(main):008:0> a =~ /asdf(123)/\n=> 0\nirb(main):009:0> $1\n=> \"123\"\n```","slug":"2020-09-14-ruby-rare-knowledge","published":1,"updated":"2020-11-24T07:53:04.751Z","photos":[],"link":"","_id":"ckoe9igun000s8cpnb0f46inw","content":"<h2 id=\"amp-的用法\"><a href=\"#amp-的用法\" class=\"headerlink\" title=\"&amp;:的用法\"></a>&amp;:的用法</h2><p>&amp;:重要用于数组的方法，它可以让数组中的每一个元素都执行&amp;:后的方法，相当于<code>item.fun()</code>，比如</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"code\"><pre><span class=\"line\">irb(main)<span class=\"symbol\">:001</span><span class=\"symbol\">:0</span>&gt; a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">=&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:002</span><span class=\"symbol\">:0</span>&gt; a.map(&amp;<span class=\"symbol\">:to</span>_s)</span><br><span class=\"line\">=&gt; [<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>等与</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"code\"><pre><span class=\"line\">irb(main)<span class=\"symbol\">:004</span><span class=\"symbol\">:0</span>&gt; a.map &#123; |i| i.to_s  &#125;</span><br><span class=\"line\">=&gt; [<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ruby中-的用法\"><a href=\"#ruby中-的用法\" class=\"headerlink\" title=\"ruby中%的用法\"></a>ruby中%的用法</h2><h3 id=\"Q-q\"><a href=\"#Q-q\" class=\"headerlink\" title=\"%Q %q\"></a>%Q %q</h3><p>%Q用于替代双引号的字符串. 当你需要在字符串里放入很多引号时候, 可以直接用下面方法而不需要在引号前逐个添加反斜杠 (“)<br>%q用于代替单引号的字符串</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">2.3.0 :015 &gt;</span> <span class=\"string\">%Q(rudy said, &quot;i&#x27;m not ruby&quot;)</span></span><br><span class=\"line\"> =&gt; <span class=\"string\">&quot;rudy said, \\&quot;i&#x27;m not ruby\\&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">2.3.0 :031 &gt;</span> what_ruby = <span class=\"string\">&#x27;this is ruby&#x27;</span></span><br><span class=\"line\"> =&gt; <span class=\"string\">&quot;this is ruby&quot;</span></span><br><span class=\"line\"><span class=\"meta\">2.3.0 :032 &gt;</span> %Q!rudy said, <span class=\"string\">&quot;<span class=\"subst\">#&#123;what_ruby&#125;</span>&quot;</span>!</span><br><span class=\"line\"> =&gt; <span class=\"string\">&quot;rudy said, \\&quot;this is ruby\\&quot;&quot;</span></span><br><span class=\"line\"><span class=\"meta\">2.3.0 :033 &gt;</span> %q!rudy said, <span class=\"string\">&quot;<span class=\"subst\">#&#123;what_ruby&#125;</span>&quot;</span>!</span><br><span class=\"line\"> =&gt; <span class=\"string\">&quot;rudy said, \\&quot;\\#&#123;what_ruby&#125;\\&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n<p>(…)也可用其他非数字字母的符号或成对的符号代替, 诸如#…#,!…!, +…+,{…},[…], &lt;…&gt;,/…/等.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">2.3.0 :016 &gt;</span> <span class=\"string\">%Q/rudy said, &quot;i&#x27;m not ruby&quot;/</span></span><br><span class=\"line\"> =&gt; <span class=\"string\">&quot;rudy said, \\&quot;i&#x27;m not ruby\\&quot;&quot;</span></span><br><span class=\"line\"><span class=\"meta\">2.3.0 :017 &gt;</span> %Q<span class=\"comment\">#rudy said, &quot;i&#x27;m not ruby&quot;#</span></span><br><span class=\"line\"> =&gt; <span class=\"string\">&quot;rudy said, \\&quot;i&#x27;m not ruby\\&quot;&quot;</span></span><br><span class=\"line\"><span class=\"meta\">2.3.0 :018 &gt;</span> %Q!rudy said, <span class=\"string\">&quot;i&#x27;m not ruby&quot;</span>!</span><br><span class=\"line\"> =&gt; <span class=\"string\">&quot;rudy said, \\&quot;i&#x27;m not ruby\\&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"W，-w\"><a href=\"#W，-w\" class=\"headerlink\" title=\"%W，%w\"></a>%W，%w</h3><p>%W语法近似于%Q, 用于表示其中元素被双引号括起的数组.<br>%w语法近似于%q, 用于表示其中元素被单引号括起的数组.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">2.3.0 :031 &gt;</span> what_ruby = <span class=\"string\">&#x27;this is ruby&#x27;</span></span><br><span class=\"line\"> =&gt; <span class=\"string\">&quot;this is ruby&quot;</span></span><br><span class=\"line\"><span class=\"meta\">2.3.0 :034 &gt;</span> <span class=\"string\">%W(hello,kitty,cat,dog,what_ruby)</span></span><br><span class=\"line\"> =&gt; [<span class=\"string\">&quot;hello,kitty,cat,dog,what_ruby&quot;</span>]          <span class=\"comment\">###不能用逗号隔开，只能用空格</span></span><br><span class=\"line\"><span class=\"meta\">2.3.0 :035 &gt;</span> <span class=\"string\">%W(hello kitty cat dog what_ruby)</span></span><br><span class=\"line\"> =&gt; [<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;kitty&quot;</span>, <span class=\"string\">&quot;cat&quot;</span>, <span class=\"string\">&quot;dog&quot;</span>, <span class=\"string\">&quot;what_ruby&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">2.3.0 :036 &gt;</span> <span class=\"string\">%W(hello kitty cat dog <span class=\"subst\">#&#123;what_ruby&#125;</span>)</span></span><br><span class=\"line\"> =&gt; [<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;kitty&quot;</span>, <span class=\"string\">&quot;cat&quot;</span>, <span class=\"string\">&quot;dog&quot;</span>, <span class=\"string\">&quot;this is ruby&quot;</span>]<span class=\"comment\">###双引号中可以被解析</span></span><br><span class=\"line\"><span class=\"meta\">2.3.0 :037 &gt;</span> <span class=\"string\">%w(hello kitty cat dog <span class=\"subst\">#&#123;what_ruby&#125;</span>)</span></span><br><span class=\"line\"> =&gt; [<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;kitty&quot;</span>, <span class=\"string\">&quot;cat&quot;</span>, <span class=\"string\">&quot;dog&quot;</span>, <span class=\"string\">&quot;\\#&#123;what_ruby&#125;&quot;</span>]<span class=\"comment\">###单引号中不能被解析，被转义了。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"x\"><a href=\"#x\" class=\"headerlink\" title=\"%x\"></a>%x</h3><p>用于执行一段shell脚本，并返回输出内容。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">2.3.0 :038 &gt;</span> <span class=\"string\">%x(route -n)</span></span><br><span class=\"line\"> =&gt; <span class=\"string\">&quot;Kernel IP routing table\\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\\n0.0.0.0         10.6.0.1        0.0.0.0         UG    100    0        0 eth0\\n10.6.0.0        0.0.0.0         255.255.252.0   U     0      0        0 eth0\\n&quot;</span></span><br><span class=\"line\"><span class=\"meta\">2.3.0 :039 &gt;</span> <span class=\"string\">%x(echo &quot;hello world&quot;)</span></span><br><span class=\"line\"> =&gt; <span class=\"string\">&quot;hello world\\n&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"r\"><a href=\"#r\" class=\"headerlink\" title=\"%r\"></a>%r</h3><p>语法近似于%Q, 用于正则表达式.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">2.3.0 :031 &gt;</span> what_ruby = <span class=\"string\">&#x27;this is ruby&#x27;</span></span><br><span class=\"line\"> =&gt; <span class=\"string\">&quot;this is ruby&quot;</span></span><br><span class=\"line\"><span class=\"meta\">2.3.0 :041 &gt;</span> %r(<span class=\"regexp\">/home/</span><span class=\"comment\">#&#123;what_ruby&#125;)</span></span><br><span class=\"line\"> =&gt; /\\/home\\/this is ruby/</span><br></pre></td></tr></table></figure>\n<h3 id=\"s\"><a href=\"#s\" class=\"headerlink\" title=\"%s\"></a>%s</h3><p>用于表示symbol, 但是不会对其中表达式等内容进行转化</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">2.3.0 :031 &gt;</span> what_ruby = <span class=\"string\">&#x27;this is ruby&#x27;</span></span><br><span class=\"line\"> =&gt; <span class=\"string\">&quot;this is ruby&quot;</span></span><br><span class=\"line\"><span class=\"meta\">2.3.0 :042 &gt;</span> %s(a b c)</span><br><span class=\"line\"> =&gt; <span class=\"symbol\">:<span class=\"string\">&quot;a b c&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">2.3.0 :043 &gt;</span> %s(abc)</span><br><span class=\"line\"> =&gt; <span class=\"symbol\">:abc</span></span><br><span class=\"line\"><span class=\"meta\">2.3.0 :044 &gt;</span> %s(what_ruby)</span><br><span class=\"line\"> =&gt; <span class=\"symbol\">:what_ruby</span></span><br><span class=\"line\"><span class=\"meta\">2.3.0 :045 &gt;</span> %s(<span class=\"comment\">#&#123;what_ruby&#125;)</span></span><br><span class=\"line\"> =&gt; <span class=\"symbol\">:<span class=\"string\">&quot;\\#&#123;what_ruby&#125;&quot;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"i\"><a href=\"#i\" class=\"headerlink\" title=\"%i\"></a>%i</h3><p>Ruby 2.0 之后引入的语法, 用于生成一个symbol数组</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">2.3.0 :031 &gt;</span> what_ruby = <span class=\"string\">&#x27;this is ruby&#x27;</span></span><br><span class=\"line\"> =&gt; <span class=\"string\">&quot;this is ruby&quot;</span></span><br><span class=\"line\"><span class=\"meta\">2.3.0 :046 &gt;</span> %i(a b c)</span><br><span class=\"line\"> =&gt; [<span class=\"symbol\">:a</span>, <span class=\"symbol\">:b</span>, <span class=\"symbol\">:c</span>]</span><br><span class=\"line\"><span class=\"meta\">2.3.0 :047 &gt;</span> %i(a b c <span class=\"comment\">#&#123;what_ruby&#125;)</span></span><br><span class=\"line\"> =&gt; [<span class=\"symbol\">:a</span>, <span class=\"symbol\">:b</span>, <span class=\"symbol\">:c</span>, <span class=\"symbol\">:<span class=\"string\">&quot;\\#&#123;what_ruby&#125;&quot;</span></span>]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"的用法\"><a href=\"#的用法\" class=\"headerlink\" title=\"*的用法\"></a>*的用法</h2><p>*可以代表数组, 比如可以用于剩余数组的赋值</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"code\"><pre><span class=\"line\">irb(main)<span class=\"symbol\">:001</span><span class=\"symbol\">:0</span>&gt; a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">=&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:002</span><span class=\"symbol\">:0</span>&gt; b,*c = a</span><br><span class=\"line\">=&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:003</span><span class=\"symbol\">:0</span>&gt; c</span><br><span class=\"line\">=&gt; [<span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:004</span><span class=\"symbol\">:0</span>&gt; b</span><br><span class=\"line\">=&gt; <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>可以用来代替多参数的函数</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"code\"><pre><span class=\"line\">irb(main)<span class=\"symbol\">:001</span><span class=\"symbol\">:0</span>&gt; def test(a, b)</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:002</span><span class=\"symbol\">:1</span>&gt; puts a</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:003</span><span class=\"symbol\">:1</span>&gt; puts b</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:004</span><span class=\"symbol\">:1</span>&gt; end</span><br><span class=\"line\">=&gt; <span class=\"symbol\">:te</span>st</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:005</span><span class=\"symbol\">:0</span>&gt; c = [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">=&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:006</span><span class=\"symbol\">:0</span>&gt; test(*c)</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">=&gt; nil</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组可以运算\"><a href=\"#数组可以运算\" class=\"headerlink\" title=\"数组可以运算\"></a>数组可以运算</h2><p>ruby中数组可以进行<code>+</code>和<code>-</code>的操作，主要说一下<code>-</code>的作用：减去2个数组共有的元素</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"code\"><pre><span class=\"line\">irb(main)<span class=\"symbol\">:001</span><span class=\"symbol\">:0</span>&gt; a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">=&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:002</span><span class=\"symbol\">:0</span>&gt; b = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">=&gt; [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:003</span><span class=\"symbol\">:0</span>&gt; a - b</span><br><span class=\"line\">=&gt; [<span class=\"number\">1</span>]</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:004</span><span class=\"symbol\">:0</span>&gt; a + b</span><br><span class=\"line\">=&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"json数据格式化为symbol类型\"><a href=\"#json数据格式化为symbol类型\" class=\"headerlink\" title=\"json数据格式化为symbol类型\"></a>json数据格式化为symbol类型</h2><figure class=\"highlight excel\"><table><tr><td class=\"code\"><pre><span class=\"line\">irb(main)<span class=\"symbol\">:005</span><span class=\"symbol\">:0</span>&gt; require &#x27;json&#x27;</span><br><span class=\"line\">=&gt; <span class=\"built_in\">true</span></span><br><span class=\"line\">irb(main)<span class=\"symbol\">:006</span><span class=\"symbol\">:0</span>&gt; a = &#123;<span class=\"symbol\">b:1</span>, <span class=\"symbol\">c:2</span>&#125;</span><br><span class=\"line\">=&gt; &#123;<span class=\"symbol\">:b</span>=&gt;<span class=\"number\">1</span>, <span class=\"symbol\">:c</span>=&gt;<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:007</span><span class=\"symbol\">:0</span>&gt; JSON.generate(a)                       # symbol类型的key被转为字符串</span><br><span class=\"line\">=&gt; <span class=\"string\">&quot;&#123;\\&quot;b\\&quot;:1,\\&quot;c\\&quot;:2&#125;&quot;</span></span><br><span class=\"line\">irb(main)<span class=\"symbol\">:008</span><span class=\"symbol\">:0</span>&gt; JSON.parse(JSON.generate(a))</span><br><span class=\"line\">=&gt; &#123;<span class=\"string\">&quot;b&quot;</span>=&gt;<span class=\"number\">1</span>, <span class=\"string\">&quot;c&quot;</span>=&gt;<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:009</span><span class=\"symbol\">:0</span>&gt; JSON.parse(JSON.generate(a), symbolize_nam<span class=\"symbol\">es:</span> <span class=\"built_in\">true</span>)</span><br><span class=\"line\">=&gt; &#123;<span class=\"symbol\">:b</span>=&gt;<span class=\"number\">1</span>, <span class=\"symbol\">:c</span>=&gt;<span class=\"number\">2</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"send的用法\"><a href=\"#send的用法\" class=\"headerlink\" title=\"send的用法\"></a>send的用法</h2><p>send用来调用不确定的函数名</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"code\"><pre><span class=\"line\">irb(main)<span class=\"symbol\">:001</span><span class=\"symbol\">:0</span>&gt; def test(a)</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:002</span><span class=\"symbol\">:1</span>&gt; puts a</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:003</span><span class=\"symbol\">:1</span>&gt; end</span><br><span class=\"line\">=&gt; <span class=\"symbol\">:te</span>st</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:004</span><span class=\"symbol\">:0</span>&gt; send(&#x27;test&#x27;, &#x27;<span class=\"number\">2</span>&#x27;)</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">=&gt; nil</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数的返回值\"><a href=\"#函数的返回值\" class=\"headerlink\" title=\"函数的返回值\"></a>函数的返回值</h2><p>可以不写<code>return</code>，默认返回最后一行的值</p>\n<h2 id=\"查看类有哪些方法\"><a href=\"#查看类有哪些方法\" class=\"headerlink\" title=\"查看类有哪些方法\"></a>查看类有哪些方法</h2><p>可以用<code>.methods</code>方法</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">irb(main):010:0&gt;</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"meta\">irb(main):011:1&gt;</span> <span class=\"class\"><span class=\"keyword\">class</span> &lt;&lt; self</span></span><br><span class=\"line\"><span class=\"meta\">irb(main):012:2&gt;</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">b</span></span></span><br><span class=\"line\"><span class=\"meta\">irb(main):013:3&gt;</span> puts <span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">irb(main):014:3&gt;</span> end</span><br><span class=\"line\"><span class=\"meta\">irb(main):015:2&gt;</span> end</span><br><span class=\"line\"><span class=\"meta\">irb(main):016:1&gt;</span> end</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">irb(main):021:0&gt;</span> A.methods.include?(<span class=\"symbol\">:b</span>)</span><br><span class=\"line\">=&gt; true</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1的用法\"><a href=\"#1的用法\" class=\"headerlink\" title=\"$1的用法\"></a>$1的用法</h2><p>表示正则匹配中<code>()</code>中匹配的内容，数字表示第几个括号</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"code\"><pre><span class=\"line\">irb(main)<span class=\"symbol\">:004</span><span class=\"symbol\">:0</span>&gt; a = &#x27;asdf123asd&#x27;</span><br><span class=\"line\">=&gt; <span class=\"string\">&quot;asdf123asd&quot;</span></span><br><span class=\"line\">irb(main)<span class=\"symbol\">:008</span><span class=\"symbol\">:0</span>&gt; a =~ /asdf(<span class=\"number\">123</span>)/</span><br><span class=\"line\">=&gt; <span class=\"number\">0</span></span><br><span class=\"line\">irb(main)<span class=\"symbol\">:009</span><span class=\"symbol\">:0</span>&gt; $<span class=\"number\">1</span></span><br><span class=\"line\">=&gt; <span class=\"string\">&quot;123&quot;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"more":"<h2 id=\"amp-的用法\"><a href=\"#amp-的用法\" class=\"headerlink\" title=\"&amp;:的用法\"></a>&amp;:的用法</h2><p>&amp;:重要用于数组的方法，它可以让数组中的每一个元素都执行&amp;:后的方法，相当于<code>item.fun()</code>，比如</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"code\"><pre><span class=\"line\">irb(main)<span class=\"symbol\">:001</span><span class=\"symbol\">:0</span>&gt; a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">=&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:002</span><span class=\"symbol\">:0</span>&gt; a.map(&amp;<span class=\"symbol\">:to</span>_s)</span><br><span class=\"line\">=&gt; [<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>等与</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"code\"><pre><span class=\"line\">irb(main)<span class=\"symbol\">:004</span><span class=\"symbol\">:0</span>&gt; a.map &#123; |i| i.to_s  &#125;</span><br><span class=\"line\">=&gt; [<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ruby中-的用法\"><a href=\"#ruby中-的用法\" class=\"headerlink\" title=\"ruby中%的用法\"></a>ruby中%的用法</h2><h3 id=\"Q-q\"><a href=\"#Q-q\" class=\"headerlink\" title=\"%Q %q\"></a>%Q %q</h3><p>%Q用于替代双引号的字符串. 当你需要在字符串里放入很多引号时候, 可以直接用下面方法而不需要在引号前逐个添加反斜杠 (“)<br>%q用于代替单引号的字符串</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">2.3.0 :015 &gt;</span> <span class=\"string\">%Q(rudy said, &quot;i&#x27;m not ruby&quot;)</span></span><br><span class=\"line\"> =&gt; <span class=\"string\">&quot;rudy said, \\&quot;i&#x27;m not ruby\\&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">2.3.0 :031 &gt;</span> what_ruby = <span class=\"string\">&#x27;this is ruby&#x27;</span></span><br><span class=\"line\"> =&gt; <span class=\"string\">&quot;this is ruby&quot;</span></span><br><span class=\"line\"><span class=\"meta\">2.3.0 :032 &gt;</span> %Q!rudy said, <span class=\"string\">&quot;<span class=\"subst\">#&#123;what_ruby&#125;</span>&quot;</span>!</span><br><span class=\"line\"> =&gt; <span class=\"string\">&quot;rudy said, \\&quot;this is ruby\\&quot;&quot;</span></span><br><span class=\"line\"><span class=\"meta\">2.3.0 :033 &gt;</span> %q!rudy said, <span class=\"string\">&quot;<span class=\"subst\">#&#123;what_ruby&#125;</span>&quot;</span>!</span><br><span class=\"line\"> =&gt; <span class=\"string\">&quot;rudy said, \\&quot;\\#&#123;what_ruby&#125;\\&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n<p>(…)也可用其他非数字字母的符号或成对的符号代替, 诸如#…#,!…!, +…+,{…},[…], &lt;…&gt;,/…/等.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">2.3.0 :016 &gt;</span> <span class=\"string\">%Q/rudy said, &quot;i&#x27;m not ruby&quot;/</span></span><br><span class=\"line\"> =&gt; <span class=\"string\">&quot;rudy said, \\&quot;i&#x27;m not ruby\\&quot;&quot;</span></span><br><span class=\"line\"><span class=\"meta\">2.3.0 :017 &gt;</span> %Q<span class=\"comment\">#rudy said, &quot;i&#x27;m not ruby&quot;#</span></span><br><span class=\"line\"> =&gt; <span class=\"string\">&quot;rudy said, \\&quot;i&#x27;m not ruby\\&quot;&quot;</span></span><br><span class=\"line\"><span class=\"meta\">2.3.0 :018 &gt;</span> %Q!rudy said, <span class=\"string\">&quot;i&#x27;m not ruby&quot;</span>!</span><br><span class=\"line\"> =&gt; <span class=\"string\">&quot;rudy said, \\&quot;i&#x27;m not ruby\\&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"W，-w\"><a href=\"#W，-w\" class=\"headerlink\" title=\"%W，%w\"></a>%W，%w</h3><p>%W语法近似于%Q, 用于表示其中元素被双引号括起的数组.<br>%w语法近似于%q, 用于表示其中元素被单引号括起的数组.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">2.3.0 :031 &gt;</span> what_ruby = <span class=\"string\">&#x27;this is ruby&#x27;</span></span><br><span class=\"line\"> =&gt; <span class=\"string\">&quot;this is ruby&quot;</span></span><br><span class=\"line\"><span class=\"meta\">2.3.0 :034 &gt;</span> <span class=\"string\">%W(hello,kitty,cat,dog,what_ruby)</span></span><br><span class=\"line\"> =&gt; [<span class=\"string\">&quot;hello,kitty,cat,dog,what_ruby&quot;</span>]          <span class=\"comment\">###不能用逗号隔开，只能用空格</span></span><br><span class=\"line\"><span class=\"meta\">2.3.0 :035 &gt;</span> <span class=\"string\">%W(hello kitty cat dog what_ruby)</span></span><br><span class=\"line\"> =&gt; [<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;kitty&quot;</span>, <span class=\"string\">&quot;cat&quot;</span>, <span class=\"string\">&quot;dog&quot;</span>, <span class=\"string\">&quot;what_ruby&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">2.3.0 :036 &gt;</span> <span class=\"string\">%W(hello kitty cat dog <span class=\"subst\">#&#123;what_ruby&#125;</span>)</span></span><br><span class=\"line\"> =&gt; [<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;kitty&quot;</span>, <span class=\"string\">&quot;cat&quot;</span>, <span class=\"string\">&quot;dog&quot;</span>, <span class=\"string\">&quot;this is ruby&quot;</span>]<span class=\"comment\">###双引号中可以被解析</span></span><br><span class=\"line\"><span class=\"meta\">2.3.0 :037 &gt;</span> <span class=\"string\">%w(hello kitty cat dog <span class=\"subst\">#&#123;what_ruby&#125;</span>)</span></span><br><span class=\"line\"> =&gt; [<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;kitty&quot;</span>, <span class=\"string\">&quot;cat&quot;</span>, <span class=\"string\">&quot;dog&quot;</span>, <span class=\"string\">&quot;\\#&#123;what_ruby&#125;&quot;</span>]<span class=\"comment\">###单引号中不能被解析，被转义了。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"x\"><a href=\"#x\" class=\"headerlink\" title=\"%x\"></a>%x</h3><p>用于执行一段shell脚本，并返回输出内容。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">2.3.0 :038 &gt;</span> <span class=\"string\">%x(route -n)</span></span><br><span class=\"line\"> =&gt; <span class=\"string\">&quot;Kernel IP routing table\\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\\n0.0.0.0         10.6.0.1        0.0.0.0         UG    100    0        0 eth0\\n10.6.0.0        0.0.0.0         255.255.252.0   U     0      0        0 eth0\\n&quot;</span></span><br><span class=\"line\"><span class=\"meta\">2.3.0 :039 &gt;</span> <span class=\"string\">%x(echo &quot;hello world&quot;)</span></span><br><span class=\"line\"> =&gt; <span class=\"string\">&quot;hello world\\n&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"r\"><a href=\"#r\" class=\"headerlink\" title=\"%r\"></a>%r</h3><p>语法近似于%Q, 用于正则表达式.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">2.3.0 :031 &gt;</span> what_ruby = <span class=\"string\">&#x27;this is ruby&#x27;</span></span><br><span class=\"line\"> =&gt; <span class=\"string\">&quot;this is ruby&quot;</span></span><br><span class=\"line\"><span class=\"meta\">2.3.0 :041 &gt;</span> %r(<span class=\"regexp\">/home/</span><span class=\"comment\">#&#123;what_ruby&#125;)</span></span><br><span class=\"line\"> =&gt; /\\/home\\/this is ruby/</span><br></pre></td></tr></table></figure>\n<h3 id=\"s\"><a href=\"#s\" class=\"headerlink\" title=\"%s\"></a>%s</h3><p>用于表示symbol, 但是不会对其中表达式等内容进行转化</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">2.3.0 :031 &gt;</span> what_ruby = <span class=\"string\">&#x27;this is ruby&#x27;</span></span><br><span class=\"line\"> =&gt; <span class=\"string\">&quot;this is ruby&quot;</span></span><br><span class=\"line\"><span class=\"meta\">2.3.0 :042 &gt;</span> %s(a b c)</span><br><span class=\"line\"> =&gt; <span class=\"symbol\">:<span class=\"string\">&quot;a b c&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">2.3.0 :043 &gt;</span> %s(abc)</span><br><span class=\"line\"> =&gt; <span class=\"symbol\">:abc</span></span><br><span class=\"line\"><span class=\"meta\">2.3.0 :044 &gt;</span> %s(what_ruby)</span><br><span class=\"line\"> =&gt; <span class=\"symbol\">:what_ruby</span></span><br><span class=\"line\"><span class=\"meta\">2.3.0 :045 &gt;</span> %s(<span class=\"comment\">#&#123;what_ruby&#125;)</span></span><br><span class=\"line\"> =&gt; <span class=\"symbol\">:<span class=\"string\">&quot;\\#&#123;what_ruby&#125;&quot;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"i\"><a href=\"#i\" class=\"headerlink\" title=\"%i\"></a>%i</h3><p>Ruby 2.0 之后引入的语法, 用于生成一个symbol数组</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">2.3.0 :031 &gt;</span> what_ruby = <span class=\"string\">&#x27;this is ruby&#x27;</span></span><br><span class=\"line\"> =&gt; <span class=\"string\">&quot;this is ruby&quot;</span></span><br><span class=\"line\"><span class=\"meta\">2.3.0 :046 &gt;</span> %i(a b c)</span><br><span class=\"line\"> =&gt; [<span class=\"symbol\">:a</span>, <span class=\"symbol\">:b</span>, <span class=\"symbol\">:c</span>]</span><br><span class=\"line\"><span class=\"meta\">2.3.0 :047 &gt;</span> %i(a b c <span class=\"comment\">#&#123;what_ruby&#125;)</span></span><br><span class=\"line\"> =&gt; [<span class=\"symbol\">:a</span>, <span class=\"symbol\">:b</span>, <span class=\"symbol\">:c</span>, <span class=\"symbol\">:<span class=\"string\">&quot;\\#&#123;what_ruby&#125;&quot;</span></span>]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"的用法\"><a href=\"#的用法\" class=\"headerlink\" title=\"*的用法\"></a>*的用法</h2><p>*可以代表数组, 比如可以用于剩余数组的赋值</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"code\"><pre><span class=\"line\">irb(main)<span class=\"symbol\">:001</span><span class=\"symbol\">:0</span>&gt; a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">=&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:002</span><span class=\"symbol\">:0</span>&gt; b,*c = a</span><br><span class=\"line\">=&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:003</span><span class=\"symbol\">:0</span>&gt; c</span><br><span class=\"line\">=&gt; [<span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:004</span><span class=\"symbol\">:0</span>&gt; b</span><br><span class=\"line\">=&gt; <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>可以用来代替多参数的函数</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"code\"><pre><span class=\"line\">irb(main)<span class=\"symbol\">:001</span><span class=\"symbol\">:0</span>&gt; def test(a, b)</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:002</span><span class=\"symbol\">:1</span>&gt; puts a</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:003</span><span class=\"symbol\">:1</span>&gt; puts b</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:004</span><span class=\"symbol\">:1</span>&gt; end</span><br><span class=\"line\">=&gt; <span class=\"symbol\">:te</span>st</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:005</span><span class=\"symbol\">:0</span>&gt; c = [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">=&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:006</span><span class=\"symbol\">:0</span>&gt; test(*c)</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">=&gt; nil</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组可以运算\"><a href=\"#数组可以运算\" class=\"headerlink\" title=\"数组可以运算\"></a>数组可以运算</h2><p>ruby中数组可以进行<code>+</code>和<code>-</code>的操作，主要说一下<code>-</code>的作用：减去2个数组共有的元素</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"code\"><pre><span class=\"line\">irb(main)<span class=\"symbol\">:001</span><span class=\"symbol\">:0</span>&gt; a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">=&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:002</span><span class=\"symbol\">:0</span>&gt; b = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">=&gt; [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:003</span><span class=\"symbol\">:0</span>&gt; a - b</span><br><span class=\"line\">=&gt; [<span class=\"number\">1</span>]</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:004</span><span class=\"symbol\">:0</span>&gt; a + b</span><br><span class=\"line\">=&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"json数据格式化为symbol类型\"><a href=\"#json数据格式化为symbol类型\" class=\"headerlink\" title=\"json数据格式化为symbol类型\"></a>json数据格式化为symbol类型</h2><figure class=\"highlight excel\"><table><tr><td class=\"code\"><pre><span class=\"line\">irb(main)<span class=\"symbol\">:005</span><span class=\"symbol\">:0</span>&gt; require &#x27;json&#x27;</span><br><span class=\"line\">=&gt; <span class=\"built_in\">true</span></span><br><span class=\"line\">irb(main)<span class=\"symbol\">:006</span><span class=\"symbol\">:0</span>&gt; a = &#123;<span class=\"symbol\">b:1</span>, <span class=\"symbol\">c:2</span>&#125;</span><br><span class=\"line\">=&gt; &#123;<span class=\"symbol\">:b</span>=&gt;<span class=\"number\">1</span>, <span class=\"symbol\">:c</span>=&gt;<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:007</span><span class=\"symbol\">:0</span>&gt; JSON.generate(a)                       # symbol类型的key被转为字符串</span><br><span class=\"line\">=&gt; <span class=\"string\">&quot;&#123;\\&quot;b\\&quot;:1,\\&quot;c\\&quot;:2&#125;&quot;</span></span><br><span class=\"line\">irb(main)<span class=\"symbol\">:008</span><span class=\"symbol\">:0</span>&gt; JSON.parse(JSON.generate(a))</span><br><span class=\"line\">=&gt; &#123;<span class=\"string\">&quot;b&quot;</span>=&gt;<span class=\"number\">1</span>, <span class=\"string\">&quot;c&quot;</span>=&gt;<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:009</span><span class=\"symbol\">:0</span>&gt; JSON.parse(JSON.generate(a), symbolize_nam<span class=\"symbol\">es:</span> <span class=\"built_in\">true</span>)</span><br><span class=\"line\">=&gt; &#123;<span class=\"symbol\">:b</span>=&gt;<span class=\"number\">1</span>, <span class=\"symbol\">:c</span>=&gt;<span class=\"number\">2</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"send的用法\"><a href=\"#send的用法\" class=\"headerlink\" title=\"send的用法\"></a>send的用法</h2><p>send用来调用不确定的函数名</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"code\"><pre><span class=\"line\">irb(main)<span class=\"symbol\">:001</span><span class=\"symbol\">:0</span>&gt; def test(a)</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:002</span><span class=\"symbol\">:1</span>&gt; puts a</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:003</span><span class=\"symbol\">:1</span>&gt; end</span><br><span class=\"line\">=&gt; <span class=\"symbol\">:te</span>st</span><br><span class=\"line\">irb(main)<span class=\"symbol\">:004</span><span class=\"symbol\">:0</span>&gt; send(&#x27;test&#x27;, &#x27;<span class=\"number\">2</span>&#x27;)</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">=&gt; nil</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数的返回值\"><a href=\"#函数的返回值\" class=\"headerlink\" title=\"函数的返回值\"></a>函数的返回值</h2><p>可以不写<code>return</code>，默认返回最后一行的值</p>\n<h2 id=\"查看类有哪些方法\"><a href=\"#查看类有哪些方法\" class=\"headerlink\" title=\"查看类有哪些方法\"></a>查看类有哪些方法</h2><p>可以用<code>.methods</code>方法</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">irb(main):010:0&gt;</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"meta\">irb(main):011:1&gt;</span> <span class=\"class\"><span class=\"keyword\">class</span> &lt;&lt; self</span></span><br><span class=\"line\"><span class=\"meta\">irb(main):012:2&gt;</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">b</span></span></span><br><span class=\"line\"><span class=\"meta\">irb(main):013:3&gt;</span> puts <span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">irb(main):014:3&gt;</span> end</span><br><span class=\"line\"><span class=\"meta\">irb(main):015:2&gt;</span> end</span><br><span class=\"line\"><span class=\"meta\">irb(main):016:1&gt;</span> end</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">irb(main):021:0&gt;</span> A.methods.include?(<span class=\"symbol\">:b</span>)</span><br><span class=\"line\">=&gt; true</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1的用法\"><a href=\"#1的用法\" class=\"headerlink\" title=\"$1的用法\"></a>$1的用法</h2><p>表示正则匹配中<code>()</code>中匹配的内容，数字表示第几个括号</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"code\"><pre><span class=\"line\">irb(main)<span class=\"symbol\">:004</span><span class=\"symbol\">:0</span>&gt; a = &#x27;asdf123asd&#x27;</span><br><span class=\"line\">=&gt; <span class=\"string\">&quot;asdf123asd&quot;</span></span><br><span class=\"line\">irb(main)<span class=\"symbol\">:008</span><span class=\"symbol\">:0</span>&gt; a =~ /asdf(<span class=\"number\">123</span>)/</span><br><span class=\"line\">=&gt; <span class=\"number\">0</span></span><br><span class=\"line\">irb(main)<span class=\"symbol\">:009</span><span class=\"symbol\">:0</span>&gt; $<span class=\"number\">1</span></span><br><span class=\"line\">=&gt; <span class=\"string\">&quot;123&quot;</span></span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"apt命令的一些使用方法","date":"2020-09-26T16:00:00.000Z","excerpt":"debian系列（ubuntu）的apt命令","comments":1,"_content":"\n```\napt-cache madison xxx             // 查看软件包可以安装的版本\napt download xxx                  // 只下载deb包，不安装\n```\n\n## apt-cache madison\n\n```\n$ apt-cache madison kubelet | head -n 5\n   kubelet |  1.18.8-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages\n   kubelet |  1.18.6-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages\n   kubelet |  1.18.5-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages\n   kubelet |  1.18.4-01 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages\n   kubelet |  1.18.4-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages\n\n$ apt install kubelet=1.18.8-00\n```\n\n## apt download\n\n```\n$ apt-get download libssl1.1\n获取:1 http://mirrors.163.com/debian stretch/main amd64 libssl1.1 amd64 1.1.0l-1~deb9u1 [1,358 kB]\n已下载 1,358 kB，耗时 0秒 (2,830 kB/s)\n\n```","source":"_posts/2020-09-27-debian-install-command.md","raw":"---\nlayout: post\ntitle: \"apt命令的一些使用方法\"\ndate: 2020-09-27\nexcerpt: \"debian系列（ubuntu）的apt命令\"\ntags: [linux, debian, ubuntu]\ncomments: true\n---\n\n```\napt-cache madison xxx             // 查看软件包可以安装的版本\napt download xxx                  // 只下载deb包，不安装\n```\n\n## apt-cache madison\n\n```\n$ apt-cache madison kubelet | head -n 5\n   kubelet |  1.18.8-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages\n   kubelet |  1.18.6-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages\n   kubelet |  1.18.5-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages\n   kubelet |  1.18.4-01 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages\n   kubelet |  1.18.4-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages\n\n$ apt install kubelet=1.18.8-00\n```\n\n## apt download\n\n```\n$ apt-get download libssl1.1\n获取:1 http://mirrors.163.com/debian stretch/main amd64 libssl1.1 amd64 1.1.0l-1~deb9u1 [1,358 kB]\n已下载 1,358 kB，耗时 0秒 (2,830 kB/s)\n\n```","slug":"2020-09-27-debian-install-command","published":1,"updated":"2020-11-24T07:53:04.752Z","photos":[],"link":"","_id":"ckoe9iguo000v8cpn13fs8hsp","content":"<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-cache madison xxx             <span class=\"regexp\">//</span> 查看软件包可以安装的版本</span><br><span class=\"line\">apt download xxx                  <span class=\"regexp\">//</span> 只下载deb包，不安装</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"apt-cache-madison\"><a href=\"#apt-cache-madison\" class=\"headerlink\" title=\"apt-cache madison\"></a>apt-cache madison</h2><figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ apt-cache madison kubelet | head -n <span class=\"number\">5</span></span><br><span class=\"line\">   kubelet |  <span class=\"number\">1.18</span><span class=\"number\">.8</span><span class=\"number\">-00</span> | http:<span class=\"comment\">//apt.kubernetes.io kubernetes-xenial/main amd64 Packages</span></span><br><span class=\"line\">   kubelet |  <span class=\"number\">1.18</span><span class=\"number\">.6</span><span class=\"number\">-00</span> | http:<span class=\"comment\">//apt.kubernetes.io kubernetes-xenial/main amd64 Packages</span></span><br><span class=\"line\">   kubelet |  <span class=\"number\">1.18</span><span class=\"number\">.5</span><span class=\"number\">-00</span> | http:<span class=\"comment\">//apt.kubernetes.io kubernetes-xenial/main amd64 Packages</span></span><br><span class=\"line\">   kubelet |  <span class=\"number\">1.18</span><span class=\"number\">.4</span><span class=\"number\">-01</span> | http:<span class=\"comment\">//apt.kubernetes.io kubernetes-xenial/main amd64 Packages</span></span><br><span class=\"line\">   kubelet |  <span class=\"number\">1.18</span><span class=\"number\">.4</span><span class=\"number\">-00</span> | http:<span class=\"comment\">//apt.kubernetes.io kubernetes-xenial/main amd64 Packages</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ apt install kubelet=<span class=\"number\">1.18</span><span class=\"number\">.8</span><span class=\"number\">-00</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"apt-download\"><a href=\"#apt-download\" class=\"headerlink\" title=\"apt download\"></a>apt download</h2><figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ apt-<span class=\"keyword\">get</span> download libssl1<span class=\"number\">.1</span></span><br><span class=\"line\">获取:<span class=\"number\">1</span> http:<span class=\"comment\">//mirrors.163.com/debian stretch/main amd64 libssl1.1 amd64 1.1.0l-1~deb9u1 [1,358 kB]</span></span><br><span class=\"line\">已下载 <span class=\"number\">1</span>,<span class=\"number\">358</span> kB，耗时 <span class=\"number\">0</span>秒 (<span class=\"number\">2</span>,<span class=\"number\">830</span> kB/s)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"more":"<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-cache madison xxx             <span class=\"regexp\">//</span> 查看软件包可以安装的版本</span><br><span class=\"line\">apt download xxx                  <span class=\"regexp\">//</span> 只下载deb包，不安装</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"apt-cache-madison\"><a href=\"#apt-cache-madison\" class=\"headerlink\" title=\"apt-cache madison\"></a>apt-cache madison</h2><figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ apt-cache madison kubelet | head -n <span class=\"number\">5</span></span><br><span class=\"line\">   kubelet |  <span class=\"number\">1.18</span><span class=\"number\">.8</span><span class=\"number\">-00</span> | http:<span class=\"comment\">//apt.kubernetes.io kubernetes-xenial/main amd64 Packages</span></span><br><span class=\"line\">   kubelet |  <span class=\"number\">1.18</span><span class=\"number\">.6</span><span class=\"number\">-00</span> | http:<span class=\"comment\">//apt.kubernetes.io kubernetes-xenial/main amd64 Packages</span></span><br><span class=\"line\">   kubelet |  <span class=\"number\">1.18</span><span class=\"number\">.5</span><span class=\"number\">-00</span> | http:<span class=\"comment\">//apt.kubernetes.io kubernetes-xenial/main amd64 Packages</span></span><br><span class=\"line\">   kubelet |  <span class=\"number\">1.18</span><span class=\"number\">.4</span><span class=\"number\">-01</span> | http:<span class=\"comment\">//apt.kubernetes.io kubernetes-xenial/main amd64 Packages</span></span><br><span class=\"line\">   kubelet |  <span class=\"number\">1.18</span><span class=\"number\">.4</span><span class=\"number\">-00</span> | http:<span class=\"comment\">//apt.kubernetes.io kubernetes-xenial/main amd64 Packages</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ apt install kubelet=<span class=\"number\">1.18</span><span class=\"number\">.8</span><span class=\"number\">-00</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"apt-download\"><a href=\"#apt-download\" class=\"headerlink\" title=\"apt download\"></a>apt download</h2><figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ apt-<span class=\"keyword\">get</span> download libssl1<span class=\"number\">.1</span></span><br><span class=\"line\">获取:<span class=\"number\">1</span> http:<span class=\"comment\">//mirrors.163.com/debian stretch/main amd64 libssl1.1 amd64 1.1.0l-1~deb9u1 [1,358 kB]</span></span><br><span class=\"line\">已下载 <span class=\"number\">1</span>,<span class=\"number\">358</span> kB，耗时 <span class=\"number\">0</span>秒 (<span class=\"number\">2</span>,<span class=\"number\">830</span> kB/s)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"kubernetes集群中访问外部域名","date":"2020-09-16T16:00:00.000Z","excerpt":"在k8s集群中，在pod内需要访问外部域名，或者dns无法解析的域名","comments":1,"_content":"\n一般来说有三种方法可以实现添加外部域名\n* 通过hostalias在deployment里面修改hosts文件\n* 通过coredns修改hosts文件\n* 通过kube-dns添加域名服务器\n## 通过hostalias添加域名和ip\n创建nginx pod\n```\nkubectl run nginx --image nginx\npod/nginx created\n```\n查看pod\n```\n$ kubectl get pods --output=wide\nNAME     READY     STATUS    RESTARTS   AGE    IP           NODE\nnginx    1/1       Running   0          13s    10.200.0.4   worker0\n\n$ kubectl exec nginx -- cat /etc/hosts\n127.0.0.1\tlocalhost\n::1\tlocalhost ip6-localhost ip6-loopback\nfe00::0\tip6-localnet\nfe00::0\tip6-mcastprefix\nfe00::1\tip6-allnodes\nfe00::2\tip6-allrouters\n10.200.0.4\tnginx\n```\n添加额外的域名和ip\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: hostaliases-pod\nspec:\n  restartPolicy: Never\n  hostAliases:\n  - ip: \"127.0.0.1\"\n    hostnames:\n    - \"foo.local\"\n    - \"bar.local\"\n  - ip: \"10.1.2.3\"\n    hostnames:\n    - \"foo.remote\"\n    - \"bar.remote\"\n  containers:\n  - name: cat-hosts\n    image: busybox\n    command:\n    - cat\n    args:\n    - \"/etc/hosts\"\n```\n运行这个pod\n```\nkubectl apply -f https://k8s.io/examples/service/networking/hostaliases-pod.yaml\npod/hostaliases-pod created\n```\n它的hostfile\n```\n$ kubectl exec hostaliases-pod -- cat /etc/hosts\n127.0.0.1\tlocalhost\n::1\tlocalhost ip6-localhost ip6-loopback\nfe00::0\tip6-localnet\nfe00::0\tip6-mcastprefix\nfe00::1\tip6-allnodes\nfe00::2\tip6-allrouters\n10.200.0.5\thostaliases-pod\n\n# Entries added by HostAliases.\n127.0.0.1\tfoo.local\tbar.local\n10.1.2.3\tfoo.remote\tbar.remote\n```\n\n## 通过coredns修改hosts文件\n使用edit命令修改coredns configmap资源, 添加域名`193.160.57.121 harbor.com`\n```\nkubectl edit configmap coredns -n kube-system\n```\n```\n[root@node-2 test]# kubectl get configmap coredns -n kube-system -o yaml\napiVersion: v1\ndata:\n  Corefile: |\n    .:53 {\n        errors\n        health\n        ready\n        kubernetes cluster.local. in-addr.arpa ip6.arpa {\n            pods insecure\n            fallthrough in-addr.arpa ip6.arpa\n            ttl 30\n        }\n        hosts {\n           193.160.57.121 harbor.com           //添加域名\n           fallthrough\n        }\n        prometheus :9153\n        forward . /etc/resolv.conf\n        cache 30\n        loop\n        reload\n        loadbalance\n    }\nkind: ConfigMap\nmetadata:\n  creationTimestamp: \"2020-08-20T10:18:50Z\"\n  labels:\n    addonmanager.kubernetes.io/mode: EnsureExists\n  name: coredns\n  namespace: kube-system\n  resourceVersion: \"13875493\"\n  selfLink: /api/v1/namespaces/kube-system/configmaps/coredns\n  uid: 10a8e6df-d3d6-49a6-98b9-57640fdb6011\n```\n## 通过coredns添加域名服务器\n```\napiVersion: v1\ndata:\n  Corefile: |\n    .:53 {\n        errors\n        health\n        ready\n        kubernetes cluster.local. in-addr.arpa ip6.arpa {\n            pods insecure\n            fallthrough in-addr.arpa ip6.arpa\n            ttl 30\n        }\n        proxy . 10.167.129.6             //添加域名服务器\n        prometheus :9153\n        forward . /etc/resolv.conf\n        cache 30\n        loop\n        reload\n        loadbalance\n    }\nkind: ConfigMap\nmetadata:\n  creationTimestamp: \"2020-08-20T10:18:50Z\"\n  labels:\n    addonmanager.kubernetes.io/mode: EnsureExists\n  name: coredns\n  namespace: kube-system\n  resourceVersion: \"13875493\"\n  selfLink: /api/v1/namespaces/kube-system/configmaps/coredns\n  uid: 10a8e6df-d3d6-49a6-98b9-57640fdb6011\n\n```\n\n## 通过kube-dns添加域名服务器\n修改kube-dns的使用的ConfigMap。\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: kube-dns\n  namespace: kube-system\ndata:\n  stubDomains: |\n    {\"k8s.com\": [\"192.168.10.10\"]}\n  upstreamNameservers: |\n    [\"8.8.8.8\", \"8.8.4.4\"]\n```\n`upstreamNameservers` 即使用的外部DNS。\n\n## 参考\n[add-entries-to-pod-etc-hosts-with-host-aliases](https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/)  \n[kubernetes 集群DNS配置及容器内CoreDNS解析外部域名配置问题](https://www.cnblogs.com/lbjstill/p/13298826.html)  \n[配置Pod使用外部DNS](https://jimmysong.io/kubernetes-handbook/appendix/tricks.html)\n[]\n","source":"_posts/2020-09-17-k8s-add-new-domain-name.md","raw":"---\nlayout: post\ntitle: \"kubernetes集群中访问外部域名\"\ndate: 2020-09-17\nexcerpt: \"在k8s集群中，在pod内需要访问外部域名，或者dns无法解析的域名\"\ntags: [kubernetes]\ncomments: true\n---\n\n一般来说有三种方法可以实现添加外部域名\n* 通过hostalias在deployment里面修改hosts文件\n* 通过coredns修改hosts文件\n* 通过kube-dns添加域名服务器\n## 通过hostalias添加域名和ip\n创建nginx pod\n```\nkubectl run nginx --image nginx\npod/nginx created\n```\n查看pod\n```\n$ kubectl get pods --output=wide\nNAME     READY     STATUS    RESTARTS   AGE    IP           NODE\nnginx    1/1       Running   0          13s    10.200.0.4   worker0\n\n$ kubectl exec nginx -- cat /etc/hosts\n127.0.0.1\tlocalhost\n::1\tlocalhost ip6-localhost ip6-loopback\nfe00::0\tip6-localnet\nfe00::0\tip6-mcastprefix\nfe00::1\tip6-allnodes\nfe00::2\tip6-allrouters\n10.200.0.4\tnginx\n```\n添加额外的域名和ip\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: hostaliases-pod\nspec:\n  restartPolicy: Never\n  hostAliases:\n  - ip: \"127.0.0.1\"\n    hostnames:\n    - \"foo.local\"\n    - \"bar.local\"\n  - ip: \"10.1.2.3\"\n    hostnames:\n    - \"foo.remote\"\n    - \"bar.remote\"\n  containers:\n  - name: cat-hosts\n    image: busybox\n    command:\n    - cat\n    args:\n    - \"/etc/hosts\"\n```\n运行这个pod\n```\nkubectl apply -f https://k8s.io/examples/service/networking/hostaliases-pod.yaml\npod/hostaliases-pod created\n```\n它的hostfile\n```\n$ kubectl exec hostaliases-pod -- cat /etc/hosts\n127.0.0.1\tlocalhost\n::1\tlocalhost ip6-localhost ip6-loopback\nfe00::0\tip6-localnet\nfe00::0\tip6-mcastprefix\nfe00::1\tip6-allnodes\nfe00::2\tip6-allrouters\n10.200.0.5\thostaliases-pod\n\n# Entries added by HostAliases.\n127.0.0.1\tfoo.local\tbar.local\n10.1.2.3\tfoo.remote\tbar.remote\n```\n\n## 通过coredns修改hosts文件\n使用edit命令修改coredns configmap资源, 添加域名`193.160.57.121 harbor.com`\n```\nkubectl edit configmap coredns -n kube-system\n```\n```\n[root@node-2 test]# kubectl get configmap coredns -n kube-system -o yaml\napiVersion: v1\ndata:\n  Corefile: |\n    .:53 {\n        errors\n        health\n        ready\n        kubernetes cluster.local. in-addr.arpa ip6.arpa {\n            pods insecure\n            fallthrough in-addr.arpa ip6.arpa\n            ttl 30\n        }\n        hosts {\n           193.160.57.121 harbor.com           //添加域名\n           fallthrough\n        }\n        prometheus :9153\n        forward . /etc/resolv.conf\n        cache 30\n        loop\n        reload\n        loadbalance\n    }\nkind: ConfigMap\nmetadata:\n  creationTimestamp: \"2020-08-20T10:18:50Z\"\n  labels:\n    addonmanager.kubernetes.io/mode: EnsureExists\n  name: coredns\n  namespace: kube-system\n  resourceVersion: \"13875493\"\n  selfLink: /api/v1/namespaces/kube-system/configmaps/coredns\n  uid: 10a8e6df-d3d6-49a6-98b9-57640fdb6011\n```\n## 通过coredns添加域名服务器\n```\napiVersion: v1\ndata:\n  Corefile: |\n    .:53 {\n        errors\n        health\n        ready\n        kubernetes cluster.local. in-addr.arpa ip6.arpa {\n            pods insecure\n            fallthrough in-addr.arpa ip6.arpa\n            ttl 30\n        }\n        proxy . 10.167.129.6             //添加域名服务器\n        prometheus :9153\n        forward . /etc/resolv.conf\n        cache 30\n        loop\n        reload\n        loadbalance\n    }\nkind: ConfigMap\nmetadata:\n  creationTimestamp: \"2020-08-20T10:18:50Z\"\n  labels:\n    addonmanager.kubernetes.io/mode: EnsureExists\n  name: coredns\n  namespace: kube-system\n  resourceVersion: \"13875493\"\n  selfLink: /api/v1/namespaces/kube-system/configmaps/coredns\n  uid: 10a8e6df-d3d6-49a6-98b9-57640fdb6011\n\n```\n\n## 通过kube-dns添加域名服务器\n修改kube-dns的使用的ConfigMap。\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: kube-dns\n  namespace: kube-system\ndata:\n  stubDomains: |\n    {\"k8s.com\": [\"192.168.10.10\"]}\n  upstreamNameservers: |\n    [\"8.8.8.8\", \"8.8.4.4\"]\n```\n`upstreamNameservers` 即使用的外部DNS。\n\n## 参考\n[add-entries-to-pod-etc-hosts-with-host-aliases](https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/)  \n[kubernetes 集群DNS配置及容器内CoreDNS解析外部域名配置问题](https://www.cnblogs.com/lbjstill/p/13298826.html)  \n[配置Pod使用外部DNS](https://jimmysong.io/kubernetes-handbook/appendix/tricks.html)\n[]\n","slug":"2020-09-17-k8s-add-new-domain-name","published":1,"updated":"2020-11-24T07:53:04.752Z","photos":[],"link":"","_id":"ckoe9igup000x8cpnfvzz1vm2","content":"<p>一般来说有三种方法可以实现添加外部域名</p>\n<ul>\n<li>通过hostalias在deployment里面修改hosts文件</li>\n<li>通过coredns修改hosts文件</li>\n<li>通过kube-dns添加域名服务器<h2 id=\"通过hostalias添加域名和ip\"><a href=\"#通过hostalias添加域名和ip\" class=\"headerlink\" title=\"通过hostalias添加域名和ip\"></a>通过hostalias添加域名和ip</h2>创建nginx pod<figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl <span class=\"built_in\">run</span> nginx <span class=\"comment\">--image nginx</span></span><br><span class=\"line\">pod/nginx created</span><br></pre></td></tr></table></figure>\n查看pod<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl <span class=\"keyword\">get</span> pods --output=wide</span><br><span class=\"line\">NAME     READY     STATUS    RESTARTS   AGE    IP           NODE</span><br><span class=\"line\">nginx    <span class=\"number\">1</span>/<span class=\"number\">1</span>       Running   <span class=\"number\">0</span>          <span class=\"number\">13</span>s    <span class=\"number\">10.200</span><span class=\"number\">.0</span><span class=\"number\">.4</span>   worker0</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl exec nginx -- cat /etc/hosts</span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>\tlocalhost</span><br><span class=\"line\">::<span class=\"number\">1</span>\tlocalhost ip6-localhost ip6-loopback</span><br><span class=\"line\">fe00::<span class=\"number\">0</span>\tip6-localnet</span><br><span class=\"line\">fe00::<span class=\"number\">0</span>\tip6-mcastprefix</span><br><span class=\"line\">fe00::<span class=\"number\">1</span>\tip6-allnodes</span><br><span class=\"line\">fe00::<span class=\"number\">2</span>\tip6-allrouters</span><br><span class=\"line\"><span class=\"number\">10.200</span><span class=\"number\">.0</span><span class=\"number\">.4</span>\tnginx</span><br></pre></td></tr></table></figure>\n添加额外的域名和ip<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">apiVersion</span>: v1</span><br><span class=\"line\"><span class=\"attribute\">kind</span>: Pod</span><br><span class=\"line\"><span class=\"attribute\">metadata</span>:</span><br><span class=\"line\">  <span class=\"attribute\">name</span>: hostaliases-pod</span><br><span class=\"line\"><span class=\"attribute\">spec</span>:</span><br><span class=\"line\">  <span class=\"attribute\">restartPolicy</span>: Never</span><br><span class=\"line\">  <span class=\"attribute\">hostAliases</span>:</span><br><span class=\"line\">  - <span class=\"attribute\">ip</span>: <span class=\"string\">&quot;127.0.0.1&quot;</span></span><br><span class=\"line\">    <span class=\"attribute\">hostnames</span>:</span><br><span class=\"line\">    - <span class=\"string\">&quot;foo.local&quot;</span></span><br><span class=\"line\">    - <span class=\"string\">&quot;bar.local&quot;</span></span><br><span class=\"line\">  - <span class=\"attribute\">ip</span>: <span class=\"string\">&quot;10.1.2.3&quot;</span></span><br><span class=\"line\">    <span class=\"attribute\">hostnames</span>:</span><br><span class=\"line\">    - <span class=\"string\">&quot;foo.remote&quot;</span></span><br><span class=\"line\">    - <span class=\"string\">&quot;bar.remote&quot;</span></span><br><span class=\"line\">  <span class=\"attribute\">containers</span>:</span><br><span class=\"line\">  - <span class=\"attribute\">name</span>: cat-hosts</span><br><span class=\"line\">    <span class=\"attribute\">image</span>: busybox</span><br><span class=\"line\">    <span class=\"attribute\">command</span>:</span><br><span class=\"line\">    - cat</span><br><span class=\"line\">    <span class=\"attribute\">args</span>:</span><br><span class=\"line\">    - <span class=\"string\">&quot;/etc/hosts&quot;</span></span><br></pre></td></tr></table></figure>\n运行这个pod<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https:<span class=\"regexp\">//</span>k8s.io<span class=\"regexp\">/examples/</span>service<span class=\"regexp\">/networking/</span>hostaliases-pod.yaml</span><br><span class=\"line\">pod/hostaliases-pod created</span><br></pre></td></tr></table></figure>\n它的hostfile<figure class=\"highlight accesslog\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl exec hostaliases-pod -- cat /etc/hosts</span><br><span class=\"line\"><span class=\"number\">127.0.0.1</span>\tlocalhost</span><br><span class=\"line\">::<span class=\"number\">1</span>\tlocalhost ip6-localhost ip6-loopback</span><br><span class=\"line\">fe00::<span class=\"number\">0</span>\tip6-localnet</span><br><span class=\"line\">fe00::<span class=\"number\">0</span>\tip6-mcastprefix</span><br><span class=\"line\">fe00::<span class=\"number\">1</span>\tip6-allnodes</span><br><span class=\"line\">fe00::<span class=\"number\">2</span>\tip6-allrouters</span><br><span class=\"line\"><span class=\"number\">10.200.0.5</span>\thostaliases-pod</span><br><span class=\"line\"></span><br><span class=\"line\"># Entries added by HostAliases.</span><br><span class=\"line\"><span class=\"number\">127.0.0.1</span>\tfoo.local\tbar.local</span><br><span class=\"line\"><span class=\"number\">10.1.2.3</span>\tfoo.remote\tbar.remote</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"通过coredns修改hosts文件\"><a href=\"#通过coredns修改hosts文件\" class=\"headerlink\" title=\"通过coredns修改hosts文件\"></a>通过coredns修改hosts文件</h2><p>使用edit命令修改coredns configmap资源, 添加域名<code>193.160.57.121 harbor.com</code></p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl <span class=\"keyword\">edit</span> configmap coredns -n kube-<span class=\"keyword\">system</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@node<span class=\"number\">-2</span> test]<span class=\"meta\"># kubectl get configmap coredns -n kube-system -o yaml</span></span><br><span class=\"line\"><span class=\"symbol\">apiVersion:</span> v1</span><br><span class=\"line\"><span class=\"symbol\">data:</span></span><br><span class=\"line\"><span class=\"symbol\">  Corefile:</span> |</span><br><span class=\"line\">    .:<span class=\"number\">53</span> &#123;</span><br><span class=\"line\">        errors</span><br><span class=\"line\">        health</span><br><span class=\"line\">        ready</span><br><span class=\"line\">        kubernetes cluster.local. in-addr.arpa ip6.<span class=\"class\">arpa </span>&#123;</span><br><span class=\"line\">            pods insecure</span><br><span class=\"line\">            fallthrough in-addr.arpa ip6.arpa</span><br><span class=\"line\">            ttl <span class=\"number\">30</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"class\">hosts </span>&#123;</span><br><span class=\"line\">           <span class=\"number\">193.160</span><span class=\"number\">.57</span><span class=\"number\">.121</span> harbor.com           <span class=\"comment\">//添加域名</span></span><br><span class=\"line\">           fallthrough</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        prometheus :<span class=\"number\">9153</span></span><br><span class=\"line\">        forward . <span class=\"meta-keyword\">/etc/</span>resolv.conf</span><br><span class=\"line\">        cache <span class=\"number\">30</span></span><br><span class=\"line\">        loop</span><br><span class=\"line\">        reload</span><br><span class=\"line\">        loadbalance</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"symbol\">kind:</span> ConfigMap</span><br><span class=\"line\"><span class=\"symbol\">metadata:</span></span><br><span class=\"line\"><span class=\"symbol\">  creationTimestamp:</span> <span class=\"string\">&quot;2020-08-20T10:18:50Z&quot;</span></span><br><span class=\"line\"><span class=\"symbol\">  labels:</span></span><br><span class=\"line\">    addonmanager.kubernetes.io/mode: EnsureExists</span><br><span class=\"line\"><span class=\"symbol\">  name:</span> coredns</span><br><span class=\"line\"><span class=\"symbol\">  namespace:</span> kube-system</span><br><span class=\"line\"><span class=\"symbol\">  resourceVersion:</span> <span class=\"string\">&quot;13875493&quot;</span></span><br><span class=\"line\"><span class=\"symbol\">  selfLink:</span> <span class=\"meta-keyword\">/api/</span>v1<span class=\"meta-keyword\">/namespaces/</span>kube-system<span class=\"meta-keyword\">/configmaps/</span>coredns</span><br><span class=\"line\"><span class=\"symbol\">  uid:</span> <span class=\"number\">10</span>a8e6df-d3d6<span class=\"number\">-49</span>a6<span class=\"number\">-98</span>b9<span class=\"number\">-57640</span>fdb6011</span><br></pre></td></tr></table></figure>\n<h2 id=\"通过coredns添加域名服务器\"><a href=\"#通过coredns添加域名服务器\" class=\"headerlink\" title=\"通过coredns添加域名服务器\"></a>通过coredns添加域名服务器</h2><figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">apiVersion:</span> v1</span><br><span class=\"line\"><span class=\"symbol\">data:</span></span><br><span class=\"line\"><span class=\"symbol\">  Corefile:</span> |</span><br><span class=\"line\">    .:<span class=\"number\">53</span> &#123;</span><br><span class=\"line\">        errors</span><br><span class=\"line\">        health</span><br><span class=\"line\">        ready</span><br><span class=\"line\">        kubernetes cluster.local. in-addr.arpa ip6.<span class=\"class\">arpa </span>&#123;</span><br><span class=\"line\">            pods insecure</span><br><span class=\"line\">            fallthrough in-addr.arpa ip6.arpa</span><br><span class=\"line\">            ttl <span class=\"number\">30</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        proxy . <span class=\"number\">10.167</span><span class=\"number\">.129</span><span class=\"number\">.6</span>             <span class=\"comment\">//添加域名服务器</span></span><br><span class=\"line\">        prometheus :<span class=\"number\">9153</span></span><br><span class=\"line\">        forward . <span class=\"meta-keyword\">/etc/</span>resolv.conf</span><br><span class=\"line\">        cache <span class=\"number\">30</span></span><br><span class=\"line\">        loop</span><br><span class=\"line\">        reload</span><br><span class=\"line\">        loadbalance</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"symbol\">kind:</span> ConfigMap</span><br><span class=\"line\"><span class=\"symbol\">metadata:</span></span><br><span class=\"line\"><span class=\"symbol\">  creationTimestamp:</span> <span class=\"string\">&quot;2020-08-20T10:18:50Z&quot;</span></span><br><span class=\"line\"><span class=\"symbol\">  labels:</span></span><br><span class=\"line\">    addonmanager.kubernetes.io/mode: EnsureExists</span><br><span class=\"line\"><span class=\"symbol\">  name:</span> coredns</span><br><span class=\"line\"><span class=\"symbol\">  namespace:</span> kube-system</span><br><span class=\"line\"><span class=\"symbol\">  resourceVersion:</span> <span class=\"string\">&quot;13875493&quot;</span></span><br><span class=\"line\"><span class=\"symbol\">  selfLink:</span> <span class=\"meta-keyword\">/api/</span>v1<span class=\"meta-keyword\">/namespaces/</span>kube-system<span class=\"meta-keyword\">/configmaps/</span>coredns</span><br><span class=\"line\"><span class=\"symbol\">  uid:</span> <span class=\"number\">10</span>a8e6df-d3d6<span class=\"number\">-49</span>a6<span class=\"number\">-98</span>b9<span class=\"number\">-57640</span>fdb6011</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通过kube-dns添加域名服务器\"><a href=\"#通过kube-dns添加域名服务器\" class=\"headerlink\" title=\"通过kube-dns添加域名服务器\"></a>通过kube-dns添加域名服务器</h2><p>修改kube-dns的使用的ConfigMap。</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">apiVersion:</span> v1</span><br><span class=\"line\"><span class=\"symbol\">kind:</span> ConfigMap</span><br><span class=\"line\"><span class=\"symbol\">metadata:</span></span><br><span class=\"line\"><span class=\"symbol\">  name:</span> kube-dns</span><br><span class=\"line\"><span class=\"symbol\">  namespace:</span> kube-system</span><br><span class=\"line\"><span class=\"symbol\">data:</span></span><br><span class=\"line\"><span class=\"symbol\">  stubDomains:</span> |</span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;k8s.com&quot;</span>: [<span class=\"string\">&quot;192.168.10.10&quot;</span>]&#125;</span><br><span class=\"line\"><span class=\"symbol\">  upstreamNameservers:</span> |</span><br><span class=\"line\">    [<span class=\"string\">&quot;8.8.8.8&quot;</span>, <span class=\"string\">&quot;8.8.4.4&quot;</span>]</span><br></pre></td></tr></table></figure>\n<p><code>upstreamNameservers</code> 即使用的外部DNS。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/\">add-entries-to-pod-etc-hosts-with-host-aliases</a><br><a href=\"https://www.cnblogs.com/lbjstill/p/13298826.html\">kubernetes 集群DNS配置及容器内CoreDNS解析外部域名配置问题</a><br><a href=\"https://jimmysong.io/kubernetes-handbook/appendix/tricks.html\">配置Pod使用外部DNS</a><br>[]</p>\n","site":{"data":{}},"more":"<p>一般来说有三种方法可以实现添加外部域名</p>\n<ul>\n<li>通过hostalias在deployment里面修改hosts文件</li>\n<li>通过coredns修改hosts文件</li>\n<li>通过kube-dns添加域名服务器<h2 id=\"通过hostalias添加域名和ip\"><a href=\"#通过hostalias添加域名和ip\" class=\"headerlink\" title=\"通过hostalias添加域名和ip\"></a>通过hostalias添加域名和ip</h2>创建nginx pod<figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl <span class=\"built_in\">run</span> nginx <span class=\"comment\">--image nginx</span></span><br><span class=\"line\">pod/nginx created</span><br></pre></td></tr></table></figure>\n查看pod<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl <span class=\"keyword\">get</span> pods --output=wide</span><br><span class=\"line\">NAME     READY     STATUS    RESTARTS   AGE    IP           NODE</span><br><span class=\"line\">nginx    <span class=\"number\">1</span>/<span class=\"number\">1</span>       Running   <span class=\"number\">0</span>          <span class=\"number\">13</span>s    <span class=\"number\">10.200</span><span class=\"number\">.0</span><span class=\"number\">.4</span>   worker0</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl exec nginx -- cat /etc/hosts</span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>\tlocalhost</span><br><span class=\"line\">::<span class=\"number\">1</span>\tlocalhost ip6-localhost ip6-loopback</span><br><span class=\"line\">fe00::<span class=\"number\">0</span>\tip6-localnet</span><br><span class=\"line\">fe00::<span class=\"number\">0</span>\tip6-mcastprefix</span><br><span class=\"line\">fe00::<span class=\"number\">1</span>\tip6-allnodes</span><br><span class=\"line\">fe00::<span class=\"number\">2</span>\tip6-allrouters</span><br><span class=\"line\"><span class=\"number\">10.200</span><span class=\"number\">.0</span><span class=\"number\">.4</span>\tnginx</span><br></pre></td></tr></table></figure>\n添加额外的域名和ip<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">apiVersion</span>: v1</span><br><span class=\"line\"><span class=\"attribute\">kind</span>: Pod</span><br><span class=\"line\"><span class=\"attribute\">metadata</span>:</span><br><span class=\"line\">  <span class=\"attribute\">name</span>: hostaliases-pod</span><br><span class=\"line\"><span class=\"attribute\">spec</span>:</span><br><span class=\"line\">  <span class=\"attribute\">restartPolicy</span>: Never</span><br><span class=\"line\">  <span class=\"attribute\">hostAliases</span>:</span><br><span class=\"line\">  - <span class=\"attribute\">ip</span>: <span class=\"string\">&quot;127.0.0.1&quot;</span></span><br><span class=\"line\">    <span class=\"attribute\">hostnames</span>:</span><br><span class=\"line\">    - <span class=\"string\">&quot;foo.local&quot;</span></span><br><span class=\"line\">    - <span class=\"string\">&quot;bar.local&quot;</span></span><br><span class=\"line\">  - <span class=\"attribute\">ip</span>: <span class=\"string\">&quot;10.1.2.3&quot;</span></span><br><span class=\"line\">    <span class=\"attribute\">hostnames</span>:</span><br><span class=\"line\">    - <span class=\"string\">&quot;foo.remote&quot;</span></span><br><span class=\"line\">    - <span class=\"string\">&quot;bar.remote&quot;</span></span><br><span class=\"line\">  <span class=\"attribute\">containers</span>:</span><br><span class=\"line\">  - <span class=\"attribute\">name</span>: cat-hosts</span><br><span class=\"line\">    <span class=\"attribute\">image</span>: busybox</span><br><span class=\"line\">    <span class=\"attribute\">command</span>:</span><br><span class=\"line\">    - cat</span><br><span class=\"line\">    <span class=\"attribute\">args</span>:</span><br><span class=\"line\">    - <span class=\"string\">&quot;/etc/hosts&quot;</span></span><br></pre></td></tr></table></figure>\n运行这个pod<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https:<span class=\"regexp\">//</span>k8s.io<span class=\"regexp\">/examples/</span>service<span class=\"regexp\">/networking/</span>hostaliases-pod.yaml</span><br><span class=\"line\">pod/hostaliases-pod created</span><br></pre></td></tr></table></figure>\n它的hostfile<figure class=\"highlight accesslog\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl exec hostaliases-pod -- cat /etc/hosts</span><br><span class=\"line\"><span class=\"number\">127.0.0.1</span>\tlocalhost</span><br><span class=\"line\">::<span class=\"number\">1</span>\tlocalhost ip6-localhost ip6-loopback</span><br><span class=\"line\">fe00::<span class=\"number\">0</span>\tip6-localnet</span><br><span class=\"line\">fe00::<span class=\"number\">0</span>\tip6-mcastprefix</span><br><span class=\"line\">fe00::<span class=\"number\">1</span>\tip6-allnodes</span><br><span class=\"line\">fe00::<span class=\"number\">2</span>\tip6-allrouters</span><br><span class=\"line\"><span class=\"number\">10.200.0.5</span>\thostaliases-pod</span><br><span class=\"line\"></span><br><span class=\"line\"># Entries added by HostAliases.</span><br><span class=\"line\"><span class=\"number\">127.0.0.1</span>\tfoo.local\tbar.local</span><br><span class=\"line\"><span class=\"number\">10.1.2.3</span>\tfoo.remote\tbar.remote</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"通过coredns修改hosts文件\"><a href=\"#通过coredns修改hosts文件\" class=\"headerlink\" title=\"通过coredns修改hosts文件\"></a>通过coredns修改hosts文件</h2><p>使用edit命令修改coredns configmap资源, 添加域名<code>193.160.57.121 harbor.com</code></p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl <span class=\"keyword\">edit</span> configmap coredns -n kube-<span class=\"keyword\">system</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@node<span class=\"number\">-2</span> test]<span class=\"meta\"># kubectl get configmap coredns -n kube-system -o yaml</span></span><br><span class=\"line\"><span class=\"symbol\">apiVersion:</span> v1</span><br><span class=\"line\"><span class=\"symbol\">data:</span></span><br><span class=\"line\"><span class=\"symbol\">  Corefile:</span> |</span><br><span class=\"line\">    .:<span class=\"number\">53</span> &#123;</span><br><span class=\"line\">        errors</span><br><span class=\"line\">        health</span><br><span class=\"line\">        ready</span><br><span class=\"line\">        kubernetes cluster.local. in-addr.arpa ip6.<span class=\"class\">arpa </span>&#123;</span><br><span class=\"line\">            pods insecure</span><br><span class=\"line\">            fallthrough in-addr.arpa ip6.arpa</span><br><span class=\"line\">            ttl <span class=\"number\">30</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"class\">hosts </span>&#123;</span><br><span class=\"line\">           <span class=\"number\">193.160</span><span class=\"number\">.57</span><span class=\"number\">.121</span> harbor.com           <span class=\"comment\">//添加域名</span></span><br><span class=\"line\">           fallthrough</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        prometheus :<span class=\"number\">9153</span></span><br><span class=\"line\">        forward . <span class=\"meta-keyword\">/etc/</span>resolv.conf</span><br><span class=\"line\">        cache <span class=\"number\">30</span></span><br><span class=\"line\">        loop</span><br><span class=\"line\">        reload</span><br><span class=\"line\">        loadbalance</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"symbol\">kind:</span> ConfigMap</span><br><span class=\"line\"><span class=\"symbol\">metadata:</span></span><br><span class=\"line\"><span class=\"symbol\">  creationTimestamp:</span> <span class=\"string\">&quot;2020-08-20T10:18:50Z&quot;</span></span><br><span class=\"line\"><span class=\"symbol\">  labels:</span></span><br><span class=\"line\">    addonmanager.kubernetes.io/mode: EnsureExists</span><br><span class=\"line\"><span class=\"symbol\">  name:</span> coredns</span><br><span class=\"line\"><span class=\"symbol\">  namespace:</span> kube-system</span><br><span class=\"line\"><span class=\"symbol\">  resourceVersion:</span> <span class=\"string\">&quot;13875493&quot;</span></span><br><span class=\"line\"><span class=\"symbol\">  selfLink:</span> <span class=\"meta-keyword\">/api/</span>v1<span class=\"meta-keyword\">/namespaces/</span>kube-system<span class=\"meta-keyword\">/configmaps/</span>coredns</span><br><span class=\"line\"><span class=\"symbol\">  uid:</span> <span class=\"number\">10</span>a8e6df-d3d6<span class=\"number\">-49</span>a6<span class=\"number\">-98</span>b9<span class=\"number\">-57640</span>fdb6011</span><br></pre></td></tr></table></figure>\n<h2 id=\"通过coredns添加域名服务器\"><a href=\"#通过coredns添加域名服务器\" class=\"headerlink\" title=\"通过coredns添加域名服务器\"></a>通过coredns添加域名服务器</h2><figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">apiVersion:</span> v1</span><br><span class=\"line\"><span class=\"symbol\">data:</span></span><br><span class=\"line\"><span class=\"symbol\">  Corefile:</span> |</span><br><span class=\"line\">    .:<span class=\"number\">53</span> &#123;</span><br><span class=\"line\">        errors</span><br><span class=\"line\">        health</span><br><span class=\"line\">        ready</span><br><span class=\"line\">        kubernetes cluster.local. in-addr.arpa ip6.<span class=\"class\">arpa </span>&#123;</span><br><span class=\"line\">            pods insecure</span><br><span class=\"line\">            fallthrough in-addr.arpa ip6.arpa</span><br><span class=\"line\">            ttl <span class=\"number\">30</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        proxy . <span class=\"number\">10.167</span><span class=\"number\">.129</span><span class=\"number\">.6</span>             <span class=\"comment\">//添加域名服务器</span></span><br><span class=\"line\">        prometheus :<span class=\"number\">9153</span></span><br><span class=\"line\">        forward . <span class=\"meta-keyword\">/etc/</span>resolv.conf</span><br><span class=\"line\">        cache <span class=\"number\">30</span></span><br><span class=\"line\">        loop</span><br><span class=\"line\">        reload</span><br><span class=\"line\">        loadbalance</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"symbol\">kind:</span> ConfigMap</span><br><span class=\"line\"><span class=\"symbol\">metadata:</span></span><br><span class=\"line\"><span class=\"symbol\">  creationTimestamp:</span> <span class=\"string\">&quot;2020-08-20T10:18:50Z&quot;</span></span><br><span class=\"line\"><span class=\"symbol\">  labels:</span></span><br><span class=\"line\">    addonmanager.kubernetes.io/mode: EnsureExists</span><br><span class=\"line\"><span class=\"symbol\">  name:</span> coredns</span><br><span class=\"line\"><span class=\"symbol\">  namespace:</span> kube-system</span><br><span class=\"line\"><span class=\"symbol\">  resourceVersion:</span> <span class=\"string\">&quot;13875493&quot;</span></span><br><span class=\"line\"><span class=\"symbol\">  selfLink:</span> <span class=\"meta-keyword\">/api/</span>v1<span class=\"meta-keyword\">/namespaces/</span>kube-system<span class=\"meta-keyword\">/configmaps/</span>coredns</span><br><span class=\"line\"><span class=\"symbol\">  uid:</span> <span class=\"number\">10</span>a8e6df-d3d6<span class=\"number\">-49</span>a6<span class=\"number\">-98</span>b9<span class=\"number\">-57640</span>fdb6011</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通过kube-dns添加域名服务器\"><a href=\"#通过kube-dns添加域名服务器\" class=\"headerlink\" title=\"通过kube-dns添加域名服务器\"></a>通过kube-dns添加域名服务器</h2><p>修改kube-dns的使用的ConfigMap。</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">apiVersion:</span> v1</span><br><span class=\"line\"><span class=\"symbol\">kind:</span> ConfigMap</span><br><span class=\"line\"><span class=\"symbol\">metadata:</span></span><br><span class=\"line\"><span class=\"symbol\">  name:</span> kube-dns</span><br><span class=\"line\"><span class=\"symbol\">  namespace:</span> kube-system</span><br><span class=\"line\"><span class=\"symbol\">data:</span></span><br><span class=\"line\"><span class=\"symbol\">  stubDomains:</span> |</span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;k8s.com&quot;</span>: [<span class=\"string\">&quot;192.168.10.10&quot;</span>]&#125;</span><br><span class=\"line\"><span class=\"symbol\">  upstreamNameservers:</span> |</span><br><span class=\"line\">    [<span class=\"string\">&quot;8.8.8.8&quot;</span>, <span class=\"string\">&quot;8.8.4.4&quot;</span>]</span><br></pre></td></tr></table></figure>\n<p><code>upstreamNameservers</code> 即使用的外部DNS。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/\">add-entries-to-pod-etc-hosts-with-host-aliases</a><br><a href=\"https://www.cnblogs.com/lbjstill/p/13298826.html\">kubernetes 集群DNS配置及容器内CoreDNS解析外部域名配置问题</a><br><a href=\"https://jimmysong.io/kubernetes-handbook/appendix/tricks.html\">配置Pod使用外部DNS</a><br>[]</p>\n"},{"layout":"post","title":"css中的百分比","date":"2019-10-21T16:00:00.000Z","excerpt":"margin, padding, top等的百分比","comments":1,"_content":"\n## css中的百分比\nCSS支持多种单位形式，如百分比、px、pt、rem等，百分比和px是常用的单位，随着移动端和响应式的流行，rem、vh、vw也开始普遍使用。   \n那么元素的百分比到底是怎样计算出来的？\n\n### margin, padding\n```\n<div style=\"width: 20px\">\n    <div id=\"temp1\" style=\"margin-top: 50%\">Test top</div>\n    <div id=\"temp2\" style=\"margin-right: 25%\">Test right</div>\n    <div id=\"temp3\" style=\"margin-bottom: 75%\">Test bottom</div>\n    <div id=\"temp4\" style=\"margin-left: 100%\">Test left</div>\n</div>\n```\n得到的offset如下：\n```\ntemp1.marginTop = 20px * 50% = 10px;\ntemp2.marginRight = 20px * 25% = 5px;\ntemp3.marginBottom = 20px * 75% = 15px;\ntemp4.marginLeft = 20px * 100% = 20px;\n```\n当按百分比设定一个元素的宽度时，它是相对于父容器的宽度计算的，```元素竖向的百分比设定也是相对于容器的宽度，而不是高度```\n\n### 定位元素 top\n```\n<div style=\"height: 100px; width: 50px\">\n    <div id=\"temp1\" style=\"position: relative; top: 50%\">Test top</div>\n    <div id=\"temp2\" style=\"position: relative; right: 25%\">Test right</div>\n    <div id=\"temp3\" style=\"position: relative; bottom: 75%\">Test bottom</div>\n    <div id=\"temp4\" style=\"position: relative; left: 100%\">Test left</div>\n</div>\n```\n得到的offset如下：\n```\ntemp1.top = 100px * 50% = 50px;\ntemp2.right = 50px * 25% = 12.5px;\ntemp3.bottom = 100px * 75% = 75px;\ntemp4.left = 50px * 100% = 50px;\n```\n所以，可以看到，当为定位元素时，top、bottom、right、left是按父元素对应的宽度和高度计算的。\n\n### 补充\n当我们改变书写模式为垂直的时候，margin等的参照就变为高度了\n```\n#demo{\n    -webkit-writing-mode: vertical-rl; /* for browsers of webkit engine */\n    writing-mode: tb-rl; /* for ie */\n}\n```\n你是否觉得这不符合常规的感性认知？感性认知更多感觉应该横向参照包含块宽度，纵向参照包含块高度。   \n其实这是为了要横向和纵向2个方向都创建相同的 margin，如果它们的参照物不一致，那就无法得到两个方向相同的留白。\n#### 你可能会问那为什么要选择宽度做参照而不是高度呢？\n这其实更多的要从 CSS 设计意图上去想，因为CSS的基础需求是排版，而通常我们所见的横排文字，其水平宽度一定（仔细回想一下，如果没有显式的定义宽度或者强制一行显示，都会遇到边界换行，而不是水平延展），垂直方向可以无限延展。但当书写模式为纵向时，其参照就变成了高度而不再是宽度了。\n## 参考\n[css中的百分比计算方法](https://www.runoob.com/w3cnote/css-percentage-calculation.html)\n","source":"_posts/2019-10-22-percentage-of-css.md","raw":"---\nlayout: post\ntitle: \"css中的百分比\"\ndate: 2019-10-22\nexcerpt: \"margin, padding, top等的百分比\"\ntags: [mongo, ruby]\ncomments: true\n---\n\n## css中的百分比\nCSS支持多种单位形式，如百分比、px、pt、rem等，百分比和px是常用的单位，随着移动端和响应式的流行，rem、vh、vw也开始普遍使用。   \n那么元素的百分比到底是怎样计算出来的？\n\n### margin, padding\n```\n<div style=\"width: 20px\">\n    <div id=\"temp1\" style=\"margin-top: 50%\">Test top</div>\n    <div id=\"temp2\" style=\"margin-right: 25%\">Test right</div>\n    <div id=\"temp3\" style=\"margin-bottom: 75%\">Test bottom</div>\n    <div id=\"temp4\" style=\"margin-left: 100%\">Test left</div>\n</div>\n```\n得到的offset如下：\n```\ntemp1.marginTop = 20px * 50% = 10px;\ntemp2.marginRight = 20px * 25% = 5px;\ntemp3.marginBottom = 20px * 75% = 15px;\ntemp4.marginLeft = 20px * 100% = 20px;\n```\n当按百分比设定一个元素的宽度时，它是相对于父容器的宽度计算的，```元素竖向的百分比设定也是相对于容器的宽度，而不是高度```\n\n### 定位元素 top\n```\n<div style=\"height: 100px; width: 50px\">\n    <div id=\"temp1\" style=\"position: relative; top: 50%\">Test top</div>\n    <div id=\"temp2\" style=\"position: relative; right: 25%\">Test right</div>\n    <div id=\"temp3\" style=\"position: relative; bottom: 75%\">Test bottom</div>\n    <div id=\"temp4\" style=\"position: relative; left: 100%\">Test left</div>\n</div>\n```\n得到的offset如下：\n```\ntemp1.top = 100px * 50% = 50px;\ntemp2.right = 50px * 25% = 12.5px;\ntemp3.bottom = 100px * 75% = 75px;\ntemp4.left = 50px * 100% = 50px;\n```\n所以，可以看到，当为定位元素时，top、bottom、right、left是按父元素对应的宽度和高度计算的。\n\n### 补充\n当我们改变书写模式为垂直的时候，margin等的参照就变为高度了\n```\n#demo{\n    -webkit-writing-mode: vertical-rl; /* for browsers of webkit engine */\n    writing-mode: tb-rl; /* for ie */\n}\n```\n你是否觉得这不符合常规的感性认知？感性认知更多感觉应该横向参照包含块宽度，纵向参照包含块高度。   \n其实这是为了要横向和纵向2个方向都创建相同的 margin，如果它们的参照物不一致，那就无法得到两个方向相同的留白。\n#### 你可能会问那为什么要选择宽度做参照而不是高度呢？\n这其实更多的要从 CSS 设计意图上去想，因为CSS的基础需求是排版，而通常我们所见的横排文字，其水平宽度一定（仔细回想一下，如果没有显式的定义宽度或者强制一行显示，都会遇到边界换行，而不是水平延展），垂直方向可以无限延展。但当书写模式为纵向时，其参照就变成了高度而不再是宽度了。\n## 参考\n[css中的百分比计算方法](https://www.runoob.com/w3cnote/css-percentage-calculation.html)\n","slug":"2019-10-22-percentage-of-css","published":1,"updated":"2020-11-24T07:53:04.748Z","photos":[],"link":"","_id":"ckoe9igut000z8cpn0694255o","content":"<h2 id=\"css中的百分比\"><a href=\"#css中的百分比\" class=\"headerlink\" title=\"css中的百分比\"></a>css中的百分比</h2><p>CSS支持多种单位形式，如百分比、px、pt、rem等，百分比和px是常用的单位，随着移动端和响应式的流行，rem、vh、vw也开始普遍使用。<br>那么元素的百分比到底是怎样计算出来的？</p>\n<h3 id=\"margin-padding\"><a href=\"#margin-padding\" class=\"headerlink\" title=\"margin, padding\"></a>margin, padding</h3><figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">div</span> style=<span class=\"string\">&quot;width: 20px&quot;</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">id</span>=<span class=\"string\">&quot;temp1&quot;</span> style=<span class=\"string\">&quot;margin-top: 50%&quot;</span>&gt;Test top&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">id</span>=<span class=\"string\">&quot;temp2&quot;</span> style=<span class=\"string\">&quot;margin-right: 25%&quot;</span>&gt;Test right&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">id</span>=<span class=\"string\">&quot;temp3&quot;</span> style=<span class=\"string\">&quot;margin-bottom: 75%&quot;</span>&gt;Test bottom&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">id</span>=<span class=\"string\">&quot;temp4&quot;</span> style=<span class=\"string\">&quot;margin-left: 100%&quot;</span>&gt;Test left&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"keyword\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>得到的offset如下：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">temp1.marginTop = <span class=\"number\">20</span>px * <span class=\"number\">50</span>% = <span class=\"number\">10</span>px;</span><br><span class=\"line\">temp2.marginRight = <span class=\"number\">20</span>px * <span class=\"number\">25</span>% = <span class=\"number\">5</span>px;</span><br><span class=\"line\">temp3.marginBottom = <span class=\"number\">20</span>px * <span class=\"number\">75</span>% = <span class=\"number\">15</span>px;</span><br><span class=\"line\">temp4.marginLeft = <span class=\"number\">20</span>px * <span class=\"number\">100</span>% = <span class=\"number\">20</span>px;</span><br></pre></td></tr></table></figure>\n<p>当按百分比设定一个元素的宽度时，它是相对于父容器的宽度计算的，<code>元素竖向的百分比设定也是相对于容器的宽度，而不是高度</code></p>\n<h3 id=\"定位元素-top\"><a href=\"#定位元素-top\" class=\"headerlink\" title=\"定位元素 top\"></a>定位元素 top</h3><figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">div</span> style=<span class=\"string\">&quot;height: 100px; width: 50px&quot;</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">id</span>=<span class=\"string\">&quot;temp1&quot;</span> style=<span class=\"string\">&quot;position: relative; top: 50%&quot;</span>&gt;Test top&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">id</span>=<span class=\"string\">&quot;temp2&quot;</span> style=<span class=\"string\">&quot;position: relative; right: 25%&quot;</span>&gt;Test right&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">id</span>=<span class=\"string\">&quot;temp3&quot;</span> style=<span class=\"string\">&quot;position: relative; bottom: 75%&quot;</span>&gt;Test bottom&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">id</span>=<span class=\"string\">&quot;temp4&quot;</span> style=<span class=\"string\">&quot;position: relative; left: 100%&quot;</span>&gt;Test left&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"keyword\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>得到的offset如下：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">temp1</span>.top = <span class=\"number\">100</span>px * <span class=\"number\">50</span>% = <span class=\"number\">50</span>px;</span><br><span class=\"line\"><span class=\"attribute\">temp2</span>.right = <span class=\"number\">50</span>px * <span class=\"number\">25</span>% = <span class=\"number\">12</span>.<span class=\"number\">5</span>px;</span><br><span class=\"line\"><span class=\"attribute\">temp3</span>.bottom = <span class=\"number\">100</span>px * <span class=\"number\">75</span>% = <span class=\"number\">75</span>px;</span><br><span class=\"line\"><span class=\"attribute\">temp4</span>.left = <span class=\"number\">50</span>px * <span class=\"number\">100</span>% = <span class=\"number\">50</span>px;</span><br></pre></td></tr></table></figure>\n<p>所以，可以看到，当为定位元素时，top、bottom、right、left是按父元素对应的宽度和高度计算的。</p>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>当我们改变书写模式为垂直的时候，margin等的参照就变为高度了</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#demo</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-writing-mode</span>: vertical-rl; <span class=\"comment\">/* for browsers of webkit engine */</span></span><br><span class=\"line\">    <span class=\"attribute\">writing-mode</span>: tb-rl; <span class=\"comment\">/* for ie */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你是否觉得这不符合常规的感性认知？感性认知更多感觉应该横向参照包含块宽度，纵向参照包含块高度。<br>其实这是为了要横向和纵向2个方向都创建相同的 margin，如果它们的参照物不一致，那就无法得到两个方向相同的留白。</p>\n<h4 id=\"你可能会问那为什么要选择宽度做参照而不是高度呢？\"><a href=\"#你可能会问那为什么要选择宽度做参照而不是高度呢？\" class=\"headerlink\" title=\"你可能会问那为什么要选择宽度做参照而不是高度呢？\"></a>你可能会问那为什么要选择宽度做参照而不是高度呢？</h4><p>这其实更多的要从 CSS 设计意图上去想，因为CSS的基础需求是排版，而通常我们所见的横排文字，其水平宽度一定（仔细回想一下，如果没有显式的定义宽度或者强制一行显示，都会遇到边界换行，而不是水平延展），垂直方向可以无限延展。但当书写模式为纵向时，其参照就变成了高度而不再是宽度了。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.runoob.com/w3cnote/css-percentage-calculation.html\">css中的百分比计算方法</a></p>\n","site":{"data":{}},"more":"<h2 id=\"css中的百分比\"><a href=\"#css中的百分比\" class=\"headerlink\" title=\"css中的百分比\"></a>css中的百分比</h2><p>CSS支持多种单位形式，如百分比、px、pt、rem等，百分比和px是常用的单位，随着移动端和响应式的流行，rem、vh、vw也开始普遍使用。<br>那么元素的百分比到底是怎样计算出来的？</p>\n<h3 id=\"margin-padding\"><a href=\"#margin-padding\" class=\"headerlink\" title=\"margin, padding\"></a>margin, padding</h3><figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">div</span> style=<span class=\"string\">&quot;width: 20px&quot;</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">id</span>=<span class=\"string\">&quot;temp1&quot;</span> style=<span class=\"string\">&quot;margin-top: 50%&quot;</span>&gt;Test top&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">id</span>=<span class=\"string\">&quot;temp2&quot;</span> style=<span class=\"string\">&quot;margin-right: 25%&quot;</span>&gt;Test right&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">id</span>=<span class=\"string\">&quot;temp3&quot;</span> style=<span class=\"string\">&quot;margin-bottom: 75%&quot;</span>&gt;Test bottom&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">id</span>=<span class=\"string\">&quot;temp4&quot;</span> style=<span class=\"string\">&quot;margin-left: 100%&quot;</span>&gt;Test left&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"keyword\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>得到的offset如下：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">temp1.marginTop = <span class=\"number\">20</span>px * <span class=\"number\">50</span>% = <span class=\"number\">10</span>px;</span><br><span class=\"line\">temp2.marginRight = <span class=\"number\">20</span>px * <span class=\"number\">25</span>% = <span class=\"number\">5</span>px;</span><br><span class=\"line\">temp3.marginBottom = <span class=\"number\">20</span>px * <span class=\"number\">75</span>% = <span class=\"number\">15</span>px;</span><br><span class=\"line\">temp4.marginLeft = <span class=\"number\">20</span>px * <span class=\"number\">100</span>% = <span class=\"number\">20</span>px;</span><br></pre></td></tr></table></figure>\n<p>当按百分比设定一个元素的宽度时，它是相对于父容器的宽度计算的，<code>元素竖向的百分比设定也是相对于容器的宽度，而不是高度</code></p>\n<h3 id=\"定位元素-top\"><a href=\"#定位元素-top\" class=\"headerlink\" title=\"定位元素 top\"></a>定位元素 top</h3><figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">div</span> style=<span class=\"string\">&quot;height: 100px; width: 50px&quot;</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">id</span>=<span class=\"string\">&quot;temp1&quot;</span> style=<span class=\"string\">&quot;position: relative; top: 50%&quot;</span>&gt;Test top&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">id</span>=<span class=\"string\">&quot;temp2&quot;</span> style=<span class=\"string\">&quot;position: relative; right: 25%&quot;</span>&gt;Test right&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">id</span>=<span class=\"string\">&quot;temp3&quot;</span> style=<span class=\"string\">&quot;position: relative; bottom: 75%&quot;</span>&gt;Test bottom&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">id</span>=<span class=\"string\">&quot;temp4&quot;</span> style=<span class=\"string\">&quot;position: relative; left: 100%&quot;</span>&gt;Test left&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"keyword\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>得到的offset如下：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">temp1</span>.top = <span class=\"number\">100</span>px * <span class=\"number\">50</span>% = <span class=\"number\">50</span>px;</span><br><span class=\"line\"><span class=\"attribute\">temp2</span>.right = <span class=\"number\">50</span>px * <span class=\"number\">25</span>% = <span class=\"number\">12</span>.<span class=\"number\">5</span>px;</span><br><span class=\"line\"><span class=\"attribute\">temp3</span>.bottom = <span class=\"number\">100</span>px * <span class=\"number\">75</span>% = <span class=\"number\">75</span>px;</span><br><span class=\"line\"><span class=\"attribute\">temp4</span>.left = <span class=\"number\">50</span>px * <span class=\"number\">100</span>% = <span class=\"number\">50</span>px;</span><br></pre></td></tr></table></figure>\n<p>所以，可以看到，当为定位元素时，top、bottom、right、left是按父元素对应的宽度和高度计算的。</p>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>当我们改变书写模式为垂直的时候，margin等的参照就变为高度了</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#demo</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-writing-mode</span>: vertical-rl; <span class=\"comment\">/* for browsers of webkit engine */</span></span><br><span class=\"line\">    <span class=\"attribute\">writing-mode</span>: tb-rl; <span class=\"comment\">/* for ie */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你是否觉得这不符合常规的感性认知？感性认知更多感觉应该横向参照包含块宽度，纵向参照包含块高度。<br>其实这是为了要横向和纵向2个方向都创建相同的 margin，如果它们的参照物不一致，那就无法得到两个方向相同的留白。</p>\n<h4 id=\"你可能会问那为什么要选择宽度做参照而不是高度呢？\"><a href=\"#你可能会问那为什么要选择宽度做参照而不是高度呢？\" class=\"headerlink\" title=\"你可能会问那为什么要选择宽度做参照而不是高度呢？\"></a>你可能会问那为什么要选择宽度做参照而不是高度呢？</h4><p>这其实更多的要从 CSS 设计意图上去想，因为CSS的基础需求是排版，而通常我们所见的横排文字，其水平宽度一定（仔细回想一下，如果没有显式的定义宽度或者强制一行显示，都会遇到边界换行，而不是水平延展），垂直方向可以无限延展。但当书写模式为纵向时，其参照就变成了高度而不再是宽度了。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.runoob.com/w3cnote/css-percentage-calculation.html\">css中的百分比计算方法</a></p>\n"},{"layout":"post","title":"在debian上离线使用kubeadm搭建 v1.16.3版本Kubernetes集群","date":"2020-09-26T16:00:00.000Z","excerpt":"在debian上离线所有k8s资源，不需要网络安装kubernetes环境","comments":1,"_content":"\n# 环境准备\ndebian 9 机器一台，作为master节点和node节点\n\n## 首先安装docker\n[离线安装docker](https://www.cnblogs.com/luoSteel/p/10038954.html)  \n[docker 安装包下载地址](https://download.docker.com/linux/static/stable/x86_64/)\n\n## 关闭swap、selinux、防火墙\n```\nswapoff -a\n\nsystemctl stop firewalld\n```\n\n## 添加k8s官方源\n需要科学上网\n```\nsudo curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add\nsudo cat <<EOF >/etc/apt/sources.list.d/kubernetes.list\ndeb http://apt.kubernetes.io/ kubernetes-xenial main\nEOF\nsudo apt-get update\nsudo apt-get install -y kubelet kubeadm kubectl kubernetes-cni\n```\n\n## 配置离线包\n```\n$ apt-get download kubeadm=1.16.3-00 \n$ apt-get download kubelet=1.16.3-00 kubectl=1.16.3-00 kubernetes-cni\n$ apt-get download socat ebtables conntrack\n$ apt-get download cri-tools\n$ apt-get download libnetfilter-conntrack3\n$ apt-get download libssl1.1\n\n$ dpkg -i xxxx.deb\n```\n\n## 导出docker 离线包\n列出所有镜像\n```\n$ kubeadm config images list --image-repository registry.aliyuncs.com/google_containers --kubernetes-version v1.16.3\nregistry.aliyuncs.com/google_containers/kube-apiserver:v1.16.3\nregistry.aliyuncs.com/google_containers/kube-controller-manager:v1.16.3\nregistry.aliyuncs.com/google_containers/kube-scheduler:v1.16.3\nregistry.aliyuncs.com/google_containers/kube-proxy:v1.16.3\nregistry.aliyuncs.com/google_containers/pause:3.1\nregistry.aliyuncs.com/google_containers/etcd:3.3.15-0\nregistry.aliyuncs.com/google_containers/coredns:1.6.2\n\n$ docker save xxx xxx xxx > k8s.tar\n$ docker load < k8s.tar\n```\n\n# 使用kubeadm部署k8s\n## 初始化环境\n```\n$ kubeadm init \\\n    --image-repository registry.aliyuncs.com/google_containers \\\n    --kubernetes-version v1.16.3 \\\n    --pod-network-cidr=10.244.0.0/16\n...\nYour Kubernetes control-plane has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  mkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n\nYou should now deploy a pod network to the cluster.\nRun \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nYou can now join any number of control-plane nodes by copying certificate authorities \nand service account keys on each node and then running the following as root:\n\n  kubeadm join 192.168.9.10:6443 --token px979r.mphk9ee5ya8fgy44 \\\n    --discovery-token-ca-cert-hash sha256:5e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51 \\\n    --control-plane \t  \n\nThen you can join any number of worker nodes by running the following on each as root:\n\nkubeadm join 192.168.9.10:6443 --token px979r.mphk9ee5ya8fgy44 \\\n    --discovery-token-ca-cert-hash sha256:5e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51 \n\n```\n根据提示设置`kubeconfig`，或者添加子节点\n## 设置k8s的网络插件\n```\n$ kubectl apply -f \"https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\\n')\"\n```\n\n```\n$ docker save weaveworks/weave-npc:2.7.0 weaveworks/weave-kube:2.7.0 > weave.tar\n$ docker load < weave.tar\n```\n## 安装helm\n\n### 去除节点污点\n只有一个master节点的情况下，master节点不允许运行资源，需要去掉污点\n```\n$ kubectl get nodes\nNAME       STATUS   ROLES    AGE    VERSION\nlinx-dev   Ready    master   138m   v1.16.3\n\n$ kubectl describe node linx-dev  | grep Taint\nTaints:             node-role.kubernetes.io/master:NoSchedule\n\n// 如果Taints是none，则不需要去除污点\nkubectl taint nodes linx-dev node-role.kubernetes.io/master:NoSchedule-\n```\n\n### 下载客户端\n```\nwget https://get.helm.sh/helm-v2.16.3-linux-amd64.tar.gz\n```\n### 解压缩并拷贝helm二进制文件\n```\ntar xf helm-v2.16.3-linux-amd64.tar.gz\ncp linux-amd64/helm /usr/local/bin\n```\n### 导出tiller镜像\n```\ndocker save registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.16.3 > helm.tar\ndocker load < helm.tar\n```\n\n### 初始化helm，部署tiller\n```\n$ kubectl -n kube-system create serviceaccount tiller\n$ kubectl create clusterrolebinding tiller --clusterrole cluster-admin –serviceaccount=kube-system:tiller\n```\n`--stable-repo-url http://10.16.48.44/`需要起一个http 服务，apache或者node都可以，这儿下面放了一个文件index.yaml文件，可以从这儿下载到https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts/index.yaml\n```\n$ helm init --service-account tiller --tiller-image=registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.16.3 --upgrade --stable-repo-url http://193.160.57.100\nCreating /root/.helm/repository/repositories.yaml \nAdding stable repo with URL: http://193.160.57.100 \nAdding local repo with URL: http://127.0.0.1:8879/charts \n$HELM_HOME has been configured at /root/.helm.\n\nTiller (the Helm server-side component) has been installed into your Kubernetes Cluster.\n\nPlease note: by default, Tiller is deployed with an insecure 'allow unauthenticated users' policy.\nTo prevent this, run `helm init` with the --tiller-tls-verify flag.\nFor more information on securing your installation see: https://docs.helm.sh/using_helm/#securing-your-helm-installation\n\n```\n\n## 安装openebs存储服务\n\n### yaml文件\n将其中的`imagePullPolicy`改为`IfNotPresent`，这样可以优先选择本地镜像，而不会去请求网络\n```\nhttps://openebs.github.io/charts/openebs-operator-1.5.0.yaml\n```\n### 导出所有openebs镜像\n```\n$ docker save quay.io/openebs/m-apiserver:1.5.0 quay.io/openebs/openebs-k8s-provisioner:1.5.0 quay.io/openebs/snapshot-controller:1.5.0 quay.io/openebs/snapshot-provisioner:1.5.0 quay.io/openebs/node-disk-manager-amd64:v0.4.5 quay.io/openebs/node-disk-operator-amd64:v0.4.5 quay.io/openebs/admission-server:1.5.0 quay.io/openebs/provisioner-localpv:1.5.0 quay.io/openebs/linux-utils:1.5.0 > openebs.tar\n\n$ docker load < openebs.tar\n```\n```\nkubectl apply -f openebs-operator-1.5.0.yaml\n```\n### 设置默认存储\n```\n$ kubectl patch storageclass openebs-hostpath -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'\nstorageclass.storage.k8s.io/openebs-hostpath patched\n```\n## 安装kubesphere\n\n### 导入最小化镜像\n```\ndocker load < ks_minimal_images.tar\n```\n\n### 安装kubesphere\n```\nkubectl apply -f kubesphere-minimal.yaml\n```\n\n## 参考\n[Helm离线安装](https://www.jianshu.com/p/2bb1dfdadee8)","source":"_posts/2020-09-27-debian-install-k8s-offline.md","raw":"---\nlayout: post\ntitle: \"在debian上离线使用kubeadm搭建 v1.16.3版本Kubernetes集群\"\ndate: 2020-09-27\nexcerpt: \"在debian上离线所有k8s资源，不需要网络安装kubernetes环境\"\ntags: [linux, kubernetes, debian]\ncomments: true\n---\n\n# 环境准备\ndebian 9 机器一台，作为master节点和node节点\n\n## 首先安装docker\n[离线安装docker](https://www.cnblogs.com/luoSteel/p/10038954.html)  \n[docker 安装包下载地址](https://download.docker.com/linux/static/stable/x86_64/)\n\n## 关闭swap、selinux、防火墙\n```\nswapoff -a\n\nsystemctl stop firewalld\n```\n\n## 添加k8s官方源\n需要科学上网\n```\nsudo curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add\nsudo cat <<EOF >/etc/apt/sources.list.d/kubernetes.list\ndeb http://apt.kubernetes.io/ kubernetes-xenial main\nEOF\nsudo apt-get update\nsudo apt-get install -y kubelet kubeadm kubectl kubernetes-cni\n```\n\n## 配置离线包\n```\n$ apt-get download kubeadm=1.16.3-00 \n$ apt-get download kubelet=1.16.3-00 kubectl=1.16.3-00 kubernetes-cni\n$ apt-get download socat ebtables conntrack\n$ apt-get download cri-tools\n$ apt-get download libnetfilter-conntrack3\n$ apt-get download libssl1.1\n\n$ dpkg -i xxxx.deb\n```\n\n## 导出docker 离线包\n列出所有镜像\n```\n$ kubeadm config images list --image-repository registry.aliyuncs.com/google_containers --kubernetes-version v1.16.3\nregistry.aliyuncs.com/google_containers/kube-apiserver:v1.16.3\nregistry.aliyuncs.com/google_containers/kube-controller-manager:v1.16.3\nregistry.aliyuncs.com/google_containers/kube-scheduler:v1.16.3\nregistry.aliyuncs.com/google_containers/kube-proxy:v1.16.3\nregistry.aliyuncs.com/google_containers/pause:3.1\nregistry.aliyuncs.com/google_containers/etcd:3.3.15-0\nregistry.aliyuncs.com/google_containers/coredns:1.6.2\n\n$ docker save xxx xxx xxx > k8s.tar\n$ docker load < k8s.tar\n```\n\n# 使用kubeadm部署k8s\n## 初始化环境\n```\n$ kubeadm init \\\n    --image-repository registry.aliyuncs.com/google_containers \\\n    --kubernetes-version v1.16.3 \\\n    --pod-network-cidr=10.244.0.0/16\n...\nYour Kubernetes control-plane has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  mkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n\nYou should now deploy a pod network to the cluster.\nRun \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nYou can now join any number of control-plane nodes by copying certificate authorities \nand service account keys on each node and then running the following as root:\n\n  kubeadm join 192.168.9.10:6443 --token px979r.mphk9ee5ya8fgy44 \\\n    --discovery-token-ca-cert-hash sha256:5e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51 \\\n    --control-plane \t  \n\nThen you can join any number of worker nodes by running the following on each as root:\n\nkubeadm join 192.168.9.10:6443 --token px979r.mphk9ee5ya8fgy44 \\\n    --discovery-token-ca-cert-hash sha256:5e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51 \n\n```\n根据提示设置`kubeconfig`，或者添加子节点\n## 设置k8s的网络插件\n```\n$ kubectl apply -f \"https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\\n')\"\n```\n\n```\n$ docker save weaveworks/weave-npc:2.7.0 weaveworks/weave-kube:2.7.0 > weave.tar\n$ docker load < weave.tar\n```\n## 安装helm\n\n### 去除节点污点\n只有一个master节点的情况下，master节点不允许运行资源，需要去掉污点\n```\n$ kubectl get nodes\nNAME       STATUS   ROLES    AGE    VERSION\nlinx-dev   Ready    master   138m   v1.16.3\n\n$ kubectl describe node linx-dev  | grep Taint\nTaints:             node-role.kubernetes.io/master:NoSchedule\n\n// 如果Taints是none，则不需要去除污点\nkubectl taint nodes linx-dev node-role.kubernetes.io/master:NoSchedule-\n```\n\n### 下载客户端\n```\nwget https://get.helm.sh/helm-v2.16.3-linux-amd64.tar.gz\n```\n### 解压缩并拷贝helm二进制文件\n```\ntar xf helm-v2.16.3-linux-amd64.tar.gz\ncp linux-amd64/helm /usr/local/bin\n```\n### 导出tiller镜像\n```\ndocker save registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.16.3 > helm.tar\ndocker load < helm.tar\n```\n\n### 初始化helm，部署tiller\n```\n$ kubectl -n kube-system create serviceaccount tiller\n$ kubectl create clusterrolebinding tiller --clusterrole cluster-admin –serviceaccount=kube-system:tiller\n```\n`--stable-repo-url http://10.16.48.44/`需要起一个http 服务，apache或者node都可以，这儿下面放了一个文件index.yaml文件，可以从这儿下载到https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts/index.yaml\n```\n$ helm init --service-account tiller --tiller-image=registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.16.3 --upgrade --stable-repo-url http://193.160.57.100\nCreating /root/.helm/repository/repositories.yaml \nAdding stable repo with URL: http://193.160.57.100 \nAdding local repo with URL: http://127.0.0.1:8879/charts \n$HELM_HOME has been configured at /root/.helm.\n\nTiller (the Helm server-side component) has been installed into your Kubernetes Cluster.\n\nPlease note: by default, Tiller is deployed with an insecure 'allow unauthenticated users' policy.\nTo prevent this, run `helm init` with the --tiller-tls-verify flag.\nFor more information on securing your installation see: https://docs.helm.sh/using_helm/#securing-your-helm-installation\n\n```\n\n## 安装openebs存储服务\n\n### yaml文件\n将其中的`imagePullPolicy`改为`IfNotPresent`，这样可以优先选择本地镜像，而不会去请求网络\n```\nhttps://openebs.github.io/charts/openebs-operator-1.5.0.yaml\n```\n### 导出所有openebs镜像\n```\n$ docker save quay.io/openebs/m-apiserver:1.5.0 quay.io/openebs/openebs-k8s-provisioner:1.5.0 quay.io/openebs/snapshot-controller:1.5.0 quay.io/openebs/snapshot-provisioner:1.5.0 quay.io/openebs/node-disk-manager-amd64:v0.4.5 quay.io/openebs/node-disk-operator-amd64:v0.4.5 quay.io/openebs/admission-server:1.5.0 quay.io/openebs/provisioner-localpv:1.5.0 quay.io/openebs/linux-utils:1.5.0 > openebs.tar\n\n$ docker load < openebs.tar\n```\n```\nkubectl apply -f openebs-operator-1.5.0.yaml\n```\n### 设置默认存储\n```\n$ kubectl patch storageclass openebs-hostpath -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'\nstorageclass.storage.k8s.io/openebs-hostpath patched\n```\n## 安装kubesphere\n\n### 导入最小化镜像\n```\ndocker load < ks_minimal_images.tar\n```\n\n### 安装kubesphere\n```\nkubectl apply -f kubesphere-minimal.yaml\n```\n\n## 参考\n[Helm离线安装](https://www.jianshu.com/p/2bb1dfdadee8)","slug":"2020-09-27-debian-install-k8s-offline","published":1,"updated":"2020-11-24T07:53:04.753Z","photos":[],"link":"","_id":"ckoe9iguv00118cpn1suz1icj","content":"<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><p>debian 9 机器一台，作为master节点和node节点</p>\n<h2 id=\"首先安装docker\"><a href=\"#首先安装docker\" class=\"headerlink\" title=\"首先安装docker\"></a>首先安装docker</h2><p><a href=\"https://www.cnblogs.com/luoSteel/p/10038954.html\">离线安装docker</a><br><a href=\"https://download.docker.com/linux/static/stable/x86_64/\">docker 安装包下载地址</a></p>\n<h2 id=\"关闭swap、selinux、防火墙\"><a href=\"#关闭swap、selinux、防火墙\" class=\"headerlink\" title=\"关闭swap、selinux、防火墙\"></a>关闭swap、selinux、防火墙</h2><figure class=\"highlight livecodeserver\"><table><tr><td class=\"code\"><pre><span class=\"line\">swapoff -<span class=\"keyword\">a</span></span><br><span class=\"line\"></span><br><span class=\"line\">systemctl <span class=\"built_in\">stop</span> firewalld</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加k8s官方源\"><a href=\"#添加k8s官方源\" class=\"headerlink\" title=\"添加k8s官方源\"></a>添加k8s官方源</h2><p>需要科学上网</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo curl -s https:<span class=\"regexp\">//</span>packages.cloud.google.com<span class=\"regexp\">/apt/</span>doc/apt-key.gpg | sudo apt-key add</span><br><span class=\"line\">sudo cat &lt;&lt;EOF &gt;<span class=\"regexp\">/etc/</span>apt<span class=\"regexp\">/sources.list.d/</span>kubernetes.list</span><br><span class=\"line\">deb http:<span class=\"regexp\">//</span>apt.kubernetes.io/ kubernetes-xenial main</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install -y kubelet kubeadm kubectl kubernetes-cni</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置离线包\"><a href=\"#配置离线包\" class=\"headerlink\" title=\"配置离线包\"></a>配置离线包</h2><figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ apt-<span class=\"builtin-name\">get</span> download <span class=\"attribute\">kubeadm</span>=1.16.3-00 </span><br><span class=\"line\">$ apt-<span class=\"builtin-name\">get</span> download <span class=\"attribute\">kubelet</span>=1.16.3-00 <span class=\"attribute\">kubectl</span>=1.16.3-00 kubernetes-cni</span><br><span class=\"line\">$ apt-<span class=\"builtin-name\">get</span> download socat ebtables conntrack</span><br><span class=\"line\">$ apt-<span class=\"builtin-name\">get</span> download cri-tools</span><br><span class=\"line\">$ apt-<span class=\"builtin-name\">get</span> download libnetfilter-conntrack3</span><br><span class=\"line\">$ apt-<span class=\"builtin-name\">get</span> download libssl1.1</span><br><span class=\"line\"></span><br><span class=\"line\">$ dpkg -i xxxx.deb</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"导出docker-离线包\"><a href=\"#导出docker-离线包\" class=\"headerlink\" title=\"导出docker 离线包\"></a>导出docker 离线包</h2><p>列出所有镜像</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubeadm config images list --image-repository registry.aliyuncs.com/google_containers --kubernetes-version v1<span class=\"number\">.16</span><span class=\"number\">.3</span></span><br><span class=\"line\">registry.aliyuncs.com/google_containers/kube-apiserver:v1<span class=\"number\">.16</span><span class=\"number\">.3</span></span><br><span class=\"line\">registry.aliyuncs.com/google_containers/kube-controller-manager:v1<span class=\"number\">.16</span><span class=\"number\">.3</span></span><br><span class=\"line\">registry.aliyuncs.com/google_containers/kube-scheduler:v1<span class=\"number\">.16</span><span class=\"number\">.3</span></span><br><span class=\"line\">registry.aliyuncs.com/google_containers/kube-proxy:v1<span class=\"number\">.16</span><span class=\"number\">.3</span></span><br><span class=\"line\">registry.aliyuncs.com/google_containers/pause:<span class=\"number\">3.1</span></span><br><span class=\"line\">registry.aliyuncs.com/google_containers/etcd:<span class=\"number\">3.3</span><span class=\"number\">.15</span><span class=\"number\">-0</span></span><br><span class=\"line\">registry.aliyuncs.com/google_containers/coredns:<span class=\"number\">1.6</span><span class=\"number\">.2</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ docker save xxx xxx xxx &gt; k8s.tar</span><br><span class=\"line\">$ docker load &lt; k8s.tar</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用kubeadm部署k8s\"><a href=\"#使用kubeadm部署k8s\" class=\"headerlink\" title=\"使用kubeadm部署k8s\"></a>使用kubeadm部署k8s</h1><h2 id=\"初始化环境\"><a href=\"#初始化环境\" class=\"headerlink\" title=\"初始化环境\"></a>初始化环境</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubeadm init \\</span><br><span class=\"line\">    <span class=\"comment\">--image-repository registry.aliyuncs.com/google_containers \\</span></span><br><span class=\"line\">    <span class=\"comment\">--kubernetes-version v1.16.3 \\</span></span><br><span class=\"line\">    <span class=\"comment\">--pod-network-cidr=10.244.0.0/16</span></span><br><span class=\"line\">...</span><br><span class=\"line\">Your Kubernetes control-plane has initialized successfully!</span><br><span class=\"line\"></span><br><span class=\"line\">To <span class=\"keyword\">start</span> <span class=\"keyword\">using</span> your cluster, you need <span class=\"keyword\">to</span> run the <span class=\"keyword\">following</span> <span class=\"keyword\">as</span> a regular <span class=\"keyword\">user</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">  mkdir -p $HOME/.kube</span><br><span class=\"line\">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class=\"line\">  sudo chown $(<span class=\"keyword\">id</span> -u):$(<span class=\"keyword\">id</span> -g) $HOME/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\">You should <span class=\"keyword\">now</span> deploy a pod network <span class=\"keyword\">to</span> the cluster.</span><br><span class=\"line\">Run <span class=\"string\">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> <span class=\"keyword\">with</span> one <span class=\"keyword\">of</span> the options listed <span class=\"keyword\">at</span>:</span><br><span class=\"line\">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class=\"line\"></span><br><span class=\"line\">You can <span class=\"keyword\">now</span> <span class=\"keyword\">join</span> <span class=\"keyword\">any</span> <span class=\"built_in\">number</span> <span class=\"keyword\">of</span> control-plane nodes <span class=\"keyword\">by</span> copying certificate authorities </span><br><span class=\"line\"><span class=\"keyword\">and</span> service <span class=\"keyword\">account</span> <span class=\"keyword\">keys</span> <span class=\"keyword\">on</span> <span class=\"keyword\">each</span> node <span class=\"keyword\">and</span> <span class=\"keyword\">then</span> running the <span class=\"keyword\">following</span> <span class=\"keyword\">as</span> root:</span><br><span class=\"line\"></span><br><span class=\"line\">  kubeadm <span class=\"keyword\">join</span> <span class=\"number\">192.168</span><span class=\"number\">.9</span><span class=\"number\">.10</span>:<span class=\"number\">6443</span> <span class=\"comment\">--token px979r.mphk9ee5ya8fgy44 \\</span></span><br><span class=\"line\">    <span class=\"comment\">--discovery-token-ca-cert-hash sha256:5e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51 \\</span></span><br><span class=\"line\">    <span class=\"comment\">--control-plane \t  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Then</span> you can <span class=\"keyword\">join</span> <span class=\"keyword\">any</span> <span class=\"built_in\">number</span> <span class=\"keyword\">of</span> worker nodes <span class=\"keyword\">by</span> running the <span class=\"keyword\">following</span> <span class=\"keyword\">on</span> <span class=\"keyword\">each</span> <span class=\"keyword\">as</span> root:</span><br><span class=\"line\"></span><br><span class=\"line\">kubeadm <span class=\"keyword\">join</span> <span class=\"number\">192.168</span><span class=\"number\">.9</span><span class=\"number\">.10</span>:<span class=\"number\">6443</span> <span class=\"comment\">--token px979r.mphk9ee5ya8fgy44 \\</span></span><br><span class=\"line\">    <span class=\"comment\">--discovery-token-ca-cert-hash sha256:5e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51 </span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>根据提示设置<code>kubeconfig</code>，或者添加子节点</p>\n<h2 id=\"设置k8s的网络插件\"><a href=\"#设置k8s的网络插件\" class=\"headerlink\" title=\"设置k8s的网络插件\"></a>设置k8s的网络插件</h2><figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$</span> kubectl apply <span class=\"operator\">-f</span> <span class=\"string\">&quot;https://cloud.weave.works/k8s/net?k8s-version=<span class=\"variable\">$</span>(kubectl version | base64 | tr -d &#x27;\\n&#x27;)&quot;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker save weaveworks/weave-npc:<span class=\"number\">2.7</span><span class=\"number\">.0</span> weaveworks/weave-kube:<span class=\"number\">2.7</span><span class=\"number\">.0</span> &gt; weave.tar</span><br><span class=\"line\">$ docker load &lt; weave.tar</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装helm\"><a href=\"#安装helm\" class=\"headerlink\" title=\"安装helm\"></a>安装helm</h2><h3 id=\"去除节点污点\"><a href=\"#去除节点污点\" class=\"headerlink\" title=\"去除节点污点\"></a>去除节点污点</h3><p>只有一个master节点的情况下，master节点不允许运行资源，需要去掉污点</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl get nodes</span><br><span class=\"line\">NAME       STATUS   ROLES    AGE    <span class=\"keyword\">VERSION</span></span><br><span class=\"line\">linx-dev   Ready    <span class=\"keyword\">master</span>   <span class=\"title\">138m</span>   v1.<span class=\"number\">16.3</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl describe <span class=\"keyword\">node</span> <span class=\"title\">linx-dev</span>  | grep Taint</span><br><span class=\"line\">Taints:             <span class=\"keyword\">node</span><span class=\"title\">-role</span>.kubernetes.io/<span class=\"literal\">master</span>:NoSchedule</span><br><span class=\"line\"></span><br><span class=\"line\">// 如果Taints是none，则不需要去除污点</span><br><span class=\"line\">kubectl taint nodes linx-dev <span class=\"keyword\">node</span><span class=\"title\">-role</span>.kubernetes.io/<span class=\"literal\">master</span>:NoSchedule-</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"下载客户端\"><a href=\"#下载客户端\" class=\"headerlink\" title=\"下载客户端\"></a>下载客户端</h3><figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">wget</span> https://get.helm.sh/helm-v<span class=\"number\">2</span>.<span class=\"number\">16</span>.<span class=\"number\">3</span>-linux-amd<span class=\"number\">64</span>.tar.gz</span><br></pre></td></tr></table></figure>\n<h3 id=\"解压缩并拷贝helm二进制文件\"><a href=\"#解压缩并拷贝helm二进制文件\" class=\"headerlink\" title=\"解压缩并拷贝helm二进制文件\"></a>解压缩并拷贝helm二进制文件</h3><figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">tar</span> xf helm-v<span class=\"number\">2</span>.<span class=\"number\">16</span>.<span class=\"number\">3</span>-linux-amd<span class=\"number\">64</span>.tar.gz</span><br><span class=\"line\"><span class=\"attribute\">cp</span> linux-amd<span class=\"number\">64</span>/helm /usr/local/bin</span><br></pre></td></tr></table></figure>\n<h3 id=\"导出tiller镜像\"><a href=\"#导出tiller镜像\" class=\"headerlink\" title=\"导出tiller镜像\"></a>导出tiller镜像</h3><figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">docker</span> save registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v<span class=\"number\">2</span>.<span class=\"number\">16</span>.<span class=\"number\">3</span> &gt; helm.tar</span><br><span class=\"line\"><span class=\"attribute\">docker</span> load &lt; helm.tar</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"初始化helm，部署tiller\"><a href=\"#初始化helm，部署tiller\" class=\"headerlink\" title=\"初始化helm，部署tiller\"></a>初始化helm，部署tiller</h3><figure class=\"highlight gams\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> kubectl -n kube-<span class=\"keyword\">system</span> create serviceaccount tiller</span><br><span class=\"line\"><span class=\"symbol\">$</span> kubectl create clusterrolebinding tiller --clusterrole cluster-admin –serviceaccount=kube-<span class=\"keyword\">system</span>:tiller</span><br></pre></td></tr></table></figure>\n<p><code>--stable-repo-url http://10.16.48.44/</code>需要起一个http 服务，apache或者node都可以，这儿下面放了一个文件index.yaml文件，可以从这儿下载到<a href=\"https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts/index.yaml\">https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts/index.yaml</a></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ helm init <span class=\"comment\">--service-account tiller --tiller-image=registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.16.3 --upgrade --stable-repo-url http://193.160.57.100</span></span><br><span class=\"line\">Creating /root/.helm/repository/repositories.yaml </span><br><span class=\"line\">Adding stable repo <span class=\"keyword\">with</span> <span class=\"keyword\">URL</span>: <span class=\"keyword\">http</span>://<span class=\"number\">193.160</span><span class=\"number\">.57</span><span class=\"number\">.100</span> </span><br><span class=\"line\">Adding <span class=\"keyword\">local</span> repo <span class=\"keyword\">with</span> <span class=\"keyword\">URL</span>: <span class=\"keyword\">http</span>://<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8879</span>/charts </span><br><span class=\"line\">$HELM_HOME has been configured <span class=\"keyword\">at</span> /root/.helm.</span><br><span class=\"line\"></span><br><span class=\"line\">Tiller (the Helm <span class=\"keyword\">server</span>-side component) has been installed <span class=\"keyword\">into</span> your Kubernetes Cluster.</span><br><span class=\"line\"></span><br><span class=\"line\">Please note: <span class=\"keyword\">by</span> <span class=\"keyword\">default</span>, Tiller <span class=\"keyword\">is</span> deployed <span class=\"keyword\">with</span> an insecure <span class=\"string\">&#x27;allow unauthenticated users&#x27;</span> policy.</span><br><span class=\"line\"><span class=\"keyword\">To</span> prevent this, run <span class=\"string\">`helm init`</span> <span class=\"keyword\">with</span> the <span class=\"comment\">--tiller-tls-verify flag.</span></span><br><span class=\"line\"><span class=\"keyword\">For</span> more information <span class=\"keyword\">on</span> securing your installation see: https://docs.helm.sh/using_helm/<span class=\"comment\">#securing-your-helm-installation</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装openebs存储服务\"><a href=\"#安装openebs存储服务\" class=\"headerlink\" title=\"安装openebs存储服务\"></a>安装openebs存储服务</h2><h3 id=\"yaml文件\"><a href=\"#yaml文件\" class=\"headerlink\" title=\"yaml文件\"></a>yaml文件</h3><p>将其中的<code>imagePullPolicy</code>改为<code>IfNotPresent</code>，这样可以优先选择本地镜像，而不会去请求网络</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:<span class=\"regexp\">//</span>openebs.github.io<span class=\"regexp\">/charts/</span>openebs-operator-<span class=\"number\">1.5</span>.<span class=\"number\">0</span>.yaml</span><br></pre></td></tr></table></figure>\n<h3 id=\"导出所有openebs镜像\"><a href=\"#导出所有openebs镜像\" class=\"headerlink\" title=\"导出所有openebs镜像\"></a>导出所有openebs镜像</h3><figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker save quay.io/openebs/m-apiserver:<span class=\"number\">1.5</span><span class=\"number\">.0</span> quay.io/openebs/openebs-k8s-provisioner:<span class=\"number\">1.5</span><span class=\"number\">.0</span> quay.io/openebs/snapshot-controller:<span class=\"number\">1.5</span><span class=\"number\">.0</span> quay.io/openebs/snapshot-provisioner:<span class=\"number\">1.5</span><span class=\"number\">.0</span> quay.io/openebs/node-disk-manager-amd64:v0<span class=\"number\">.4</span><span class=\"number\">.5</span> quay.io/openebs/node-disk-operator-amd64:v0<span class=\"number\">.4</span><span class=\"number\">.5</span> quay.io/openebs/admission-server:<span class=\"number\">1.5</span><span class=\"number\">.0</span> quay.io/openebs/provisioner-localpv:<span class=\"number\">1.5</span><span class=\"number\">.0</span> quay.io/openebs/linux-utils:<span class=\"number\">1.5</span><span class=\"number\">.0</span> &gt; openebs.tar</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker load &lt; openebs.tar</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">kubectl</span> apply -f openebs-operator-<span class=\"number\">1</span>.<span class=\"number\">5</span>.<span class=\"number\">0</span>.yaml</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置默认存储\"><a href=\"#设置默认存储\" class=\"headerlink\" title=\"设置默认存储\"></a>设置默认存储</h3><figure class=\"highlight jboss-cli\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl <span class=\"keyword\">patch</span> storageclass openebs-hostpath -p &#x27;&#123;<span class=\"string\">&quot;metadata&quot;</span>: &#123;<span class=\"string\">&quot;annotations&quot;</span>:&#123;<span class=\"string\">&quot;storageclass.kubernetes.io/is-default-class&quot;</span>:<span class=\"string\">&quot;true&quot;</span>&#125;&#125;&#125;&#x27;</span><br><span class=\"line\">storageclass.storage.k8s.io/openebs-hostpath patched</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装kubesphere\"><a href=\"#安装kubesphere\" class=\"headerlink\" title=\"安装kubesphere\"></a>安装kubesphere</h2><h3 id=\"导入最小化镜像\"><a href=\"#导入最小化镜像\" class=\"headerlink\" title=\"导入最小化镜像\"></a>导入最小化镜像</h3><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">docker</span> <span class=\"selector-tag\">load</span> &lt; <span class=\"selector-tag\">ks_minimal_images</span><span class=\"selector-class\">.tar</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装kubesphere-1\"><a href=\"#安装kubesphere-1\" class=\"headerlink\" title=\"安装kubesphere\"></a>安装kubesphere</h3><figure class=\"highlight coq\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl <span class=\"built_in\">apply</span> -f kubesphere-minimal.yaml</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.jianshu.com/p/2bb1dfdadee8\">Helm离线安装</a></p>\n","site":{"data":{}},"more":"<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><p>debian 9 机器一台，作为master节点和node节点</p>\n<h2 id=\"首先安装docker\"><a href=\"#首先安装docker\" class=\"headerlink\" title=\"首先安装docker\"></a>首先安装docker</h2><p><a href=\"https://www.cnblogs.com/luoSteel/p/10038954.html\">离线安装docker</a><br><a href=\"https://download.docker.com/linux/static/stable/x86_64/\">docker 安装包下载地址</a></p>\n<h2 id=\"关闭swap、selinux、防火墙\"><a href=\"#关闭swap、selinux、防火墙\" class=\"headerlink\" title=\"关闭swap、selinux、防火墙\"></a>关闭swap、selinux、防火墙</h2><figure class=\"highlight livecodeserver\"><table><tr><td class=\"code\"><pre><span class=\"line\">swapoff -<span class=\"keyword\">a</span></span><br><span class=\"line\"></span><br><span class=\"line\">systemctl <span class=\"built_in\">stop</span> firewalld</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加k8s官方源\"><a href=\"#添加k8s官方源\" class=\"headerlink\" title=\"添加k8s官方源\"></a>添加k8s官方源</h2><p>需要科学上网</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo curl -s https:<span class=\"regexp\">//</span>packages.cloud.google.com<span class=\"regexp\">/apt/</span>doc/apt-key.gpg | sudo apt-key add</span><br><span class=\"line\">sudo cat &lt;&lt;EOF &gt;<span class=\"regexp\">/etc/</span>apt<span class=\"regexp\">/sources.list.d/</span>kubernetes.list</span><br><span class=\"line\">deb http:<span class=\"regexp\">//</span>apt.kubernetes.io/ kubernetes-xenial main</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install -y kubelet kubeadm kubectl kubernetes-cni</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置离线包\"><a href=\"#配置离线包\" class=\"headerlink\" title=\"配置离线包\"></a>配置离线包</h2><figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ apt-<span class=\"builtin-name\">get</span> download <span class=\"attribute\">kubeadm</span>=1.16.3-00 </span><br><span class=\"line\">$ apt-<span class=\"builtin-name\">get</span> download <span class=\"attribute\">kubelet</span>=1.16.3-00 <span class=\"attribute\">kubectl</span>=1.16.3-00 kubernetes-cni</span><br><span class=\"line\">$ apt-<span class=\"builtin-name\">get</span> download socat ebtables conntrack</span><br><span class=\"line\">$ apt-<span class=\"builtin-name\">get</span> download cri-tools</span><br><span class=\"line\">$ apt-<span class=\"builtin-name\">get</span> download libnetfilter-conntrack3</span><br><span class=\"line\">$ apt-<span class=\"builtin-name\">get</span> download libssl1.1</span><br><span class=\"line\"></span><br><span class=\"line\">$ dpkg -i xxxx.deb</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"导出docker-离线包\"><a href=\"#导出docker-离线包\" class=\"headerlink\" title=\"导出docker 离线包\"></a>导出docker 离线包</h2><p>列出所有镜像</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubeadm config images list --image-repository registry.aliyuncs.com/google_containers --kubernetes-version v1<span class=\"number\">.16</span><span class=\"number\">.3</span></span><br><span class=\"line\">registry.aliyuncs.com/google_containers/kube-apiserver:v1<span class=\"number\">.16</span><span class=\"number\">.3</span></span><br><span class=\"line\">registry.aliyuncs.com/google_containers/kube-controller-manager:v1<span class=\"number\">.16</span><span class=\"number\">.3</span></span><br><span class=\"line\">registry.aliyuncs.com/google_containers/kube-scheduler:v1<span class=\"number\">.16</span><span class=\"number\">.3</span></span><br><span class=\"line\">registry.aliyuncs.com/google_containers/kube-proxy:v1<span class=\"number\">.16</span><span class=\"number\">.3</span></span><br><span class=\"line\">registry.aliyuncs.com/google_containers/pause:<span class=\"number\">3.1</span></span><br><span class=\"line\">registry.aliyuncs.com/google_containers/etcd:<span class=\"number\">3.3</span><span class=\"number\">.15</span><span class=\"number\">-0</span></span><br><span class=\"line\">registry.aliyuncs.com/google_containers/coredns:<span class=\"number\">1.6</span><span class=\"number\">.2</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ docker save xxx xxx xxx &gt; k8s.tar</span><br><span class=\"line\">$ docker load &lt; k8s.tar</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用kubeadm部署k8s\"><a href=\"#使用kubeadm部署k8s\" class=\"headerlink\" title=\"使用kubeadm部署k8s\"></a>使用kubeadm部署k8s</h1><h2 id=\"初始化环境\"><a href=\"#初始化环境\" class=\"headerlink\" title=\"初始化环境\"></a>初始化环境</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubeadm init \\</span><br><span class=\"line\">    <span class=\"comment\">--image-repository registry.aliyuncs.com/google_containers \\</span></span><br><span class=\"line\">    <span class=\"comment\">--kubernetes-version v1.16.3 \\</span></span><br><span class=\"line\">    <span class=\"comment\">--pod-network-cidr=10.244.0.0/16</span></span><br><span class=\"line\">...</span><br><span class=\"line\">Your Kubernetes control-plane has initialized successfully!</span><br><span class=\"line\"></span><br><span class=\"line\">To <span class=\"keyword\">start</span> <span class=\"keyword\">using</span> your cluster, you need <span class=\"keyword\">to</span> run the <span class=\"keyword\">following</span> <span class=\"keyword\">as</span> a regular <span class=\"keyword\">user</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">  mkdir -p $HOME/.kube</span><br><span class=\"line\">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class=\"line\">  sudo chown $(<span class=\"keyword\">id</span> -u):$(<span class=\"keyword\">id</span> -g) $HOME/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\">You should <span class=\"keyword\">now</span> deploy a pod network <span class=\"keyword\">to</span> the cluster.</span><br><span class=\"line\">Run <span class=\"string\">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> <span class=\"keyword\">with</span> one <span class=\"keyword\">of</span> the options listed <span class=\"keyword\">at</span>:</span><br><span class=\"line\">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class=\"line\"></span><br><span class=\"line\">You can <span class=\"keyword\">now</span> <span class=\"keyword\">join</span> <span class=\"keyword\">any</span> <span class=\"built_in\">number</span> <span class=\"keyword\">of</span> control-plane nodes <span class=\"keyword\">by</span> copying certificate authorities </span><br><span class=\"line\"><span class=\"keyword\">and</span> service <span class=\"keyword\">account</span> <span class=\"keyword\">keys</span> <span class=\"keyword\">on</span> <span class=\"keyword\">each</span> node <span class=\"keyword\">and</span> <span class=\"keyword\">then</span> running the <span class=\"keyword\">following</span> <span class=\"keyword\">as</span> root:</span><br><span class=\"line\"></span><br><span class=\"line\">  kubeadm <span class=\"keyword\">join</span> <span class=\"number\">192.168</span><span class=\"number\">.9</span><span class=\"number\">.10</span>:<span class=\"number\">6443</span> <span class=\"comment\">--token px979r.mphk9ee5ya8fgy44 \\</span></span><br><span class=\"line\">    <span class=\"comment\">--discovery-token-ca-cert-hash sha256:5e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51 \\</span></span><br><span class=\"line\">    <span class=\"comment\">--control-plane \t  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Then</span> you can <span class=\"keyword\">join</span> <span class=\"keyword\">any</span> <span class=\"built_in\">number</span> <span class=\"keyword\">of</span> worker nodes <span class=\"keyword\">by</span> running the <span class=\"keyword\">following</span> <span class=\"keyword\">on</span> <span class=\"keyword\">each</span> <span class=\"keyword\">as</span> root:</span><br><span class=\"line\"></span><br><span class=\"line\">kubeadm <span class=\"keyword\">join</span> <span class=\"number\">192.168</span><span class=\"number\">.9</span><span class=\"number\">.10</span>:<span class=\"number\">6443</span> <span class=\"comment\">--token px979r.mphk9ee5ya8fgy44 \\</span></span><br><span class=\"line\">    <span class=\"comment\">--discovery-token-ca-cert-hash sha256:5e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51 </span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>根据提示设置<code>kubeconfig</code>，或者添加子节点</p>\n<h2 id=\"设置k8s的网络插件\"><a href=\"#设置k8s的网络插件\" class=\"headerlink\" title=\"设置k8s的网络插件\"></a>设置k8s的网络插件</h2><figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$</span> kubectl apply <span class=\"operator\">-f</span> <span class=\"string\">&quot;https://cloud.weave.works/k8s/net?k8s-version=<span class=\"variable\">$</span>(kubectl version | base64 | tr -d &#x27;\\n&#x27;)&quot;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker save weaveworks/weave-npc:<span class=\"number\">2.7</span><span class=\"number\">.0</span> weaveworks/weave-kube:<span class=\"number\">2.7</span><span class=\"number\">.0</span> &gt; weave.tar</span><br><span class=\"line\">$ docker load &lt; weave.tar</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装helm\"><a href=\"#安装helm\" class=\"headerlink\" title=\"安装helm\"></a>安装helm</h2><h3 id=\"去除节点污点\"><a href=\"#去除节点污点\" class=\"headerlink\" title=\"去除节点污点\"></a>去除节点污点</h3><p>只有一个master节点的情况下，master节点不允许运行资源，需要去掉污点</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl get nodes</span><br><span class=\"line\">NAME       STATUS   ROLES    AGE    <span class=\"keyword\">VERSION</span></span><br><span class=\"line\">linx-dev   Ready    <span class=\"keyword\">master</span>   <span class=\"title\">138m</span>   v1.<span class=\"number\">16.3</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl describe <span class=\"keyword\">node</span> <span class=\"title\">linx-dev</span>  | grep Taint</span><br><span class=\"line\">Taints:             <span class=\"keyword\">node</span><span class=\"title\">-role</span>.kubernetes.io/<span class=\"literal\">master</span>:NoSchedule</span><br><span class=\"line\"></span><br><span class=\"line\">// 如果Taints是none，则不需要去除污点</span><br><span class=\"line\">kubectl taint nodes linx-dev <span class=\"keyword\">node</span><span class=\"title\">-role</span>.kubernetes.io/<span class=\"literal\">master</span>:NoSchedule-</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"下载客户端\"><a href=\"#下载客户端\" class=\"headerlink\" title=\"下载客户端\"></a>下载客户端</h3><figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">wget</span> https://get.helm.sh/helm-v<span class=\"number\">2</span>.<span class=\"number\">16</span>.<span class=\"number\">3</span>-linux-amd<span class=\"number\">64</span>.tar.gz</span><br></pre></td></tr></table></figure>\n<h3 id=\"解压缩并拷贝helm二进制文件\"><a href=\"#解压缩并拷贝helm二进制文件\" class=\"headerlink\" title=\"解压缩并拷贝helm二进制文件\"></a>解压缩并拷贝helm二进制文件</h3><figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">tar</span> xf helm-v<span class=\"number\">2</span>.<span class=\"number\">16</span>.<span class=\"number\">3</span>-linux-amd<span class=\"number\">64</span>.tar.gz</span><br><span class=\"line\"><span class=\"attribute\">cp</span> linux-amd<span class=\"number\">64</span>/helm /usr/local/bin</span><br></pre></td></tr></table></figure>\n<h3 id=\"导出tiller镜像\"><a href=\"#导出tiller镜像\" class=\"headerlink\" title=\"导出tiller镜像\"></a>导出tiller镜像</h3><figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">docker</span> save registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v<span class=\"number\">2</span>.<span class=\"number\">16</span>.<span class=\"number\">3</span> &gt; helm.tar</span><br><span class=\"line\"><span class=\"attribute\">docker</span> load &lt; helm.tar</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"初始化helm，部署tiller\"><a href=\"#初始化helm，部署tiller\" class=\"headerlink\" title=\"初始化helm，部署tiller\"></a>初始化helm，部署tiller</h3><figure class=\"highlight gams\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> kubectl -n kube-<span class=\"keyword\">system</span> create serviceaccount tiller</span><br><span class=\"line\"><span class=\"symbol\">$</span> kubectl create clusterrolebinding tiller --clusterrole cluster-admin –serviceaccount=kube-<span class=\"keyword\">system</span>:tiller</span><br></pre></td></tr></table></figure>\n<p><code>--stable-repo-url http://10.16.48.44/</code>需要起一个http 服务，apache或者node都可以，这儿下面放了一个文件index.yaml文件，可以从这儿下载到<a href=\"https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts/index.yaml\">https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts/index.yaml</a></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ helm init <span class=\"comment\">--service-account tiller --tiller-image=registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.16.3 --upgrade --stable-repo-url http://193.160.57.100</span></span><br><span class=\"line\">Creating /root/.helm/repository/repositories.yaml </span><br><span class=\"line\">Adding stable repo <span class=\"keyword\">with</span> <span class=\"keyword\">URL</span>: <span class=\"keyword\">http</span>://<span class=\"number\">193.160</span><span class=\"number\">.57</span><span class=\"number\">.100</span> </span><br><span class=\"line\">Adding <span class=\"keyword\">local</span> repo <span class=\"keyword\">with</span> <span class=\"keyword\">URL</span>: <span class=\"keyword\">http</span>://<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8879</span>/charts </span><br><span class=\"line\">$HELM_HOME has been configured <span class=\"keyword\">at</span> /root/.helm.</span><br><span class=\"line\"></span><br><span class=\"line\">Tiller (the Helm <span class=\"keyword\">server</span>-side component) has been installed <span class=\"keyword\">into</span> your Kubernetes Cluster.</span><br><span class=\"line\"></span><br><span class=\"line\">Please note: <span class=\"keyword\">by</span> <span class=\"keyword\">default</span>, Tiller <span class=\"keyword\">is</span> deployed <span class=\"keyword\">with</span> an insecure <span class=\"string\">&#x27;allow unauthenticated users&#x27;</span> policy.</span><br><span class=\"line\"><span class=\"keyword\">To</span> prevent this, run <span class=\"string\">`helm init`</span> <span class=\"keyword\">with</span> the <span class=\"comment\">--tiller-tls-verify flag.</span></span><br><span class=\"line\"><span class=\"keyword\">For</span> more information <span class=\"keyword\">on</span> securing your installation see: https://docs.helm.sh/using_helm/<span class=\"comment\">#securing-your-helm-installation</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装openebs存储服务\"><a href=\"#安装openebs存储服务\" class=\"headerlink\" title=\"安装openebs存储服务\"></a>安装openebs存储服务</h2><h3 id=\"yaml文件\"><a href=\"#yaml文件\" class=\"headerlink\" title=\"yaml文件\"></a>yaml文件</h3><p>将其中的<code>imagePullPolicy</code>改为<code>IfNotPresent</code>，这样可以优先选择本地镜像，而不会去请求网络</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:<span class=\"regexp\">//</span>openebs.github.io<span class=\"regexp\">/charts/</span>openebs-operator-<span class=\"number\">1.5</span>.<span class=\"number\">0</span>.yaml</span><br></pre></td></tr></table></figure>\n<h3 id=\"导出所有openebs镜像\"><a href=\"#导出所有openebs镜像\" class=\"headerlink\" title=\"导出所有openebs镜像\"></a>导出所有openebs镜像</h3><figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker save quay.io/openebs/m-apiserver:<span class=\"number\">1.5</span><span class=\"number\">.0</span> quay.io/openebs/openebs-k8s-provisioner:<span class=\"number\">1.5</span><span class=\"number\">.0</span> quay.io/openebs/snapshot-controller:<span class=\"number\">1.5</span><span class=\"number\">.0</span> quay.io/openebs/snapshot-provisioner:<span class=\"number\">1.5</span><span class=\"number\">.0</span> quay.io/openebs/node-disk-manager-amd64:v0<span class=\"number\">.4</span><span class=\"number\">.5</span> quay.io/openebs/node-disk-operator-amd64:v0<span class=\"number\">.4</span><span class=\"number\">.5</span> quay.io/openebs/admission-server:<span class=\"number\">1.5</span><span class=\"number\">.0</span> quay.io/openebs/provisioner-localpv:<span class=\"number\">1.5</span><span class=\"number\">.0</span> quay.io/openebs/linux-utils:<span class=\"number\">1.5</span><span class=\"number\">.0</span> &gt; openebs.tar</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker load &lt; openebs.tar</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">kubectl</span> apply -f openebs-operator-<span class=\"number\">1</span>.<span class=\"number\">5</span>.<span class=\"number\">0</span>.yaml</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置默认存储\"><a href=\"#设置默认存储\" class=\"headerlink\" title=\"设置默认存储\"></a>设置默认存储</h3><figure class=\"highlight jboss-cli\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl <span class=\"keyword\">patch</span> storageclass openebs-hostpath -p &#x27;&#123;<span class=\"string\">&quot;metadata&quot;</span>: &#123;<span class=\"string\">&quot;annotations&quot;</span>:&#123;<span class=\"string\">&quot;storageclass.kubernetes.io/is-default-class&quot;</span>:<span class=\"string\">&quot;true&quot;</span>&#125;&#125;&#125;&#x27;</span><br><span class=\"line\">storageclass.storage.k8s.io/openebs-hostpath patched</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装kubesphere\"><a href=\"#安装kubesphere\" class=\"headerlink\" title=\"安装kubesphere\"></a>安装kubesphere</h2><h3 id=\"导入最小化镜像\"><a href=\"#导入最小化镜像\" class=\"headerlink\" title=\"导入最小化镜像\"></a>导入最小化镜像</h3><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">docker</span> <span class=\"selector-tag\">load</span> &lt; <span class=\"selector-tag\">ks_minimal_images</span><span class=\"selector-class\">.tar</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装kubesphere-1\"><a href=\"#安装kubesphere-1\" class=\"headerlink\" title=\"安装kubesphere\"></a>安装kubesphere</h3><figure class=\"highlight coq\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl <span class=\"built_in\">apply</span> -f kubesphere-minimal.yaml</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.jianshu.com/p/2bb1dfdadee8\">Helm离线安装</a></p>\n"},{"layout":"post","title":"linux下离线安装docker","date":"2020-09-26T16:00:00.000Z","excerpt":"使用docker下载的安装包，安装docker","comments":1,"_content":"\n## 环境准备\n1、操作系统：CentOS 7.3\n2、Docker版本：18.06.1 [官方下载地址（打不开可能需要科学上网](https://download.docker.com/linux/static/stable/x86_64/)\n3、官方参考文档：https://docs.docker.com/install/linux/docker-ce/binaries/#install-static-binaries\n\n## Docker安装\n1、解压\n```\ntar -xvf docker-18.06.1-ce.tgz\n```\n2、将解压出来的docker文件内容移动到 /usr/bin/ 目录下\n```\ncp docker/* /usr/bin/\n```\n3、将docker注册为service\n```\nvim /etc/systemd/system/docker.service\n```\n将下列配置复制到docker.service中并保存\n```\n[Unit]\n\nDescription=Docker Application Container Engine\n\nDocumentation=https://docs.docker.com\n\nAfter=network-online.target firewalld.service\n\nWants=network-online.target\n\n[Service]\n\nType=notify\n\n# the default is not to use systemd for cgroups because the delegate issues still\n\n# exists and systemd currently does not support the cgroup feature set required\n\n# for containers run by docker\n\nExecStart=/usr/bin/dockerd\n\nExecReload=/bin/kill -s HUP $MAINPID\n\n# Having non-zero Limit*s causes performance problems due to accounting overhead\n\n# in the kernel. We recommend using cgroups to do container-local accounting.\n\nLimitNOFILE=infinity\n\nLimitNPROC=infinity\n\nLimitCORE=infinity\n\n# Uncomment TasksMax if your systemd version supports it.\n\n# Only systemd 226 and above support this version.\n\n#TasksMax=infinity\n\nTimeoutStartSec=0\n\n# set delegate yes so that systemd does not reset the cgroups of docker containers\n\nDelegate=yes\n\n# kill only the docker process, not all processes in the cgroup\n\nKillMode=process\n\n# restart the docker process if it exits prematurely\n\nRestart=on-failure\n\nStartLimitBurst=3\n\nStartLimitInterval=60s\n\n \n\n[Install]\n\nWantedBy=multi-user.target\n```\n4、启动\n```\nchmod +x /etc/systemd/system/docker.service             #添加文件权限并启动docker\nsystemctl daemon-reload                                 #重载unit配置文件\nsystemctl start docker                                  #启动Docker\nsystemctl enable docker.service                         #设置开机自启\n```\n5、验证\n```\nsystemctl status docker                                 #查看Docker状态\ndocker -v                                               #查看Docker版本\n```\n## 参考\n[Linux下离线安装Docker](https://www.cnblogs.com/luoSteel/p/10038954.html)","source":"_posts/2020-09-27-docker-install-offline.md","raw":"---\nlayout: post\ntitle: \"linux下离线安装docker\"\ndate: 2020-09-27\nexcerpt: \"使用docker下载的安装包，安装docker\"\ntags: [linux, docker]\ncomments: true\n---\n\n## 环境准备\n1、操作系统：CentOS 7.3\n2、Docker版本：18.06.1 [官方下载地址（打不开可能需要科学上网](https://download.docker.com/linux/static/stable/x86_64/)\n3、官方参考文档：https://docs.docker.com/install/linux/docker-ce/binaries/#install-static-binaries\n\n## Docker安装\n1、解压\n```\ntar -xvf docker-18.06.1-ce.tgz\n```\n2、将解压出来的docker文件内容移动到 /usr/bin/ 目录下\n```\ncp docker/* /usr/bin/\n```\n3、将docker注册为service\n```\nvim /etc/systemd/system/docker.service\n```\n将下列配置复制到docker.service中并保存\n```\n[Unit]\n\nDescription=Docker Application Container Engine\n\nDocumentation=https://docs.docker.com\n\nAfter=network-online.target firewalld.service\n\nWants=network-online.target\n\n[Service]\n\nType=notify\n\n# the default is not to use systemd for cgroups because the delegate issues still\n\n# exists and systemd currently does not support the cgroup feature set required\n\n# for containers run by docker\n\nExecStart=/usr/bin/dockerd\n\nExecReload=/bin/kill -s HUP $MAINPID\n\n# Having non-zero Limit*s causes performance problems due to accounting overhead\n\n# in the kernel. We recommend using cgroups to do container-local accounting.\n\nLimitNOFILE=infinity\n\nLimitNPROC=infinity\n\nLimitCORE=infinity\n\n# Uncomment TasksMax if your systemd version supports it.\n\n# Only systemd 226 and above support this version.\n\n#TasksMax=infinity\n\nTimeoutStartSec=0\n\n# set delegate yes so that systemd does not reset the cgroups of docker containers\n\nDelegate=yes\n\n# kill only the docker process, not all processes in the cgroup\n\nKillMode=process\n\n# restart the docker process if it exits prematurely\n\nRestart=on-failure\n\nStartLimitBurst=3\n\nStartLimitInterval=60s\n\n \n\n[Install]\n\nWantedBy=multi-user.target\n```\n4、启动\n```\nchmod +x /etc/systemd/system/docker.service             #添加文件权限并启动docker\nsystemctl daemon-reload                                 #重载unit配置文件\nsystemctl start docker                                  #启动Docker\nsystemctl enable docker.service                         #设置开机自启\n```\n5、验证\n```\nsystemctl status docker                                 #查看Docker状态\ndocker -v                                               #查看Docker版本\n```\n## 参考\n[Linux下离线安装Docker](https://www.cnblogs.com/luoSteel/p/10038954.html)","slug":"2020-09-27-docker-install-offline","published":1,"updated":"2020-11-24T07:53:04.754Z","photos":[],"link":"","_id":"ckoe9igux00148cpn3obxc91b","content":"<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><p>1、操作系统：CentOS 7.3<br>2、Docker版本：18.06.1 <a href=\"https://download.docker.com/linux/static/stable/x86_64/\">官方下载地址（打不开可能需要科学上网</a><br>3、官方参考文档：<a href=\"https://docs.docker.com/install/linux/docker-ce/binaries/#install-static-binaries\">https://docs.docker.com/install/linux/docker-ce/binaries/#install-static-binaries</a></p>\n<h2 id=\"Docker安装\"><a href=\"#Docker安装\" class=\"headerlink\" title=\"Docker安装\"></a>Docker安装</h2><p>1、解压</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">tar</span> -xvf docker-<span class=\"number\">18</span>.<span class=\"number\">06</span>.<span class=\"number\">1</span>-ce.tgz</span><br></pre></td></tr></table></figure>\n<p>2、将解压出来的docker文件内容移动到 /usr/bin/ 目录下</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">cp docker<span class=\"regexp\">/* /u</span>sr<span class=\"regexp\">/bin/</span></span><br></pre></td></tr></table></figure>\n<p>3、将docker注册为service</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim <span class=\"regexp\">/etc/</span>systemd<span class=\"regexp\">/system/</span>docker.service</span><br></pre></td></tr></table></figure>\n<p>将下列配置复制到docker.service中并保存</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[Unit]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Description</span>=Docker Application Container Engine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Documentation</span>=https://docs.docker.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">After</span>=network-<span class=\"literal\">on</span>line.target firewalld.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Wants</span>=network-<span class=\"literal\">on</span>line.target</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Service]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Type</span>=notify</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># the default is not to use systemd for cgroups because the delegate issues still</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># exists and systemd currently does not support the cgroup feature set required</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># for containers run by docker</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">ExecStart</span>=/usr/bin/dockerd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">ExecReload</span>=/bin/kill -s HUP <span class=\"variable\">$MAINPID</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Having non-zero Limit*s causes performance problems due to accounting overhead</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># in the kernel. We recommend using cgroups to do container-local accounting.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">LimitNOFILE</span>=infinity</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">LimitNPROC</span>=infinity</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">LimitCORE</span>=infinity</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment TasksMax if your systemd version supports it.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Only systemd 226 and above support this version.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#TasksMax=infinity</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">TimeoutStartSec</span>=<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># set delegate yes so that systemd does not reset the cgroups of docker containers</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Delegate</span>=<span class=\"literal\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kill only the docker process, not all processes in the cgroup</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">KillMode</span>=process</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># restart the docker process if it exits prematurely</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Restart</span>=<span class=\"literal\">on</span>-failure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">StartLimitBurst</span>=<span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">StartLimitInterval</span>=<span class=\"number\">60</span>s</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Install]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>\n<p>4、启动</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">chmod +x <span class=\"regexp\">/etc/</span>systemd<span class=\"regexp\">/system/</span>docker.service             <span class=\"comment\">#添加文件权限并启动docker</span></span><br><span class=\"line\">systemctl daemon-reload                                 <span class=\"comment\">#重载unit配置文件</span></span><br><span class=\"line\">systemctl start docker                                  <span class=\"comment\">#启动Docker</span></span><br><span class=\"line\">systemctl enable docker.service                         <span class=\"comment\">#设置开机自启</span></span><br></pre></td></tr></table></figure>\n<p>5、验证</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">systemctl</span> status docker                                 <span class=\"comment\">#查看Docker状态</span></span><br><span class=\"line\">docker -v                                               <span class=\"comment\">#查看Docker版本</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.cnblogs.com/luoSteel/p/10038954.html\">Linux下离线安装Docker</a></p>\n","site":{"data":{}},"more":"<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><p>1、操作系统：CentOS 7.3<br>2、Docker版本：18.06.1 <a href=\"https://download.docker.com/linux/static/stable/x86_64/\">官方下载地址（打不开可能需要科学上网</a><br>3、官方参考文档：<a href=\"https://docs.docker.com/install/linux/docker-ce/binaries/#install-static-binaries\">https://docs.docker.com/install/linux/docker-ce/binaries/#install-static-binaries</a></p>\n<h2 id=\"Docker安装\"><a href=\"#Docker安装\" class=\"headerlink\" title=\"Docker安装\"></a>Docker安装</h2><p>1、解压</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">tar</span> -xvf docker-<span class=\"number\">18</span>.<span class=\"number\">06</span>.<span class=\"number\">1</span>-ce.tgz</span><br></pre></td></tr></table></figure>\n<p>2、将解压出来的docker文件内容移动到 /usr/bin/ 目录下</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">cp docker<span class=\"regexp\">/* /u</span>sr<span class=\"regexp\">/bin/</span></span><br></pre></td></tr></table></figure>\n<p>3、将docker注册为service</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim <span class=\"regexp\">/etc/</span>systemd<span class=\"regexp\">/system/</span>docker.service</span><br></pre></td></tr></table></figure>\n<p>将下列配置复制到docker.service中并保存</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[Unit]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Description</span>=Docker Application Container Engine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Documentation</span>=https://docs.docker.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">After</span>=network-<span class=\"literal\">on</span>line.target firewalld.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Wants</span>=network-<span class=\"literal\">on</span>line.target</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Service]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Type</span>=notify</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># the default is not to use systemd for cgroups because the delegate issues still</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># exists and systemd currently does not support the cgroup feature set required</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># for containers run by docker</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">ExecStart</span>=/usr/bin/dockerd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">ExecReload</span>=/bin/kill -s HUP <span class=\"variable\">$MAINPID</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Having non-zero Limit*s causes performance problems due to accounting overhead</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># in the kernel. We recommend using cgroups to do container-local accounting.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">LimitNOFILE</span>=infinity</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">LimitNPROC</span>=infinity</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">LimitCORE</span>=infinity</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment TasksMax if your systemd version supports it.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Only systemd 226 and above support this version.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#TasksMax=infinity</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">TimeoutStartSec</span>=<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># set delegate yes so that systemd does not reset the cgroups of docker containers</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Delegate</span>=<span class=\"literal\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kill only the docker process, not all processes in the cgroup</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">KillMode</span>=process</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># restart the docker process if it exits prematurely</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Restart</span>=<span class=\"literal\">on</span>-failure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">StartLimitBurst</span>=<span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">StartLimitInterval</span>=<span class=\"number\">60</span>s</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Install]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>\n<p>4、启动</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">chmod +x <span class=\"regexp\">/etc/</span>systemd<span class=\"regexp\">/system/</span>docker.service             <span class=\"comment\">#添加文件权限并启动docker</span></span><br><span class=\"line\">systemctl daemon-reload                                 <span class=\"comment\">#重载unit配置文件</span></span><br><span class=\"line\">systemctl start docker                                  <span class=\"comment\">#启动Docker</span></span><br><span class=\"line\">systemctl enable docker.service                         <span class=\"comment\">#设置开机自启</span></span><br></pre></td></tr></table></figure>\n<p>5、验证</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">systemctl</span> status docker                                 <span class=\"comment\">#查看Docker状态</span></span><br><span class=\"line\">docker -v                                               <span class=\"comment\">#查看Docker版本</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.cnblogs.com/luoSteel/p/10038954.html\">Linux下离线安装Docker</a></p>\n"},{"layout":"post","title":"hexo 添加文章导航","date":"2020-09-29T16:00:00.000Z","excerpt":"利用hexo 原生api添加文章目录","comments":1,"_content":"\n在Hexo官网 文档>自定义>辅助函数>最下面，可以找到[toc](https://hexo.io/zh-cn/docs/helpers#toc)这个函数，看其介绍能知道它就是来实现文章目录的。  \n\n使用toc函数，不显示标题前数字，item为页面中传过去的参数post\n\n```html\ntoc.ejs\n<% if (item) { %>\n  <div id=\"toc\" class=\"toc-article\">\n    <%- toc(item.content, {list_number: false}) %>\n  </div>\n<% } %>\n```\n在左侧栏插入代码\n```\nleft-col.ejs\n<nav>\n  <%- partial('_partial/post/toc', {item: page}) %>\n</nav>\n```\n修改layout代码\n```\n<%- partial('_partial/left-col', null, {cache: !config.relative_link, post: page}) %>\n\n<%- partial('_partial/left-col', {cache: !config.relative_link, post: page}) %>\n```\n","source":"_posts/2020-09-30-hexo-add-article-nav.md","raw":"---\nlayout: post\ntitle: \"hexo 添加文章导航\"\ndate: 2020-09-30\nexcerpt: \"利用hexo 原生api添加文章目录\"\ntags: [web, hexo]\ncomments: true\n---\n\n在Hexo官网 文档>自定义>辅助函数>最下面，可以找到[toc](https://hexo.io/zh-cn/docs/helpers#toc)这个函数，看其介绍能知道它就是来实现文章目录的。  \n\n使用toc函数，不显示标题前数字，item为页面中传过去的参数post\n\n```html\ntoc.ejs\n<% if (item) { %>\n  <div id=\"toc\" class=\"toc-article\">\n    <%- toc(item.content, {list_number: false}) %>\n  </div>\n<% } %>\n```\n在左侧栏插入代码\n```\nleft-col.ejs\n<nav>\n  <%- partial('_partial/post/toc', {item: page}) %>\n</nav>\n```\n修改layout代码\n```\n<%- partial('_partial/left-col', null, {cache: !config.relative_link, post: page}) %>\n\n<%- partial('_partial/left-col', {cache: !config.relative_link, post: page}) %>\n```\n","slug":"2020-09-30-hexo-add-article-nav","published":1,"updated":"2020-11-24T07:53:04.755Z","photos":[],"link":"","_id":"ckoe9igv500168cpn4i9f5lmc","content":"<p>在Hexo官网 文档&gt;自定义&gt;辅助函数&gt;最下面，可以找到<a href=\"https://hexo.io/zh-cn/docs/helpers#toc\">toc</a>这个函数，看其介绍能知道它就是来实现文章目录的。  </p>\n<p>使用toc函数，不显示标题前数字，item为页面中传过去的参数post</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">toc.ejs</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (<span class=\"attr\">item</span>) &#123; %&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;toc&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;toc-article&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">toc</span>(<span class=\"attr\">item.content</span>, &#123;<span class=\"attr\">list_number:</span> <span class=\"attr\">false</span>&#125;) %&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在左侧栏插入代码</p>\n<figure class=\"highlight dust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">left-col.ejs</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>(&#x27;<span class=\"attr\">_partial</span>/<span class=\"attr\">post</span>/<span class=\"attr\">toc</span>&#x27;, </span></span><span class=\"template-variable\">&#123;item: page&#125;</span><span class=\"xml\"><span class=\"tag\">) %&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>修改layout代码</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%- partial(<span class=\"string\">&#x27;_partial/left-col&#x27;</span>, <span class=\"literal\">null</span>, &#123;<span class=\"attr\">cache:</span> !config.relative_link, <span class=\"attr\">post:</span> page&#125;) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%- partial(<span class=\"string\">&#x27;_partial/left-col&#x27;</span>, &#123;<span class=\"attr\">cache:</span> !config.relative_link, <span class=\"attr\">post:</span> page&#125;) %&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"more":"<p>在Hexo官网 文档&gt;自定义&gt;辅助函数&gt;最下面，可以找到<a href=\"https://hexo.io/zh-cn/docs/helpers#toc\">toc</a>这个函数，看其介绍能知道它就是来实现文章目录的。  </p>\n<p>使用toc函数，不显示标题前数字，item为页面中传过去的参数post</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">toc.ejs</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (<span class=\"attr\">item</span>) &#123; %&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;toc&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;toc-article&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">toc</span>(<span class=\"attr\">item.content</span>, &#123;<span class=\"attr\">list_number:</span> <span class=\"attr\">false</span>&#125;) %&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在左侧栏插入代码</p>\n<figure class=\"highlight dust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">left-col.ejs</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>(&#x27;<span class=\"attr\">_partial</span>/<span class=\"attr\">post</span>/<span class=\"attr\">toc</span>&#x27;, </span></span><span class=\"template-variable\">&#123;item: page&#125;</span><span class=\"xml\"><span class=\"tag\">) %&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>修改layout代码</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%- partial(<span class=\"string\">&#x27;_partial/left-col&#x27;</span>, <span class=\"literal\">null</span>, &#123;<span class=\"attr\">cache:</span> !config.relative_link, <span class=\"attr\">post:</span> page&#125;) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%- partial(<span class=\"string\">&#x27;_partial/left-col&#x27;</span>, &#123;<span class=\"attr\">cache:</span> !config.relative_link, <span class=\"attr\">post:</span> page&#125;) %&gt;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"使用node快速起一个http服务器","date":"2020-09-26T16:00:00.000Z","excerpt":"主要用于访问文件，测试api等，只需要一个命令就可以快速启动服务器","comments":1,"_content":"\n需要node环境\n```\n$ npm install http-server -g\n\n//默认为8080\n$ http-server -p 3000\n```","source":"_posts/2020-09-27-node-http-server.md","raw":"---\nlayout: post\ntitle: \"使用node快速起一个http服务器\"\ndate: 2020-09-27\nexcerpt: \"主要用于访问文件，测试api等，只需要一个命令就可以快速启动服务器\"\ntags: [linux, nodejs, web]\ncomments: true\n---\n\n需要node环境\n```\n$ npm install http-server -g\n\n//默认为8080\n$ http-server -p 3000\n```","slug":"2020-09-27-node-http-server","published":1,"updated":"2020-11-24T07:53:04.754Z","photos":[],"link":"","_id":"ckoe9igv700198cpnaed15enf","content":"<p>需要node环境</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"keyword\">install</span> <span class=\"keyword\">http</span>-<span class=\"keyword\">server</span> -g</span><br><span class=\"line\"></span><br><span class=\"line\">//默认为<span class=\"number\">8080</span></span><br><span class=\"line\">$ <span class=\"keyword\">http</span>-<span class=\"keyword\">server</span> -p <span class=\"number\">3000</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"more":"<p>需要node环境</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"keyword\">install</span> <span class=\"keyword\">http</span>-<span class=\"keyword\">server</span> -g</span><br><span class=\"line\"></span><br><span class=\"line\">//默认为<span class=\"number\">8080</span></span><br><span class=\"line\">$ <span class=\"keyword\">http</span>-<span class=\"keyword\">server</span> -p <span class=\"number\">3000</span></span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"各种js、jquery浏览器高度、宽度","excerpt":"各种js、jquery浏览器高度、宽度","comments":1,"date":"2020-10-21T09:29:48.000Z","_content":"\n## Javascript\n```\nIE中：\ndocument.body.clientWidth ==> BODY对象宽度  \ndocument.body.clientHeight ==> BODY对象高度  \ndocument.documentElement.clientWidth ==> 可见区域宽度  \ndocument.documentElement.clientHeight ==> 可见区域高度  \nFireFox中： \ndocument.body.clientWidth ==> BODY对象宽度  \ndocument.body.clientHeight ==> BODY对象高度  \ndocument.documentElement.clientWidth ==> 可见区域宽度  \ndocument.documentElement.clientHeight ==> 可见区域高度  \nOpera中：  \ndocument.body.clientWidth ==> 可见区域宽度  \ndocument.body.clientHeight ==> 可见区域高度  \ndocument.documentElement.clientWidth ==> 页面对象宽度（即BODY对象宽度加上Margin宽）  \ndocument.documentElement.clientHeight ==> 页面对象高度（即BODY对象高度加上Margin高）  \n\n\nalert(document.body.clientWidth);        //网页可见区域宽(body)\nalert(document.body.clientHeight);       //网页可见区域高(body)\nalert(document.body.offsetWidth);       //网页可见区域宽(body)，包括border、margin等\nalert(document.body.offsetHeight);      //网页可见区域宽(body)，包括border、margin等\nalert(document.body.scrollWidth);        //网页正文全文宽，包括有滚动条时的未见区域\nalert(document.body.scrollHeight);       //网页正文全文高，包括有滚动条时的未见区域\nalert(document.body.scrollTop);           //网页被卷去的Top(滚动条)\nalert(document.body.scrollLeft);           //网页被卷去的Left(滚动条)\nalert(window.screenTop);                     //浏览器距离Top\nalert(window.screenLeft);                     //浏览器距离Left\nalert(window.screen.height);                //屏幕分辨率的高\nalert(window.screen.width);                 //屏幕分辨率的宽\nalert(window.screen.availHeight);          //屏幕可用工作区的高\nalert(window.screen.availWidth);           //屏幕可用工作区的宽\n```\n\n## jquery\n```\nalert($(window).height());                           //浏览器当前窗口可视区域高度\nalert($(document).height());                        //浏览器当前窗口文档的高度\nalert($(document.body).height());                //浏览器当前窗口文档body的高度\nalert($(document.body).outerHeight(true));  //浏览器当前窗口文档body的总高度 包括border padding margin\nalert($(window).width());                            //浏览器当前窗口可视区域宽度\nalert($(document).width());                        //浏览器当前窗口文档对象宽度\nalert($(document.body).width());                //浏览器当前窗口文档body的宽度\nalert($(document.body).outerWidth(true));  //浏览器当前窗口文档body的总宽度 包括border padding margin\n```\n\n## 转载\n[Javascript、Jquery获取浏览器和屏幕各种高度宽度](https://www.cnblogs.com/EricaMIN1987_IT/p/3593431.html)","source":"_posts/2020-10-21-browser-window-size.md","raw":"---\nlayout: post\ntitle: 各种js、jquery浏览器高度、宽度\nexcerpt: '各种js、jquery浏览器高度、宽度'\ntags: [javascript, jquery, web]\ncomments: true\ndate: 2020-10-21 17:29:48\n---\n\n## Javascript\n```\nIE中：\ndocument.body.clientWidth ==> BODY对象宽度  \ndocument.body.clientHeight ==> BODY对象高度  \ndocument.documentElement.clientWidth ==> 可见区域宽度  \ndocument.documentElement.clientHeight ==> 可见区域高度  \nFireFox中： \ndocument.body.clientWidth ==> BODY对象宽度  \ndocument.body.clientHeight ==> BODY对象高度  \ndocument.documentElement.clientWidth ==> 可见区域宽度  \ndocument.documentElement.clientHeight ==> 可见区域高度  \nOpera中：  \ndocument.body.clientWidth ==> 可见区域宽度  \ndocument.body.clientHeight ==> 可见区域高度  \ndocument.documentElement.clientWidth ==> 页面对象宽度（即BODY对象宽度加上Margin宽）  \ndocument.documentElement.clientHeight ==> 页面对象高度（即BODY对象高度加上Margin高）  \n\n\nalert(document.body.clientWidth);        //网页可见区域宽(body)\nalert(document.body.clientHeight);       //网页可见区域高(body)\nalert(document.body.offsetWidth);       //网页可见区域宽(body)，包括border、margin等\nalert(document.body.offsetHeight);      //网页可见区域宽(body)，包括border、margin等\nalert(document.body.scrollWidth);        //网页正文全文宽，包括有滚动条时的未见区域\nalert(document.body.scrollHeight);       //网页正文全文高，包括有滚动条时的未见区域\nalert(document.body.scrollTop);           //网页被卷去的Top(滚动条)\nalert(document.body.scrollLeft);           //网页被卷去的Left(滚动条)\nalert(window.screenTop);                     //浏览器距离Top\nalert(window.screenLeft);                     //浏览器距离Left\nalert(window.screen.height);                //屏幕分辨率的高\nalert(window.screen.width);                 //屏幕分辨率的宽\nalert(window.screen.availHeight);          //屏幕可用工作区的高\nalert(window.screen.availWidth);           //屏幕可用工作区的宽\n```\n\n## jquery\n```\nalert($(window).height());                           //浏览器当前窗口可视区域高度\nalert($(document).height());                        //浏览器当前窗口文档的高度\nalert($(document.body).height());                //浏览器当前窗口文档body的高度\nalert($(document.body).outerHeight(true));  //浏览器当前窗口文档body的总高度 包括border padding margin\nalert($(window).width());                            //浏览器当前窗口可视区域宽度\nalert($(document).width());                        //浏览器当前窗口文档对象宽度\nalert($(document.body).width());                //浏览器当前窗口文档body的宽度\nalert($(document.body).outerWidth(true));  //浏览器当前窗口文档body的总宽度 包括border padding margin\n```\n\n## 转载\n[Javascript、Jquery获取浏览器和屏幕各种高度宽度](https://www.cnblogs.com/EricaMIN1987_IT/p/3593431.html)","slug":"2020-10-21-browser-window-size","published":1,"updated":"2020-11-24T07:53:04.757Z","photos":[],"link":"","_id":"ckoe9igv8001b8cpn8z91hl0q","content":"<h2 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h2><figure class=\"highlight dart\"><table><tr><td class=\"code\"><pre><span class=\"line\">IE中：</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.clientWidth ==&gt; BODY对象宽度  </span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.clientHeight ==&gt; BODY对象高度  </span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.clientWidth ==&gt; 可见区域宽度  </span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.clientHeight ==&gt; 可见区域高度  </span><br><span class=\"line\">FireFox中： </span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.clientWidth ==&gt; BODY对象宽度  </span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.clientHeight ==&gt; BODY对象高度  </span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.clientWidth ==&gt; 可见区域宽度  </span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.clientHeight ==&gt; 可见区域高度  </span><br><span class=\"line\">Opera中：  </span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.clientWidth ==&gt; 可见区域宽度  </span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.clientHeight ==&gt; 可见区域高度  </span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.clientWidth ==&gt; 页面对象宽度（即BODY对象宽度加上Margin宽）  </span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.clientHeight ==&gt; 页面对象高度（即BODY对象高度加上Margin高）  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">alert(<span class=\"built_in\">document</span>.body.clientWidth);        <span class=\"comment\">//网页可见区域宽(body)</span></span><br><span class=\"line\">alert(<span class=\"built_in\">document</span>.body.clientHeight);       <span class=\"comment\">//网页可见区域高(body)</span></span><br><span class=\"line\">alert(<span class=\"built_in\">document</span>.body.offsetWidth);       <span class=\"comment\">//网页可见区域宽(body)，包括border、margin等</span></span><br><span class=\"line\">alert(<span class=\"built_in\">document</span>.body.offsetHeight);      <span class=\"comment\">//网页可见区域宽(body)，包括border、margin等</span></span><br><span class=\"line\">alert(<span class=\"built_in\">document</span>.body.scrollWidth);        <span class=\"comment\">//网页正文全文宽，包括有滚动条时的未见区域</span></span><br><span class=\"line\">alert(<span class=\"built_in\">document</span>.body.scrollHeight);       <span class=\"comment\">//网页正文全文高，包括有滚动条时的未见区域</span></span><br><span class=\"line\">alert(<span class=\"built_in\">document</span>.body.scrollTop);           <span class=\"comment\">//网页被卷去的Top(滚动条)</span></span><br><span class=\"line\">alert(<span class=\"built_in\">document</span>.body.scrollLeft);           <span class=\"comment\">//网页被卷去的Left(滚动条)</span></span><br><span class=\"line\">alert(<span class=\"built_in\">window</span>.screenTop);                     <span class=\"comment\">//浏览器距离Top</span></span><br><span class=\"line\">alert(<span class=\"built_in\">window</span>.screenLeft);                     <span class=\"comment\">//浏览器距离Left</span></span><br><span class=\"line\">alert(<span class=\"built_in\">window</span>.screen.height);                <span class=\"comment\">//屏幕分辨率的高</span></span><br><span class=\"line\">alert(<span class=\"built_in\">window</span>.screen.width);                 <span class=\"comment\">//屏幕分辨率的宽</span></span><br><span class=\"line\">alert(<span class=\"built_in\">window</span>.screen.availHeight);          <span class=\"comment\">//屏幕可用工作区的高</span></span><br><span class=\"line\">alert(<span class=\"built_in\">window</span>.screen.availWidth);           <span class=\"comment\">//屏幕可用工作区的宽</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"jquery\"><a href=\"#jquery\" class=\"headerlink\" title=\"jquery\"></a>jquery</h2><figure class=\"highlight lisp\"><table><tr><td class=\"code\"><pre><span class=\"line\">alert($(<span class=\"name\">window</span>).height())<span class=\"comment\">;                           //浏览器当前窗口可视区域高度</span></span><br><span class=\"line\">alert($(<span class=\"name\">document</span>).height())<span class=\"comment\">;                        //浏览器当前窗口文档的高度</span></span><br><span class=\"line\">alert($(<span class=\"name\">document</span>.body).height())<span class=\"comment\">;                //浏览器当前窗口文档body的高度</span></span><br><span class=\"line\">alert($(<span class=\"name\">document</span>.body).outerHeight(<span class=\"name\">true</span>))<span class=\"comment\">;  //浏览器当前窗口文档body的总高度 包括border padding margin</span></span><br><span class=\"line\">alert($(<span class=\"name\">window</span>).width())<span class=\"comment\">;                            //浏览器当前窗口可视区域宽度</span></span><br><span class=\"line\">alert($(<span class=\"name\">document</span>).width())<span class=\"comment\">;                        //浏览器当前窗口文档对象宽度</span></span><br><span class=\"line\">alert($(<span class=\"name\">document</span>.body).width())<span class=\"comment\">;                //浏览器当前窗口文档body的宽度</span></span><br><span class=\"line\">alert($(<span class=\"name\">document</span>.body).outerWidth(<span class=\"name\">true</span>))<span class=\"comment\">;  //浏览器当前窗口文档body的总宽度 包括border padding margin</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"转载\"><a href=\"#转载\" class=\"headerlink\" title=\"转载\"></a>转载</h2><p><a href=\"https://www.cnblogs.com/EricaMIN1987_IT/p/3593431.html\">Javascript、Jquery获取浏览器和屏幕各种高度宽度</a></p>\n","site":{"data":{}},"more":"<h2 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h2><figure class=\"highlight dart\"><table><tr><td class=\"code\"><pre><span class=\"line\">IE中：</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.clientWidth ==&gt; BODY对象宽度  </span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.clientHeight ==&gt; BODY对象高度  </span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.clientWidth ==&gt; 可见区域宽度  </span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.clientHeight ==&gt; 可见区域高度  </span><br><span class=\"line\">FireFox中： </span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.clientWidth ==&gt; BODY对象宽度  </span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.clientHeight ==&gt; BODY对象高度  </span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.clientWidth ==&gt; 可见区域宽度  </span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.clientHeight ==&gt; 可见区域高度  </span><br><span class=\"line\">Opera中：  </span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.clientWidth ==&gt; 可见区域宽度  </span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.clientHeight ==&gt; 可见区域高度  </span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.clientWidth ==&gt; 页面对象宽度（即BODY对象宽度加上Margin宽）  </span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.clientHeight ==&gt; 页面对象高度（即BODY对象高度加上Margin高）  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">alert(<span class=\"built_in\">document</span>.body.clientWidth);        <span class=\"comment\">//网页可见区域宽(body)</span></span><br><span class=\"line\">alert(<span class=\"built_in\">document</span>.body.clientHeight);       <span class=\"comment\">//网页可见区域高(body)</span></span><br><span class=\"line\">alert(<span class=\"built_in\">document</span>.body.offsetWidth);       <span class=\"comment\">//网页可见区域宽(body)，包括border、margin等</span></span><br><span class=\"line\">alert(<span class=\"built_in\">document</span>.body.offsetHeight);      <span class=\"comment\">//网页可见区域宽(body)，包括border、margin等</span></span><br><span class=\"line\">alert(<span class=\"built_in\">document</span>.body.scrollWidth);        <span class=\"comment\">//网页正文全文宽，包括有滚动条时的未见区域</span></span><br><span class=\"line\">alert(<span class=\"built_in\">document</span>.body.scrollHeight);       <span class=\"comment\">//网页正文全文高，包括有滚动条时的未见区域</span></span><br><span class=\"line\">alert(<span class=\"built_in\">document</span>.body.scrollTop);           <span class=\"comment\">//网页被卷去的Top(滚动条)</span></span><br><span class=\"line\">alert(<span class=\"built_in\">document</span>.body.scrollLeft);           <span class=\"comment\">//网页被卷去的Left(滚动条)</span></span><br><span class=\"line\">alert(<span class=\"built_in\">window</span>.screenTop);                     <span class=\"comment\">//浏览器距离Top</span></span><br><span class=\"line\">alert(<span class=\"built_in\">window</span>.screenLeft);                     <span class=\"comment\">//浏览器距离Left</span></span><br><span class=\"line\">alert(<span class=\"built_in\">window</span>.screen.height);                <span class=\"comment\">//屏幕分辨率的高</span></span><br><span class=\"line\">alert(<span class=\"built_in\">window</span>.screen.width);                 <span class=\"comment\">//屏幕分辨率的宽</span></span><br><span class=\"line\">alert(<span class=\"built_in\">window</span>.screen.availHeight);          <span class=\"comment\">//屏幕可用工作区的高</span></span><br><span class=\"line\">alert(<span class=\"built_in\">window</span>.screen.availWidth);           <span class=\"comment\">//屏幕可用工作区的宽</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"jquery\"><a href=\"#jquery\" class=\"headerlink\" title=\"jquery\"></a>jquery</h2><figure class=\"highlight lisp\"><table><tr><td class=\"code\"><pre><span class=\"line\">alert($(<span class=\"name\">window</span>).height())<span class=\"comment\">;                           //浏览器当前窗口可视区域高度</span></span><br><span class=\"line\">alert($(<span class=\"name\">document</span>).height())<span class=\"comment\">;                        //浏览器当前窗口文档的高度</span></span><br><span class=\"line\">alert($(<span class=\"name\">document</span>.body).height())<span class=\"comment\">;                //浏览器当前窗口文档body的高度</span></span><br><span class=\"line\">alert($(<span class=\"name\">document</span>.body).outerHeight(<span class=\"name\">true</span>))<span class=\"comment\">;  //浏览器当前窗口文档body的总高度 包括border padding margin</span></span><br><span class=\"line\">alert($(<span class=\"name\">window</span>).width())<span class=\"comment\">;                            //浏览器当前窗口可视区域宽度</span></span><br><span class=\"line\">alert($(<span class=\"name\">document</span>).width())<span class=\"comment\">;                        //浏览器当前窗口文档对象宽度</span></span><br><span class=\"line\">alert($(<span class=\"name\">document</span>.body).width())<span class=\"comment\">;                //浏览器当前窗口文档body的宽度</span></span><br><span class=\"line\">alert($(<span class=\"name\">document</span>.body).outerWidth(<span class=\"name\">true</span>))<span class=\"comment\">;  //浏览器当前窗口文档body的总宽度 包括border padding margin</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"转载\"><a href=\"#转载\" class=\"headerlink\" title=\"转载\"></a>转载</h2><p><a href=\"https://www.cnblogs.com/EricaMIN1987_IT/p/3593431.html\">Javascript、Jquery获取浏览器和屏幕各种高度宽度</a></p>\n"},{"title":"gitee pages 自动更新","date":"2020-10-10T16:00:00.000Z","excerpt":"gitee个人版目前不提供pages自动更新服务，只有付费才能自动更新，创建一个可以自动更新page的脚本","_content":"\n## 环境准备\n* node >= 14.13.1\n* npm >= 6.14.8\n安装`puppeteer`\n```\nnpm install puppeteer --save\n```\n`puppeteer`是谷歌提供的一个无界面的浏览器程序，相当于用代码实现浏览器的功能\n\n## 自动化脚本\n需要填入gitee账号和pages的地址\n```\n// npm >= 10.18\nconst puppeteer = require('puppeteer');\nconst username = 'luckyship';                                            // 账号\nconst giteePageUrl = 'https://gitee.com/luckyship/luckyship/pages';      // gitee page地址\n\nasync function giteeUpdate(username, giteePageUrl, passwd) {\n    const browser = await puppeteer.launch({\n        // 此处可以使用 false 有头模式进行调试, 调试完注释即可\n          headless: false,\n    });\n    const page = await browser.newPage();\n    await page.goto('https://gitee.com/login');\n    // 1. 选中账号控件\n    let accountElements = await page.$x('//*[@id=\"user_login\"]') // 此处使用 xpath 寻找控件，下同\n    // 2. 填入账号\n    await accountElements[0].type(username)\n    // 3. 选中密码控件\n    let pwdElements = await page.$x('//*[@id=\"user_password\"]')\n    // 4. 填入密码\n    await pwdElements[0].type(passwd)\n    // 5. 点击登录\n    let loginButtons = await page.$x('//*[@id=\"new_user\"]/div[2]/div/div/div[4]/input')\n    await loginButtons[0].click()\n    // 6. 等待登录成功\n    await page.waitFor(1000)\n    await page.goto(giteePageUrl); // 比如： https://gitee.com/yang0033/hexo-blog/pages\n    // 7.1. 监听步骤 7 中触发的确认弹框，并点击确认\n    await page.on('dialog', async dialog => {\n        console.log('确认更新')\n        dialog.accept();\n    })\n    // 7. 点击更新按钮，并弹出确认弹窗\n    let updateButtons = await page.$x('//*[@id=\"pages-branch\"]/div[7]')\n    await updateButtons[0].click()\n    // 8. 轮询并确认是否更新完毕\n    while (true) {\n        await page.waitFor(2000)\n        try {\n            // 8.1 获取更新状态标签\n            deploying = await page.$x('//*[@id=\"pages_deploying\"]')\n            if (deploying.length > 0) {\n                console.log('更新中...')\n            } else {\n                console.log('更新完毕')\n                break;\n            }\n        } catch (error) {\n            break;\n        }\n    }\n    await page.waitFor(500);\n    // 10.更新完毕，关闭浏览器\n    browser.close();\n}\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\nprocess.stdout.write(`请输入${username}密码:`);\nprocess.stdin.on('data', function (data) {\n    var str = data.slice(0, -2);\n    process.stdin.emit('end');\n   \n    giteeUpdate(username, giteePageUrl, str);\n});\nprocess.stdin.on('end', function () {\n     process.stdin.pause();\n});\n\n```","source":"_posts/2020-10-11-gitee-update-pages-auto.md","raw":"---\ntitle: \"gitee pages 自动更新\"\ndate: 2020-10-11\nexcerpt: \"gitee个人版目前不提供pages自动更新服务，只有付费才能自动更新，创建一个可以自动更新page的脚本\"\ntags: [hexo]\n---\n\n## 环境准备\n* node >= 14.13.1\n* npm >= 6.14.8\n安装`puppeteer`\n```\nnpm install puppeteer --save\n```\n`puppeteer`是谷歌提供的一个无界面的浏览器程序，相当于用代码实现浏览器的功能\n\n## 自动化脚本\n需要填入gitee账号和pages的地址\n```\n// npm >= 10.18\nconst puppeteer = require('puppeteer');\nconst username = 'luckyship';                                            // 账号\nconst giteePageUrl = 'https://gitee.com/luckyship/luckyship/pages';      // gitee page地址\n\nasync function giteeUpdate(username, giteePageUrl, passwd) {\n    const browser = await puppeteer.launch({\n        // 此处可以使用 false 有头模式进行调试, 调试完注释即可\n          headless: false,\n    });\n    const page = await browser.newPage();\n    await page.goto('https://gitee.com/login');\n    // 1. 选中账号控件\n    let accountElements = await page.$x('//*[@id=\"user_login\"]') // 此处使用 xpath 寻找控件，下同\n    // 2. 填入账号\n    await accountElements[0].type(username)\n    // 3. 选中密码控件\n    let pwdElements = await page.$x('//*[@id=\"user_password\"]')\n    // 4. 填入密码\n    await pwdElements[0].type(passwd)\n    // 5. 点击登录\n    let loginButtons = await page.$x('//*[@id=\"new_user\"]/div[2]/div/div/div[4]/input')\n    await loginButtons[0].click()\n    // 6. 等待登录成功\n    await page.waitFor(1000)\n    await page.goto(giteePageUrl); // 比如： https://gitee.com/yang0033/hexo-blog/pages\n    // 7.1. 监听步骤 7 中触发的确认弹框，并点击确认\n    await page.on('dialog', async dialog => {\n        console.log('确认更新')\n        dialog.accept();\n    })\n    // 7. 点击更新按钮，并弹出确认弹窗\n    let updateButtons = await page.$x('//*[@id=\"pages-branch\"]/div[7]')\n    await updateButtons[0].click()\n    // 8. 轮询并确认是否更新完毕\n    while (true) {\n        await page.waitFor(2000)\n        try {\n            // 8.1 获取更新状态标签\n            deploying = await page.$x('//*[@id=\"pages_deploying\"]')\n            if (deploying.length > 0) {\n                console.log('更新中...')\n            } else {\n                console.log('更新完毕')\n                break;\n            }\n        } catch (error) {\n            break;\n        }\n    }\n    await page.waitFor(500);\n    // 10.更新完毕，关闭浏览器\n    browser.close();\n}\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\nprocess.stdout.write(`请输入${username}密码:`);\nprocess.stdin.on('data', function (data) {\n    var str = data.slice(0, -2);\n    process.stdin.emit('end');\n   \n    giteeUpdate(username, giteePageUrl, str);\n});\nprocess.stdin.on('end', function () {\n     process.stdin.pause();\n});\n\n```","slug":"2020-10-11-gitee-update-pages-auto","published":1,"updated":"2020-11-24T07:53:04.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckoe9igva001e8cpncvog1530","content":"<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><ul>\n<li>node &gt;= 14.13.1</li>\n<li>npm &gt;= 6.14.8<br>安装<code>puppeteer</code><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> puppeteer <span class=\"comment\">--save</span></span><br></pre></td></tr></table></figure>\n<code>puppeteer</code>是谷歌提供的一个无界面的浏览器程序，相当于用代码实现浏览器的功能</li>\n</ul>\n<h2 id=\"自动化脚本\"><a href=\"#自动化脚本\" class=\"headerlink\" title=\"自动化脚本\"></a>自动化脚本</h2><p>需要填入gitee账号和pages的地址</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// npm &gt;= 10.18</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> puppeteer = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;puppeteer&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> username = <span class=\"string\">&#x27;luckyship&#x27;</span>;                                            <span class=\"comment\">// 账号</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> giteePageUrl = <span class=\"string\">&#x27;https://gitee.com/luckyship/luckyship/pages&#x27;</span>;      <span class=\"comment\">// gitee page地址</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">giteeUpdate</span>(<span class=\"params\">username, giteePageUrl, passwd</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> browser = <span class=\"keyword\">await</span> puppeteer.launch(&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 此处可以使用 false 有头模式进行调试, 调试完注释即可</span></span><br><span class=\"line\">          headless: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> page = <span class=\"keyword\">await</span> browser.newPage();</span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.goto(<span class=\"string\">&#x27;https://gitee.com/login&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 1. 选中账号控件</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> accountElements = <span class=\"keyword\">await</span> page.$x(<span class=\"string\">&#x27;//*[@id=&quot;user_login&quot;]&#x27;</span>) <span class=\"comment\">// 此处使用 xpath 寻找控件，下同</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. 填入账号</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> accountElements[<span class=\"number\">0</span>].type(username)</span><br><span class=\"line\">    <span class=\"comment\">// 3. 选中密码控件</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> pwdElements = <span class=\"keyword\">await</span> page.$x(<span class=\"string\">&#x27;//*[@id=&quot;user_password&quot;]&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 4. 填入密码</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> pwdElements[<span class=\"number\">0</span>].type(passwd)</span><br><span class=\"line\">    <span class=\"comment\">// 5. 点击登录</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> loginButtons = <span class=\"keyword\">await</span> page.$x(<span class=\"string\">&#x27;//*[@id=&quot;new_user&quot;]/div[2]/div/div/div[4]/input&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> loginButtons[<span class=\"number\">0</span>].click()</span><br><span class=\"line\">    <span class=\"comment\">// 6. 等待登录成功</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.waitFor(<span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.goto(giteePageUrl); <span class=\"comment\">// 比如： https://gitee.com/yang0033/hexo-blog/pages</span></span><br><span class=\"line\">    <span class=\"comment\">// 7.1. 监听步骤 7 中触发的确认弹框，并点击确认</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.on(<span class=\"string\">&#x27;dialog&#x27;</span>, <span class=\"keyword\">async</span> dialog =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;确认更新&#x27;</span>)</span><br><span class=\"line\">        dialog.accept();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 7. 点击更新按钮，并弹出确认弹窗</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> updateButtons = <span class=\"keyword\">await</span> page.$x(<span class=\"string\">&#x27;//*[@id=&quot;pages-branch&quot;]/div[7]&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> updateButtons[<span class=\"number\">0</span>].click()</span><br><span class=\"line\">    <span class=\"comment\">// 8. 轮询并确认是否更新完毕</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> page.waitFor(<span class=\"number\">2000</span>)</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 8.1 获取更新状态标签</span></span><br><span class=\"line\">            deploying = <span class=\"keyword\">await</span> page.$x(<span class=\"string\">&#x27;//*[@id=&quot;pages_deploying&quot;]&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (deploying.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;更新中...&#x27;</span>)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;更新完毕&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.waitFor(<span class=\"number\">500</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 10.更新完毕，关闭浏览器</span></span><br><span class=\"line\">    browser.close();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">process.stdin.resume();</span><br><span class=\"line\">process.stdin.setEncoding(<span class=\"string\">&#x27;utf-8&#x27;</span>);</span><br><span class=\"line\">process.stdout.write(<span class=\"string\">`请输入<span class=\"subst\">$&#123;username&#125;</span>密码:`</span>);</span><br><span class=\"line\">process.stdin.on(<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = data.slice(<span class=\"number\">0</span>, <span class=\"number\">-2</span>);</span><br><span class=\"line\">    process.stdin.emit(<span class=\"string\">&#x27;end&#x27;</span>);</span><br><span class=\"line\">   </span><br><span class=\"line\">    giteeUpdate(username, giteePageUrl, str);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">process.stdin.on(<span class=\"string\">&#x27;end&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     process.stdin.pause();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"more":"<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><ul>\n<li>node &gt;= 14.13.1</li>\n<li>npm &gt;= 6.14.8<br>安装<code>puppeteer</code><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> puppeteer <span class=\"comment\">--save</span></span><br></pre></td></tr></table></figure>\n<code>puppeteer</code>是谷歌提供的一个无界面的浏览器程序，相当于用代码实现浏览器的功能</li>\n</ul>\n<h2 id=\"自动化脚本\"><a href=\"#自动化脚本\" class=\"headerlink\" title=\"自动化脚本\"></a>自动化脚本</h2><p>需要填入gitee账号和pages的地址</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// npm &gt;= 10.18</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> puppeteer = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;puppeteer&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> username = <span class=\"string\">&#x27;luckyship&#x27;</span>;                                            <span class=\"comment\">// 账号</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> giteePageUrl = <span class=\"string\">&#x27;https://gitee.com/luckyship/luckyship/pages&#x27;</span>;      <span class=\"comment\">// gitee page地址</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">giteeUpdate</span>(<span class=\"params\">username, giteePageUrl, passwd</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> browser = <span class=\"keyword\">await</span> puppeteer.launch(&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 此处可以使用 false 有头模式进行调试, 调试完注释即可</span></span><br><span class=\"line\">          headless: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> page = <span class=\"keyword\">await</span> browser.newPage();</span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.goto(<span class=\"string\">&#x27;https://gitee.com/login&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 1. 选中账号控件</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> accountElements = <span class=\"keyword\">await</span> page.$x(<span class=\"string\">&#x27;//*[@id=&quot;user_login&quot;]&#x27;</span>) <span class=\"comment\">// 此处使用 xpath 寻找控件，下同</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. 填入账号</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> accountElements[<span class=\"number\">0</span>].type(username)</span><br><span class=\"line\">    <span class=\"comment\">// 3. 选中密码控件</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> pwdElements = <span class=\"keyword\">await</span> page.$x(<span class=\"string\">&#x27;//*[@id=&quot;user_password&quot;]&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 4. 填入密码</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> pwdElements[<span class=\"number\">0</span>].type(passwd)</span><br><span class=\"line\">    <span class=\"comment\">// 5. 点击登录</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> loginButtons = <span class=\"keyword\">await</span> page.$x(<span class=\"string\">&#x27;//*[@id=&quot;new_user&quot;]/div[2]/div/div/div[4]/input&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> loginButtons[<span class=\"number\">0</span>].click()</span><br><span class=\"line\">    <span class=\"comment\">// 6. 等待登录成功</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.waitFor(<span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.goto(giteePageUrl); <span class=\"comment\">// 比如： https://gitee.com/yang0033/hexo-blog/pages</span></span><br><span class=\"line\">    <span class=\"comment\">// 7.1. 监听步骤 7 中触发的确认弹框，并点击确认</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.on(<span class=\"string\">&#x27;dialog&#x27;</span>, <span class=\"keyword\">async</span> dialog =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;确认更新&#x27;</span>)</span><br><span class=\"line\">        dialog.accept();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 7. 点击更新按钮，并弹出确认弹窗</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> updateButtons = <span class=\"keyword\">await</span> page.$x(<span class=\"string\">&#x27;//*[@id=&quot;pages-branch&quot;]/div[7]&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> updateButtons[<span class=\"number\">0</span>].click()</span><br><span class=\"line\">    <span class=\"comment\">// 8. 轮询并确认是否更新完毕</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> page.waitFor(<span class=\"number\">2000</span>)</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 8.1 获取更新状态标签</span></span><br><span class=\"line\">            deploying = <span class=\"keyword\">await</span> page.$x(<span class=\"string\">&#x27;//*[@id=&quot;pages_deploying&quot;]&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (deploying.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;更新中...&#x27;</span>)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;更新完毕&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.waitFor(<span class=\"number\">500</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 10.更新完毕，关闭浏览器</span></span><br><span class=\"line\">    browser.close();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">process.stdin.resume();</span><br><span class=\"line\">process.stdin.setEncoding(<span class=\"string\">&#x27;utf-8&#x27;</span>);</span><br><span class=\"line\">process.stdout.write(<span class=\"string\">`请输入<span class=\"subst\">$&#123;username&#125;</span>密码:`</span>);</span><br><span class=\"line\">process.stdin.on(<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = data.slice(<span class=\"number\">0</span>, <span class=\"number\">-2</span>);</span><br><span class=\"line\">    process.stdin.emit(<span class=\"string\">&#x27;end&#x27;</span>);</span><br><span class=\"line\">   </span><br><span class=\"line\">    giteeUpdate(username, giteePageUrl, str);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">process.stdin.on(<span class=\"string\">&#x27;end&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     process.stdin.pause();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"使用hexo在github上搭建博客","date":"2020-10-06T16:00:00.000Z","excerpt":"hexo搭建博客流程，开发过程介绍.","_content":"\n## 环境准备\n* npm >= 6.14.8\n* hexo >= 4.2.0\n* hexo主题[yilia](https://github.com/luckyship/myblog.git)\n\n## 部署应用\n创建目录`hexo`，进入目录，执行命令\n```\n$ hexo init\n$ ls\n_config.yml  node_modules/  package-lock.json  scaffolds/  themes/\ndb.json      package.json   public/            source/\n```\n修改`_config.yml`，将其中的`theme`字段修改为`lucky`\n```\n$ cat _config.yml\ntheme: lucky\n```\n进入`themes`目录，克隆hexo主题仓库（注意名字为theme字段的修改值）\n```\ngit clone https://github.com/luckyship/myblog.git ./lucky\n```\n退回hexo主目录，执行\n```\nhexo generate\nhexo sever\n```\n即可看到web服务已经启动，端口默认为4000，访问`localhost:4000`即可\n\n## 开发应用\n### 修改主题代码\n例如`css,js,html`等，需要重新打包主题代码\n```\n$ npm run dev\n```\n再清除hexo缓存，重新打包到hexo上\n```\n$ hexo c // 清除所有缓存\n$ hexo g // 打包格式化md文件\n$ hexo s // 本地环境\n```\n### 添加md文件\n添加的文件可以实时显现到web上\n```\n$ hexo s -g --debug\n```\n### 上传至github\n安装包\n```\nnpm install hexo-deployer-git --save\n```\n在`_config.yml`中添加\n```\ndeploy:\n  type: git\n  repo: git@github.com:luckyship/luckyship.github.io.git\n  branch: main\n  message: 'collect new post'\n```\n执行命令，`deploy`上传的每次`generate`过后的文件，所以上传之前需要`generate`\n```\n$ hexo g\n$ hexo deploy\n```\n\n## 修改代码高亮配置\n### Highlight.js\n```\n# _config.yml\nhighlight:\n  enable: true\n  auto_detect: false\n  line_number: true\n  tab_replace: '  '\n  wrap: true\n  hljs: false\nprismjs:\n  enable: false\n```\nhighlight.js 默认开启，用作 Hexo 的服务端高亮组件。如果你需要在浏览器端运行 highlight.js，请把它关闭。\n> 「服务端高亮」指语法高亮在 hexo generate 或 hexo server 时完成。\n\n#### auto_detect\nauto_detect 是 highlight.js 的特性，能够自动检测代码块的语言。\n> 提示：如果你想使用「子语言高亮」功能（例如在高亮 HTML 时同时高亮内部嵌入的 JavaScript 代码），请开启 auto_detect，并且在文章中插入代码块时不要标注语言。\n> 警告！auto_detect 十分耗费资源。 如果你不需要使用「子语言高亮」功能，或者不介意在书写代码块时标记语言，请不要启用此功能。\n\n#### line_number\nhighlight.js 不支持行号显示。  \nHexo 通过用 `<figure>` 和 `<table>` 包裹其代码块为其添加了行号显示支持:\n```\n<figure class=\"highlight yaml\">\n<table>\n<tbody>\n<tr>\n  <td class=\"gutter\">\n    <pre><span class=\"line\">1</span><br></pre>\n  </td>\n  <td class=\"code\">\n    <pre><span class=\"line\"><span class=\"attr\">hello:</span><span class=\"string\">hexo</span></span><br></pre>\n  </td>\n</tr>\n</tbody>\n</table>\n</figure>\n```\n这不是 highlight.js 的行为，因此需要为 `<figure>` 和 `<table>` 添加自定义 CSS 代码。部分主题对此提供内建支持。\n你大概也注意到了，所有代码块的 class 都没有 hljs- 前缀\n\n#### tab_replace\n用代码内的 tab (\\t) 替换为给定值，默认值是两个空格。\n\n#### wrap\n为了支持行号显示，Hexo 将输出包裹在了 `<figure>` 和 `<table>` 内部。如果要保持 highlight.js 原来的行为，你需要将 line_number 和 wrap 全部关闭。\n```\n<pre><code class=\"yaml\">\n<span class=\"comment\"># _config.yml</span>\n<span class=\"attr\">hexo:</span> <span class=\"string\">hexo</span>\n</code></pre>\n```\n> 警告！因为 line_number 功能依赖 wrap，你无法在配置中关闭 wrap 而又开启 line_number。如果你将 line_number 设置为 true 的话，wrap 将被自动开启。\n\n#### hljs\n当 hljs 设置为 true 时，所有代码块的 HTML 输出均会给 class 添加 hljs- 前缀（无论 wrap 是否开启）：\n```\n<pre><code class=\"yaml hljs\">\n<span class=\"hljs-comment\"># _config.yml</span>\n<span class=\"hljs-attr\">hexo:</span> <span class=\"hljs-string\">hexo</span>\n</code></pre>\n```\n> 提示：当 line_number 和 wrap 为 false，hljs 为 true 的时候，你可以在站点上直接应用 highlight.js 的主题_blank。\n\n### PrismJS\n```\n# _config.yml\nhighlight:\n  enable: false\nprismjs:\n  enable: true\n  preprocess: true\n  line_number: true\n  tab_replace: ''\n```\nPrismJS 默认禁用。启用 PrimeJS 前应设置 highlight.enable 为 false。\n\n#### preprocess\nHexo 内建的 PrismJS 支持浏览器端高亮（preprocess 设置为 false）和服务器端高亮（preprocess 设置为 true）两种方式。\n\n使用服务器端高亮时（preprocess 设置为 true），只需要在站点引入 Prismjs 的主题（CSS 样式表）即可；而使用浏览器端高亮时（preprocess 设置为 false），需要将 JavaScript 文件也引入。\n\nPrismJS 主要是面向浏览器的。因此，在服务器端高亮模式下只有部分插件可用：\n\n* 行号显示：需要引入prism-line-numbers.css，无需引入prism-line-numbers.js。Hexo 将生成其所需的 HTML 代码片段。\n* 语言显示：当代码块有标注语言时，Hexo 总会添加 data-language 属性。\n* Hexo 也支持其它不需要特殊 HTML 代码格式的 PrismJS 插件，不过你需要引入它们的 JavaScript 文件\n\npreprocess 设置为 false 时所有 primejs 插件均可用，只需额外注意以下几点：\n\n* 行号显示：当 preprocess 设置为 false 时，Hexo 不会生成插件所需的 HTML 代码格式。prism-line-numbers.css 和 prism-line-numbers.js均需被引入。\n* 语言显示：当代码块有标注语言时，Hexo 总会添加 data-language 属性。\n* 高亮特定行: Hexo 的代码块标签插件和反引号代码块标签插件都支持高亮特定行的语法（即 mark 选项）。当 mark 项被设置时，Hexo 将生成其所需的 HTML 代码格式。\n\n#### line_number\n当 preprocess 与 line_number 均设置为 true 时，只需要引入 prism-line-numbers.css 即可启用行号显示。如果 preprocess 和 line_number 均被关闭，则需要将 prism-line-numbers.css 和 prism-line-numbers.js 都引入才能启用行号显示。\n\n#### tab_replace\n用代码内的 tab (\\t) 替换为给定值，默认值是两个空格。\n\n### 参考\n[Hexo 代码高亮](https://www.w3cschool.cn/hexodocument/hexodocument-6m483cn4.html)\n#### 其他参考\n[Highlight.js](https://highlightjs.readthedocs.io/en/latest/)  \n[PrismJS](https://prismjs.com/)  \nHexo 语法高亮部分的源码可参见：  \n[Highlight.js 工具函数](https://github.com/hexojs/hexo-util/blob/master/lib/highlight.js)  \n[PrismJS 工具函数](https://github.com/hexojs/hexo-util/blob/master/lib/prism.js)  \n[代码块标签插件](https://github.com/hexojs/hexo/blob/master/lib/plugins/tag/code.js)  \n[反引号代码块标签插件](https://github.com/hexojs/hexo/blob/master/lib/plugins/filter/before_post_render/backtick_code_block.js)","source":"_posts/2020-10-07-deploy-hexo.md","raw":"---\ntitle: \"使用hexo在github上搭建博客\"\ndate: 2020-10-07\nexcerpt: \"hexo搭建博客流程，开发过程介绍.\"\ntags: [hexo, web]\n---\n\n## 环境准备\n* npm >= 6.14.8\n* hexo >= 4.2.0\n* hexo主题[yilia](https://github.com/luckyship/myblog.git)\n\n## 部署应用\n创建目录`hexo`，进入目录，执行命令\n```\n$ hexo init\n$ ls\n_config.yml  node_modules/  package-lock.json  scaffolds/  themes/\ndb.json      package.json   public/            source/\n```\n修改`_config.yml`，将其中的`theme`字段修改为`lucky`\n```\n$ cat _config.yml\ntheme: lucky\n```\n进入`themes`目录，克隆hexo主题仓库（注意名字为theme字段的修改值）\n```\ngit clone https://github.com/luckyship/myblog.git ./lucky\n```\n退回hexo主目录，执行\n```\nhexo generate\nhexo sever\n```\n即可看到web服务已经启动，端口默认为4000，访问`localhost:4000`即可\n\n## 开发应用\n### 修改主题代码\n例如`css,js,html`等，需要重新打包主题代码\n```\n$ npm run dev\n```\n再清除hexo缓存，重新打包到hexo上\n```\n$ hexo c // 清除所有缓存\n$ hexo g // 打包格式化md文件\n$ hexo s // 本地环境\n```\n### 添加md文件\n添加的文件可以实时显现到web上\n```\n$ hexo s -g --debug\n```\n### 上传至github\n安装包\n```\nnpm install hexo-deployer-git --save\n```\n在`_config.yml`中添加\n```\ndeploy:\n  type: git\n  repo: git@github.com:luckyship/luckyship.github.io.git\n  branch: main\n  message: 'collect new post'\n```\n执行命令，`deploy`上传的每次`generate`过后的文件，所以上传之前需要`generate`\n```\n$ hexo g\n$ hexo deploy\n```\n\n## 修改代码高亮配置\n### Highlight.js\n```\n# _config.yml\nhighlight:\n  enable: true\n  auto_detect: false\n  line_number: true\n  tab_replace: '  '\n  wrap: true\n  hljs: false\nprismjs:\n  enable: false\n```\nhighlight.js 默认开启，用作 Hexo 的服务端高亮组件。如果你需要在浏览器端运行 highlight.js，请把它关闭。\n> 「服务端高亮」指语法高亮在 hexo generate 或 hexo server 时完成。\n\n#### auto_detect\nauto_detect 是 highlight.js 的特性，能够自动检测代码块的语言。\n> 提示：如果你想使用「子语言高亮」功能（例如在高亮 HTML 时同时高亮内部嵌入的 JavaScript 代码），请开启 auto_detect，并且在文章中插入代码块时不要标注语言。\n> 警告！auto_detect 十分耗费资源。 如果你不需要使用「子语言高亮」功能，或者不介意在书写代码块时标记语言，请不要启用此功能。\n\n#### line_number\nhighlight.js 不支持行号显示。  \nHexo 通过用 `<figure>` 和 `<table>` 包裹其代码块为其添加了行号显示支持:\n```\n<figure class=\"highlight yaml\">\n<table>\n<tbody>\n<tr>\n  <td class=\"gutter\">\n    <pre><span class=\"line\">1</span><br></pre>\n  </td>\n  <td class=\"code\">\n    <pre><span class=\"line\"><span class=\"attr\">hello:</span><span class=\"string\">hexo</span></span><br></pre>\n  </td>\n</tr>\n</tbody>\n</table>\n</figure>\n```\n这不是 highlight.js 的行为，因此需要为 `<figure>` 和 `<table>` 添加自定义 CSS 代码。部分主题对此提供内建支持。\n你大概也注意到了，所有代码块的 class 都没有 hljs- 前缀\n\n#### tab_replace\n用代码内的 tab (\\t) 替换为给定值，默认值是两个空格。\n\n#### wrap\n为了支持行号显示，Hexo 将输出包裹在了 `<figure>` 和 `<table>` 内部。如果要保持 highlight.js 原来的行为，你需要将 line_number 和 wrap 全部关闭。\n```\n<pre><code class=\"yaml\">\n<span class=\"comment\"># _config.yml</span>\n<span class=\"attr\">hexo:</span> <span class=\"string\">hexo</span>\n</code></pre>\n```\n> 警告！因为 line_number 功能依赖 wrap，你无法在配置中关闭 wrap 而又开启 line_number。如果你将 line_number 设置为 true 的话，wrap 将被自动开启。\n\n#### hljs\n当 hljs 设置为 true 时，所有代码块的 HTML 输出均会给 class 添加 hljs- 前缀（无论 wrap 是否开启）：\n```\n<pre><code class=\"yaml hljs\">\n<span class=\"hljs-comment\"># _config.yml</span>\n<span class=\"hljs-attr\">hexo:</span> <span class=\"hljs-string\">hexo</span>\n</code></pre>\n```\n> 提示：当 line_number 和 wrap 为 false，hljs 为 true 的时候，你可以在站点上直接应用 highlight.js 的主题_blank。\n\n### PrismJS\n```\n# _config.yml\nhighlight:\n  enable: false\nprismjs:\n  enable: true\n  preprocess: true\n  line_number: true\n  tab_replace: ''\n```\nPrismJS 默认禁用。启用 PrimeJS 前应设置 highlight.enable 为 false。\n\n#### preprocess\nHexo 内建的 PrismJS 支持浏览器端高亮（preprocess 设置为 false）和服务器端高亮（preprocess 设置为 true）两种方式。\n\n使用服务器端高亮时（preprocess 设置为 true），只需要在站点引入 Prismjs 的主题（CSS 样式表）即可；而使用浏览器端高亮时（preprocess 设置为 false），需要将 JavaScript 文件也引入。\n\nPrismJS 主要是面向浏览器的。因此，在服务器端高亮模式下只有部分插件可用：\n\n* 行号显示：需要引入prism-line-numbers.css，无需引入prism-line-numbers.js。Hexo 将生成其所需的 HTML 代码片段。\n* 语言显示：当代码块有标注语言时，Hexo 总会添加 data-language 属性。\n* Hexo 也支持其它不需要特殊 HTML 代码格式的 PrismJS 插件，不过你需要引入它们的 JavaScript 文件\n\npreprocess 设置为 false 时所有 primejs 插件均可用，只需额外注意以下几点：\n\n* 行号显示：当 preprocess 设置为 false 时，Hexo 不会生成插件所需的 HTML 代码格式。prism-line-numbers.css 和 prism-line-numbers.js均需被引入。\n* 语言显示：当代码块有标注语言时，Hexo 总会添加 data-language 属性。\n* 高亮特定行: Hexo 的代码块标签插件和反引号代码块标签插件都支持高亮特定行的语法（即 mark 选项）。当 mark 项被设置时，Hexo 将生成其所需的 HTML 代码格式。\n\n#### line_number\n当 preprocess 与 line_number 均设置为 true 时，只需要引入 prism-line-numbers.css 即可启用行号显示。如果 preprocess 和 line_number 均被关闭，则需要将 prism-line-numbers.css 和 prism-line-numbers.js 都引入才能启用行号显示。\n\n#### tab_replace\n用代码内的 tab (\\t) 替换为给定值，默认值是两个空格。\n\n### 参考\n[Hexo 代码高亮](https://www.w3cschool.cn/hexodocument/hexodocument-6m483cn4.html)\n#### 其他参考\n[Highlight.js](https://highlightjs.readthedocs.io/en/latest/)  \n[PrismJS](https://prismjs.com/)  \nHexo 语法高亮部分的源码可参见：  \n[Highlight.js 工具函数](https://github.com/hexojs/hexo-util/blob/master/lib/highlight.js)  \n[PrismJS 工具函数](https://github.com/hexojs/hexo-util/blob/master/lib/prism.js)  \n[代码块标签插件](https://github.com/hexojs/hexo/blob/master/lib/plugins/tag/code.js)  \n[反引号代码块标签插件](https://github.com/hexojs/hexo/blob/master/lib/plugins/filter/before_post_render/backtick_code_block.js)","slug":"2020-10-07-deploy-hexo","published":1,"updated":"2021-03-02T02:13:04.635Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckoe9igvc001f8cpn580xdwig","content":"<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><ul>\n<li>npm &gt;= 6.14.8</li>\n<li>hexo &gt;= 4.2.0</li>\n<li>hexo主题<a href=\"https://github.com/luckyship/myblog.git\">yilia</a></li>\n</ul>\n<h2 id=\"部署应用\"><a href=\"#部署应用\" class=\"headerlink\" title=\"部署应用\"></a>部署应用</h2><p>创建目录<code>hexo</code>，进入目录，执行命令</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo init</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">_config.yml  node_modules<span class=\"regexp\">/  package-lock.json  scaffolds/</span>  themes/</span><br><span class=\"line\">db.json      <span class=\"keyword\">package</span>.json   <span class=\"keyword\">public</span><span class=\"regexp\">/            source/</span></span><br></pre></td></tr></table></figure>\n<p>修改<code>_config.yml</code>，将其中的<code>theme</code>字段修改为<code>lucky</code></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$</span> <span class=\"built_in\">cat</span> _config.yml</span><br><span class=\"line\">theme: lucky</span><br></pre></td></tr></table></figure>\n<p>进入<code>themes</code>目录，克隆hexo主题仓库（注意名字为theme字段的修改值）</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/luckyship/my</span>blog.git ./lucky</span><br></pre></td></tr></table></figure>\n<p>退回hexo主目录，执行</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo <span class=\"keyword\">generate</span></span><br><span class=\"line\">hexo sever</span><br></pre></td></tr></table></figure>\n<p>即可看到web服务已经启动，端口默认为4000，访问<code>localhost:4000</code>即可</p>\n<h2 id=\"开发应用\"><a href=\"#开发应用\" class=\"headerlink\" title=\"开发应用\"></a>开发应用</h2><h3 id=\"修改主题代码\"><a href=\"#修改主题代码\" class=\"headerlink\" title=\"修改主题代码\"></a>修改主题代码</h3><p>例如<code>css,js,html</code>等，需要重新打包主题代码</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"keyword\">run</span><span class=\"bash\"> dev</span></span><br></pre></td></tr></table></figure>\n<p>再清除hexo缓存，重新打包到hexo上</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo c <span class=\"regexp\">//</span> 清除所有缓存</span><br><span class=\"line\">$ hexo g <span class=\"regexp\">//</span> 打包格式化md文件</span><br><span class=\"line\">$ hexo s <span class=\"regexp\">//</span> 本地环境</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加md文件\"><a href=\"#添加md文件\" class=\"headerlink\" title=\"添加md文件\"></a>添加md文件</h3><p>添加的文件可以实时显现到web上</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo s -g <span class=\"comment\">--debug</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"上传至github\"><a href=\"#上传至github\" class=\"headerlink\" title=\"上传至github\"></a>上传至github</h3><p>安装包</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> hexo-deployer-git <span class=\"comment\">--save</span></span><br></pre></td></tr></table></figure>\n<p>在<code>_config.yml</code>中添加</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">deploy</span>:</span><br><span class=\"line\">  <span class=\"attribute\">type</span>: git</span><br><span class=\"line\">  <span class=\"attribute\">repo</span>: git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:luckyship/luckyship.github.io.git</span><br><span class=\"line\">  <span class=\"attribute\">branch</span>: main</span><br><span class=\"line\">  <span class=\"attribute\">message</span>: <span class=\"string\">&#x27;collect new post&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>执行命令，<code>deploy</code>上传的每次<code>generate</code>过后的文件，所以上传之前需要<code>generate</code></p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo g</span><br><span class=\"line\"><span class=\"variable\">$ </span>hexo deploy</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改代码高亮配置\"><a href=\"#修改代码高亮配置\" class=\"headerlink\" title=\"修改代码高亮配置\"></a>修改代码高亮配置</h2><h3 id=\"Highlight-js\"><a href=\"#Highlight-js\" class=\"headerlink\" title=\"Highlight.js\"></a>Highlight.js</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.yml</span></span><br><span class=\"line\"><span class=\"attr\">highlight:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">auto_detect:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">line_number:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">tab_replace:</span> <span class=\"string\">&#x27;  &#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">wrap:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">hljs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">prismjs:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>highlight.js 默认开启，用作 Hexo 的服务端高亮组件。如果你需要在浏览器端运行 highlight.js，请把它关闭。</p>\n<blockquote>\n<p>「服务端高亮」指语法高亮在 hexo generate 或 hexo server 时完成。</p>\n</blockquote>\n<h4 id=\"auto-detect\"><a href=\"#auto-detect\" class=\"headerlink\" title=\"auto_detect\"></a>auto_detect</h4><p>auto_detect 是 highlight.js 的特性，能够自动检测代码块的语言。</p>\n<blockquote>\n<p>提示：如果你想使用「子语言高亮」功能（例如在高亮 HTML 时同时高亮内部嵌入的 JavaScript 代码），请开启 auto_detect，并且在文章中插入代码块时不要标注语言。<br>警告！auto_detect 十分耗费资源。 如果你不需要使用「子语言高亮」功能，或者不介意在书写代码块时标记语言，请不要启用此功能。</p>\n</blockquote>\n<h4 id=\"line-number\"><a href=\"#line-number\" class=\"headerlink\" title=\"line_number\"></a>line_number</h4><p>highlight.js 不支持行号显示。<br>Hexo 通过用 <code>&lt;figure&gt;</code> 和 <code>&lt;table&gt;</code> 包裹其代码块为其添加了行号显示支持:</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;figure <span class=\"keyword\">class</span>=&quot;<span class=\"symbol\">highlight</span> <span class=\"symbol\">yaml</span>&quot;&gt;</span><br><span class=\"line\">&lt;<span class=\"symbol\">table</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"symbol\">tbody</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"symbol\">tr</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"symbol\">td</span> <span class=\"symbol\">class</span>=&quot;<span class=\"symbol\">gutter</span>&quot;&gt;</span><br><span class=\"line\">    &lt;<span class=\"symbol\">pre</span>&gt;&lt;<span class=\"symbol\">span</span> <span class=\"symbol\">class</span>=&quot;<span class=\"symbol\">line</span>&quot;&gt;<span class=\"symbol\">1</span>&lt;/<span class=\"symbol\">span</span>&gt;&lt;<span class=\"symbol\">br</span>&gt;&lt;/<span class=\"symbol\">pre</span>&gt;</span><br><span class=\"line\">  &lt;/<span class=\"symbol\">td</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"symbol\">td</span> <span class=\"symbol\">class</span>=&quot;<span class=\"symbol\">code</span>&quot;&gt;</span><br><span class=\"line\">    &lt;<span class=\"symbol\">pre</span>&gt;&lt;<span class=\"symbol\">span</span> <span class=\"symbol\">class</span>=&quot;<span class=\"symbol\">line</span>&quot;&gt;&lt;<span class=\"symbol\">span</span> <span class=\"symbol\">class</span>=&quot;<span class=\"symbol\">attr</span>&quot;&gt;<span class=\"symbol\">hello:</span>&lt;/<span class=\"symbol\">span</span>&gt;&lt;<span class=\"symbol\">span</span> <span class=\"symbol\">class</span>=&quot;<span class=\"symbol\">string</span>&quot;&gt;<span class=\"symbol\">hexo</span>&lt;/<span class=\"symbol\">span</span>&gt;&lt;/<span class=\"symbol\">span</span>&gt;&lt;<span class=\"symbol\">br</span>&gt;&lt;/<span class=\"symbol\">pre</span>&gt;</span><br><span class=\"line\">  &lt;/<span class=\"symbol\">td</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"symbol\">tr</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"symbol\">tbody</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"symbol\">table</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"symbol\">figure</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>这不是 highlight.js 的行为，因此需要为 <code>&lt;figure&gt;</code> 和 <code>&lt;table&gt;</code> 添加自定义 CSS 代码。部分主题对此提供内建支持。<br>你大概也注意到了，所有代码块的 class 都没有 hljs- 前缀</p>\n<h4 id=\"tab-replace\"><a href=\"#tab-replace\" class=\"headerlink\" title=\"tab_replace\"></a>tab_replace</h4><p>用代码内的 tab (\\t) 替换为给定值，默认值是两个空格。</p>\n<h4 id=\"wrap\"><a href=\"#wrap\" class=\"headerlink\" title=\"wrap\"></a>wrap</h4><p>为了支持行号显示，Hexo 将输出包裹在了 <code>&lt;figure&gt;</code> 和 <code>&lt;table&gt;</code> 内部。如果要保持 highlight.js 原来的行为，你需要将 line_number 和 wrap 全部关闭。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">code</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;yaml&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;comment&quot;</span>&gt;</span># _config.yml<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;attr&quot;</span>&gt;</span>hexo:<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;string&quot;</span>&gt;</span>hexo<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">code</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>警告！因为 line_number 功能依赖 wrap，你无法在配置中关闭 wrap 而又开启 line_number。如果你将 line_number 设置为 true 的话，wrap 将被自动开启。</p>\n</blockquote>\n<h4 id=\"hljs\"><a href=\"#hljs\" class=\"headerlink\" title=\"hljs\"></a>hljs</h4><p>当 hljs 设置为 true 时，所有代码块的 HTML 输出均会给 class 添加 hljs- 前缀（无论 wrap 是否开启）：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">code</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;yaml hljs&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hljs-comment&quot;</span>&gt;</span># _config.yml<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hljs-attr&quot;</span>&gt;</span>hexo:<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hljs-string&quot;</span>&gt;</span>hexo<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">code</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>提示：当 line_number 和 wrap 为 false，hljs 为 true 的时候，你可以在站点上直接应用 highlight.js 的主题_blank。</p>\n</blockquote>\n<h3 id=\"PrismJS\"><a href=\"#PrismJS\" class=\"headerlink\" title=\"PrismJS\"></a>PrismJS</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.yml</span></span><br><span class=\"line\"><span class=\"attr\">highlight:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">prismjs:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">preprocess:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">line_number:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">tab_replace:</span> <span class=\"string\">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>PrismJS 默认禁用。启用 PrimeJS 前应设置 highlight.enable 为 false。</p>\n<h4 id=\"preprocess\"><a href=\"#preprocess\" class=\"headerlink\" title=\"preprocess\"></a>preprocess</h4><p>Hexo 内建的 PrismJS 支持浏览器端高亮（preprocess 设置为 false）和服务器端高亮（preprocess 设置为 true）两种方式。</p>\n<p>使用服务器端高亮时（preprocess 设置为 true），只需要在站点引入 Prismjs 的主题（CSS 样式表）即可；而使用浏览器端高亮时（preprocess 设置为 false），需要将 JavaScript 文件也引入。</p>\n<p>PrismJS 主要是面向浏览器的。因此，在服务器端高亮模式下只有部分插件可用：</p>\n<ul>\n<li>行号显示：需要引入prism-line-numbers.css，无需引入prism-line-numbers.js。Hexo 将生成其所需的 HTML 代码片段。</li>\n<li>语言显示：当代码块有标注语言时，Hexo 总会添加 data-language 属性。</li>\n<li>Hexo 也支持其它不需要特殊 HTML 代码格式的 PrismJS 插件，不过你需要引入它们的 JavaScript 文件</li>\n</ul>\n<p>preprocess 设置为 false 时所有 primejs 插件均可用，只需额外注意以下几点：</p>\n<ul>\n<li>行号显示：当 preprocess 设置为 false 时，Hexo 不会生成插件所需的 HTML 代码格式。prism-line-numbers.css 和 prism-line-numbers.js均需被引入。</li>\n<li>语言显示：当代码块有标注语言时，Hexo 总会添加 data-language 属性。</li>\n<li>高亮特定行: Hexo 的代码块标签插件和反引号代码块标签插件都支持高亮特定行的语法（即 mark 选项）。当 mark 项被设置时，Hexo 将生成其所需的 HTML 代码格式。</li>\n</ul>\n<h4 id=\"line-number-1\"><a href=\"#line-number-1\" class=\"headerlink\" title=\"line_number\"></a>line_number</h4><p>当 preprocess 与 line_number 均设置为 true 时，只需要引入 prism-line-numbers.css 即可启用行号显示。如果 preprocess 和 line_number 均被关闭，则需要将 prism-line-numbers.css 和 prism-line-numbers.js 都引入才能启用行号显示。</p>\n<h4 id=\"tab-replace-1\"><a href=\"#tab-replace-1\" class=\"headerlink\" title=\"tab_replace\"></a>tab_replace</h4><p>用代码内的 tab (\\t) 替换为给定值，默认值是两个空格。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.w3cschool.cn/hexodocument/hexodocument-6m483cn4.html\">Hexo 代码高亮</a></p>\n<h4 id=\"其他参考\"><a href=\"#其他参考\" class=\"headerlink\" title=\"其他参考\"></a>其他参考</h4><p><a href=\"https://highlightjs.readthedocs.io/en/latest/\">Highlight.js</a><br><a href=\"https://prismjs.com/\">PrismJS</a><br>Hexo 语法高亮部分的源码可参见：<br><a href=\"https://github.com/hexojs/hexo-util/blob/master/lib/highlight.js\">Highlight.js 工具函数</a><br><a href=\"https://github.com/hexojs/hexo-util/blob/master/lib/prism.js\">PrismJS 工具函数</a><br><a href=\"https://github.com/hexojs/hexo/blob/master/lib/plugins/tag/code.js\">代码块标签插件</a><br><a href=\"https://github.com/hexojs/hexo/blob/master/lib/plugins/filter/before_post_render/backtick_code_block.js\">反引号代码块标签插件</a></p>\n","site":{"data":{}},"more":"<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><ul>\n<li>npm &gt;= 6.14.8</li>\n<li>hexo &gt;= 4.2.0</li>\n<li>hexo主题<a href=\"https://github.com/luckyship/myblog.git\">yilia</a></li>\n</ul>\n<h2 id=\"部署应用\"><a href=\"#部署应用\" class=\"headerlink\" title=\"部署应用\"></a>部署应用</h2><p>创建目录<code>hexo</code>，进入目录，执行命令</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo init</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">_config.yml  node_modules<span class=\"regexp\">/  package-lock.json  scaffolds/</span>  themes/</span><br><span class=\"line\">db.json      <span class=\"keyword\">package</span>.json   <span class=\"keyword\">public</span><span class=\"regexp\">/            source/</span></span><br></pre></td></tr></table></figure>\n<p>修改<code>_config.yml</code>，将其中的<code>theme</code>字段修改为<code>lucky</code></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$</span> <span class=\"built_in\">cat</span> _config.yml</span><br><span class=\"line\">theme: lucky</span><br></pre></td></tr></table></figure>\n<p>进入<code>themes</code>目录，克隆hexo主题仓库（注意名字为theme字段的修改值）</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/luckyship/my</span>blog.git ./lucky</span><br></pre></td></tr></table></figure>\n<p>退回hexo主目录，执行</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo <span class=\"keyword\">generate</span></span><br><span class=\"line\">hexo sever</span><br></pre></td></tr></table></figure>\n<p>即可看到web服务已经启动，端口默认为4000，访问<code>localhost:4000</code>即可</p>\n<h2 id=\"开发应用\"><a href=\"#开发应用\" class=\"headerlink\" title=\"开发应用\"></a>开发应用</h2><h3 id=\"修改主题代码\"><a href=\"#修改主题代码\" class=\"headerlink\" title=\"修改主题代码\"></a>修改主题代码</h3><p>例如<code>css,js,html</code>等，需要重新打包主题代码</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"keyword\">run</span><span class=\"bash\"> dev</span></span><br></pre></td></tr></table></figure>\n<p>再清除hexo缓存，重新打包到hexo上</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo c <span class=\"regexp\">//</span> 清除所有缓存</span><br><span class=\"line\">$ hexo g <span class=\"regexp\">//</span> 打包格式化md文件</span><br><span class=\"line\">$ hexo s <span class=\"regexp\">//</span> 本地环境</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加md文件\"><a href=\"#添加md文件\" class=\"headerlink\" title=\"添加md文件\"></a>添加md文件</h3><p>添加的文件可以实时显现到web上</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo s -g <span class=\"comment\">--debug</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"上传至github\"><a href=\"#上传至github\" class=\"headerlink\" title=\"上传至github\"></a>上传至github</h3><p>安装包</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> hexo-deployer-git <span class=\"comment\">--save</span></span><br></pre></td></tr></table></figure>\n<p>在<code>_config.yml</code>中添加</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">deploy</span>:</span><br><span class=\"line\">  <span class=\"attribute\">type</span>: git</span><br><span class=\"line\">  <span class=\"attribute\">repo</span>: git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:luckyship/luckyship.github.io.git</span><br><span class=\"line\">  <span class=\"attribute\">branch</span>: main</span><br><span class=\"line\">  <span class=\"attribute\">message</span>: <span class=\"string\">&#x27;collect new post&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>执行命令，<code>deploy</code>上传的每次<code>generate</code>过后的文件，所以上传之前需要<code>generate</code></p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo g</span><br><span class=\"line\"><span class=\"variable\">$ </span>hexo deploy</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改代码高亮配置\"><a href=\"#修改代码高亮配置\" class=\"headerlink\" title=\"修改代码高亮配置\"></a>修改代码高亮配置</h2><h3 id=\"Highlight-js\"><a href=\"#Highlight-js\" class=\"headerlink\" title=\"Highlight.js\"></a>Highlight.js</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.yml</span></span><br><span class=\"line\"><span class=\"attr\">highlight:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">auto_detect:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">line_number:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">tab_replace:</span> <span class=\"string\">&#x27;  &#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">wrap:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">hljs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">prismjs:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>highlight.js 默认开启，用作 Hexo 的服务端高亮组件。如果你需要在浏览器端运行 highlight.js，请把它关闭。</p>\n<blockquote>\n<p>「服务端高亮」指语法高亮在 hexo generate 或 hexo server 时完成。</p>\n</blockquote>\n<h4 id=\"auto-detect\"><a href=\"#auto-detect\" class=\"headerlink\" title=\"auto_detect\"></a>auto_detect</h4><p>auto_detect 是 highlight.js 的特性，能够自动检测代码块的语言。</p>\n<blockquote>\n<p>提示：如果你想使用「子语言高亮」功能（例如在高亮 HTML 时同时高亮内部嵌入的 JavaScript 代码），请开启 auto_detect，并且在文章中插入代码块时不要标注语言。<br>警告！auto_detect 十分耗费资源。 如果你不需要使用「子语言高亮」功能，或者不介意在书写代码块时标记语言，请不要启用此功能。</p>\n</blockquote>\n<h4 id=\"line-number\"><a href=\"#line-number\" class=\"headerlink\" title=\"line_number\"></a>line_number</h4><p>highlight.js 不支持行号显示。<br>Hexo 通过用 <code>&lt;figure&gt;</code> 和 <code>&lt;table&gt;</code> 包裹其代码块为其添加了行号显示支持:</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;figure <span class=\"keyword\">class</span>=&quot;<span class=\"symbol\">highlight</span> <span class=\"symbol\">yaml</span>&quot;&gt;</span><br><span class=\"line\">&lt;<span class=\"symbol\">table</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"symbol\">tbody</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"symbol\">tr</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"symbol\">td</span> <span class=\"symbol\">class</span>=&quot;<span class=\"symbol\">gutter</span>&quot;&gt;</span><br><span class=\"line\">    &lt;<span class=\"symbol\">pre</span>&gt;&lt;<span class=\"symbol\">span</span> <span class=\"symbol\">class</span>=&quot;<span class=\"symbol\">line</span>&quot;&gt;<span class=\"symbol\">1</span>&lt;/<span class=\"symbol\">span</span>&gt;&lt;<span class=\"symbol\">br</span>&gt;&lt;/<span class=\"symbol\">pre</span>&gt;</span><br><span class=\"line\">  &lt;/<span class=\"symbol\">td</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"symbol\">td</span> <span class=\"symbol\">class</span>=&quot;<span class=\"symbol\">code</span>&quot;&gt;</span><br><span class=\"line\">    &lt;<span class=\"symbol\">pre</span>&gt;&lt;<span class=\"symbol\">span</span> <span class=\"symbol\">class</span>=&quot;<span class=\"symbol\">line</span>&quot;&gt;&lt;<span class=\"symbol\">span</span> <span class=\"symbol\">class</span>=&quot;<span class=\"symbol\">attr</span>&quot;&gt;<span class=\"symbol\">hello:</span>&lt;/<span class=\"symbol\">span</span>&gt;&lt;<span class=\"symbol\">span</span> <span class=\"symbol\">class</span>=&quot;<span class=\"symbol\">string</span>&quot;&gt;<span class=\"symbol\">hexo</span>&lt;/<span class=\"symbol\">span</span>&gt;&lt;/<span class=\"symbol\">span</span>&gt;&lt;<span class=\"symbol\">br</span>&gt;&lt;/<span class=\"symbol\">pre</span>&gt;</span><br><span class=\"line\">  &lt;/<span class=\"symbol\">td</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"symbol\">tr</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"symbol\">tbody</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"symbol\">table</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"symbol\">figure</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>这不是 highlight.js 的行为，因此需要为 <code>&lt;figure&gt;</code> 和 <code>&lt;table&gt;</code> 添加自定义 CSS 代码。部分主题对此提供内建支持。<br>你大概也注意到了，所有代码块的 class 都没有 hljs- 前缀</p>\n<h4 id=\"tab-replace\"><a href=\"#tab-replace\" class=\"headerlink\" title=\"tab_replace\"></a>tab_replace</h4><p>用代码内的 tab (\\t) 替换为给定值，默认值是两个空格。</p>\n<h4 id=\"wrap\"><a href=\"#wrap\" class=\"headerlink\" title=\"wrap\"></a>wrap</h4><p>为了支持行号显示，Hexo 将输出包裹在了 <code>&lt;figure&gt;</code> 和 <code>&lt;table&gt;</code> 内部。如果要保持 highlight.js 原来的行为，你需要将 line_number 和 wrap 全部关闭。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">code</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;yaml&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;comment&quot;</span>&gt;</span># _config.yml<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;attr&quot;</span>&gt;</span>hexo:<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;string&quot;</span>&gt;</span>hexo<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">code</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>警告！因为 line_number 功能依赖 wrap，你无法在配置中关闭 wrap 而又开启 line_number。如果你将 line_number 设置为 true 的话，wrap 将被自动开启。</p>\n</blockquote>\n<h4 id=\"hljs\"><a href=\"#hljs\" class=\"headerlink\" title=\"hljs\"></a>hljs</h4><p>当 hljs 设置为 true 时，所有代码块的 HTML 输出均会给 class 添加 hljs- 前缀（无论 wrap 是否开启）：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">code</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;yaml hljs&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hljs-comment&quot;</span>&gt;</span># _config.yml<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hljs-attr&quot;</span>&gt;</span>hexo:<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hljs-string&quot;</span>&gt;</span>hexo<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">code</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>提示：当 line_number 和 wrap 为 false，hljs 为 true 的时候，你可以在站点上直接应用 highlight.js 的主题_blank。</p>\n</blockquote>\n<h3 id=\"PrismJS\"><a href=\"#PrismJS\" class=\"headerlink\" title=\"PrismJS\"></a>PrismJS</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.yml</span></span><br><span class=\"line\"><span class=\"attr\">highlight:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">prismjs:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">preprocess:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">line_number:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">tab_replace:</span> <span class=\"string\">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>PrismJS 默认禁用。启用 PrimeJS 前应设置 highlight.enable 为 false。</p>\n<h4 id=\"preprocess\"><a href=\"#preprocess\" class=\"headerlink\" title=\"preprocess\"></a>preprocess</h4><p>Hexo 内建的 PrismJS 支持浏览器端高亮（preprocess 设置为 false）和服务器端高亮（preprocess 设置为 true）两种方式。</p>\n<p>使用服务器端高亮时（preprocess 设置为 true），只需要在站点引入 Prismjs 的主题（CSS 样式表）即可；而使用浏览器端高亮时（preprocess 设置为 false），需要将 JavaScript 文件也引入。</p>\n<p>PrismJS 主要是面向浏览器的。因此，在服务器端高亮模式下只有部分插件可用：</p>\n<ul>\n<li>行号显示：需要引入prism-line-numbers.css，无需引入prism-line-numbers.js。Hexo 将生成其所需的 HTML 代码片段。</li>\n<li>语言显示：当代码块有标注语言时，Hexo 总会添加 data-language 属性。</li>\n<li>Hexo 也支持其它不需要特殊 HTML 代码格式的 PrismJS 插件，不过你需要引入它们的 JavaScript 文件</li>\n</ul>\n<p>preprocess 设置为 false 时所有 primejs 插件均可用，只需额外注意以下几点：</p>\n<ul>\n<li>行号显示：当 preprocess 设置为 false 时，Hexo 不会生成插件所需的 HTML 代码格式。prism-line-numbers.css 和 prism-line-numbers.js均需被引入。</li>\n<li>语言显示：当代码块有标注语言时，Hexo 总会添加 data-language 属性。</li>\n<li>高亮特定行: Hexo 的代码块标签插件和反引号代码块标签插件都支持高亮特定行的语法（即 mark 选项）。当 mark 项被设置时，Hexo 将生成其所需的 HTML 代码格式。</li>\n</ul>\n<h4 id=\"line-number-1\"><a href=\"#line-number-1\" class=\"headerlink\" title=\"line_number\"></a>line_number</h4><p>当 preprocess 与 line_number 均设置为 true 时，只需要引入 prism-line-numbers.css 即可启用行号显示。如果 preprocess 和 line_number 均被关闭，则需要将 prism-line-numbers.css 和 prism-line-numbers.js 都引入才能启用行号显示。</p>\n<h4 id=\"tab-replace-1\"><a href=\"#tab-replace-1\" class=\"headerlink\" title=\"tab_replace\"></a>tab_replace</h4><p>用代码内的 tab (\\t) 替换为给定值，默认值是两个空格。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.w3cschool.cn/hexodocument/hexodocument-6m483cn4.html\">Hexo 代码高亮</a></p>\n<h4 id=\"其他参考\"><a href=\"#其他参考\" class=\"headerlink\" title=\"其他参考\"></a>其他参考</h4><p><a href=\"https://highlightjs.readthedocs.io/en/latest/\">Highlight.js</a><br><a href=\"https://prismjs.com/\">PrismJS</a><br>Hexo 语法高亮部分的源码可参见：<br><a href=\"https://github.com/hexojs/hexo-util/blob/master/lib/highlight.js\">Highlight.js 工具函数</a><br><a href=\"https://github.com/hexojs/hexo-util/blob/master/lib/prism.js\">PrismJS 工具函数</a><br><a href=\"https://github.com/hexojs/hexo/blob/master/lib/plugins/tag/code.js\">代码块标签插件</a><br><a href=\"https://github.com/hexojs/hexo/blob/master/lib/plugins/filter/before_post_render/backtick_code_block.js\">反引号代码块标签插件</a></p>\n"},{"layout":"post","title":"es6异步的写法","excerpt":"由于有些业务逻辑的有序性，代码需要按顺序执行，这就需要用到异步的操作，es6中提供多种异步操作的方法，例如：promise函数，Generator函数，async函数","comments":1,"date":"2020-10-22T07:21:00.000Z","_content":"\n## Promise\n\n新界`promise`对象，在其中写入需要异步的代码\n\n```\nvar p1 = new Promise(function(resolve, reject){\n\t//做一些异步操作\n\tsetTimeout(function(){\n\t\tconsole.log('执行完成Promise');\n\t\tresolve('要返回的数据可以任何数据例如接口返回数据');\n\t}, 2000);\n});\np1.then(function(data){console.log(data)});\n\n\n执行完成Promise\n要返回的数据可以任何数据例如接口返回数据\n```\n\n### 注意\n```\nnew Promise((resolve, reject) => {\n  resolve(1);\n  console.log(2);\n}).then(r => {\n  console.log(r);\n});\n// 2\n// 1\n```\n上面代码中，调用`resolve(1)`以后，后面的`console.log(2)`还是会执行，并且会首先打印出来。这是因为立即`resolved`的`Promise`是在本轮事件循环的末尾执行，总是晚于本轮循环的同步任务。  \n一般来说，调用`resolve`或`reject`以后，`Promise`的使命就完成了，后继操作应该放到`then`方法里面，而不应该直接写在`resolve`或`reject`的后面。所以，最好在它们前面加上`return`语句，这样就不会有意外。\n```\nnew Promise((resolve, reject) => {\n  return resolve(1);\n  // 后面的语句不会执行\n  console.log(2);\n})\n```\n\n## Generator函数\nGenerator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同\n```\nfunction* helloWorldGenerator() {\n  yield 'hello';\n  yield 'world';\n  return 'ending';\n}\n```\n\n上面代码定义了一个 Generator 函数helloWorldGenerator，它内部有两个yield表达式（hello和world），即该函数有三个状态：hello，world 和 return 语句（结束执行）。\n\n然后，Generator 函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。不同的是，调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象，也就是上一章介绍的遍历器对象（Iterator Object）。\n\n下一步，必须调用遍历器对象的next方法，使得指针移向下一个状态。也就是说，每次调用next方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个yield表达式（或return语句）为止。换言之，Generator 函数是分段执行的，yield表达式是暂停执行的标记，而next方法可以恢复执行。\n\n\n```\nhw.next()\n// { value: 'hello', done: false }\n\nhw.next()\n// { value: 'world', done: false }\n\nhw.next()\n// { value: 'ending', done: true }\n\nhw.next()\n// { value: undefined, done: true }\n```\n上面代码一共调用了四次next方法。\n\n第一次调用，`Generator` 函数开始执行，直到遇到第一个`yield`表达式为止。`next`方法返回一个对象，它的`value`属性就是当前`yield`表达式的值`hello`，`done`属性的值`false`，表示遍历还没有结束。\n\n第二次调用，`Generator` 函数从上次`yield`表达式停下的地方，一直执行到下一个`yield`表达式。`next`方法返回的对象的`value`属性就是当前`yield`表达式的值`world`，`done`属性的值`false`，表示遍历还没有结束。\n\n第三次调用，`Generator` 函数从上次`yield`表达式停下的地方，一直执行到`return`语句（如果没有`return`语句，就执行到函数结束）。`next`方法返回的对象的`value`属性，就是紧跟在`return`语句后面的表达式的值（如果没有`return`语句，则`value`属性的值为`undefined`），`done`属性的值`true`，表示遍历已经结束。\n\n第四次调用，此时 `Generator` 函数已经运行完毕，`next`方法返回对象的`value`属性为`undefined`，`done`属性为`true`。以后再调用`next`方法，返回的都是这个值。\n\n总结一下，调用` Generator `函数，返回一个遍历器对象，代表 `Generator `函数的内部指针。以后，每次调用遍历器对象的`next`方法，就会返回一个有着`value`和`done`两个属性的对象。`value`属性表示当前的内部状态的值，是`yield`表达式后面那个表达式的值；`done`属性是一个布尔值，表示是否遍历结束。\n\n\n## async函数\n\nasync 函数是什么？一句话，它就是 Generator 函数的语法糖。\n\n```\nconst fs = require('fs');\n\nconst readFile = function (fileName) {\n  return new Promise(function (resolve, reject) {\n    fs.readFile(fileName, function(error, data) {\n      if (error) return reject(error);\n      resolve(data);\n    });\n  });\n};\n\nconst gen = function* () {\n  const f1 = yield readFile('/etc/fstab');\n  const f2 = yield readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n\n```\n\n上面代码的函数`gen`可以写成`async`函数，就是下面这样。\n```\nconst asyncReadFile = async function () {\n  const f1 = await readFile('/etc/fstab');\n  const f2 = await readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n```\n一比较就会发现，`async`函数就是将`Generator`函数的星号`（*）`替换成`async`，将`yield`替换成`await`，仅此而已。  \n`async`函数对`Generator`函数的改进，体现在以下四点。  \n### （1）内置执行器。  \nGenerator 函数的执行必须靠执行器，所以才有了co模块，而async函数自带执行器。也就是说，async函数的执行，与普通函数一模一样，只要一行。\n```\nasyncReadFile();\n```\n上面的代码调用了`asyncReadFile`函数，然后它就会自动执行，输出最后结果。这完全不像` Generator `函数，需要调用`next`方法，或者用`co`模块，才能真正执行，得到最后结果。\n\n### （2）更好的语义。\n\n`async`和`await`，比起星号和`yield`，语义更清楚了。`async`表示函数里有异步操作，`await`表示紧跟在后面的表达式需要等待结果。\n\n### （3）更广的适用性。\n\n`co`模块约定，`yield`命令后面只能是 `Thunk `函数或 `Promise`对象，而`async`函数的`await`命令后面，可以是 `Promise `对象和原始类型的值（数值、字符串和布尔值，但这时会自动转成立即 `resolved `的` Promise` 对象）。\n\n### （4）返回值是 Promise。\n\n`async`函数的返回值是` Promise` 对象，这比` Generator` 函数的返回值是` Iterator `对象方便多了。你可以用`then`方法指定下一步的操作。\n\n进一步说，`async`函数完全可以看作多个异步操作，包装成的一个 `Promise `对象，而`await`命令就是内部then命令的语法糖。\n\n下面是一个例子。\n\n```\nasync function getStockPriceByName(name) {\n  const symbol = await getStockSymbol(name);\n  const stockPrice = await getStockPrice(symbol);\n  return stockPrice;\n}\n\ngetStockPriceByName('goog').then(function (result) {\n  console.log(result);\n});\n```\n### Promise对象的状态变化 \n`async`函数返回的 `Promise `对象，必须等到内部所有`await`命令后面的 `Promise` 对象执行完，才会发生状态改变，除非遇到`return`语句或者抛出错误。也就是说，只有`async`函数内部的异步操作执行完，才会执行`then`方法指定的回调函数。\n\n下面是一个例子。\n\n```\nasync function getTitle(url) {\n  let response = await fetch(url);\n  let html = await response.text();\n  return html.match(/<title>([\\s\\S]+)<\\/title>/i)[1];\n}\ngetTitle('https://tc39.github.io/ecma262/').then(console.log)\n// \"ECMAScript 2017 Language Specification\"\n\n```\n\n上面代码中，函数`getTitle`内部有三个操作：抓取网页、取出文本、匹配页面标题。只有这三个操作全部完成，才会执行`then`方法里面的`console.log`。\n\n### await 命令\n正常情况下，`await`命令后面是一个 `Promise `对象，返回该对象的结果。如果不是 `Promise `对象，就直接返回对应的值。\n```\nasync function f() {\n  // 等同于\n  // return 123;\n  return await 123;\n}\n\nf().then(v => console.log(v))\n// 123\n```\n上面代码中，`await`命令的参数是数值`123`，这时等同于`return 123`。\n\n另一种情况是，`await`命令后面是一个`thenable`对象（即定义了`then`方法的对象），那么`await`会将其等同于 `Promise` 对象。\n```\nclass Sleep {\n  constructor(timeout) {\n    this.timeout = timeout;\n  }\n  then(resolve, reject) {\n    const startTime = Date.now();\n    setTimeout(\n      () => resolve(Date.now() - startTime),\n      this.timeout\n    );\n  }\n}\n\n(async () => {\n  const sleepTime = await new Sleep(1000);\n  console.log(sleepTime);\n})();\n// 1000\n\n```\n上面代码中，`await`命令后面是一个`Sleep`对象的实例。这个实例不是 `Promise` 对象，但是因为定义了`then`方法，`await`会将其视为`Promise`处理。\n\n\n## 参考\n[Promise 对象](https://es6.ruanyifeng.com/#docs/promise)\n[Generator 函数的语法](https://es6.ruanyifeng.com/#docs/generator)\n[async函数](https://es6.ruanyifeng.com/#docs/async)","source":"_posts/2020-10-22-es6-async-methods.md","raw":"---\nlayout: post\ntitle: es6异步的写法\nexcerpt: '由于有些业务逻辑的有序性，代码需要按顺序执行，这就需要用到异步的操作，es6中提供多种异步操作的方法，例如：promise函数，Generator函数，async函数'\ntags: [javascript, web, es6]\ncomments: true\ndate: 2020-10-22 15:21:00\n---\n\n## Promise\n\n新界`promise`对象，在其中写入需要异步的代码\n\n```\nvar p1 = new Promise(function(resolve, reject){\n\t//做一些异步操作\n\tsetTimeout(function(){\n\t\tconsole.log('执行完成Promise');\n\t\tresolve('要返回的数据可以任何数据例如接口返回数据');\n\t}, 2000);\n});\np1.then(function(data){console.log(data)});\n\n\n执行完成Promise\n要返回的数据可以任何数据例如接口返回数据\n```\n\n### 注意\n```\nnew Promise((resolve, reject) => {\n  resolve(1);\n  console.log(2);\n}).then(r => {\n  console.log(r);\n});\n// 2\n// 1\n```\n上面代码中，调用`resolve(1)`以后，后面的`console.log(2)`还是会执行，并且会首先打印出来。这是因为立即`resolved`的`Promise`是在本轮事件循环的末尾执行，总是晚于本轮循环的同步任务。  \n一般来说，调用`resolve`或`reject`以后，`Promise`的使命就完成了，后继操作应该放到`then`方法里面，而不应该直接写在`resolve`或`reject`的后面。所以，最好在它们前面加上`return`语句，这样就不会有意外。\n```\nnew Promise((resolve, reject) => {\n  return resolve(1);\n  // 后面的语句不会执行\n  console.log(2);\n})\n```\n\n## Generator函数\nGenerator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同\n```\nfunction* helloWorldGenerator() {\n  yield 'hello';\n  yield 'world';\n  return 'ending';\n}\n```\n\n上面代码定义了一个 Generator 函数helloWorldGenerator，它内部有两个yield表达式（hello和world），即该函数有三个状态：hello，world 和 return 语句（结束执行）。\n\n然后，Generator 函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。不同的是，调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象，也就是上一章介绍的遍历器对象（Iterator Object）。\n\n下一步，必须调用遍历器对象的next方法，使得指针移向下一个状态。也就是说，每次调用next方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个yield表达式（或return语句）为止。换言之，Generator 函数是分段执行的，yield表达式是暂停执行的标记，而next方法可以恢复执行。\n\n\n```\nhw.next()\n// { value: 'hello', done: false }\n\nhw.next()\n// { value: 'world', done: false }\n\nhw.next()\n// { value: 'ending', done: true }\n\nhw.next()\n// { value: undefined, done: true }\n```\n上面代码一共调用了四次next方法。\n\n第一次调用，`Generator` 函数开始执行，直到遇到第一个`yield`表达式为止。`next`方法返回一个对象，它的`value`属性就是当前`yield`表达式的值`hello`，`done`属性的值`false`，表示遍历还没有结束。\n\n第二次调用，`Generator` 函数从上次`yield`表达式停下的地方，一直执行到下一个`yield`表达式。`next`方法返回的对象的`value`属性就是当前`yield`表达式的值`world`，`done`属性的值`false`，表示遍历还没有结束。\n\n第三次调用，`Generator` 函数从上次`yield`表达式停下的地方，一直执行到`return`语句（如果没有`return`语句，就执行到函数结束）。`next`方法返回的对象的`value`属性，就是紧跟在`return`语句后面的表达式的值（如果没有`return`语句，则`value`属性的值为`undefined`），`done`属性的值`true`，表示遍历已经结束。\n\n第四次调用，此时 `Generator` 函数已经运行完毕，`next`方法返回对象的`value`属性为`undefined`，`done`属性为`true`。以后再调用`next`方法，返回的都是这个值。\n\n总结一下，调用` Generator `函数，返回一个遍历器对象，代表 `Generator `函数的内部指针。以后，每次调用遍历器对象的`next`方法，就会返回一个有着`value`和`done`两个属性的对象。`value`属性表示当前的内部状态的值，是`yield`表达式后面那个表达式的值；`done`属性是一个布尔值，表示是否遍历结束。\n\n\n## async函数\n\nasync 函数是什么？一句话，它就是 Generator 函数的语法糖。\n\n```\nconst fs = require('fs');\n\nconst readFile = function (fileName) {\n  return new Promise(function (resolve, reject) {\n    fs.readFile(fileName, function(error, data) {\n      if (error) return reject(error);\n      resolve(data);\n    });\n  });\n};\n\nconst gen = function* () {\n  const f1 = yield readFile('/etc/fstab');\n  const f2 = yield readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n\n```\n\n上面代码的函数`gen`可以写成`async`函数，就是下面这样。\n```\nconst asyncReadFile = async function () {\n  const f1 = await readFile('/etc/fstab');\n  const f2 = await readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n```\n一比较就会发现，`async`函数就是将`Generator`函数的星号`（*）`替换成`async`，将`yield`替换成`await`，仅此而已。  \n`async`函数对`Generator`函数的改进，体现在以下四点。  \n### （1）内置执行器。  \nGenerator 函数的执行必须靠执行器，所以才有了co模块，而async函数自带执行器。也就是说，async函数的执行，与普通函数一模一样，只要一行。\n```\nasyncReadFile();\n```\n上面的代码调用了`asyncReadFile`函数，然后它就会自动执行，输出最后结果。这完全不像` Generator `函数，需要调用`next`方法，或者用`co`模块，才能真正执行，得到最后结果。\n\n### （2）更好的语义。\n\n`async`和`await`，比起星号和`yield`，语义更清楚了。`async`表示函数里有异步操作，`await`表示紧跟在后面的表达式需要等待结果。\n\n### （3）更广的适用性。\n\n`co`模块约定，`yield`命令后面只能是 `Thunk `函数或 `Promise`对象，而`async`函数的`await`命令后面，可以是 `Promise `对象和原始类型的值（数值、字符串和布尔值，但这时会自动转成立即 `resolved `的` Promise` 对象）。\n\n### （4）返回值是 Promise。\n\n`async`函数的返回值是` Promise` 对象，这比` Generator` 函数的返回值是` Iterator `对象方便多了。你可以用`then`方法指定下一步的操作。\n\n进一步说，`async`函数完全可以看作多个异步操作，包装成的一个 `Promise `对象，而`await`命令就是内部then命令的语法糖。\n\n下面是一个例子。\n\n```\nasync function getStockPriceByName(name) {\n  const symbol = await getStockSymbol(name);\n  const stockPrice = await getStockPrice(symbol);\n  return stockPrice;\n}\n\ngetStockPriceByName('goog').then(function (result) {\n  console.log(result);\n});\n```\n### Promise对象的状态变化 \n`async`函数返回的 `Promise `对象，必须等到内部所有`await`命令后面的 `Promise` 对象执行完，才会发生状态改变，除非遇到`return`语句或者抛出错误。也就是说，只有`async`函数内部的异步操作执行完，才会执行`then`方法指定的回调函数。\n\n下面是一个例子。\n\n```\nasync function getTitle(url) {\n  let response = await fetch(url);\n  let html = await response.text();\n  return html.match(/<title>([\\s\\S]+)<\\/title>/i)[1];\n}\ngetTitle('https://tc39.github.io/ecma262/').then(console.log)\n// \"ECMAScript 2017 Language Specification\"\n\n```\n\n上面代码中，函数`getTitle`内部有三个操作：抓取网页、取出文本、匹配页面标题。只有这三个操作全部完成，才会执行`then`方法里面的`console.log`。\n\n### await 命令\n正常情况下，`await`命令后面是一个 `Promise `对象，返回该对象的结果。如果不是 `Promise `对象，就直接返回对应的值。\n```\nasync function f() {\n  // 等同于\n  // return 123;\n  return await 123;\n}\n\nf().then(v => console.log(v))\n// 123\n```\n上面代码中，`await`命令的参数是数值`123`，这时等同于`return 123`。\n\n另一种情况是，`await`命令后面是一个`thenable`对象（即定义了`then`方法的对象），那么`await`会将其等同于 `Promise` 对象。\n```\nclass Sleep {\n  constructor(timeout) {\n    this.timeout = timeout;\n  }\n  then(resolve, reject) {\n    const startTime = Date.now();\n    setTimeout(\n      () => resolve(Date.now() - startTime),\n      this.timeout\n    );\n  }\n}\n\n(async () => {\n  const sleepTime = await new Sleep(1000);\n  console.log(sleepTime);\n})();\n// 1000\n\n```\n上面代码中，`await`命令后面是一个`Sleep`对象的实例。这个实例不是 `Promise` 对象，但是因为定义了`then`方法，`await`会将其视为`Promise`处理。\n\n\n## 参考\n[Promise 对象](https://es6.ruanyifeng.com/#docs/promise)\n[Generator 函数的语法](https://es6.ruanyifeng.com/#docs/generator)\n[async函数](https://es6.ruanyifeng.com/#docs/async)","slug":"2020-10-22-es6-async-methods","published":1,"updated":"2020-11-24T07:53:04.758Z","photos":[],"link":"","_id":"ckoe9igvh001g8cpn20y8gie3","content":"<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><p>新界<code>promise</code>对象，在其中写入需要异步的代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//做一些异步操作</span></span><br><span class=\"line\">\t<span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;执行完成Promise&#x27;</span>);</span><br><span class=\"line\">\t\tresolve(<span class=\"string\">&#x27;要返回的数据可以任何数据例如接口返回数据&#x27;</span>);</span><br><span class=\"line\">\t&#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">p1.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;<span class=\"built_in\">console</span>.log(data)&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">执行完成<span class=\"built_in\">Promise</span></span><br><span class=\"line\">要返回的数据可以任何数据例如接口返回数据</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(r);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，调用<code>resolve(1)</code>以后，后面的<code>console.log(2)</code>还是会执行，并且会首先打印出来。这是因为立即<code>resolved</code>的<code>Promise</code>是在本轮事件循环的末尾执行，总是晚于本轮循环的同步任务。<br>一般来说，调用<code>resolve</code>或<code>reject</code>以后，<code>Promise</code>的使命就完成了，后继操作应该放到<code>then</code>方法里面，而不应该直接写在<code>resolve</code>或<code>reject</code>的后面。所以，最好在它们前面加上<code>return</code>语句，这样就不会有意外。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">(resolve, reject)</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> resolve(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 后面的语句不会执行</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Generator函数\"><a href=\"#Generator函数\" class=\"headerlink\" title=\"Generator函数\"></a>Generator函数</h2><p>Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">helloWorldGenerator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;world&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;ending&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码定义了一个 Generator 函数helloWorldGenerator，它内部有两个yield表达式（hello和world），即该函数有三个状态：hello，world 和 return 语句（结束执行）。</p>\n<p>然后，Generator 函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。不同的是，调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象，也就是上一章介绍的遍历器对象（Iterator Object）。</p>\n<p>下一步，必须调用遍历器对象的next方法，使得指针移向下一个状态。也就是说，每次调用next方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个yield表达式（或return语句）为止。换言之，Generator 函数是分段执行的，yield表达式是暂停执行的标记，而next方法可以恢复执行。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">hw.next()</span></span><br><span class=\"line\"><span class=\"string\">//</span> &#123; <span class=\"attr\">value:</span> <span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"attr\">done:</span> <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">hw.next()</span></span><br><span class=\"line\"><span class=\"string\">//</span> &#123; <span class=\"attr\">value:</span> <span class=\"string\">&#x27;world&#x27;</span>, <span class=\"attr\">done:</span> <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">hw.next()</span></span><br><span class=\"line\"><span class=\"string\">//</span> &#123; <span class=\"attr\">value:</span> <span class=\"string\">&#x27;ending&#x27;</span>, <span class=\"attr\">done:</span> <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">hw.next()</span></span><br><span class=\"line\"><span class=\"string\">//</span> &#123; <span class=\"attr\">value:</span> <span class=\"string\">undefined</span>, <span class=\"attr\">done:</span> <span class=\"literal\">true</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码一共调用了四次next方法。</p>\n<p>第一次调用，<code>Generator</code> 函数开始执行，直到遇到第一个<code>yield</code>表达式为止。<code>next</code>方法返回一个对象，它的<code>value</code>属性就是当前<code>yield</code>表达式的值<code>hello</code>，<code>done</code>属性的值<code>false</code>，表示遍历还没有结束。</p>\n<p>第二次调用，<code>Generator</code> 函数从上次<code>yield</code>表达式停下的地方，一直执行到下一个<code>yield</code>表达式。<code>next</code>方法返回的对象的<code>value</code>属性就是当前<code>yield</code>表达式的值<code>world</code>，<code>done</code>属性的值<code>false</code>，表示遍历还没有结束。</p>\n<p>第三次调用，<code>Generator</code> 函数从上次<code>yield</code>表达式停下的地方，一直执行到<code>return</code>语句（如果没有<code>return</code>语句，就执行到函数结束）。<code>next</code>方法返回的对象的<code>value</code>属性，就是紧跟在<code>return</code>语句后面的表达式的值（如果没有<code>return</code>语句，则<code>value</code>属性的值为<code>undefined</code>），<code>done</code>属性的值<code>true</code>，表示遍历已经结束。</p>\n<p>第四次调用，此时 <code>Generator</code> 函数已经运行完毕，<code>next</code>方法返回对象的<code>value</code>属性为<code>undefined</code>，<code>done</code>属性为<code>true</code>。以后再调用<code>next</code>方法，返回的都是这个值。</p>\n<p>总结一下，调用<code>Generator</code>函数，返回一个遍历器对象，代表 <code>Generator </code>函数的内部指针。以后，每次调用遍历器对象的<code>next</code>方法，就会返回一个有着<code>value</code>和<code>done</code>两个属性的对象。<code>value</code>属性表示当前的内部状态的值，是<code>yield</code>表达式后面那个表达式的值；<code>done</code>属性是一个布尔值，表示是否遍历结束。</p>\n<h2 id=\"async函数\"><a href=\"#async函数\" class=\"headerlink\" title=\"async函数\"></a>async函数</h2><p>async 函数是什么？一句话，它就是 Generator 函数的语法糖。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> readFile = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fileName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    fs.readFile(fileName, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, data</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (error) <span class=\"keyword\">return</span> reject(error);</span><br><span class=\"line\">      resolve(data);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> gen = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> f1 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">&#x27;/etc/fstab&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> f2 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">&#x27;/etc/shells&#x27;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面代码的函数<code>gen</code>可以写成<code>async</code>函数，就是下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> asyncReadFile = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> f1 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">&#x27;/etc/fstab&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> f2 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">&#x27;/etc/shells&#x27;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>一比较就会发现，<code>async</code>函数就是将<code>Generator</code>函数的星号<code>（*）</code>替换成<code>async</code>，将<code>yield</code>替换成<code>await</code>，仅此而已。<br><code>async</code>函数对<code>Generator</code>函数的改进，体现在以下四点。  </p>\n<h3 id=\"（1）内置执行器。\"><a href=\"#（1）内置执行器。\" class=\"headerlink\" title=\"（1）内置执行器。\"></a>（1）内置执行器。</h3><p>Generator 函数的执行必须靠执行器，所以才有了co模块，而async函数自带执行器。也就是说，async函数的执行，与普通函数一模一样，只要一行。</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"code\"><pre><span class=\"line\">asyncReadFile()<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码调用了<code>asyncReadFile</code>函数，然后它就会自动执行，输出最后结果。这完全不像<code>Generator</code>函数，需要调用<code>next</code>方法，或者用<code>co</code>模块，才能真正执行，得到最后结果。</p>\n<h3 id=\"（2）更好的语义。\"><a href=\"#（2）更好的语义。\" class=\"headerlink\" title=\"（2）更好的语义。\"></a>（2）更好的语义。</h3><p><code>async</code>和<code>await</code>，比起星号和<code>yield</code>，语义更清楚了。<code>async</code>表示函数里有异步操作，<code>await</code>表示紧跟在后面的表达式需要等待结果。</p>\n<h3 id=\"（3）更广的适用性。\"><a href=\"#（3）更广的适用性。\" class=\"headerlink\" title=\"（3）更广的适用性。\"></a>（3）更广的适用性。</h3><p><code>co</code>模块约定，<code>yield</code>命令后面只能是 <code>Thunk </code>函数或 <code>Promise</code>对象，而<code>async</code>函数的<code>await</code>命令后面，可以是 <code>Promise </code>对象和原始类型的值（数值、字符串和布尔值，但这时会自动转成立即 <code>resolved </code>的<code> Promise</code> 对象）。</p>\n<h3 id=\"（4）返回值是-Promise。\"><a href=\"#（4）返回值是-Promise。\" class=\"headerlink\" title=\"（4）返回值是 Promise。\"></a>（4）返回值是 Promise。</h3><p><code>async</code>函数的返回值是<code> Promise</code> 对象，这比<code> Generator</code> 函数的返回值是<code>Iterator</code>对象方便多了。你可以用<code>then</code>方法指定下一步的操作。</p>\n<p>进一步说，<code>async</code>函数完全可以看作多个异步操作，包装成的一个 <code>Promise </code>对象，而<code>await</code>命令就是内部then命令的语法糖。</p>\n<p>下面是一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getStockPriceByName</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> symbol = <span class=\"keyword\">await</span> getStockSymbol(name);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stockPrice = <span class=\"keyword\">await</span> getStockPrice(symbol);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> stockPrice;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getStockPriceByName(<span class=\"string\">&#x27;goog&#x27;</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise对象的状态变化\"><a href=\"#Promise对象的状态变化\" class=\"headerlink\" title=\"Promise对象的状态变化\"></a>Promise对象的状态变化</h3><p><code>async</code>函数返回的 <code>Promise </code>对象，必须等到内部所有<code>await</code>命令后面的 <code>Promise</code> 对象执行完，才会发生状态改变，除非遇到<code>return</code>语句或者抛出错误。也就是说，只有<code>async</code>函数内部的异步操作执行完，才会执行<code>then</code>方法指定的回调函数。</p>\n<p>下面是一个例子。</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTitle</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> response = <span class=\"keyword\">await</span> fetch(<span class=\"built_in\">url</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> html = <span class=\"keyword\">await</span> response.text();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> html.match(<span class=\"regexp\">/&lt;title&gt;([\\s\\S]+)&lt;\\/title&gt;/i</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getTitle(<span class=\"string\">&#x27;https://tc39.github.io/ecma262/&#x27;</span>).then(<span class=\"built_in\">console</span>.log)</span><br><span class=\"line\"><span class=\"comment\">// &quot;ECMAScript 2017 Language Specification&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，函数<code>getTitle</code>内部有三个操作：抓取网页、取出文本、匹配页面标题。只有这三个操作全部完成，才会执行<code>then</code>方法里面的<code>console.log</code>。</p>\n<h3 id=\"await-命令\"><a href=\"#await-命令\" class=\"headerlink\" title=\"await 命令\"></a>await 命令</h3><p>正常情况下，<code>await</code>命令后面是一个 <code>Promise </code>对象，返回该对象的结果。如果不是 <code>Promise </code>对象，就直接返回对应的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 等同于</span></span><br><span class=\"line\">  <span class=\"comment\">// return 123;</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f().then(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"built_in\">console</span>.log(v))</span><br><span class=\"line\"><span class=\"comment\">// 123</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>await</code>命令的参数是数值<code>123</code>，这时等同于<code>return 123</code>。</p>\n<p>另一种情况是，<code>await</code>命令后面是一个<code>thenable</code>对象（即定义了<code>then</code>方法的对象），那么<code>await</code>会将其等同于 <code>Promise</code> 对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sleep</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(timeout) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.timeout = timeout;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  then(resolve, reject) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> startTime = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(</span><br><span class=\"line\">      () =&gt; resolve(<span class=\"built_in\">Date</span>.now() - startTime),</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.timeout</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> sleepTime = <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> Sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(sleepTime);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">// 1000</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>await</code>命令后面是一个<code>Sleep</code>对象的实例。这个实例不是 <code>Promise</code> 对象，但是因为定义了<code>then</code>方法，<code>await</code>会将其视为<code>Promise</code>处理。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://es6.ruanyifeng.com/#docs/promise\">Promise 对象</a><br><a href=\"https://es6.ruanyifeng.com/#docs/generator\">Generator 函数的语法</a><br><a href=\"https://es6.ruanyifeng.com/#docs/async\">async函数</a></p>\n","site":{"data":{}},"more":"<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><p>新界<code>promise</code>对象，在其中写入需要异步的代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//做一些异步操作</span></span><br><span class=\"line\">\t<span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;执行完成Promise&#x27;</span>);</span><br><span class=\"line\">\t\tresolve(<span class=\"string\">&#x27;要返回的数据可以任何数据例如接口返回数据&#x27;</span>);</span><br><span class=\"line\">\t&#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">p1.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;<span class=\"built_in\">console</span>.log(data)&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">执行完成<span class=\"built_in\">Promise</span></span><br><span class=\"line\">要返回的数据可以任何数据例如接口返回数据</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(r);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，调用<code>resolve(1)</code>以后，后面的<code>console.log(2)</code>还是会执行，并且会首先打印出来。这是因为立即<code>resolved</code>的<code>Promise</code>是在本轮事件循环的末尾执行，总是晚于本轮循环的同步任务。<br>一般来说，调用<code>resolve</code>或<code>reject</code>以后，<code>Promise</code>的使命就完成了，后继操作应该放到<code>then</code>方法里面，而不应该直接写在<code>resolve</code>或<code>reject</code>的后面。所以，最好在它们前面加上<code>return</code>语句，这样就不会有意外。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">(resolve, reject)</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> resolve(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 后面的语句不会执行</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Generator函数\"><a href=\"#Generator函数\" class=\"headerlink\" title=\"Generator函数\"></a>Generator函数</h2><p>Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">helloWorldGenerator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;world&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;ending&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码定义了一个 Generator 函数helloWorldGenerator，它内部有两个yield表达式（hello和world），即该函数有三个状态：hello，world 和 return 语句（结束执行）。</p>\n<p>然后，Generator 函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。不同的是，调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象，也就是上一章介绍的遍历器对象（Iterator Object）。</p>\n<p>下一步，必须调用遍历器对象的next方法，使得指针移向下一个状态。也就是说，每次调用next方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个yield表达式（或return语句）为止。换言之，Generator 函数是分段执行的，yield表达式是暂停执行的标记，而next方法可以恢复执行。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">hw.next()</span></span><br><span class=\"line\"><span class=\"string\">//</span> &#123; <span class=\"attr\">value:</span> <span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"attr\">done:</span> <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">hw.next()</span></span><br><span class=\"line\"><span class=\"string\">//</span> &#123; <span class=\"attr\">value:</span> <span class=\"string\">&#x27;world&#x27;</span>, <span class=\"attr\">done:</span> <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">hw.next()</span></span><br><span class=\"line\"><span class=\"string\">//</span> &#123; <span class=\"attr\">value:</span> <span class=\"string\">&#x27;ending&#x27;</span>, <span class=\"attr\">done:</span> <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">hw.next()</span></span><br><span class=\"line\"><span class=\"string\">//</span> &#123; <span class=\"attr\">value:</span> <span class=\"string\">undefined</span>, <span class=\"attr\">done:</span> <span class=\"literal\">true</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码一共调用了四次next方法。</p>\n<p>第一次调用，<code>Generator</code> 函数开始执行，直到遇到第一个<code>yield</code>表达式为止。<code>next</code>方法返回一个对象，它的<code>value</code>属性就是当前<code>yield</code>表达式的值<code>hello</code>，<code>done</code>属性的值<code>false</code>，表示遍历还没有结束。</p>\n<p>第二次调用，<code>Generator</code> 函数从上次<code>yield</code>表达式停下的地方，一直执行到下一个<code>yield</code>表达式。<code>next</code>方法返回的对象的<code>value</code>属性就是当前<code>yield</code>表达式的值<code>world</code>，<code>done</code>属性的值<code>false</code>，表示遍历还没有结束。</p>\n<p>第三次调用，<code>Generator</code> 函数从上次<code>yield</code>表达式停下的地方，一直执行到<code>return</code>语句（如果没有<code>return</code>语句，就执行到函数结束）。<code>next</code>方法返回的对象的<code>value</code>属性，就是紧跟在<code>return</code>语句后面的表达式的值（如果没有<code>return</code>语句，则<code>value</code>属性的值为<code>undefined</code>），<code>done</code>属性的值<code>true</code>，表示遍历已经结束。</p>\n<p>第四次调用，此时 <code>Generator</code> 函数已经运行完毕，<code>next</code>方法返回对象的<code>value</code>属性为<code>undefined</code>，<code>done</code>属性为<code>true</code>。以后再调用<code>next</code>方法，返回的都是这个值。</p>\n<p>总结一下，调用<code>Generator</code>函数，返回一个遍历器对象，代表 <code>Generator </code>函数的内部指针。以后，每次调用遍历器对象的<code>next</code>方法，就会返回一个有着<code>value</code>和<code>done</code>两个属性的对象。<code>value</code>属性表示当前的内部状态的值，是<code>yield</code>表达式后面那个表达式的值；<code>done</code>属性是一个布尔值，表示是否遍历结束。</p>\n<h2 id=\"async函数\"><a href=\"#async函数\" class=\"headerlink\" title=\"async函数\"></a>async函数</h2><p>async 函数是什么？一句话，它就是 Generator 函数的语法糖。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> readFile = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fileName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    fs.readFile(fileName, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, data</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (error) <span class=\"keyword\">return</span> reject(error);</span><br><span class=\"line\">      resolve(data);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> gen = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> f1 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">&#x27;/etc/fstab&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> f2 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">&#x27;/etc/shells&#x27;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面代码的函数<code>gen</code>可以写成<code>async</code>函数，就是下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> asyncReadFile = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> f1 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">&#x27;/etc/fstab&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> f2 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">&#x27;/etc/shells&#x27;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>一比较就会发现，<code>async</code>函数就是将<code>Generator</code>函数的星号<code>（*）</code>替换成<code>async</code>，将<code>yield</code>替换成<code>await</code>，仅此而已。<br><code>async</code>函数对<code>Generator</code>函数的改进，体现在以下四点。  </p>\n<h3 id=\"（1）内置执行器。\"><a href=\"#（1）内置执行器。\" class=\"headerlink\" title=\"（1）内置执行器。\"></a>（1）内置执行器。</h3><p>Generator 函数的执行必须靠执行器，所以才有了co模块，而async函数自带执行器。也就是说，async函数的执行，与普通函数一模一样，只要一行。</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"code\"><pre><span class=\"line\">asyncReadFile()<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码调用了<code>asyncReadFile</code>函数，然后它就会自动执行，输出最后结果。这完全不像<code>Generator</code>函数，需要调用<code>next</code>方法，或者用<code>co</code>模块，才能真正执行，得到最后结果。</p>\n<h3 id=\"（2）更好的语义。\"><a href=\"#（2）更好的语义。\" class=\"headerlink\" title=\"（2）更好的语义。\"></a>（2）更好的语义。</h3><p><code>async</code>和<code>await</code>，比起星号和<code>yield</code>，语义更清楚了。<code>async</code>表示函数里有异步操作，<code>await</code>表示紧跟在后面的表达式需要等待结果。</p>\n<h3 id=\"（3）更广的适用性。\"><a href=\"#（3）更广的适用性。\" class=\"headerlink\" title=\"（3）更广的适用性。\"></a>（3）更广的适用性。</h3><p><code>co</code>模块约定，<code>yield</code>命令后面只能是 <code>Thunk </code>函数或 <code>Promise</code>对象，而<code>async</code>函数的<code>await</code>命令后面，可以是 <code>Promise </code>对象和原始类型的值（数值、字符串和布尔值，但这时会自动转成立即 <code>resolved </code>的<code> Promise</code> 对象）。</p>\n<h3 id=\"（4）返回值是-Promise。\"><a href=\"#（4）返回值是-Promise。\" class=\"headerlink\" title=\"（4）返回值是 Promise。\"></a>（4）返回值是 Promise。</h3><p><code>async</code>函数的返回值是<code> Promise</code> 对象，这比<code> Generator</code> 函数的返回值是<code>Iterator</code>对象方便多了。你可以用<code>then</code>方法指定下一步的操作。</p>\n<p>进一步说，<code>async</code>函数完全可以看作多个异步操作，包装成的一个 <code>Promise </code>对象，而<code>await</code>命令就是内部then命令的语法糖。</p>\n<p>下面是一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getStockPriceByName</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> symbol = <span class=\"keyword\">await</span> getStockSymbol(name);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stockPrice = <span class=\"keyword\">await</span> getStockPrice(symbol);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> stockPrice;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getStockPriceByName(<span class=\"string\">&#x27;goog&#x27;</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise对象的状态变化\"><a href=\"#Promise对象的状态变化\" class=\"headerlink\" title=\"Promise对象的状态变化\"></a>Promise对象的状态变化</h3><p><code>async</code>函数返回的 <code>Promise </code>对象，必须等到内部所有<code>await</code>命令后面的 <code>Promise</code> 对象执行完，才会发生状态改变，除非遇到<code>return</code>语句或者抛出错误。也就是说，只有<code>async</code>函数内部的异步操作执行完，才会执行<code>then</code>方法指定的回调函数。</p>\n<p>下面是一个例子。</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTitle</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> response = <span class=\"keyword\">await</span> fetch(<span class=\"built_in\">url</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> html = <span class=\"keyword\">await</span> response.text();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> html.match(<span class=\"regexp\">/&lt;title&gt;([\\s\\S]+)&lt;\\/title&gt;/i</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getTitle(<span class=\"string\">&#x27;https://tc39.github.io/ecma262/&#x27;</span>).then(<span class=\"built_in\">console</span>.log)</span><br><span class=\"line\"><span class=\"comment\">// &quot;ECMAScript 2017 Language Specification&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，函数<code>getTitle</code>内部有三个操作：抓取网页、取出文本、匹配页面标题。只有这三个操作全部完成，才会执行<code>then</code>方法里面的<code>console.log</code>。</p>\n<h3 id=\"await-命令\"><a href=\"#await-命令\" class=\"headerlink\" title=\"await 命令\"></a>await 命令</h3><p>正常情况下，<code>await</code>命令后面是一个 <code>Promise </code>对象，返回该对象的结果。如果不是 <code>Promise </code>对象，就直接返回对应的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 等同于</span></span><br><span class=\"line\">  <span class=\"comment\">// return 123;</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f().then(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"built_in\">console</span>.log(v))</span><br><span class=\"line\"><span class=\"comment\">// 123</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>await</code>命令的参数是数值<code>123</code>，这时等同于<code>return 123</code>。</p>\n<p>另一种情况是，<code>await</code>命令后面是一个<code>thenable</code>对象（即定义了<code>then</code>方法的对象），那么<code>await</code>会将其等同于 <code>Promise</code> 对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sleep</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(timeout) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.timeout = timeout;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  then(resolve, reject) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> startTime = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(</span><br><span class=\"line\">      () =&gt; resolve(<span class=\"built_in\">Date</span>.now() - startTime),</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.timeout</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> sleepTime = <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> Sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(sleepTime);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">// 1000</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>await</code>命令后面是一个<code>Sleep</code>对象的实例。这个实例不是 <code>Promise</code> 对象，但是因为定义了<code>then</code>方法，<code>await</code>会将其视为<code>Promise</code>处理。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://es6.ruanyifeng.com/#docs/promise\">Promise 对象</a><br><a href=\"https://es6.ruanyifeng.com/#docs/generator\">Generator 函数的语法</a><br><a href=\"https://es6.ruanyifeng.com/#docs/async\">async函数</a></p>\n"},{"layout":"post","title":"daterangepicker默认显示为空","excerpt":"jquery 日期插件daterangepicker，在不选择的情况，输入框显示为空","comments":1,"date":"2020-11-02T08:14:11.000Z","_content":"\n## daterangepicker 默认显示为空\n\n目前官网提供属性`autoUpdateInput: false`，输入框就可以显示为空，但是再次选择日期的时候不会发生变化\n我们对组件进行一些修改，让它可以显示为空值。\n\n```\n$('.date').daterangepicker({\n    singleDatePicker:true,\n    autoUpdateInput: false,\n    showDropdowns:true,\n    locale: {\n        format: \"YYYY-MM-DD\",\n    },\n    }, function(start, end, label) {\n        $(el).val(start.format('YYYY-MM-DD'));\n});\n```\n利用回调函数，为输入框赋值我们选择的日期\n","source":"_posts/2020-11-02-daterangepicker-default-null(1).md","raw":"---\nlayout: post\ntitle: daterangepicker默认显示为空\nexcerpt: 'jquery 日期插件daterangepicker，在不选择的情况，输入框显示为空'\ntags: [javascript, es6]\ncomments: true\ndate: 2020-11-02 16:14:11\n---\n\n## daterangepicker 默认显示为空\n\n目前官网提供属性`autoUpdateInput: false`，输入框就可以显示为空，但是再次选择日期的时候不会发生变化\n我们对组件进行一些修改，让它可以显示为空值。\n\n```\n$('.date').daterangepicker({\n    singleDatePicker:true,\n    autoUpdateInput: false,\n    showDropdowns:true,\n    locale: {\n        format: \"YYYY-MM-DD\",\n    },\n    }, function(start, end, label) {\n        $(el).val(start.format('YYYY-MM-DD'));\n});\n```\n利用回调函数，为输入框赋值我们选择的日期\n","slug":"2020-11-02-daterangepicker-default-null(1)","published":1,"updated":"2020-11-24T07:53:04.759Z","photos":[],"link":"","_id":"ckoe9igvi001i8cpn070v5bfl","content":"<h2 id=\"daterangepicker-默认显示为空\"><a href=\"#daterangepicker-默认显示为空\" class=\"headerlink\" title=\"daterangepicker 默认显示为空\"></a>daterangepicker 默认显示为空</h2><p>目前官网提供属性<code>autoUpdateInput: false</code>，输入框就可以显示为空，但是再次选择日期的时候不会发生变化<br>我们对组件进行一些修改，让它可以显示为空值。</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;.date&#x27;</span>).daterangepicker(&#123;</span><br><span class=\"line\">    singleDatePicker:<span class=\"keyword\">true</span>,</span><br><span class=\"line\">    autoUpdateInput: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">    showDropdowns:<span class=\"keyword\">true</span>,</span><br><span class=\"line\">    locale: &#123;</span><br><span class=\"line\">        <span class=\"keyword\">format</span>: &quot;YYYY-MM-DD&quot;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#125;, <span class=\"keyword\">function</span>(<span class=\"keyword\">start</span>, <span class=\"keyword\">end</span>, label) &#123;</span><br><span class=\"line\">        $(el).val(<span class=\"keyword\">start</span>.format(<span class=\"string\">&#x27;YYYY-MM-DD&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>利用回调函数，为输入框赋值我们选择的日期</p>\n","site":{"data":{}},"more":"<h2 id=\"daterangepicker-默认显示为空\"><a href=\"#daterangepicker-默认显示为空\" class=\"headerlink\" title=\"daterangepicker 默认显示为空\"></a>daterangepicker 默认显示为空</h2><p>目前官网提供属性<code>autoUpdateInput: false</code>，输入框就可以显示为空，但是再次选择日期的时候不会发生变化<br>我们对组件进行一些修改，让它可以显示为空值。</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;.date&#x27;</span>).daterangepicker(&#123;</span><br><span class=\"line\">    singleDatePicker:<span class=\"keyword\">true</span>,</span><br><span class=\"line\">    autoUpdateInput: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">    showDropdowns:<span class=\"keyword\">true</span>,</span><br><span class=\"line\">    locale: &#123;</span><br><span class=\"line\">        <span class=\"keyword\">format</span>: &quot;YYYY-MM-DD&quot;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#125;, <span class=\"keyword\">function</span>(<span class=\"keyword\">start</span>, <span class=\"keyword\">end</span>, label) &#123;</span><br><span class=\"line\">        $(el).val(<span class=\"keyword\">start</span>.format(<span class=\"string\">&#x27;YYYY-MM-DD&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>利用回调函数，为输入框赋值我们选择的日期</p>\n"},{"layout":"post","title":"dataTable介绍","excerpt":"dataTable是一款表格插件，具有分页，搜索，定制列的功能","comments":1,"date":"2020-11-21T01:48:04.000Z","_content":"\n## 使用npm 引入dataTable\n### 引入datatables.net-dt\n首先导入`npm`包\n```\nnpm install datatables.net-dt\n```\n\n在需要引用的地方，导入`dataTable`\n```\nimport $ from ‘jquery’\nrequire('datatables.net')\nrequire('datatables.net-dt/css/jquery.dataTables.css')\n```\n\n### 参考\n[dataTable](https://datatables.net/download/)\n\n\n## 获取api的三种方法\n\n> $(selector).DataTable();  \n> $(selector).dataTable().api();  \n> $.fn.dataTable.Api( selector );\n\n第三种方法比较特殊，我使用过一次，使用场景为：\n无法引入`jquery`，`dataTable`不能初始化，这主要是因为使用`npm`进行模块加载的时候，主代码已经有`jquery`，再引入`jquery`回覆盖之前`jquery`的插件，所以使用\n\n```\nwindow.dt = require('datatables.net');\n\n// 在使用到的模块里引入dt\nwindow.$.fn.dataTable = window.dt;\n```\n这里使用 `$(selector).DataTable();`、`$(selector).dataTable().api();` 都无法返回Api;所以使用如下方式\n```\n$(selector).dataTable();\n$.fn.dataTable.Api(selector); \n```\n\n### 参考\n[dataTable api](http://datatables.club/manual/api.html)\n\n## 搜索匹配正则的问题\n`DataTable`中的`search`搜索框功能非常强大，可以匹配表格中的任意数据。不仅如此`DataTable`还提供了`regex`选项可以使用正则表达式。\n```\n$('#example').dataTable( {\n  \"search\": {\n    \"regex\": true\n  }\n} );\n```\n但是，如果你有更多的要求，比如：对一行的多个列进行匹配，那么你就需要了解dataTable的匹配规则\nDataTable搜索结果以行显示，那么每一行是怎么匹配正则的？\n\n>每一行代表的字符串是以2个空格将没一列连成一个字符串\n\n例如：\n|example1|example2|example3|\n|:-:|:-:|:-:|\n|a|c|d|\n|e|f|g|\n|h|i|j|\n\n如果我们在输入框中输入: `^a  c  d`  \n即可匹配到第一行\n\n>如果想要更多的验证DataTable的正则匹配规则，[可以点击连接验证](https://datatables.net/examples/api/regex.html)\n\n## 多列使用搜索\n\n很多人想到用`.columns()`，但是`.columns()`表示的是与`&&`, 例如`.columns([1,2]).search('')`表示的是第2，3列都有匹配的项\n\n有一种替代方法，如下：\n```\n$('table').dataTable().api().column(1).search('李').column(0).search('1').draw();\n```\n\n## 添加外部html\n可以在`dom`选项中添加类名为`toolbar`的`div`，再往其中加入代码即可\n```\n$(document).ready(function() {\n    $('#example').DataTable( {\n        \"dom\": '<\"toolbar\">frtip'\n    } );\n \n    $(\"div.toolbar\").html('<b>Custom tool bar! Text/images etc.</b>');\n} );\n```\n### 参考\n[dom_toolbar](https://datatables.net/examples/advanced_init/dom_toolbar.html)","source":"_posts/2020-11-21-dataTable.md","raw":"---\nlayout: post\ntitle: dataTable介绍\nexcerpt: 'dataTable是一款表格插件，具有分页，搜索，定制列的功能'\ntags: [javascript, dataTable, web]\ncomments: true\ndate: 2020-11-21 09:48:04\n---\n\n## 使用npm 引入dataTable\n### 引入datatables.net-dt\n首先导入`npm`包\n```\nnpm install datatables.net-dt\n```\n\n在需要引用的地方，导入`dataTable`\n```\nimport $ from ‘jquery’\nrequire('datatables.net')\nrequire('datatables.net-dt/css/jquery.dataTables.css')\n```\n\n### 参考\n[dataTable](https://datatables.net/download/)\n\n\n## 获取api的三种方法\n\n> $(selector).DataTable();  \n> $(selector).dataTable().api();  \n> $.fn.dataTable.Api( selector );\n\n第三种方法比较特殊，我使用过一次，使用场景为：\n无法引入`jquery`，`dataTable`不能初始化，这主要是因为使用`npm`进行模块加载的时候，主代码已经有`jquery`，再引入`jquery`回覆盖之前`jquery`的插件，所以使用\n\n```\nwindow.dt = require('datatables.net');\n\n// 在使用到的模块里引入dt\nwindow.$.fn.dataTable = window.dt;\n```\n这里使用 `$(selector).DataTable();`、`$(selector).dataTable().api();` 都无法返回Api;所以使用如下方式\n```\n$(selector).dataTable();\n$.fn.dataTable.Api(selector); \n```\n\n### 参考\n[dataTable api](http://datatables.club/manual/api.html)\n\n## 搜索匹配正则的问题\n`DataTable`中的`search`搜索框功能非常强大，可以匹配表格中的任意数据。不仅如此`DataTable`还提供了`regex`选项可以使用正则表达式。\n```\n$('#example').dataTable( {\n  \"search\": {\n    \"regex\": true\n  }\n} );\n```\n但是，如果你有更多的要求，比如：对一行的多个列进行匹配，那么你就需要了解dataTable的匹配规则\nDataTable搜索结果以行显示，那么每一行是怎么匹配正则的？\n\n>每一行代表的字符串是以2个空格将没一列连成一个字符串\n\n例如：\n|example1|example2|example3|\n|:-:|:-:|:-:|\n|a|c|d|\n|e|f|g|\n|h|i|j|\n\n如果我们在输入框中输入: `^a  c  d`  \n即可匹配到第一行\n\n>如果想要更多的验证DataTable的正则匹配规则，[可以点击连接验证](https://datatables.net/examples/api/regex.html)\n\n## 多列使用搜索\n\n很多人想到用`.columns()`，但是`.columns()`表示的是与`&&`, 例如`.columns([1,2]).search('')`表示的是第2，3列都有匹配的项\n\n有一种替代方法，如下：\n```\n$('table').dataTable().api().column(1).search('李').column(0).search('1').draw();\n```\n\n## 添加外部html\n可以在`dom`选项中添加类名为`toolbar`的`div`，再往其中加入代码即可\n```\n$(document).ready(function() {\n    $('#example').DataTable( {\n        \"dom\": '<\"toolbar\">frtip'\n    } );\n \n    $(\"div.toolbar\").html('<b>Custom tool bar! Text/images etc.</b>');\n} );\n```\n### 参考\n[dom_toolbar](https://datatables.net/examples/advanced_init/dom_toolbar.html)","slug":"2020-11-21-dataTable","published":1,"updated":"2020-12-01T09:41:50.818Z","photos":[],"link":"","_id":"ckoe9igvk001j8cpne6ueayq0","content":"<h2 id=\"使用npm-引入dataTable\"><a href=\"#使用npm-引入dataTable\" class=\"headerlink\" title=\"使用npm 引入dataTable\"></a>使用npm 引入dataTable</h2><h3 id=\"引入datatables-net-dt\"><a href=\"#引入datatables-net-dt\" class=\"headerlink\" title=\"引入datatables.net-dt\"></a>引入datatables.net-dt</h3><p>首先导入<code>npm</code>包</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> datatables.net-dt</span><br></pre></td></tr></table></figure>\n\n<p>在需要引用的地方，导入<code>dataTable</code></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">import $ from ‘jquery’</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">require</span><span class=\"params\">(<span class=\"string\">&#x27;datatables.net&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">require</span><span class=\"params\">(<span class=\"string\">&#x27;datatables.net-dt/css/jquery.dataTables.css&#x27;</span>)</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://datatables.net/download/\">dataTable</a></p>\n<h2 id=\"获取api的三种方法\"><a href=\"#获取api的三种方法\" class=\"headerlink\" title=\"获取api的三种方法\"></a>获取api的三种方法</h2><blockquote>\n<p>$(selector).DataTable();<br>$(selector).dataTable().api();<br>$.fn.dataTable.Api( selector );</p>\n</blockquote>\n<p>第三种方法比较特殊，我使用过一次，使用场景为：<br>无法引入<code>jquery</code>，<code>dataTable</code>不能初始化，这主要是因为使用<code>npm</code>进行模块加载的时候，主代码已经有<code>jquery</code>，再引入<code>jquery</code>回覆盖之前<code>jquery</code>的插件，所以使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.dt = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;datatables.net&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在使用到的模块里引入dt</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.$.fn.dataTable = <span class=\"built_in\">window</span>.dt;</span><br></pre></td></tr></table></figure>\n<p>这里使用 <code>$(selector).DataTable();</code>、<code>$(selector).dataTable().api();</code> 都无法返回Api;所以使用如下方式</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"constructor\">$(<span class=\"params\">selector</span>)</span>.data<span class=\"constructor\">Table()</span>;</span><br><span class=\"line\">$.fn.dataTable.<span class=\"constructor\">Api(<span class=\"params\">selector</span>)</span>; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://datatables.club/manual/api.html\">dataTable api</a></p>\n<h2 id=\"搜索匹配正则的问题\"><a href=\"#搜索匹配正则的问题\" class=\"headerlink\" title=\"搜索匹配正则的问题\"></a>搜索匹配正则的问题</h2><p><code>DataTable</code>中的<code>search</code>搜索框功能非常强大，可以匹配表格中的任意数据。不仅如此<code>DataTable</code>还提供了<code>regex</code>选项可以使用正则表达式。</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#example&#x27;</span>).dataTable( &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;search&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;regex&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; );</span><br></pre></td></tr></table></figure>\n<p>但是，如果你有更多的要求，比如：对一行的多个列进行匹配，那么你就需要了解dataTable的匹配规则<br>DataTable搜索结果以行显示，那么每一行是怎么匹配正则的？</p>\n<blockquote>\n<p>每一行代表的字符串是以2个空格将没一列连成一个字符串</p>\n</blockquote>\n<p>例如：<br>|example1|example2|example3|<br>|:-:|:-:|:-:|<br>|a|c|d|<br>|e|f|g|<br>|h|i|j|</p>\n<p>如果我们在输入框中输入: <code>^a  c  d</code><br>即可匹配到第一行</p>\n<blockquote>\n<p>如果想要更多的验证DataTable的正则匹配规则，<a href=\"https://datatables.net/examples/api/regex.html\">可以点击连接验证</a></p>\n</blockquote>\n<h2 id=\"多列使用搜索\"><a href=\"#多列使用搜索\" class=\"headerlink\" title=\"多列使用搜索\"></a>多列使用搜索</h2><p>很多人想到用<code>.columns()</code>，但是<code>.columns()</code>表示的是与<code>&amp;&amp;</code>, 例如<code>.columns([1,2]).search(&#39;&#39;)</code>表示的是第2，3列都有匹配的项</p>\n<p>有一种替代方法，如下：</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"code\"><pre><span class=\"line\">$<span class=\"params\">(&#x27;table&#x27;)</span><span class=\"string\">.dataTable</span><span class=\"params\">()</span><span class=\"string\">.api</span><span class=\"params\">()</span><span class=\"string\">.column</span><span class=\"params\">(1)</span><span class=\"string\">.search</span><span class=\"params\">(&#x27;李&#x27;)</span><span class=\"string\">.column</span><span class=\"params\">(0)</span><span class=\"string\">.search</span><span class=\"params\">(&#x27;1&#x27;)</span><span class=\"string\">.draw</span><span class=\"params\">()</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加外部html\"><a href=\"#添加外部html\" class=\"headerlink\" title=\"添加外部html\"></a>添加外部html</h2><p>可以在<code>dom</code>选项中添加类名为<code>toolbar</code>的<code>div</code>，再往其中加入代码即可</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#example&#x27;</span>).DataTable( &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;dom&quot;</span>: <span class=\"string\">&#x27;&lt;&quot;toolbar&quot;&gt;frtip&#x27;</span></span><br><span class=\"line\">    &#125; );</span><br><span class=\"line\"> </span><br><span class=\"line\">    $(<span class=\"string\">&quot;div.toolbar&quot;</span>).html(<span class=\"string\">&#x27;&lt;b&gt;Custom tool bar! Text/images etc.&lt;/b&gt;&#x27;</span>);</span><br><span class=\"line\">&#125; );</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考-2\"><a href=\"#参考-2\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://datatables.net/examples/advanced_init/dom_toolbar.html\">dom_toolbar</a></p>\n","site":{"data":{}},"more":"<h2 id=\"使用npm-引入dataTable\"><a href=\"#使用npm-引入dataTable\" class=\"headerlink\" title=\"使用npm 引入dataTable\"></a>使用npm 引入dataTable</h2><h3 id=\"引入datatables-net-dt\"><a href=\"#引入datatables-net-dt\" class=\"headerlink\" title=\"引入datatables.net-dt\"></a>引入datatables.net-dt</h3><p>首先导入<code>npm</code>包</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> datatables.net-dt</span><br></pre></td></tr></table></figure>\n\n<p>在需要引用的地方，导入<code>dataTable</code></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">import $ from ‘jquery’</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">require</span><span class=\"params\">(<span class=\"string\">&#x27;datatables.net&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">require</span><span class=\"params\">(<span class=\"string\">&#x27;datatables.net-dt/css/jquery.dataTables.css&#x27;</span>)</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://datatables.net/download/\">dataTable</a></p>\n<h2 id=\"获取api的三种方法\"><a href=\"#获取api的三种方法\" class=\"headerlink\" title=\"获取api的三种方法\"></a>获取api的三种方法</h2><blockquote>\n<p>$(selector).DataTable();<br>$(selector).dataTable().api();<br>$.fn.dataTable.Api( selector );</p>\n</blockquote>\n<p>第三种方法比较特殊，我使用过一次，使用场景为：<br>无法引入<code>jquery</code>，<code>dataTable</code>不能初始化，这主要是因为使用<code>npm</code>进行模块加载的时候，主代码已经有<code>jquery</code>，再引入<code>jquery</code>回覆盖之前<code>jquery</code>的插件，所以使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.dt = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;datatables.net&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在使用到的模块里引入dt</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.$.fn.dataTable = <span class=\"built_in\">window</span>.dt;</span><br></pre></td></tr></table></figure>\n<p>这里使用 <code>$(selector).DataTable();</code>、<code>$(selector).dataTable().api();</code> 都无法返回Api;所以使用如下方式</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"constructor\">$(<span class=\"params\">selector</span>)</span>.data<span class=\"constructor\">Table()</span>;</span><br><span class=\"line\">$.fn.dataTable.<span class=\"constructor\">Api(<span class=\"params\">selector</span>)</span>; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://datatables.club/manual/api.html\">dataTable api</a></p>\n<h2 id=\"搜索匹配正则的问题\"><a href=\"#搜索匹配正则的问题\" class=\"headerlink\" title=\"搜索匹配正则的问题\"></a>搜索匹配正则的问题</h2><p><code>DataTable</code>中的<code>search</code>搜索框功能非常强大，可以匹配表格中的任意数据。不仅如此<code>DataTable</code>还提供了<code>regex</code>选项可以使用正则表达式。</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#example&#x27;</span>).dataTable( &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;search&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;regex&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; );</span><br></pre></td></tr></table></figure>\n<p>但是，如果你有更多的要求，比如：对一行的多个列进行匹配，那么你就需要了解dataTable的匹配规则<br>DataTable搜索结果以行显示，那么每一行是怎么匹配正则的？</p>\n<blockquote>\n<p>每一行代表的字符串是以2个空格将没一列连成一个字符串</p>\n</blockquote>\n<p>例如：<br>|example1|example2|example3|<br>|:-:|:-:|:-:|<br>|a|c|d|<br>|e|f|g|<br>|h|i|j|</p>\n<p>如果我们在输入框中输入: <code>^a  c  d</code><br>即可匹配到第一行</p>\n<blockquote>\n<p>如果想要更多的验证DataTable的正则匹配规则，<a href=\"https://datatables.net/examples/api/regex.html\">可以点击连接验证</a></p>\n</blockquote>\n<h2 id=\"多列使用搜索\"><a href=\"#多列使用搜索\" class=\"headerlink\" title=\"多列使用搜索\"></a>多列使用搜索</h2><p>很多人想到用<code>.columns()</code>，但是<code>.columns()</code>表示的是与<code>&amp;&amp;</code>, 例如<code>.columns([1,2]).search(&#39;&#39;)</code>表示的是第2，3列都有匹配的项</p>\n<p>有一种替代方法，如下：</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"code\"><pre><span class=\"line\">$<span class=\"params\">(&#x27;table&#x27;)</span><span class=\"string\">.dataTable</span><span class=\"params\">()</span><span class=\"string\">.api</span><span class=\"params\">()</span><span class=\"string\">.column</span><span class=\"params\">(1)</span><span class=\"string\">.search</span><span class=\"params\">(&#x27;李&#x27;)</span><span class=\"string\">.column</span><span class=\"params\">(0)</span><span class=\"string\">.search</span><span class=\"params\">(&#x27;1&#x27;)</span><span class=\"string\">.draw</span><span class=\"params\">()</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加外部html\"><a href=\"#添加外部html\" class=\"headerlink\" title=\"添加外部html\"></a>添加外部html</h2><p>可以在<code>dom</code>选项中添加类名为<code>toolbar</code>的<code>div</code>，再往其中加入代码即可</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#example&#x27;</span>).DataTable( &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;dom&quot;</span>: <span class=\"string\">&#x27;&lt;&quot;toolbar&quot;&gt;frtip&#x27;</span></span><br><span class=\"line\">    &#125; );</span><br><span class=\"line\"> </span><br><span class=\"line\">    $(<span class=\"string\">&quot;div.toolbar&quot;</span>).html(<span class=\"string\">&#x27;&lt;b&gt;Custom tool bar! Text/images etc.&lt;/b&gt;&#x27;</span>);</span><br><span class=\"line\">&#125; );</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考-2\"><a href=\"#参考-2\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://datatables.net/examples/advanced_init/dom_toolbar.html\">dom_toolbar</a></p>\n"},{"layout":"post","title":"hexo新建页面","excerpt":"在hexo上新建一个页面，该页面形式上和post差不多，内容有区别","comments":1,"date":"2020-10-11T13:06:47.000Z","_content":"\n使用`hexo new page 命令`\n```\n$ hexo new page comment\n```\n在`source`文件夹下就有了一个新的文件夹\n```\n$ ls source\ncomment _post\n```\n当使用`hexo g`时，会在`public`文件夹下生成新的文件夹`comment`，这样我们在网页上就可以通过`url + comment/`的方式访问该页面\n","source":"_posts/2020-10-11-hexo-new-page.md","raw":"---\nlayout: post\ntitle: 'hexo新建页面'\nexcerpt: '在hexo上新建一个页面，该页面形式上和post差不多，内容有区别'\ntags: [hexo]\ncomments: true\ndate: 2020-10-11 21:06:47\n---\n\n使用`hexo new page 命令`\n```\n$ hexo new page comment\n```\n在`source`文件夹下就有了一个新的文件夹\n```\n$ ls source\ncomment _post\n```\n当使用`hexo g`时，会在`public`文件夹下生成新的文件夹`comment`，这样我们在网页上就可以通过`url + comment/`的方式访问该页面\n","slug":"2020-10-11-hexo-new-page","published":1,"updated":"2020-11-24T07:53:04.756Z","photos":[],"link":"","_id":"ckoe9igvn001m8cpndi08f8ux","content":"<p>使用<code>hexo new page 命令</code></p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new<span class=\"built_in\"> page </span>comment</span><br></pre></td></tr></table></figure>\n<p>在<code>source</code>文件夹下就有了一个新的文件夹</p>\n<figure class=\"highlight mel\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">ls</span> <span class=\"keyword\">source</span></span><br><span class=\"line\">comment _post</span><br></pre></td></tr></table></figure>\n<p>当使用<code>hexo g</code>时，会在<code>public</code>文件夹下生成新的文件夹<code>comment</code>，这样我们在网页上就可以通过<code>url + comment/</code>的方式访问该页面</p>\n","site":{"data":{}},"more":"<p>使用<code>hexo new page 命令</code></p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new<span class=\"built_in\"> page </span>comment</span><br></pre></td></tr></table></figure>\n<p>在<code>source</code>文件夹下就有了一个新的文件夹</p>\n<figure class=\"highlight mel\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">ls</span> <span class=\"keyword\">source</span></span><br><span class=\"line\">comment _post</span><br></pre></td></tr></table></figure>\n<p>当使用<code>hexo g</code>时，会在<code>public</code>文件夹下生成新的文件夹<code>comment</code>，这样我们在网页上就可以通过<code>url + comment/</code>的方式访问该页面</p>\n"},{"layout":"post","title":"js forEach函数有什么缺陷","excerpt":"forEach()作为数组类的内置方法被引入ECMAScript 2015","comments":1,"date":"2020-10-23T08:14:11.000Z","_content":"\n\n## forEach是不能阻塞的，默认是请求并行发起\n\n来看一个例子\n```\nconst list = [1, 2, 3]\nconst square = num => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(num * num)\n    }, 1000)\n  })\n}\n\nfunction test() {\n  list.forEach(async x=> {\n    const res = await square(x)\n    console.log(res)\n  })\n}\ntest()\n\n```\n上面函数执行，虽然加了异步函数，但是执行结果是同时输出`1、4、9`\n\n如果想要能够异步执行，需要使用`for`循环\n```\nasync function test() {\n  for (let i = 0; i < list.length; i++) {\n    let x = list[i]\n    const res = await square(x)\n    console.log(res)\n  }\n}\n```\n\n或者`for..of`\n```\nasync function test() {\n  for (let x of list) {\n    const res = await square(x)\n    console.log(res)\n  }\n}\n```","source":"_posts/2020-10-23-forEach-sync-execute.md","raw":"---\nlayout: post\ntitle: js forEach函数有什么缺陷\nexcerpt: 'forEach()作为数组类的内置方法被引入ECMAScript 2015'\ntags: [javascript, es6]\ncomments: true\ndate: 2020-10-23 16:14:11\n---\n\n\n## forEach是不能阻塞的，默认是请求并行发起\n\n来看一个例子\n```\nconst list = [1, 2, 3]\nconst square = num => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(num * num)\n    }, 1000)\n  })\n}\n\nfunction test() {\n  list.forEach(async x=> {\n    const res = await square(x)\n    console.log(res)\n  })\n}\ntest()\n\n```\n上面函数执行，虽然加了异步函数，但是执行结果是同时输出`1、4、9`\n\n如果想要能够异步执行，需要使用`for`循环\n```\nasync function test() {\n  for (let i = 0; i < list.length; i++) {\n    let x = list[i]\n    const res = await square(x)\n    console.log(res)\n  }\n}\n```\n\n或者`for..of`\n```\nasync function test() {\n  for (let x of list) {\n    const res = await square(x)\n    console.log(res)\n  }\n}\n```","slug":"2020-10-23-forEach-sync-execute","published":1,"updated":"2020-11-24T07:53:04.758Z","photos":[],"link":"","_id":"ckoe9igvo001o8cpn5vrk978w","content":"<h2 id=\"forEach是不能阻塞的，默认是请求并行发起\"><a href=\"#forEach是不能阻塞的，默认是请求并行发起\" class=\"headerlink\" title=\"forEach是不能阻塞的，默认是请求并行发起\"></a>forEach是不能阻塞的，默认是请求并行发起</h2><p>来看一个例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> square = <span class=\"function\"><span class=\"params\">num</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      resolve(num * num)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  list.forEach(<span class=\"keyword\">async</span> x=&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> square(x)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>上面函数执行，虽然加了异步函数，但是执行结果是同时输出<code>1、4、9</code></p>\n<p>如果想要能够异步执行，需要使用<code>for</code>循环</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">list</span>.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> x = <span class=\"built_in\">list</span>[i]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> square(x)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或者<code>for..of</code></p>\n<figure class=\"highlight qml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> x <span class=\"keyword\">of</span> <span class=\"built_in\">list</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> square(x)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"more":"<h2 id=\"forEach是不能阻塞的，默认是请求并行发起\"><a href=\"#forEach是不能阻塞的，默认是请求并行发起\" class=\"headerlink\" title=\"forEach是不能阻塞的，默认是请求并行发起\"></a>forEach是不能阻塞的，默认是请求并行发起</h2><p>来看一个例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> square = <span class=\"function\"><span class=\"params\">num</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      resolve(num * num)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  list.forEach(<span class=\"keyword\">async</span> x=&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> square(x)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>上面函数执行，虽然加了异步函数，但是执行结果是同时输出<code>1、4、9</code></p>\n<p>如果想要能够异步执行，需要使用<code>for</code>循环</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">list</span>.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> x = <span class=\"built_in\">list</span>[i]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> square(x)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或者<code>for..of</code></p>\n<figure class=\"highlight qml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> x <span class=\"keyword\">of</span> <span class=\"built_in\">list</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> square(x)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"使用es6-set数组去重","excerpt":"es6-set类似数组，不过元素不能重复，利用这一特性，可以快速让数组去重","comments":1,"date":"2020-12-01T01:48:04.000Z","_content":"\n## 使用set去重\n`Array.from`是`es6`用法，将类数组转换为数组\n```\n> let a = [1,1,2,3,3,4,4]\n< undefined\n> Array.from(new Set(a))\n< (4) [1, 2, 3, 4]\n```\n\n## 一般去重方法\n兼容性好，可不用支持`es6`语法\n```\nfunction unique(arr){\n    var newArr = [];\n    for(var i = 0; i < arr.length; i++){\n        if(newArr.indexOf(arr[i]) == -1){\n            newArr.push(arr[i])\n        }\n    }\n    return newArr;\n}       \n\nvar arr = [1,2,2,3,4,4,5,1,3];\nvar newArr = unique(arr);\nconsole.log(newArr);\n```","source":"_posts/2020-12-01-es6-uniq.md","raw":"---\nlayout: post\ntitle: 使用es6-set数组去重\nexcerpt: 'es6-set类似数组，不过元素不能重复，利用这一特性，可以快速让数组去重'\ntags: [javascript, es6, web]\ncomments: true\ndate: 2020-12-01 09:48:04\n---\n\n## 使用set去重\n`Array.from`是`es6`用法，将类数组转换为数组\n```\n> let a = [1,1,2,3,3,4,4]\n< undefined\n> Array.from(new Set(a))\n< (4) [1, 2, 3, 4]\n```\n\n## 一般去重方法\n兼容性好，可不用支持`es6`语法\n```\nfunction unique(arr){\n    var newArr = [];\n    for(var i = 0; i < arr.length; i++){\n        if(newArr.indexOf(arr[i]) == -1){\n            newArr.push(arr[i])\n        }\n    }\n    return newArr;\n}       \n\nvar arr = [1,2,2,3,4,4,5,1,3];\nvar newArr = unique(arr);\nconsole.log(newArr);\n```","slug":"2020-12-01-es6-uniq","published":1,"updated":"2020-12-01T05:10:52.137Z","photos":[],"link":"","_id":"ckoe9igvp001r8cpn0ydy1l9p","content":"<h2 id=\"使用set去重\"><a href=\"#使用set去重\" class=\"headerlink\" title=\"使用set去重\"></a>使用set去重</h2><p><code>Array.from</code>是<code>es6</code>用法，将类数组转换为数组</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; let a = [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">&lt; undefined</span><br><span class=\"line\">&gt; Array.<span class=\"keyword\">from</span>(new Set(a))</span><br><span class=\"line\">&lt; (<span class=\"number\">4</span>) [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一般去重方法\"><a href=\"#一般去重方法\" class=\"headerlink\" title=\"一般去重方法\"></a>一般去重方法</h2><p>兼容性好，可不用支持<code>es6</code>语法</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span></span>(arr)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"keyword\">new</span><span class=\"type\">Arr</span> = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">new</span><span class=\"type\">Arr</span>.indexOf(arr[i]) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span><span class=\"type\">Arr</span>.push(arr[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span><span class=\"type\">Arr</span>;</span><br><span class=\"line\">&#125;       </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">new</span><span class=\"type\">Arr</span> = unique(arr);</span><br><span class=\"line\">console.log(<span class=\"keyword\">new</span><span class=\"type\">Arr</span>);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"more":"<h2 id=\"使用set去重\"><a href=\"#使用set去重\" class=\"headerlink\" title=\"使用set去重\"></a>使用set去重</h2><p><code>Array.from</code>是<code>es6</code>用法，将类数组转换为数组</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; let a = [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">&lt; undefined</span><br><span class=\"line\">&gt; Array.<span class=\"keyword\">from</span>(new Set(a))</span><br><span class=\"line\">&lt; (<span class=\"number\">4</span>) [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一般去重方法\"><a href=\"#一般去重方法\" class=\"headerlink\" title=\"一般去重方法\"></a>一般去重方法</h2><p>兼容性好，可不用支持<code>es6</code>语法</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span></span>(arr)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"keyword\">new</span><span class=\"type\">Arr</span> = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">new</span><span class=\"type\">Arr</span>.indexOf(arr[i]) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span><span class=\"type\">Arr</span>.push(arr[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span><span class=\"type\">Arr</span>;</span><br><span class=\"line\">&#125;       </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">new</span><span class=\"type\">Arr</span> = unique(arr);</span><br><span class=\"line\">console.log(<span class=\"keyword\">new</span><span class=\"type\">Arr</span>);</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"npm安装配置","excerpt":"npm安装配置记录","comments":1,"date":"2020-12-01T08:49:16.000Z","_content":"\n## linux安装\n```\ntar -zvxf node-v14.tar.gz\n\nln -s /node-v14/bin/npm /usr/bin/npm\nln -s /node-v14/bin/npm /usr/local/bin/npm\n```\n\n## 查看npm配置\n```\nnpm config list\n```\n\n## 代理设置\n```\nnpm config set proxy=http://127.0.0.1:8087\nnpm config set https-proxy http://127.0.0.1:8087\n\n// 需要用户名和密码\nnpm config set proxy http://username:password@server:port\nnpm confit set https-proxy http://username:password@server:port\n\n// 取消代理\nnpm config delete proxy\nnpm config delete https-proxy\n```\n\n## npm安装设置\n```\nnpm config set strict-ssl false // SSL错误\n\nnpm config get registry // 查看当前源\nnpm config set registry https://registry.npm.taobao.org  // 设置淘宝源\nnpm config set registry https://registry.npmjs.org/  // 设置官方源\n\nnpm config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/\nnpm config set chromedriver_cdnurl https://cdn.npm.taobao.org/dist/chromedriver\nnpm config set electron_mirror https://npm.taobao.org/mirrors/electron/\n\n\nyarn config set chromedriver_cdnurl https://cdn.npm.taobao.org/dist/chromedriver\nyarn config set electron_mirror https://npm.taobao.org/mirrors/electron/\nyarn config set registry https://registry.npm.taobao.org/\nyarn config set registry https://registry.yarnpkg.com\nyarn config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/\nyarn config set phantomjs_cdnurl http://cnpmjs.org/downloads\nyarn config set sqlite3_binary_host_mirror https://foxgis.oss-cn-shanghai.aliyuncs.com/\nyarn config set profiler_binary_host_mirror https://npm.taobao.org/mirrors/node-inspector/\n\n```","source":"_posts/2020-12-01-npm-install-md.md","raw":"---\nlayout: post\ntitle: npm安装配置\nexcerpt: 'npm安装配置记录'\ntags: [nodejs, npm]\ncomments: true\ndate: 2020-12-01 16:49:16\n---\n\n## linux安装\n```\ntar -zvxf node-v14.tar.gz\n\nln -s /node-v14/bin/npm /usr/bin/npm\nln -s /node-v14/bin/npm /usr/local/bin/npm\n```\n\n## 查看npm配置\n```\nnpm config list\n```\n\n## 代理设置\n```\nnpm config set proxy=http://127.0.0.1:8087\nnpm config set https-proxy http://127.0.0.1:8087\n\n// 需要用户名和密码\nnpm config set proxy http://username:password@server:port\nnpm confit set https-proxy http://username:password@server:port\n\n// 取消代理\nnpm config delete proxy\nnpm config delete https-proxy\n```\n\n## npm安装设置\n```\nnpm config set strict-ssl false // SSL错误\n\nnpm config get registry // 查看当前源\nnpm config set registry https://registry.npm.taobao.org  // 设置淘宝源\nnpm config set registry https://registry.npmjs.org/  // 设置官方源\n\nnpm config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/\nnpm config set chromedriver_cdnurl https://cdn.npm.taobao.org/dist/chromedriver\nnpm config set electron_mirror https://npm.taobao.org/mirrors/electron/\n\n\nyarn config set chromedriver_cdnurl https://cdn.npm.taobao.org/dist/chromedriver\nyarn config set electron_mirror https://npm.taobao.org/mirrors/electron/\nyarn config set registry https://registry.npm.taobao.org/\nyarn config set registry https://registry.yarnpkg.com\nyarn config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/\nyarn config set phantomjs_cdnurl http://cnpmjs.org/downloads\nyarn config set sqlite3_binary_host_mirror https://foxgis.oss-cn-shanghai.aliyuncs.com/\nyarn config set profiler_binary_host_mirror https://npm.taobao.org/mirrors/node-inspector/\n\n```","slug":"2020-12-01-npm-install-md","published":1,"updated":"2021-03-01T02:36:33.486Z","photos":[],"link":"","_id":"ckoe9igvq001t8cpn7sva1h1w","content":"<h2 id=\"linux安装\"><a href=\"#linux安装\" class=\"headerlink\" title=\"linux安装\"></a>linux安装</h2><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -zvxf node-v14.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">ln -s <span class=\"regexp\">/node-v14/</span>bin<span class=\"regexp\">/npm /u</span>sr<span class=\"regexp\">/bin/</span>npm</span><br><span class=\"line\">ln -s <span class=\"regexp\">/node-v14/</span>bin<span class=\"regexp\">/npm /u</span>sr<span class=\"regexp\">/local/</span>bin/npm</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看npm配置\"><a href=\"#查看npm配置\" class=\"headerlink\" title=\"查看npm配置\"></a>查看npm配置</h2><figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm<span class=\"built_in\"> config </span>list</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代理设置\"><a href=\"#代理设置\" class=\"headerlink\" title=\"代理设置\"></a>代理设置</h2><figure class=\"highlight arduino\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> proxy=http:<span class=\"comment\">//127.0.0.1:8087</span></span><br><span class=\"line\">npm <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> https-proxy http:<span class=\"comment\">//127.0.0.1:8087</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 需要用户名和密码</span></span><br><span class=\"line\">npm <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> proxy http:<span class=\"comment\">//username:password@server:port</span></span><br><span class=\"line\">npm confit <span class=\"built_in\">set</span> https-proxy http:<span class=\"comment\">//username:password@server:port</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取消代理</span></span><br><span class=\"line\">npm <span class=\"built_in\">config</span> <span class=\"keyword\">delete</span> proxy</span><br><span class=\"line\">npm <span class=\"built_in\">config</span> <span class=\"keyword\">delete</span> https-proxy</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"npm安装设置\"><a href=\"#npm安装设置\" class=\"headerlink\" title=\"npm安装设置\"></a>npm安装设置</h2><figure class=\"highlight arduino\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> strict-ssl <span class=\"literal\">false</span> <span class=\"comment\">// SSL错误</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm <span class=\"built_in\">config</span> <span class=\"built_in\">get</span> registry <span class=\"comment\">// 查看当前源</span></span><br><span class=\"line\">npm <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> registry https:<span class=\"comment\">//registry.npm.taobao.org  // 设置淘宝源</span></span><br><span class=\"line\">npm <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> registry https:<span class=\"comment\">//registry.npmjs.org/  // 设置官方源</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> sass_binary_site https:<span class=\"comment\">//npm.taobao.org/mirrors/node-sass/</span></span><br><span class=\"line\">npm <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> chromedriver_cdnurl https:<span class=\"comment\">//cdn.npm.taobao.org/dist/chromedriver</span></span><br><span class=\"line\">npm <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> electron_mirror https:<span class=\"comment\">//npm.taobao.org/mirrors/electron/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">yarn <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> chromedriver_cdnurl https:<span class=\"comment\">//cdn.npm.taobao.org/dist/chromedriver</span></span><br><span class=\"line\">yarn <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> electron_mirror https:<span class=\"comment\">//npm.taobao.org/mirrors/electron/</span></span><br><span class=\"line\">yarn <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> registry https:<span class=\"comment\">//registry.npm.taobao.org/</span></span><br><span class=\"line\">yarn <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> registry https:<span class=\"comment\">//registry.yarnpkg.com</span></span><br><span class=\"line\">yarn <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> sass_binary_site https:<span class=\"comment\">//npm.taobao.org/mirrors/node-sass/</span></span><br><span class=\"line\">yarn <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> phantomjs_cdnurl http:<span class=\"comment\">//cnpmjs.org/downloads</span></span><br><span class=\"line\">yarn <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> sqlite3_binary_host_mirror https:<span class=\"comment\">//foxgis.oss-cn-shanghai.aliyuncs.com/</span></span><br><span class=\"line\">yarn <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> profiler_binary_host_mirror https:<span class=\"comment\">//npm.taobao.org/mirrors/node-inspector/</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"more":"<h2 id=\"linux安装\"><a href=\"#linux安装\" class=\"headerlink\" title=\"linux安装\"></a>linux安装</h2><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -zvxf node-v14.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">ln -s <span class=\"regexp\">/node-v14/</span>bin<span class=\"regexp\">/npm /u</span>sr<span class=\"regexp\">/bin/</span>npm</span><br><span class=\"line\">ln -s <span class=\"regexp\">/node-v14/</span>bin<span class=\"regexp\">/npm /u</span>sr<span class=\"regexp\">/local/</span>bin/npm</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看npm配置\"><a href=\"#查看npm配置\" class=\"headerlink\" title=\"查看npm配置\"></a>查看npm配置</h2><figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm<span class=\"built_in\"> config </span>list</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代理设置\"><a href=\"#代理设置\" class=\"headerlink\" title=\"代理设置\"></a>代理设置</h2><figure class=\"highlight arduino\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> proxy=http:<span class=\"comment\">//127.0.0.1:8087</span></span><br><span class=\"line\">npm <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> https-proxy http:<span class=\"comment\">//127.0.0.1:8087</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 需要用户名和密码</span></span><br><span class=\"line\">npm <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> proxy http:<span class=\"comment\">//username:password@server:port</span></span><br><span class=\"line\">npm confit <span class=\"built_in\">set</span> https-proxy http:<span class=\"comment\">//username:password@server:port</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取消代理</span></span><br><span class=\"line\">npm <span class=\"built_in\">config</span> <span class=\"keyword\">delete</span> proxy</span><br><span class=\"line\">npm <span class=\"built_in\">config</span> <span class=\"keyword\">delete</span> https-proxy</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"npm安装设置\"><a href=\"#npm安装设置\" class=\"headerlink\" title=\"npm安装设置\"></a>npm安装设置</h2><figure class=\"highlight arduino\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> strict-ssl <span class=\"literal\">false</span> <span class=\"comment\">// SSL错误</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm <span class=\"built_in\">config</span> <span class=\"built_in\">get</span> registry <span class=\"comment\">// 查看当前源</span></span><br><span class=\"line\">npm <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> registry https:<span class=\"comment\">//registry.npm.taobao.org  // 设置淘宝源</span></span><br><span class=\"line\">npm <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> registry https:<span class=\"comment\">//registry.npmjs.org/  // 设置官方源</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> sass_binary_site https:<span class=\"comment\">//npm.taobao.org/mirrors/node-sass/</span></span><br><span class=\"line\">npm <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> chromedriver_cdnurl https:<span class=\"comment\">//cdn.npm.taobao.org/dist/chromedriver</span></span><br><span class=\"line\">npm <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> electron_mirror https:<span class=\"comment\">//npm.taobao.org/mirrors/electron/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">yarn <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> chromedriver_cdnurl https:<span class=\"comment\">//cdn.npm.taobao.org/dist/chromedriver</span></span><br><span class=\"line\">yarn <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> electron_mirror https:<span class=\"comment\">//npm.taobao.org/mirrors/electron/</span></span><br><span class=\"line\">yarn <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> registry https:<span class=\"comment\">//registry.npm.taobao.org/</span></span><br><span class=\"line\">yarn <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> registry https:<span class=\"comment\">//registry.yarnpkg.com</span></span><br><span class=\"line\">yarn <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> sass_binary_site https:<span class=\"comment\">//npm.taobao.org/mirrors/node-sass/</span></span><br><span class=\"line\">yarn <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> phantomjs_cdnurl http:<span class=\"comment\">//cnpmjs.org/downloads</span></span><br><span class=\"line\">yarn <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> sqlite3_binary_host_mirror https:<span class=\"comment\">//foxgis.oss-cn-shanghai.aliyuncs.com/</span></span><br><span class=\"line\">yarn <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> profiler_binary_host_mirror https:<span class=\"comment\">//npm.taobao.org/mirrors/node-inspector/</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"js小技巧","excerpt":"源于网络和平常的积累","comments":1,"date":"2020-12-14T08:22:02.000Z","_content":"\n## 查找字符串中某个字符出现的次数\n```\nlet str=\"21312312312312\"\nconsole.log(str.split(\"1\").length-1)\n```\n\n## js正则匹配快速使用匹配项\n```\nlet tel = \"13122223333\";\n\nlet reg = /^(\\d{3})\\d{4}(\\d{4})$/;\n\ntel = tel.replace(reg, \"$1****$2\");\n```\n\n## 最大公约数\n```\nconst gcd = (x, y) => !y ? x : gcd(y, x % y);\n```\n\n## 自适应单位\nvw：1vw等于视口宽度的1%。\n\nvh：1vh等于视口高度的1%。\n\nvmin：选取vw和vh中最小的那个。\n\nvmax：选取vw和vh中最大的那个\n\nCSS百分比是相对于包含它的最近的父元素的高度和宽度\n\n\n## blur和click冲突\n场景：平时做表单验证的时候一般都有个input框和删除按钮，然后习惯性在失去焦点的时候> 去验证输入的内容是否正确，做验证，发请求等等。 这个时候，那个点击删除按钮往往也就触发了input的失去焦点事件\n\n给失去焦点的时间加上延迟时间，让blur时间在click事件后执行，这个方法固然能够解决问题，但是本人并不是很推荐，因为影响性能，不到最后不用这个方法；\nevent.relatedTarget.id事件属性返回与事件的目标节点相关的节点。（非IE）\nmousedown事件替代处理click事件\n\n\n## 随机数\n```\n// [0,1) 左闭右开 min-max \nMath.floor(min+Math.random()*(max-min+1))\n// toString() this is object方法 toString() valueOf\n// 随机颜色\nitem.style.backgroundColor = '#' + Math.random().toString(16).slice(2, 8);\n// \"#\" + (\"00000\" + ((Math.random() * 0x1000000) << 0).toString(16)).slice(-6)\n```\n\n## 交换两个数的值\n\n```\n// 加减运算 缺点也很明显，整型数据溢出，对于32位字符最大表示数字是2147483647，如果是2147483645和2147483646交换就失败了。\nvar a=1,b=2;\na += b;\nb = a - b;\na -= b;\n\n// 第三个临时变量\nvar a=1,b=2;\nvar temp = a;\na = b;\nb= temp;\n\n// 位运算\nlet a=3,b=4;\na^=b;\nb^=a;\na^=b;\n\n// es6\nlet a = 1, b = 2;\n[a, b] = [b, a];\n```\n\n## 使用Boolean过滤数组中的假值\n```\nconst compact = arr => arr.filter(Boolean)\ncompact([0, 1, false, 2, '', 3, 'a', 'e' * 23, NaN, 's', 34]) // // [ 1, 2, 3, 'a', 's', 34 ]\n```\n\n## base64加密\n```\nlet encodedData = window.btoa(\"Hello, world\"); // 编码\nlet decodedData = window.atob(encodedData);    // 解码\n```\n> 如果字符串是unicode字符串，则需要对其转码，通常使用escape和unescape\n```\n// ucs-2 string to base64 encoded ascii\nfunction utoa(str) {\n    return window.btoa(unescape(encodeURIComponent(str)));\n}\n// base64 encoded ascii to ucs-2 string\nfunction atou(str) {\n    return decodeURIComponent(escape(window.atob(str)));\n}\n// Usage:\nutoa('✓ à la mode'); // 4pyTIMOgIGxhIG1vZGU=\natou('4pyTIMOgIGxhIG1vZGU='); // \"✓ à la mode\"\n\nutoa('I \\u2661 Unicode!'); // SSDimaEgVW5pY29kZSE=\natou('SSDimaEgVW5pY29kZSE='); // \"I ♡ Unicode!\"\n```\n\n## 数组合并的几种方法\n```\n// 四种方法。\nvar arr1=[1,2,3];\nvar arr2=[4,5,6];\narr1 = arr1.concat(arr2);\nconsole.log(arr1); \n\nvar arr1=[1,2,3];\nvar arr2=[4,5,6];\nArray.prototype.push.apply(arr1,arr2);\nconsole.log(arr1);\n\nvar arr1=[1,2,3];\nvar arr2=[4,5,6];\nfor (var i=0; i < arr2.length; i++) {\narr1.push( arr2[i] );\n}\nconsole.log(arr1); \n\nvar arr1=[1,2,3];\nvar arr2=[4,5,6];\n\narr1.push(...arr2)\n```\n## 进制转换\n`parseInt`转换为10进制，`toString()`作进制转换\n```\n// eg. 8-bit hexadecimal => Binary  FFFFFFFF => 11111111111111111111111111111111\nconst chars = parseInt(char, 16).toString(2).padStart(32, '0');\n```\n\n## 驼峰转换\n```\nconst regExp = /_(\\w)/g;\n'operation_status_graph_file_download'.replace(regExp, ($0, $1) => $1.toUpperCase());\n```\n\n## 判断2个对象相等\n利用`JSON`方法转换为字符串\n```\nJSON.stringify(obj)==JSON.stringify(obj2);//true\nJSON.stringify(obj)==JSON.stringify(obj3);//false\n```\n\n","source":"_posts/2020-12-14-js-knowledge-md.md","raw":"---\nlayout: post\ntitle: js小技巧\nexcerpt: '源于网络和平常的积累'\ntags: [web, javascript]\ncomments: true\ndate: 2020-12-14 16:22:02\n---\n\n## 查找字符串中某个字符出现的次数\n```\nlet str=\"21312312312312\"\nconsole.log(str.split(\"1\").length-1)\n```\n\n## js正则匹配快速使用匹配项\n```\nlet tel = \"13122223333\";\n\nlet reg = /^(\\d{3})\\d{4}(\\d{4})$/;\n\ntel = tel.replace(reg, \"$1****$2\");\n```\n\n## 最大公约数\n```\nconst gcd = (x, y) => !y ? x : gcd(y, x % y);\n```\n\n## 自适应单位\nvw：1vw等于视口宽度的1%。\n\nvh：1vh等于视口高度的1%。\n\nvmin：选取vw和vh中最小的那个。\n\nvmax：选取vw和vh中最大的那个\n\nCSS百分比是相对于包含它的最近的父元素的高度和宽度\n\n\n## blur和click冲突\n场景：平时做表单验证的时候一般都有个input框和删除按钮，然后习惯性在失去焦点的时候> 去验证输入的内容是否正确，做验证，发请求等等。 这个时候，那个点击删除按钮往往也就触发了input的失去焦点事件\n\n给失去焦点的时间加上延迟时间，让blur时间在click事件后执行，这个方法固然能够解决问题，但是本人并不是很推荐，因为影响性能，不到最后不用这个方法；\nevent.relatedTarget.id事件属性返回与事件的目标节点相关的节点。（非IE）\nmousedown事件替代处理click事件\n\n\n## 随机数\n```\n// [0,1) 左闭右开 min-max \nMath.floor(min+Math.random()*(max-min+1))\n// toString() this is object方法 toString() valueOf\n// 随机颜色\nitem.style.backgroundColor = '#' + Math.random().toString(16).slice(2, 8);\n// \"#\" + (\"00000\" + ((Math.random() * 0x1000000) << 0).toString(16)).slice(-6)\n```\n\n## 交换两个数的值\n\n```\n// 加减运算 缺点也很明显，整型数据溢出，对于32位字符最大表示数字是2147483647，如果是2147483645和2147483646交换就失败了。\nvar a=1,b=2;\na += b;\nb = a - b;\na -= b;\n\n// 第三个临时变量\nvar a=1,b=2;\nvar temp = a;\na = b;\nb= temp;\n\n// 位运算\nlet a=3,b=4;\na^=b;\nb^=a;\na^=b;\n\n// es6\nlet a = 1, b = 2;\n[a, b] = [b, a];\n```\n\n## 使用Boolean过滤数组中的假值\n```\nconst compact = arr => arr.filter(Boolean)\ncompact([0, 1, false, 2, '', 3, 'a', 'e' * 23, NaN, 's', 34]) // // [ 1, 2, 3, 'a', 's', 34 ]\n```\n\n## base64加密\n```\nlet encodedData = window.btoa(\"Hello, world\"); // 编码\nlet decodedData = window.atob(encodedData);    // 解码\n```\n> 如果字符串是unicode字符串，则需要对其转码，通常使用escape和unescape\n```\n// ucs-2 string to base64 encoded ascii\nfunction utoa(str) {\n    return window.btoa(unescape(encodeURIComponent(str)));\n}\n// base64 encoded ascii to ucs-2 string\nfunction atou(str) {\n    return decodeURIComponent(escape(window.atob(str)));\n}\n// Usage:\nutoa('✓ à la mode'); // 4pyTIMOgIGxhIG1vZGU=\natou('4pyTIMOgIGxhIG1vZGU='); // \"✓ à la mode\"\n\nutoa('I \\u2661 Unicode!'); // SSDimaEgVW5pY29kZSE=\natou('SSDimaEgVW5pY29kZSE='); // \"I ♡ Unicode!\"\n```\n\n## 数组合并的几种方法\n```\n// 四种方法。\nvar arr1=[1,2,3];\nvar arr2=[4,5,6];\narr1 = arr1.concat(arr2);\nconsole.log(arr1); \n\nvar arr1=[1,2,3];\nvar arr2=[4,5,6];\nArray.prototype.push.apply(arr1,arr2);\nconsole.log(arr1);\n\nvar arr1=[1,2,3];\nvar arr2=[4,5,6];\nfor (var i=0; i < arr2.length; i++) {\narr1.push( arr2[i] );\n}\nconsole.log(arr1); \n\nvar arr1=[1,2,3];\nvar arr2=[4,5,6];\n\narr1.push(...arr2)\n```\n## 进制转换\n`parseInt`转换为10进制，`toString()`作进制转换\n```\n// eg. 8-bit hexadecimal => Binary  FFFFFFFF => 11111111111111111111111111111111\nconst chars = parseInt(char, 16).toString(2).padStart(32, '0');\n```\n\n## 驼峰转换\n```\nconst regExp = /_(\\w)/g;\n'operation_status_graph_file_download'.replace(regExp, ($0, $1) => $1.toUpperCase());\n```\n\n## 判断2个对象相等\n利用`JSON`方法转换为字符串\n```\nJSON.stringify(obj)==JSON.stringify(obj2);//true\nJSON.stringify(obj)==JSON.stringify(obj3);//false\n```\n\n","slug":"2020-12-14-js-knowledge-md","published":1,"updated":"2021-05-07T11:33:57.085Z","photos":[],"link":"","_id":"ckoe9igvs001v8cpn5ntlesgw","content":"<h2 id=\"查找字符串中某个字符出现的次数\"><a href=\"#查找字符串中某个字符出现的次数\" class=\"headerlink\" title=\"查找字符串中某个字符出现的次数\"></a>查找字符串中某个字符出现的次数</h2><figure class=\"highlight maxima\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> str=<span class=\"string\">&quot;21312312312312&quot;</span></span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(str.<span class=\"built_in\">split</span>(<span class=\"string\">&quot;1&quot;</span>).<span class=\"built_in\">length</span>-<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"js正则匹配快速使用匹配项\"><a href=\"#js正则匹配快速使用匹配项\" class=\"headerlink\" title=\"js正则匹配快速使用匹配项\"></a>js正则匹配快速使用匹配项</h2><figure class=\"highlight nix\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">tel</span> = <span class=\"string\">&quot;13122223333&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">reg</span> = /^(\\d&#123;<span class=\"number\">3</span>&#125;)\\d&#123;<span class=\"number\">4</span>&#125;(\\d&#123;<span class=\"number\">4</span>&#125;)$/;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">tel</span> = tel.replace(reg, <span class=\"string\">&quot;$1****$2&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最大公约数\"><a href=\"#最大公约数\" class=\"headerlink\" title=\"最大公约数\"></a>最大公约数</h2><figure class=\"highlight gml\"><table><tr><td class=\"code\"><pre><span class=\"line\">const gcd = (<span class=\"symbol\">x</span>, <span class=\"symbol\">y</span>) =&gt; !<span class=\"symbol\">y</span> ? <span class=\"symbol\">x</span> : gcd(<span class=\"symbol\">y</span>, <span class=\"symbol\">x</span> % <span class=\"symbol\">y</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自适应单位\"><a href=\"#自适应单位\" class=\"headerlink\" title=\"自适应单位\"></a>自适应单位</h2><p>vw：1vw等于视口宽度的1%。</p>\n<p>vh：1vh等于视口高度的1%。</p>\n<p>vmin：选取vw和vh中最小的那个。</p>\n<p>vmax：选取vw和vh中最大的那个</p>\n<p>CSS百分比是相对于包含它的最近的父元素的高度和宽度</p>\n<h2 id=\"blur和click冲突\"><a href=\"#blur和click冲突\" class=\"headerlink\" title=\"blur和click冲突\"></a>blur和click冲突</h2><p>场景：平时做表单验证的时候一般都有个input框和删除按钮，然后习惯性在失去焦点的时候&gt; 去验证输入的内容是否正确，做验证，发请求等等。 这个时候，那个点击删除按钮往往也就触发了input的失去焦点事件</p>\n<p>给失去焦点的时间加上延迟时间，让blur时间在click事件后执行，这个方法固然能够解决问题，但是本人并不是很推荐，因为影响性能，不到最后不用这个方法；<br>event.relatedTarget.id事件属性返回与事件的目标节点相关的节点。（非IE）<br>mousedown事件替代处理click事件</p>\n<h2 id=\"随机数\"><a href=\"#随机数\" class=\"headerlink\" title=\"随机数\"></a>随机数</h2><figure class=\"highlight maxima\"><table><tr><td class=\"code\"><pre><span class=\"line\">// [<span class=\"number\">0</span>,<span class=\"number\">1</span>) 左闭右开 <span class=\"built_in\">min</span>-<span class=\"built_in\">max</span> </span><br><span class=\"line\">Math.<span class=\"built_in\">floor</span>(<span class=\"built_in\">min</span>+Math.<span class=\"built_in\">random</span>()*(<span class=\"built_in\">max</span>-<span class=\"built_in\">min</span>+<span class=\"number\">1</span>))</span><br><span class=\"line\">// toString() this <span class=\"built_in\">is</span> object方法 toString() valueOf</span><br><span class=\"line\">// 随机颜色</span><br><span class=\"line\">item.<span class=\"built_in\">style</span>.backgroundColor = &#x27;#&#x27; + Math.<span class=\"built_in\">random</span>().toString(<span class=\"number\">16</span>).slice(<span class=\"number\">2</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\">// <span class=\"string\">&quot;#&quot;</span> + (<span class=\"string\">&quot;00000&quot;</span> + ((Math.<span class=\"built_in\">random</span>() * <span class=\"number\">0x1000000</span>) &lt;&lt; <span class=\"number\">0</span>).toString(<span class=\"number\">16</span>)).slice(-<span class=\"number\">6</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"交换两个数的值\"><a href=\"#交换两个数的值\" class=\"headerlink\" title=\"交换两个数的值\"></a>交换两个数的值</h2><figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 加减运算 缺点也很明显，整型数据溢出，对于32位字符最大表示数字是2147483647，如果是2147483645和2147483646交换就失败了。</span></span><br><span class=\"line\">var a=<span class=\"number\">1</span>,b=<span class=\"number\">2</span>;</span><br><span class=\"line\">a += b;</span><br><span class=\"line\">b = a - b;</span><br><span class=\"line\">a -= b;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第三个临时变量</span></span><br><span class=\"line\">var a=<span class=\"number\">1</span>,b=<span class=\"number\">2</span>;</span><br><span class=\"line\">var temp = a;</span><br><span class=\"line\">a = b;</span><br><span class=\"line\">b= temp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 位运算</span></span><br><span class=\"line\">let a=<span class=\"number\">3</span>,b=<span class=\"number\">4</span>;</span><br><span class=\"line\">a^=b;</span><br><span class=\"line\">b^=a;</span><br><span class=\"line\">a^=b;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es6</span></span><br><span class=\"line\">let a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>;</span><br><span class=\"line\">[a, b] = [b, a];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用Boolean过滤数组中的假值\"><a href=\"#使用Boolean过滤数组中的假值\" class=\"headerlink\" title=\"使用Boolean过滤数组中的假值\"></a>使用Boolean过滤数组中的假值</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> compact = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> arr.filter(<span class=\"built_in\">Boolean</span>)</span><br><span class=\"line\">compact([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"literal\">false</span>, <span class=\"number\">2</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">3</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span> * <span class=\"number\">23</span>, <span class=\"literal\">NaN</span>, <span class=\"string\">&#x27;s&#x27;</span>, <span class=\"number\">34</span>]) <span class=\"comment\">// // [ 1, 2, 3, &#x27;a&#x27;, &#x27;s&#x27;, 34 ]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"base64加密\"><a href=\"#base64加密\" class=\"headerlink\" title=\"base64加密\"></a>base64加密</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> encodedData = <span class=\"built_in\">window</span>.btoa(<span class=\"string\">&quot;Hello, world&quot;</span>); <span class=\"comment\">// 编码</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> decodedData = <span class=\"built_in\">window</span>.atob(encodedData);    <span class=\"comment\">// 解码</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果字符串是unicode字符串，则需要对其转码，通常使用escape和unescape</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ucs-2 string to base64 encoded ascii</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">utoa</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.btoa(<span class=\"built_in\">unescape</span>(<span class=\"built_in\">encodeURIComponent</span>(str)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// base64 encoded ascii to ucs-2 string</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">atou</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">decodeURIComponent</span>(<span class=\"built_in\">escape</span>(<span class=\"built_in\">window</span>.atob(str)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Usage:</span></span><br><span class=\"line\">utoa(<span class=\"string\">&#x27;✓ à la mode&#x27;</span>); <span class=\"comment\">// 4pyTIMOgIGxhIG1vZGU=</span></span><br><span class=\"line\">atou(<span class=\"string\">&#x27;4pyTIMOgIGxhIG1vZGU=&#x27;</span>); <span class=\"comment\">// &quot;✓ à la mode&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">utoa(<span class=\"string\">&#x27;I \\u2661 Unicode!&#x27;</span>); <span class=\"comment\">// SSDimaEgVW5pY29kZSE=</span></span><br><span class=\"line\">atou(<span class=\"string\">&#x27;SSDimaEgVW5pY29kZSE=&#x27;</span>); <span class=\"comment\">// &quot;I ♡ Unicode!&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组合并的几种方法\"><a href=\"#数组合并的几种方法\" class=\"headerlink\" title=\"数组合并的几种方法\"></a>数组合并的几种方法</h2><figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 四种方法。</span></span><br><span class=\"line\">var arr1=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">var arr2=[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\">arr1 = arr1.concat(arr2);</span><br><span class=\"line\">console.log(arr1); </span><br><span class=\"line\"></span><br><span class=\"line\">var arr1=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">var arr2=[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\">Array.prototype.push.apply(arr1,arr2);</span><br><span class=\"line\">console.log(arr1);</span><br><span class=\"line\"></span><br><span class=\"line\">var arr1=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">var arr2=[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (var i=<span class=\"number\">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class=\"line\">arr1.push( arr2[i] );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(arr1); </span><br><span class=\"line\"></span><br><span class=\"line\">var arr1=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">var arr2=[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">arr1.push(...arr2)</span><br></pre></td></tr></table></figure>\n<h2 id=\"进制转换\"><a href=\"#进制转换\" class=\"headerlink\" title=\"进制转换\"></a>进制转换</h2><p><code>parseInt</code>转换为10进制，<code>toString()</code>作进制转换</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// eg. 8-bit hexadecimal =&gt; Binary  FFFFFFFF =&gt; 11111111111111111111111111111111</span></span><br><span class=\"line\">const chars = parse<span class=\"constructor\">Int(<span class=\"params\">char</span>, 16)</span>.<span class=\"keyword\">to</span><span class=\"constructor\">String(2)</span>.pad<span class=\"constructor\">Start(32, &#x27;0&#x27;)</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"驼峰转换\"><a href=\"#驼峰转换\" class=\"headerlink\" title=\"驼峰转换\"></a>驼峰转换</h2><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">const regExp = <span class=\"regexp\">/_(\\w)/g</span>;</span><br><span class=\"line\"><span class=\"string\">&#x27;operation_status_graph_file_download&#x27;</span>.replace(regExp, (<span class=\"variable\">$0</span>, <span class=\"variable\">$1</span>) =&gt; <span class=\"variable\">$1</span>.toUpperCase());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"判断2个对象相等\"><a href=\"#判断2个对象相等\" class=\"headerlink\" title=\"判断2个对象相等\"></a>判断2个对象相等</h2><p>利用<code>JSON</code>方法转换为字符串</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">JSON</span>.</span></span>stringify(obj)==<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">JSON</span>.</span></span>stringify(obj2);<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">JSON</span>.</span></span>stringify(obj)==<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">JSON</span>.</span></span>stringify(obj3);<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"more":"<h2 id=\"查找字符串中某个字符出现的次数\"><a href=\"#查找字符串中某个字符出现的次数\" class=\"headerlink\" title=\"查找字符串中某个字符出现的次数\"></a>查找字符串中某个字符出现的次数</h2><figure class=\"highlight maxima\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> str=<span class=\"string\">&quot;21312312312312&quot;</span></span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(str.<span class=\"built_in\">split</span>(<span class=\"string\">&quot;1&quot;</span>).<span class=\"built_in\">length</span>-<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"js正则匹配快速使用匹配项\"><a href=\"#js正则匹配快速使用匹配项\" class=\"headerlink\" title=\"js正则匹配快速使用匹配项\"></a>js正则匹配快速使用匹配项</h2><figure class=\"highlight nix\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">tel</span> = <span class=\"string\">&quot;13122223333&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">reg</span> = /^(\\d&#123;<span class=\"number\">3</span>&#125;)\\d&#123;<span class=\"number\">4</span>&#125;(\\d&#123;<span class=\"number\">4</span>&#125;)$/;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">tel</span> = tel.replace(reg, <span class=\"string\">&quot;$1****$2&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最大公约数\"><a href=\"#最大公约数\" class=\"headerlink\" title=\"最大公约数\"></a>最大公约数</h2><figure class=\"highlight gml\"><table><tr><td class=\"code\"><pre><span class=\"line\">const gcd = (<span class=\"symbol\">x</span>, <span class=\"symbol\">y</span>) =&gt; !<span class=\"symbol\">y</span> ? <span class=\"symbol\">x</span> : gcd(<span class=\"symbol\">y</span>, <span class=\"symbol\">x</span> % <span class=\"symbol\">y</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自适应单位\"><a href=\"#自适应单位\" class=\"headerlink\" title=\"自适应单位\"></a>自适应单位</h2><p>vw：1vw等于视口宽度的1%。</p>\n<p>vh：1vh等于视口高度的1%。</p>\n<p>vmin：选取vw和vh中最小的那个。</p>\n<p>vmax：选取vw和vh中最大的那个</p>\n<p>CSS百分比是相对于包含它的最近的父元素的高度和宽度</p>\n<h2 id=\"blur和click冲突\"><a href=\"#blur和click冲突\" class=\"headerlink\" title=\"blur和click冲突\"></a>blur和click冲突</h2><p>场景：平时做表单验证的时候一般都有个input框和删除按钮，然后习惯性在失去焦点的时候&gt; 去验证输入的内容是否正确，做验证，发请求等等。 这个时候，那个点击删除按钮往往也就触发了input的失去焦点事件</p>\n<p>给失去焦点的时间加上延迟时间，让blur时间在click事件后执行，这个方法固然能够解决问题，但是本人并不是很推荐，因为影响性能，不到最后不用这个方法；<br>event.relatedTarget.id事件属性返回与事件的目标节点相关的节点。（非IE）<br>mousedown事件替代处理click事件</p>\n<h2 id=\"随机数\"><a href=\"#随机数\" class=\"headerlink\" title=\"随机数\"></a>随机数</h2><figure class=\"highlight maxima\"><table><tr><td class=\"code\"><pre><span class=\"line\">// [<span class=\"number\">0</span>,<span class=\"number\">1</span>) 左闭右开 <span class=\"built_in\">min</span>-<span class=\"built_in\">max</span> </span><br><span class=\"line\">Math.<span class=\"built_in\">floor</span>(<span class=\"built_in\">min</span>+Math.<span class=\"built_in\">random</span>()*(<span class=\"built_in\">max</span>-<span class=\"built_in\">min</span>+<span class=\"number\">1</span>))</span><br><span class=\"line\">// toString() this <span class=\"built_in\">is</span> object方法 toString() valueOf</span><br><span class=\"line\">// 随机颜色</span><br><span class=\"line\">item.<span class=\"built_in\">style</span>.backgroundColor = &#x27;#&#x27; + Math.<span class=\"built_in\">random</span>().toString(<span class=\"number\">16</span>).slice(<span class=\"number\">2</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\">// <span class=\"string\">&quot;#&quot;</span> + (<span class=\"string\">&quot;00000&quot;</span> + ((Math.<span class=\"built_in\">random</span>() * <span class=\"number\">0x1000000</span>) &lt;&lt; <span class=\"number\">0</span>).toString(<span class=\"number\">16</span>)).slice(-<span class=\"number\">6</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"交换两个数的值\"><a href=\"#交换两个数的值\" class=\"headerlink\" title=\"交换两个数的值\"></a>交换两个数的值</h2><figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 加减运算 缺点也很明显，整型数据溢出，对于32位字符最大表示数字是2147483647，如果是2147483645和2147483646交换就失败了。</span></span><br><span class=\"line\">var a=<span class=\"number\">1</span>,b=<span class=\"number\">2</span>;</span><br><span class=\"line\">a += b;</span><br><span class=\"line\">b = a - b;</span><br><span class=\"line\">a -= b;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第三个临时变量</span></span><br><span class=\"line\">var a=<span class=\"number\">1</span>,b=<span class=\"number\">2</span>;</span><br><span class=\"line\">var temp = a;</span><br><span class=\"line\">a = b;</span><br><span class=\"line\">b= temp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 位运算</span></span><br><span class=\"line\">let a=<span class=\"number\">3</span>,b=<span class=\"number\">4</span>;</span><br><span class=\"line\">a^=b;</span><br><span class=\"line\">b^=a;</span><br><span class=\"line\">a^=b;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es6</span></span><br><span class=\"line\">let a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>;</span><br><span class=\"line\">[a, b] = [b, a];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用Boolean过滤数组中的假值\"><a href=\"#使用Boolean过滤数组中的假值\" class=\"headerlink\" title=\"使用Boolean过滤数组中的假值\"></a>使用Boolean过滤数组中的假值</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> compact = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> arr.filter(<span class=\"built_in\">Boolean</span>)</span><br><span class=\"line\">compact([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"literal\">false</span>, <span class=\"number\">2</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">3</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span> * <span class=\"number\">23</span>, <span class=\"literal\">NaN</span>, <span class=\"string\">&#x27;s&#x27;</span>, <span class=\"number\">34</span>]) <span class=\"comment\">// // [ 1, 2, 3, &#x27;a&#x27;, &#x27;s&#x27;, 34 ]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"base64加密\"><a href=\"#base64加密\" class=\"headerlink\" title=\"base64加密\"></a>base64加密</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> encodedData = <span class=\"built_in\">window</span>.btoa(<span class=\"string\">&quot;Hello, world&quot;</span>); <span class=\"comment\">// 编码</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> decodedData = <span class=\"built_in\">window</span>.atob(encodedData);    <span class=\"comment\">// 解码</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果字符串是unicode字符串，则需要对其转码，通常使用escape和unescape</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ucs-2 string to base64 encoded ascii</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">utoa</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.btoa(<span class=\"built_in\">unescape</span>(<span class=\"built_in\">encodeURIComponent</span>(str)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// base64 encoded ascii to ucs-2 string</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">atou</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">decodeURIComponent</span>(<span class=\"built_in\">escape</span>(<span class=\"built_in\">window</span>.atob(str)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Usage:</span></span><br><span class=\"line\">utoa(<span class=\"string\">&#x27;✓ à la mode&#x27;</span>); <span class=\"comment\">// 4pyTIMOgIGxhIG1vZGU=</span></span><br><span class=\"line\">atou(<span class=\"string\">&#x27;4pyTIMOgIGxhIG1vZGU=&#x27;</span>); <span class=\"comment\">// &quot;✓ à la mode&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">utoa(<span class=\"string\">&#x27;I \\u2661 Unicode!&#x27;</span>); <span class=\"comment\">// SSDimaEgVW5pY29kZSE=</span></span><br><span class=\"line\">atou(<span class=\"string\">&#x27;SSDimaEgVW5pY29kZSE=&#x27;</span>); <span class=\"comment\">// &quot;I ♡ Unicode!&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组合并的几种方法\"><a href=\"#数组合并的几种方法\" class=\"headerlink\" title=\"数组合并的几种方法\"></a>数组合并的几种方法</h2><figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 四种方法。</span></span><br><span class=\"line\">var arr1=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">var arr2=[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\">arr1 = arr1.concat(arr2);</span><br><span class=\"line\">console.log(arr1); </span><br><span class=\"line\"></span><br><span class=\"line\">var arr1=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">var arr2=[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\">Array.prototype.push.apply(arr1,arr2);</span><br><span class=\"line\">console.log(arr1);</span><br><span class=\"line\"></span><br><span class=\"line\">var arr1=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">var arr2=[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (var i=<span class=\"number\">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class=\"line\">arr1.push( arr2[i] );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(arr1); </span><br><span class=\"line\"></span><br><span class=\"line\">var arr1=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">var arr2=[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">arr1.push(...arr2)</span><br></pre></td></tr></table></figure>\n<h2 id=\"进制转换\"><a href=\"#进制转换\" class=\"headerlink\" title=\"进制转换\"></a>进制转换</h2><p><code>parseInt</code>转换为10进制，<code>toString()</code>作进制转换</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// eg. 8-bit hexadecimal =&gt; Binary  FFFFFFFF =&gt; 11111111111111111111111111111111</span></span><br><span class=\"line\">const chars = parse<span class=\"constructor\">Int(<span class=\"params\">char</span>, 16)</span>.<span class=\"keyword\">to</span><span class=\"constructor\">String(2)</span>.pad<span class=\"constructor\">Start(32, &#x27;0&#x27;)</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"驼峰转换\"><a href=\"#驼峰转换\" class=\"headerlink\" title=\"驼峰转换\"></a>驼峰转换</h2><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">const regExp = <span class=\"regexp\">/_(\\w)/g</span>;</span><br><span class=\"line\"><span class=\"string\">&#x27;operation_status_graph_file_download&#x27;</span>.replace(regExp, (<span class=\"variable\">$0</span>, <span class=\"variable\">$1</span>) =&gt; <span class=\"variable\">$1</span>.toUpperCase());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"判断2个对象相等\"><a href=\"#判断2个对象相等\" class=\"headerlink\" title=\"判断2个对象相等\"></a>判断2个对象相等</h2><p>利用<code>JSON</code>方法转换为字符串</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">JSON</span>.</span></span>stringify(obj)==<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">JSON</span>.</span></span>stringify(obj2);<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">JSON</span>.</span></span>stringify(obj)==<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">JSON</span>.</span></span>stringify(obj3);<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n"},{"layout":"post","title":"hls.js播放hls直播源","excerpt":"播放码流视频源","comments":1,"date":"2020-12-15T05:15:32.000Z","_content":"## video.js和hls.js的区别和优缺点\n\n### video.js：\n优点：功能比较强大，有很多功能封装好了，而且有自己的一套UI，在不同浏览器下显示比较一致\n缺点：包比较大，实现hls直播的时候其实是内嵌了hls.js的代码，实际上是运用了hls.js，而且由于封装的ui和功能，使其不够纯净，不够灵活，修改ui的时候要用到其他的插件，有点画蛇添足的感觉\n### hls.js：\n优点：包比较小，很纯净，UI可以根据自己的业务自扩展，自己封装功能和UI，比较切合自己开发的直播播放器，而且专业直播HLS\n缺点：没有封装好的UI，功能上也需要自己去实现\n\nhls.js播放hls直播源\n```\n<!DOCTYPE html>\n<html lang=\"en\" dir=\"ltr\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>hls.js</title>\n    <link rel=\"stylesheet\" href=\"./index.css\">\n    <script src=\"https://cdn.jsdelivr.net/npm/hls.js@latest\"></script>\n  </head>\n  <body>\n    <video id=\"video\" controls></video>\n    <script src=\"./index.js\" charset=\"utf-8\"></script>\n  </body>\n</html>\n```\n`index.js`\n```\nvar Hls = window.Hls\nvar url = 'http://localhost:8765/hls/movie.m3u8'\nvar video = document.getElementById('video')\nif (Hls.isSupported()) {\n  var hls = new Hls()\n  hls.loadSource(url)\n  hls.attachMedia(video)\n  hls.on(Hls.Events.MANIFEST_PARSED, function () {\n    // video.play()\n  })\n} else if (video.canPlayType('application/vnd.apple.mpegurl')) {\n  video.src = url\n  video.addEventListener('canplay', function () {\n    // video.play()\n  })\n}\n```\n","source":"_posts/2020-12-15-hls-js-video-md.md","raw":"---\nlayout: post\ntitle: hls.js播放hls直播源\nexcerpt: '播放码流视频源'\ntags: [web, javascript, video]\ncomments: true\ndate: 2020-12-15 13:15:32\n---\n## video.js和hls.js的区别和优缺点\n\n### video.js：\n优点：功能比较强大，有很多功能封装好了，而且有自己的一套UI，在不同浏览器下显示比较一致\n缺点：包比较大，实现hls直播的时候其实是内嵌了hls.js的代码，实际上是运用了hls.js，而且由于封装的ui和功能，使其不够纯净，不够灵活，修改ui的时候要用到其他的插件，有点画蛇添足的感觉\n### hls.js：\n优点：包比较小，很纯净，UI可以根据自己的业务自扩展，自己封装功能和UI，比较切合自己开发的直播播放器，而且专业直播HLS\n缺点：没有封装好的UI，功能上也需要自己去实现\n\nhls.js播放hls直播源\n```\n<!DOCTYPE html>\n<html lang=\"en\" dir=\"ltr\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>hls.js</title>\n    <link rel=\"stylesheet\" href=\"./index.css\">\n    <script src=\"https://cdn.jsdelivr.net/npm/hls.js@latest\"></script>\n  </head>\n  <body>\n    <video id=\"video\" controls></video>\n    <script src=\"./index.js\" charset=\"utf-8\"></script>\n  </body>\n</html>\n```\n`index.js`\n```\nvar Hls = window.Hls\nvar url = 'http://localhost:8765/hls/movie.m3u8'\nvar video = document.getElementById('video')\nif (Hls.isSupported()) {\n  var hls = new Hls()\n  hls.loadSource(url)\n  hls.attachMedia(video)\n  hls.on(Hls.Events.MANIFEST_PARSED, function () {\n    // video.play()\n  })\n} else if (video.canPlayType('application/vnd.apple.mpegurl')) {\n  video.src = url\n  video.addEventListener('canplay', function () {\n    // video.play()\n  })\n}\n```\n","slug":"2020-12-15-hls-js-video-md","published":1,"updated":"2020-12-15T05:21:07.847Z","photos":[],"link":"","_id":"ckoe9igvt001x8cpn3ztn5mnx","content":"<h2 id=\"video-js和hls-js的区别和优缺点\"><a href=\"#video-js和hls-js的区别和优缺点\" class=\"headerlink\" title=\"video.js和hls.js的区别和优缺点\"></a>video.js和hls.js的区别和优缺点</h2><h3 id=\"video-js：\"><a href=\"#video-js：\" class=\"headerlink\" title=\"video.js：\"></a>video.js：</h3><p>优点：功能比较强大，有很多功能封装好了，而且有自己的一套UI，在不同浏览器下显示比较一致<br>缺点：包比较大，实现hls直播的时候其实是内嵌了hls.js的代码，实际上是运用了hls.js，而且由于封装的ui和功能，使其不够纯净，不够灵活，修改ui的时候要用到其他的插件，有点画蛇添足的感觉</p>\n<h3 id=\"hls-js：\"><a href=\"#hls-js：\" class=\"headerlink\" title=\"hls.js：\"></a>hls.js：</h3><p>优点：包比较小，很纯净，UI可以根据自己的业务自扩展，自己封装功能和UI，比较切合自己开发的直播播放器，而且专业直播HLS<br>缺点：没有封装好的UI，功能上也需要自己去实现</p>\n<p>hls.js播放hls直播源</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">dir</span>=<span class=\"string\">&quot;ltr&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>hls.js<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;./index.css&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/hls.js@latest&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;video&quot;</span> <span class=\"attr\">controls</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./index.js&quot;</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>index.js</code></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\">var Hls = window.Hls</span><br><span class=\"line\">var url = &#x27;http:<span class=\"comment\">//localhost:8765/hls/movie.m3u8&#x27;</span></span><br><span class=\"line\">var video = document.get<span class=\"constructor\">ElementById(&#x27;<span class=\"params\">video</span>&#x27;)</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Hls</span>.</span></span>is<span class=\"constructor\">Supported()</span>) &#123;</span><br><span class=\"line\">  var hls = <span class=\"keyword\">new</span> <span class=\"constructor\">Hls()</span></span><br><span class=\"line\">  hls.load<span class=\"constructor\">Source(<span class=\"params\">url</span>)</span></span><br><span class=\"line\">  hls.attach<span class=\"constructor\">Media(<span class=\"params\">video</span>)</span></span><br><span class=\"line\">  hls.on(Hls.Events.MANIFEST_PARSED, <span class=\"keyword\">function</span> <span class=\"literal\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// video.play()</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (video.can<span class=\"constructor\">PlayType(&#x27;<span class=\"params\">application</span><span class=\"operator\">/</span><span class=\"params\">vnd</span>.<span class=\"params\">apple</span>.<span class=\"params\">mpegurl</span>&#x27;)</span>) &#123;</span><br><span class=\"line\">  video.src = url</span><br><span class=\"line\">  video.add<span class=\"constructor\">EventListener(&#x27;<span class=\"params\">canplay</span>&#x27;, <span class=\"params\">function</span> ()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// video.play()</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"more":"<h2 id=\"video-js和hls-js的区别和优缺点\"><a href=\"#video-js和hls-js的区别和优缺点\" class=\"headerlink\" title=\"video.js和hls.js的区别和优缺点\"></a>video.js和hls.js的区别和优缺点</h2><h3 id=\"video-js：\"><a href=\"#video-js：\" class=\"headerlink\" title=\"video.js：\"></a>video.js：</h3><p>优点：功能比较强大，有很多功能封装好了，而且有自己的一套UI，在不同浏览器下显示比较一致<br>缺点：包比较大，实现hls直播的时候其实是内嵌了hls.js的代码，实际上是运用了hls.js，而且由于封装的ui和功能，使其不够纯净，不够灵活，修改ui的时候要用到其他的插件，有点画蛇添足的感觉</p>\n<h3 id=\"hls-js：\"><a href=\"#hls-js：\" class=\"headerlink\" title=\"hls.js：\"></a>hls.js：</h3><p>优点：包比较小，很纯净，UI可以根据自己的业务自扩展，自己封装功能和UI，比较切合自己开发的直播播放器，而且专业直播HLS<br>缺点：没有封装好的UI，功能上也需要自己去实现</p>\n<p>hls.js播放hls直播源</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">dir</span>=<span class=\"string\">&quot;ltr&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>hls.js<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;./index.css&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/hls.js@latest&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;video&quot;</span> <span class=\"attr\">controls</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./index.js&quot;</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>index.js</code></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\">var Hls = window.Hls</span><br><span class=\"line\">var url = &#x27;http:<span class=\"comment\">//localhost:8765/hls/movie.m3u8&#x27;</span></span><br><span class=\"line\">var video = document.get<span class=\"constructor\">ElementById(&#x27;<span class=\"params\">video</span>&#x27;)</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Hls</span>.</span></span>is<span class=\"constructor\">Supported()</span>) &#123;</span><br><span class=\"line\">  var hls = <span class=\"keyword\">new</span> <span class=\"constructor\">Hls()</span></span><br><span class=\"line\">  hls.load<span class=\"constructor\">Source(<span class=\"params\">url</span>)</span></span><br><span class=\"line\">  hls.attach<span class=\"constructor\">Media(<span class=\"params\">video</span>)</span></span><br><span class=\"line\">  hls.on(Hls.Events.MANIFEST_PARSED, <span class=\"keyword\">function</span> <span class=\"literal\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// video.play()</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (video.can<span class=\"constructor\">PlayType(&#x27;<span class=\"params\">application</span><span class=\"operator\">/</span><span class=\"params\">vnd</span>.<span class=\"params\">apple</span>.<span class=\"params\">mpegurl</span>&#x27;)</span>) &#123;</span><br><span class=\"line\">  video.src = url</span><br><span class=\"line\">  video.add<span class=\"constructor\">EventListener(&#x27;<span class=\"params\">canplay</span>&#x27;, <span class=\"params\">function</span> ()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// video.play()</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"jquery监听ajax事件","excerpt":"使用jquery监听ajax事件","comments":1,"date":"2020-12-01T08:35:05.000Z","_content":"\n## jQuery.ajaxComplete()\n\n回调函数handler有3个参数：其一是表示当前事件的`Event`对象，其二是发送当前AJAX请求的`jqXHR`对象，其三是包含为本次`AJAX`请求设置的所有参数选项(包括无需指定的默认参数选项)的`Object`对象。\n\n> 从jQuery 1.8开始，ajaxComplete事件的处理函数必须绑定到document对象上才能生效。\n\n> 如果在jQuery.ajax()或jQuery.ajaxSetup()中将选项参数global设为false，可以禁止该AJAX请求触发全局的AJAX事件。\n\n因此，不论当前jQuery为何版本，如果不是特殊需求，我们都应该将ajaxComplete事件的处理函数绑定到document对象上。\n```\n$(document).ajaxComplete( function(event, jqXHR, options){\n\talert(\"处理函数1：请求的url为\" + options.url);\n} );\n\n$(document).ajaxComplete( function(event, jqXHR, options){\n\talert(\"处理函数2：请求方式为\" + options.type);\n} );\n\n\n// 执行该AJAX请求，会弹出2次对话框\n// 因为document对象上绑定了2个事件处理函数\n$.ajax( {\n\turl: \"index.html\"\n// \t, global: false // 可以禁止触发全局的Ajax事件\n} );\n\n\n// 执行该AJAX请求，会弹出3次对话框\n// 因为$.ajax()自己通过complete选项绑定了一个局部的ajaxComplete事件处理函数，它也在document对象上，会执行一次\n// 我们还通过ajaxComplete()额外绑定了两个事件处理函数，会再弹出2次\n$.ajax( {\n\turl: \"myurl\" ,\n\tcomplete: function(jqXHR, textStatus){\n\t\t// jqXHR 是经过jQuery封装的XMLHttpRequest对象\n        // textStatus 可能为：null、'success'、 'notmodified'、 'error'、 'timeout'、 'abort'或'parsererror'等\n       alert( \"ajax()\" );\n\t}\n// \t, global: false // 可以禁止触发全局的Ajax事件\n} );\n```\n## 参考\n[原创 jQuery.ajaxComplete() 函数详解\n](https://codeplayer.vip/p/j7ssg)\n[jQuery.ajaxComplete() 函数详解](https://www.cnblogs.com/WuXuanKun/p/6195325.html)\n\n","source":"_posts/2020-12-01-jquery-subscribe-ajax-event-md.md","raw":"---\nlayout: post\ntitle: jquery监听ajax事件\nexcerpt: '使用jquery监听ajax事件'\ntags: [javascript, jquery]\ncomments: true\ndate: 2020-12-01 16:35:05\n---\n\n## jQuery.ajaxComplete()\n\n回调函数handler有3个参数：其一是表示当前事件的`Event`对象，其二是发送当前AJAX请求的`jqXHR`对象，其三是包含为本次`AJAX`请求设置的所有参数选项(包括无需指定的默认参数选项)的`Object`对象。\n\n> 从jQuery 1.8开始，ajaxComplete事件的处理函数必须绑定到document对象上才能生效。\n\n> 如果在jQuery.ajax()或jQuery.ajaxSetup()中将选项参数global设为false，可以禁止该AJAX请求触发全局的AJAX事件。\n\n因此，不论当前jQuery为何版本，如果不是特殊需求，我们都应该将ajaxComplete事件的处理函数绑定到document对象上。\n```\n$(document).ajaxComplete( function(event, jqXHR, options){\n\talert(\"处理函数1：请求的url为\" + options.url);\n} );\n\n$(document).ajaxComplete( function(event, jqXHR, options){\n\talert(\"处理函数2：请求方式为\" + options.type);\n} );\n\n\n// 执行该AJAX请求，会弹出2次对话框\n// 因为document对象上绑定了2个事件处理函数\n$.ajax( {\n\turl: \"index.html\"\n// \t, global: false // 可以禁止触发全局的Ajax事件\n} );\n\n\n// 执行该AJAX请求，会弹出3次对话框\n// 因为$.ajax()自己通过complete选项绑定了一个局部的ajaxComplete事件处理函数，它也在document对象上，会执行一次\n// 我们还通过ajaxComplete()额外绑定了两个事件处理函数，会再弹出2次\n$.ajax( {\n\turl: \"myurl\" ,\n\tcomplete: function(jqXHR, textStatus){\n\t\t// jqXHR 是经过jQuery封装的XMLHttpRequest对象\n        // textStatus 可能为：null、'success'、 'notmodified'、 'error'、 'timeout'、 'abort'或'parsererror'等\n       alert( \"ajax()\" );\n\t}\n// \t, global: false // 可以禁止触发全局的Ajax事件\n} );\n```\n## 参考\n[原创 jQuery.ajaxComplete() 函数详解\n](https://codeplayer.vip/p/j7ssg)\n[jQuery.ajaxComplete() 函数详解](https://www.cnblogs.com/WuXuanKun/p/6195325.html)\n\n","slug":"2020-12-01-jquery-subscribe-ajax-event-md","published":1,"updated":"2020-12-01T09:15:10.508Z","photos":[],"link":"","_id":"ckoe9igvx00208cpn2cf1137z","content":"<h2 id=\"jQuery-ajaxComplete\"><a href=\"#jQuery-ajaxComplete\" class=\"headerlink\" title=\"jQuery.ajaxComplete()\"></a>jQuery.ajaxComplete()</h2><p>回调函数handler有3个参数：其一是表示当前事件的<code>Event</code>对象，其二是发送当前AJAX请求的<code>jqXHR</code>对象，其三是包含为本次<code>AJAX</code>请求设置的所有参数选项(包括无需指定的默认参数选项)的<code>Object</code>对象。</p>\n<blockquote>\n<p>从jQuery 1.8开始，ajaxComplete事件的处理函数必须绑定到document对象上才能生效。</p>\n</blockquote>\n<blockquote>\n<p>如果在jQuery.ajax()或jQuery.ajaxSetup()中将选项参数global设为false，可以禁止该AJAX请求触发全局的AJAX事件。</p>\n</blockquote>\n<p>因此，不论当前jQuery为何版本，如果不是特殊需求，我们都应该将ajaxComplete事件的处理函数绑定到document对象上。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(document).ajaxComplete( <span class=\"keyword\">function</span>(event, jqXHR, options)&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">&quot;处理函数1：请求的url为&quot;</span> + options.url);</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\"></span><br><span class=\"line\">$(document).ajaxComplete( <span class=\"keyword\">function</span>(event, jqXHR, options)&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">&quot;处理函数2：请求方式为&quot;</span> + options.type);</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span> 执行该AJAX请求，会弹出<span class=\"number\">2</span>次对话框</span><br><span class=\"line\"><span class=\"regexp\">//</span> 因为document对象上绑定了<span class=\"number\">2</span>个事件处理函数</span><br><span class=\"line\">$.ajax( &#123;</span><br><span class=\"line\">\turl: <span class=\"string\">&quot;index.html&quot;</span></span><br><span class=\"line\"><span class=\"regexp\">//</span> \t, global: false <span class=\"regexp\">//</span> 可以禁止触发全局的Ajax事件</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span> 执行该AJAX请求，会弹出<span class=\"number\">3</span>次对话框</span><br><span class=\"line\"><span class=\"regexp\">//</span> 因为$.ajax()自己通过complete选项绑定了一个局部的ajaxComplete事件处理函数，它也在document对象上，会执行一次</span><br><span class=\"line\"><span class=\"regexp\">//</span> 我们还通过ajaxComplete()额外绑定了两个事件处理函数，会再弹出<span class=\"number\">2</span>次</span><br><span class=\"line\">$.ajax( &#123;</span><br><span class=\"line\">\turl: <span class=\"string\">&quot;myurl&quot;</span> ,</span><br><span class=\"line\">\tcomplete: <span class=\"keyword\">function</span>(jqXHR, textStatus)&#123;</span><br><span class=\"line\">\t\t<span class=\"regexp\">//</span> jqXHR 是经过jQuery封装的XMLHttpRequest对象</span><br><span class=\"line\">        <span class=\"regexp\">//</span> textStatus 可能为：null、<span class=\"string\">&#x27;success&#x27;</span>、 <span class=\"string\">&#x27;notmodified&#x27;</span>、 <span class=\"string\">&#x27;error&#x27;</span>、 <span class=\"string\">&#x27;timeout&#x27;</span>、 <span class=\"string\">&#x27;abort&#x27;</span>或<span class=\"string\">&#x27;parsererror&#x27;</span>等</span><br><span class=\"line\">       alert( <span class=\"string\">&quot;ajax()&quot;</span> );</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"regexp\">//</span> \t, global: false <span class=\"regexp\">//</span> 可以禁止触发全局的Ajax事件</span><br><span class=\"line\">&#125; );</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://codeplayer.vip/p/j7ssg\">原创 jQuery.ajaxComplete() 函数详解\n</a><br><a href=\"https://www.cnblogs.com/WuXuanKun/p/6195325.html\">jQuery.ajaxComplete() 函数详解</a></p>\n","site":{"data":{}},"more":"<h2 id=\"jQuery-ajaxComplete\"><a href=\"#jQuery-ajaxComplete\" class=\"headerlink\" title=\"jQuery.ajaxComplete()\"></a>jQuery.ajaxComplete()</h2><p>回调函数handler有3个参数：其一是表示当前事件的<code>Event</code>对象，其二是发送当前AJAX请求的<code>jqXHR</code>对象，其三是包含为本次<code>AJAX</code>请求设置的所有参数选项(包括无需指定的默认参数选项)的<code>Object</code>对象。</p>\n<blockquote>\n<p>从jQuery 1.8开始，ajaxComplete事件的处理函数必须绑定到document对象上才能生效。</p>\n</blockquote>\n<blockquote>\n<p>如果在jQuery.ajax()或jQuery.ajaxSetup()中将选项参数global设为false，可以禁止该AJAX请求触发全局的AJAX事件。</p>\n</blockquote>\n<p>因此，不论当前jQuery为何版本，如果不是特殊需求，我们都应该将ajaxComplete事件的处理函数绑定到document对象上。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(document).ajaxComplete( <span class=\"keyword\">function</span>(event, jqXHR, options)&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">&quot;处理函数1：请求的url为&quot;</span> + options.url);</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\"></span><br><span class=\"line\">$(document).ajaxComplete( <span class=\"keyword\">function</span>(event, jqXHR, options)&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">&quot;处理函数2：请求方式为&quot;</span> + options.type);</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span> 执行该AJAX请求，会弹出<span class=\"number\">2</span>次对话框</span><br><span class=\"line\"><span class=\"regexp\">//</span> 因为document对象上绑定了<span class=\"number\">2</span>个事件处理函数</span><br><span class=\"line\">$.ajax( &#123;</span><br><span class=\"line\">\turl: <span class=\"string\">&quot;index.html&quot;</span></span><br><span class=\"line\"><span class=\"regexp\">//</span> \t, global: false <span class=\"regexp\">//</span> 可以禁止触发全局的Ajax事件</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span> 执行该AJAX请求，会弹出<span class=\"number\">3</span>次对话框</span><br><span class=\"line\"><span class=\"regexp\">//</span> 因为$.ajax()自己通过complete选项绑定了一个局部的ajaxComplete事件处理函数，它也在document对象上，会执行一次</span><br><span class=\"line\"><span class=\"regexp\">//</span> 我们还通过ajaxComplete()额外绑定了两个事件处理函数，会再弹出<span class=\"number\">2</span>次</span><br><span class=\"line\">$.ajax( &#123;</span><br><span class=\"line\">\turl: <span class=\"string\">&quot;myurl&quot;</span> ,</span><br><span class=\"line\">\tcomplete: <span class=\"keyword\">function</span>(jqXHR, textStatus)&#123;</span><br><span class=\"line\">\t\t<span class=\"regexp\">//</span> jqXHR 是经过jQuery封装的XMLHttpRequest对象</span><br><span class=\"line\">        <span class=\"regexp\">//</span> textStatus 可能为：null、<span class=\"string\">&#x27;success&#x27;</span>、 <span class=\"string\">&#x27;notmodified&#x27;</span>、 <span class=\"string\">&#x27;error&#x27;</span>、 <span class=\"string\">&#x27;timeout&#x27;</span>、 <span class=\"string\">&#x27;abort&#x27;</span>或<span class=\"string\">&#x27;parsererror&#x27;</span>等</span><br><span class=\"line\">       alert( <span class=\"string\">&quot;ajax()&quot;</span> );</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"regexp\">//</span> \t, global: false <span class=\"regexp\">//</span> 可以禁止触发全局的Ajax事件</span><br><span class=\"line\">&#125; );</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://codeplayer.vip/p/j7ssg\">原创 jQuery.ajaxComplete() 函数详解\n</a><br><a href=\"https://www.cnblogs.com/WuXuanKun/p/6195325.html\">jQuery.ajaxComplete() 函数详解</a></p>\n"},{"layout":"post","title":"vue生命周期钩子函数","excerpt":"vue在渲染页面时，各个阶段都做了些什么，dom在哪里产生","comments":1,"date":"2020-12-20T09:25:12.000Z","_content":"\n## vue的生命周期\n\n简单的说生命周期就是事物从产生到消失的一个时间过程。那么vue的生命周期就是从其被创建到销毁的过程，其中包含了开始创建、初始化数据、编译模板、挂载dom（渲染） ，渲染->更新->渲染、销毁（卸载）等一系列过程。\n\n那么其中的钩子函数都担负着自己的职责，较为常用的就是created和mounted函数，可以在函数中编写相关的业务逻辑。\n\n## 钩子函数\n\n### beforeCreate\n\n在实例初始化之后，数据观测和事件、生命周期初始化配置之前被调用。\n\n### created\n\n实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测，属性和方法的运算，事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。\n\n### beforeMount\n\n在挂载开始之前被调用：相关的 render 函数首次被调用，此时有了虚拟DOM。\n\n### mounted\n\nel 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子，渲染为真实DOM。\n\n### beforeUpdate\n\n在数据更新之前时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。\n\n### updated\n\n由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。\n\n当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。\n\n值得注意的是：该钩子在服务器端渲染期间不被调用。\n\n### beforeDestroy\n\n实例销毁之前调用。此时，实例仍然是可用的。\n\n### destroyed\n\nvue 实例销毁后调用。调用后，vue 实例指示的所有东西都会解绑，所有的事件监听器会被卸载移除，所有的子实例也会被销毁。 \n\n值得注意的是：该钩子在服务器端渲染期间不被调用。\n\n## 参考\n[VueJS生命周期](https://blog.csdn.net/jian_xi/article/details/79249300)\n","source":"_posts/2020-12-20-vue-life-hook-function.md","raw":"---\nlayout: post\ntitle: vue生命周期钩子函数\nexcerpt: 'vue在渲染页面时，各个阶段都做了些什么，dom在哪里产生'\ntags: [vue, javascript]\ncomments: true\ndate: 2020-12-20 17:25:12\n---\n\n## vue的生命周期\n\n简单的说生命周期就是事物从产生到消失的一个时间过程。那么vue的生命周期就是从其被创建到销毁的过程，其中包含了开始创建、初始化数据、编译模板、挂载dom（渲染） ，渲染->更新->渲染、销毁（卸载）等一系列过程。\n\n那么其中的钩子函数都担负着自己的职责，较为常用的就是created和mounted函数，可以在函数中编写相关的业务逻辑。\n\n## 钩子函数\n\n### beforeCreate\n\n在实例初始化之后，数据观测和事件、生命周期初始化配置之前被调用。\n\n### created\n\n实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测，属性和方法的运算，事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。\n\n### beforeMount\n\n在挂载开始之前被调用：相关的 render 函数首次被调用，此时有了虚拟DOM。\n\n### mounted\n\nel 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子，渲染为真实DOM。\n\n### beforeUpdate\n\n在数据更新之前时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。\n\n### updated\n\n由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。\n\n当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。\n\n值得注意的是：该钩子在服务器端渲染期间不被调用。\n\n### beforeDestroy\n\n实例销毁之前调用。此时，实例仍然是可用的。\n\n### destroyed\n\nvue 实例销毁后调用。调用后，vue 实例指示的所有东西都会解绑，所有的事件监听器会被卸载移除，所有的子实例也会被销毁。 \n\n值得注意的是：该钩子在服务器端渲染期间不被调用。\n\n## 参考\n[VueJS生命周期](https://blog.csdn.net/jian_xi/article/details/79249300)\n","slug":"2020-12-20-vue-life-hook-function","published":1,"updated":"2021-02-03T10:33:34.770Z","photos":[],"link":"","_id":"ckoe9igvz00228cpnc0e07zqd","content":"<h2 id=\"vue的生命周期\"><a href=\"#vue的生命周期\" class=\"headerlink\" title=\"vue的生命周期\"></a>vue的生命周期</h2><p>简单的说生命周期就是事物从产生到消失的一个时间过程。那么vue的生命周期就是从其被创建到销毁的过程，其中包含了开始创建、初始化数据、编译模板、挂载dom（渲染） ，渲染-&gt;更新-&gt;渲染、销毁（卸载）等一系列过程。</p>\n<p>那么其中的钩子函数都担负着自己的职责，较为常用的就是created和mounted函数，可以在函数中编写相关的业务逻辑。</p>\n<h2 id=\"钩子函数\"><a href=\"#钩子函数\" class=\"headerlink\" title=\"钩子函数\"></a>钩子函数</h2><h3 id=\"beforeCreate\"><a href=\"#beforeCreate\" class=\"headerlink\" title=\"beforeCreate\"></a>beforeCreate</h3><p>在实例初始化之后，数据观测和事件、生命周期初始化配置之前被调用。</p>\n<h3 id=\"created\"><a href=\"#created\" class=\"headerlink\" title=\"created\"></a>created</h3><p>实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测，属性和方法的运算，事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</p>\n<h3 id=\"beforeMount\"><a href=\"#beforeMount\" class=\"headerlink\" title=\"beforeMount\"></a>beforeMount</h3><p>在挂载开始之前被调用：相关的 render 函数首次被调用，此时有了虚拟DOM。</p>\n<h3 id=\"mounted\"><a href=\"#mounted\" class=\"headerlink\" title=\"mounted\"></a>mounted</h3><p>el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子，渲染为真实DOM。</p>\n<h3 id=\"beforeUpdate\"><a href=\"#beforeUpdate\" class=\"headerlink\" title=\"beforeUpdate\"></a>beforeUpdate</h3><p>在数据更新之前时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</p>\n<h3 id=\"updated\"><a href=\"#updated\" class=\"headerlink\" title=\"updated\"></a>updated</h3><p>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</p>\n<p>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。</p>\n<p>值得注意的是：该钩子在服务器端渲染期间不被调用。</p>\n<h3 id=\"beforeDestroy\"><a href=\"#beforeDestroy\" class=\"headerlink\" title=\"beforeDestroy\"></a>beforeDestroy</h3><p>实例销毁之前调用。此时，实例仍然是可用的。</p>\n<h3 id=\"destroyed\"><a href=\"#destroyed\" class=\"headerlink\" title=\"destroyed\"></a>destroyed</h3><p>vue 实例销毁后调用。调用后，vue 实例指示的所有东西都会解绑，所有的事件监听器会被卸载移除，所有的子实例也会被销毁。 </p>\n<p>值得注意的是：该钩子在服务器端渲染期间不被调用。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://blog.csdn.net/jian_xi/article/details/79249300\">VueJS生命周期</a></p>\n","site":{"data":{}},"more":"<h2 id=\"vue的生命周期\"><a href=\"#vue的生命周期\" class=\"headerlink\" title=\"vue的生命周期\"></a>vue的生命周期</h2><p>简单的说生命周期就是事物从产生到消失的一个时间过程。那么vue的生命周期就是从其被创建到销毁的过程，其中包含了开始创建、初始化数据、编译模板、挂载dom（渲染） ，渲染-&gt;更新-&gt;渲染、销毁（卸载）等一系列过程。</p>\n<p>那么其中的钩子函数都担负着自己的职责，较为常用的就是created和mounted函数，可以在函数中编写相关的业务逻辑。</p>\n<h2 id=\"钩子函数\"><a href=\"#钩子函数\" class=\"headerlink\" title=\"钩子函数\"></a>钩子函数</h2><h3 id=\"beforeCreate\"><a href=\"#beforeCreate\" class=\"headerlink\" title=\"beforeCreate\"></a>beforeCreate</h3><p>在实例初始化之后，数据观测和事件、生命周期初始化配置之前被调用。</p>\n<h3 id=\"created\"><a href=\"#created\" class=\"headerlink\" title=\"created\"></a>created</h3><p>实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测，属性和方法的运算，事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</p>\n<h3 id=\"beforeMount\"><a href=\"#beforeMount\" class=\"headerlink\" title=\"beforeMount\"></a>beforeMount</h3><p>在挂载开始之前被调用：相关的 render 函数首次被调用，此时有了虚拟DOM。</p>\n<h3 id=\"mounted\"><a href=\"#mounted\" class=\"headerlink\" title=\"mounted\"></a>mounted</h3><p>el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子，渲染为真实DOM。</p>\n<h3 id=\"beforeUpdate\"><a href=\"#beforeUpdate\" class=\"headerlink\" title=\"beforeUpdate\"></a>beforeUpdate</h3><p>在数据更新之前时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</p>\n<h3 id=\"updated\"><a href=\"#updated\" class=\"headerlink\" title=\"updated\"></a>updated</h3><p>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</p>\n<p>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。</p>\n<p>值得注意的是：该钩子在服务器端渲染期间不被调用。</p>\n<h3 id=\"beforeDestroy\"><a href=\"#beforeDestroy\" class=\"headerlink\" title=\"beforeDestroy\"></a>beforeDestroy</h3><p>实例销毁之前调用。此时，实例仍然是可用的。</p>\n<h3 id=\"destroyed\"><a href=\"#destroyed\" class=\"headerlink\" title=\"destroyed\"></a>destroyed</h3><p>vue 实例销毁后调用。调用后，vue 实例指示的所有东西都会解绑，所有的事件监听器会被卸载移除，所有的子实例也会被销毁。 </p>\n<p>值得注意的是：该钩子在服务器端渲染期间不被调用。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://blog.csdn.net/jian_xi/article/details/79249300\">VueJS生命周期</a></p>\n"},{"layout":"post","title":"js浮点数计算","excerpt":"因为计算机的特性，浮点数计算很多时候不会等于我们想要的值","comments":1,"date":"2020-12-01T01:48:04.000Z","_content":"\n## 解决方法\n```\nfunction add(a, b) {\n    var c, d, e;\n    try {\n        c = a.toString().split(\".\")[1].length;\n    } catch (f) {\n        c = 0;\n    }\n    try {\n        d = b.toString().split(\".\")[1].length;\n    } catch (f) {\n        d = 0;\n    }\n    return e = Math.pow(10, Math.max(c, d)), (mul(a, e) + mul(b, e)) / e;\n}\n\nfunction sub(a, b) {\n    var c, d, e;\n    try {\n        c = a.toString().split(\".\")[1].length;\n    } catch (f) {\n        c = 0;\n    }\n    try {\n        d = b.toString().split(\".\")[1].length;\n    } catch (f) {\n        d = 0;\n    }\n    return e = Math.pow(10, Math.max(c, d)), (mul(a, e) - mul(b, e)) / e;\n}\n\nfunction mul(a, b) {\n    var c = 0,\n        d = a.toString(),\n        e = b.toString();\n    try {\n        c += d.split(\".\")[1].length;\n    } catch (f) {}\n    try {\n        c += e.split(\".\")[1].length;\n    } catch (f) {}\n    return Number(d.replace(\".\", \"\")) * Number(e.replace(\".\", \"\")) / Math.pow(10, c);\n}\n\nfunction div(a, b) {\n    var c, d, e = 0,\n        f = 0;\n    try {\n        e = a.toString().split(\".\")[1].length;\n    } catch (g) {}\n    try {\n        f = b.toString().split(\".\")[1].length;\n    } catch (g) {}\n    return c = Number(a.toString().replace(\".\", \"\")), d = Number(b.toString().replace(\".\", \"\")), mul(c / d, Math.pow(10, f - e));\n}\n```\n\n## 参考\n[Javascript优化后的加减乘除（解决js浮点数计算bug）\n](https://blog.csdn.net/qinshenxue/article/details/43671763)","source":"_posts/2020-12-01-js-float-calculate.md","raw":"---\nlayout: post\ntitle: js浮点数计算\nexcerpt: '因为计算机的特性，浮点数计算很多时候不会等于我们想要的值'\ntags: [javascript]\ncomments: true\ndate: 2020-12-01 09:48:04\n---\n\n## 解决方法\n```\nfunction add(a, b) {\n    var c, d, e;\n    try {\n        c = a.toString().split(\".\")[1].length;\n    } catch (f) {\n        c = 0;\n    }\n    try {\n        d = b.toString().split(\".\")[1].length;\n    } catch (f) {\n        d = 0;\n    }\n    return e = Math.pow(10, Math.max(c, d)), (mul(a, e) + mul(b, e)) / e;\n}\n\nfunction sub(a, b) {\n    var c, d, e;\n    try {\n        c = a.toString().split(\".\")[1].length;\n    } catch (f) {\n        c = 0;\n    }\n    try {\n        d = b.toString().split(\".\")[1].length;\n    } catch (f) {\n        d = 0;\n    }\n    return e = Math.pow(10, Math.max(c, d)), (mul(a, e) - mul(b, e)) / e;\n}\n\nfunction mul(a, b) {\n    var c = 0,\n        d = a.toString(),\n        e = b.toString();\n    try {\n        c += d.split(\".\")[1].length;\n    } catch (f) {}\n    try {\n        c += e.split(\".\")[1].length;\n    } catch (f) {}\n    return Number(d.replace(\".\", \"\")) * Number(e.replace(\".\", \"\")) / Math.pow(10, c);\n}\n\nfunction div(a, b) {\n    var c, d, e = 0,\n        f = 0;\n    try {\n        e = a.toString().split(\".\")[1].length;\n    } catch (g) {}\n    try {\n        f = b.toString().split(\".\")[1].length;\n    } catch (g) {}\n    return c = Number(a.toString().replace(\".\", \"\")), d = Number(b.toString().replace(\".\", \"\")), mul(c / d, Math.pow(10, f - e));\n}\n```\n\n## 参考\n[Javascript优化后的加减乘除（解决js浮点数计算bug）\n](https://blog.csdn.net/qinshenxue/article/details/43671763)","slug":"2020-12-01-js-float-calculate","published":1,"updated":"2020-12-01T06:01:16.030Z","photos":[],"link":"","_id":"ckoe9igw000258cpn0gnhdhjo","content":"<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\">function add(a, b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">c</span>, d, e;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">c</span> = a.<span class=\"built_in\">toString</span>().<span class=\"built_in\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].length;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (f) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">c</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        d = b.<span class=\"built_in\">toString</span>().<span class=\"built_in\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].length;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (f) &#123;</span><br><span class=\"line\">        d = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> e = <span class=\"type\">Math</span>.pow(<span class=\"number\">10</span>, <span class=\"type\">Math</span>.<span class=\"built_in\">max</span>(<span class=\"built_in\">c</span>, d)), (mul(a, e) + mul(b, e)) / e;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function sub(a, b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">c</span>, d, e;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">c</span> = a.<span class=\"built_in\">toString</span>().<span class=\"built_in\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].length;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (f) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">c</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        d = b.<span class=\"built_in\">toString</span>().<span class=\"built_in\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].length;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (f) &#123;</span><br><span class=\"line\">        d = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> e = <span class=\"type\">Math</span>.pow(<span class=\"number\">10</span>, <span class=\"type\">Math</span>.<span class=\"built_in\">max</span>(<span class=\"built_in\">c</span>, d)), (mul(a, e) - mul(b, e)) / e;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function mul(a, b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">c</span> = <span class=\"number\">0</span>,</span><br><span class=\"line\">        d = a.<span class=\"built_in\">toString</span>(),</span><br><span class=\"line\">        e = b.<span class=\"built_in\">toString</span>();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">c</span> += d.<span class=\"built_in\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].length;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (f) &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">c</span> += e.<span class=\"built_in\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].length;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (f) &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Number</span>(d.replace(<span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;&quot;</span>)) * <span class=\"type\">Number</span>(e.replace(<span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;&quot;</span>)) / <span class=\"type\">Math</span>.pow(<span class=\"number\">10</span>, <span class=\"built_in\">c</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function div(a, b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">c</span>, d, e = <span class=\"number\">0</span>,</span><br><span class=\"line\">        f = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        e = a.<span class=\"built_in\">toString</span>().<span class=\"built_in\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].length;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (g) &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        f = b.<span class=\"built_in\">toString</span>().<span class=\"built_in\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].length;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (g) &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">c</span> = <span class=\"type\">Number</span>(a.<span class=\"built_in\">toString</span>().replace(<span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;&quot;</span>)), d = <span class=\"type\">Number</span>(b.<span class=\"built_in\">toString</span>().replace(<span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;&quot;</span>)), mul(<span class=\"built_in\">c</span> / d, <span class=\"type\">Math</span>.pow(<span class=\"number\">10</span>, f - e));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://blog.csdn.net/qinshenxue/article/details/43671763\">Javascript优化后的加减乘除（解决js浮点数计算bug）\n</a></p>\n","site":{"data":{}},"more":"<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\">function add(a, b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">c</span>, d, e;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">c</span> = a.<span class=\"built_in\">toString</span>().<span class=\"built_in\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].length;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (f) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">c</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        d = b.<span class=\"built_in\">toString</span>().<span class=\"built_in\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].length;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (f) &#123;</span><br><span class=\"line\">        d = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> e = <span class=\"type\">Math</span>.pow(<span class=\"number\">10</span>, <span class=\"type\">Math</span>.<span class=\"built_in\">max</span>(<span class=\"built_in\">c</span>, d)), (mul(a, e) + mul(b, e)) / e;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function sub(a, b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">c</span>, d, e;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">c</span> = a.<span class=\"built_in\">toString</span>().<span class=\"built_in\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].length;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (f) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">c</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        d = b.<span class=\"built_in\">toString</span>().<span class=\"built_in\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].length;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (f) &#123;</span><br><span class=\"line\">        d = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> e = <span class=\"type\">Math</span>.pow(<span class=\"number\">10</span>, <span class=\"type\">Math</span>.<span class=\"built_in\">max</span>(<span class=\"built_in\">c</span>, d)), (mul(a, e) - mul(b, e)) / e;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function mul(a, b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">c</span> = <span class=\"number\">0</span>,</span><br><span class=\"line\">        d = a.<span class=\"built_in\">toString</span>(),</span><br><span class=\"line\">        e = b.<span class=\"built_in\">toString</span>();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">c</span> += d.<span class=\"built_in\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].length;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (f) &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">c</span> += e.<span class=\"built_in\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].length;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (f) &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Number</span>(d.replace(<span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;&quot;</span>)) * <span class=\"type\">Number</span>(e.replace(<span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;&quot;</span>)) / <span class=\"type\">Math</span>.pow(<span class=\"number\">10</span>, <span class=\"built_in\">c</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function div(a, b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">c</span>, d, e = <span class=\"number\">0</span>,</span><br><span class=\"line\">        f = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        e = a.<span class=\"built_in\">toString</span>().<span class=\"built_in\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].length;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (g) &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        f = b.<span class=\"built_in\">toString</span>().<span class=\"built_in\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].length;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (g) &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">c</span> = <span class=\"type\">Number</span>(a.<span class=\"built_in\">toString</span>().replace(<span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;&quot;</span>)), d = <span class=\"type\">Number</span>(b.<span class=\"built_in\">toString</span>().replace(<span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;&quot;</span>)), mul(<span class=\"built_in\">c</span> / d, <span class=\"type\">Math</span>.pow(<span class=\"number\">10</span>, f - e));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://blog.csdn.net/qinshenxue/article/details/43671763\">Javascript优化后的加减乘除（解决js浮点数计算bug）\n</a></p>\n"},{"layout":"post","title":"css共通属性","excerpt":"initial、inherit、unset、revert","comments":1,"date":"2020-12-21T09:24:15.000Z","_content":"\n## css通用属性\n* initial\n* inherit\n* unset\n* revert\n\n## initial\n`initial` 关键字用于设置 CSS 属性为它的默认值，可作用于任何 CSS 样式。（IE 不支持该关键字）\n\n## inherit\n每一个 CSS 属性都有一个特性就是，这个属性必然是默认继承的 `(inherited: Yes)` 或者是默认不继承的 `(inherited: no)`其中之一，我们可以在 MDN 上通过这个索引查找，判断一个属性的是否继承特性。\n\n### 可继承属性\n最后罗列一下默认为 `inherited: Yes` 的属性：\n* 所有元素可继承：visibility 和 cursor\n* 内联元素可继承：letter-spacing、word-spacing、white-space、line-height、color、font、 font-family、font-size、font-style、font-variant、font-weight、text- decoration、text-transform、direction\n* 块状元素可继承：text-indent和text-align\n* 列表元素可继承：list-style、list-style-type、list-style-position、list-style-image\n* 表格元素可继承：border-collapse\n\n## unset\n名如其意，`unset` 关键字我们可以简单理解为不设置。其实，它是关键字 `initial` 和 `inherit` 的组合。\n\n什么意思呢？也就是当我们给一个 CSS 属性设置了 `unset` 的话：\n* 如果该属性是默认继承属性，该值等同于 `inherit`\n* 如果该属性是非继承属性，该值等同于 `initial`\n\n## revert\nrevert - 表示样式表中定义的元素属性的默认值。若用户定义样式表中显式设置，则按此设置；否则，按照浏览器定义样式表中的样式设置；否则，等价于unset 。\n> 只有safari9.1+和ios9.3+支持\n","source":"_posts/2020-12-21-css-common-attribute.md","raw":"---\nlayout: post\ntitle: css共通属性\nexcerpt: 'initial、inherit、unset、revert'\ntags: [web, css]\ncomments: true\ndate: 2020-12-21 17:24:15\n---\n\n## css通用属性\n* initial\n* inherit\n* unset\n* revert\n\n## initial\n`initial` 关键字用于设置 CSS 属性为它的默认值，可作用于任何 CSS 样式。（IE 不支持该关键字）\n\n## inherit\n每一个 CSS 属性都有一个特性就是，这个属性必然是默认继承的 `(inherited: Yes)` 或者是默认不继承的 `(inherited: no)`其中之一，我们可以在 MDN 上通过这个索引查找，判断一个属性的是否继承特性。\n\n### 可继承属性\n最后罗列一下默认为 `inherited: Yes` 的属性：\n* 所有元素可继承：visibility 和 cursor\n* 内联元素可继承：letter-spacing、word-spacing、white-space、line-height、color、font、 font-family、font-size、font-style、font-variant、font-weight、text- decoration、text-transform、direction\n* 块状元素可继承：text-indent和text-align\n* 列表元素可继承：list-style、list-style-type、list-style-position、list-style-image\n* 表格元素可继承：border-collapse\n\n## unset\n名如其意，`unset` 关键字我们可以简单理解为不设置。其实，它是关键字 `initial` 和 `inherit` 的组合。\n\n什么意思呢？也就是当我们给一个 CSS 属性设置了 `unset` 的话：\n* 如果该属性是默认继承属性，该值等同于 `inherit`\n* 如果该属性是非继承属性，该值等同于 `initial`\n\n## revert\nrevert - 表示样式表中定义的元素属性的默认值。若用户定义样式表中显式设置，则按此设置；否则，按照浏览器定义样式表中的样式设置；否则，等价于unset 。\n> 只有safari9.1+和ios9.3+支持\n","slug":"2020-12-21-css-common-attribute","published":1,"updated":"2021-03-02T02:13:04.641Z","photos":[],"link":"","_id":"ckoe9igw200278cpn4ts19szs","content":"<h2 id=\"css通用属性\"><a href=\"#css通用属性\" class=\"headerlink\" title=\"css通用属性\"></a>css通用属性</h2><ul>\n<li>initial</li>\n<li>inherit</li>\n<li>unset</li>\n<li>revert</li>\n</ul>\n<h2 id=\"initial\"><a href=\"#initial\" class=\"headerlink\" title=\"initial\"></a>initial</h2><p><code>initial</code> 关键字用于设置 CSS 属性为它的默认值，可作用于任何 CSS 样式。（IE 不支持该关键字）</p>\n<h2 id=\"inherit\"><a href=\"#inherit\" class=\"headerlink\" title=\"inherit\"></a>inherit</h2><p>每一个 CSS 属性都有一个特性就是，这个属性必然是默认继承的 <code>(inherited: Yes)</code> 或者是默认不继承的 <code>(inherited: no)</code>其中之一，我们可以在 MDN 上通过这个索引查找，判断一个属性的是否继承特性。</p>\n<h3 id=\"可继承属性\"><a href=\"#可继承属性\" class=\"headerlink\" title=\"可继承属性\"></a>可继承属性</h3><p>最后罗列一下默认为 <code>inherited: Yes</code> 的属性：</p>\n<ul>\n<li>所有元素可继承：visibility 和 cursor</li>\n<li>内联元素可继承：letter-spacing、word-spacing、white-space、line-height、color、font、 font-family、font-size、font-style、font-variant、font-weight、text- decoration、text-transform、direction</li>\n<li>块状元素可继承：text-indent和text-align</li>\n<li>列表元素可继承：list-style、list-style-type、list-style-position、list-style-image</li>\n<li>表格元素可继承：border-collapse</li>\n</ul>\n<h2 id=\"unset\"><a href=\"#unset\" class=\"headerlink\" title=\"unset\"></a>unset</h2><p>名如其意，<code>unset</code> 关键字我们可以简单理解为不设置。其实，它是关键字 <code>initial</code> 和 <code>inherit</code> 的组合。</p>\n<p>什么意思呢？也就是当我们给一个 CSS 属性设置了 <code>unset</code> 的话：</p>\n<ul>\n<li>如果该属性是默认继承属性，该值等同于 <code>inherit</code></li>\n<li>如果该属性是非继承属性，该值等同于 <code>initial</code></li>\n</ul>\n<h2 id=\"revert\"><a href=\"#revert\" class=\"headerlink\" title=\"revert\"></a>revert</h2><p>revert - 表示样式表中定义的元素属性的默认值。若用户定义样式表中显式设置，则按此设置；否则，按照浏览器定义样式表中的样式设置；否则，等价于unset 。</p>\n<blockquote>\n<p>只有safari9.1+和ios9.3+支持</p>\n</blockquote>\n","site":{"data":{}},"more":"<h2 id=\"css通用属性\"><a href=\"#css通用属性\" class=\"headerlink\" title=\"css通用属性\"></a>css通用属性</h2><ul>\n<li>initial</li>\n<li>inherit</li>\n<li>unset</li>\n<li>revert</li>\n</ul>\n<h2 id=\"initial\"><a href=\"#initial\" class=\"headerlink\" title=\"initial\"></a>initial</h2><p><code>initial</code> 关键字用于设置 CSS 属性为它的默认值，可作用于任何 CSS 样式。（IE 不支持该关键字）</p>\n<h2 id=\"inherit\"><a href=\"#inherit\" class=\"headerlink\" title=\"inherit\"></a>inherit</h2><p>每一个 CSS 属性都有一个特性就是，这个属性必然是默认继承的 <code>(inherited: Yes)</code> 或者是默认不继承的 <code>(inherited: no)</code>其中之一，我们可以在 MDN 上通过这个索引查找，判断一个属性的是否继承特性。</p>\n<h3 id=\"可继承属性\"><a href=\"#可继承属性\" class=\"headerlink\" title=\"可继承属性\"></a>可继承属性</h3><p>最后罗列一下默认为 <code>inherited: Yes</code> 的属性：</p>\n<ul>\n<li>所有元素可继承：visibility 和 cursor</li>\n<li>内联元素可继承：letter-spacing、word-spacing、white-space、line-height、color、font、 font-family、font-size、font-style、font-variant、font-weight、text- decoration、text-transform、direction</li>\n<li>块状元素可继承：text-indent和text-align</li>\n<li>列表元素可继承：list-style、list-style-type、list-style-position、list-style-image</li>\n<li>表格元素可继承：border-collapse</li>\n</ul>\n<h2 id=\"unset\"><a href=\"#unset\" class=\"headerlink\" title=\"unset\"></a>unset</h2><p>名如其意，<code>unset</code> 关键字我们可以简单理解为不设置。其实，它是关键字 <code>initial</code> 和 <code>inherit</code> 的组合。</p>\n<p>什么意思呢？也就是当我们给一个 CSS 属性设置了 <code>unset</code> 的话：</p>\n<ul>\n<li>如果该属性是默认继承属性，该值等同于 <code>inherit</code></li>\n<li>如果该属性是非继承属性，该值等同于 <code>initial</code></li>\n</ul>\n<h2 id=\"revert\"><a href=\"#revert\" class=\"headerlink\" title=\"revert\"></a>revert</h2><p>revert - 表示样式表中定义的元素属性的默认值。若用户定义样式表中显式设置，则按此设置；否则，按照浏览器定义样式表中的样式设置；否则，等价于unset 。</p>\n<blockquote>\n<p>只有safari9.1+和ios9.3+支持</p>\n</blockquote>\n"},{"layout":"post","title":"浏览器从输入URL到渲染完页面的整个过程","comments":1,"date":"2020-12-29T02:22:02.000Z","_content":"\n从输入URL到渲染出整个页面的过程包括以下部分：\n\n* 1、DNS解析URL的过程\n\n* 2、浏览器发送请求与服务器交互的过程（3次握手）\n\n* 3、浏览器对接收到的html页面渲染的过程\n\n* 4、浏览器和服务器断开连接（4次握手）\n\n<!-- more -->\n\n## DNS解析URL的过程\n\nDNS解析的过程就是寻找哪个服务器上有请求的资源。因为ip地址不容易记忆，一般会使用URL域名（如www.baidu.com）作为网址。DNS解析就是将域名翻译成IP地址的过程。\n\n具体过程：\n\n* 1）浏览器缓存：浏览器会按照一定的频率 缓存DNS记录\n\n* 2）操作系统缓存：如果浏览器缓存中找不到需要的DNS记录，就会取操作系统中找\n\n* 3）路由缓存：路由器也有DNS缓存\n\n* 4）ISP的DNS服务器：ISP有专门的DNS服务器应对DNS查询请求\n\n* 5）根服务器：ISP的DNS服务器找不到之后，就要向根服务器发出请求，进行递归查询\n\n## 浏览器与服务器交互过程\n\n* 1）首先浏览器利用tcp协议通过三次握手与服务器建立连接\n　　http请求包括header和body。header中包括请求的方式（get和post）、请求的协议 （http、https、ftp）、请求的地址ip、缓存cookie。body中有请求的内容。\n> tcp将http长报文划分为短报文，通过三次握手与服务端建立连接，进行可靠传输。  \n> 三次握手的步骤（抽象派）  \n> 客户端：hello，你是server么？  \n> 服务端：hello，我是server，你是client么  \n> 客户端：yes，我是client  \n\n* 2）浏览器根据解析到的IP地址和端口号发起http的get请求.\n\n* 3）服务器接收到http请求之后，开始搜索html页面，并使用http返回响应报文\n\n* 4）若状态码为200显示响应成功，浏览器接收到返回的html页面之后，开始进行页面的渲染\n\n## 浏览器页面渲染过程\n\n* 1）浏览器根据深度遍历的方式把html节点遍历成dom 树\n\n* 2）将css解析成CSS DOM树\n\n* 3）将dom树和CSS DOM树构造成render树\n\n* 4）JS根据得到的render树 计算所有节点在屏幕中的位置，进行布局（回流）\n\n* 5）遍历render树并调用硬件API绘制所有节点（重绘）\n\n## 浏览器与服务器断开连接\n\n断开连接时，需要进行四次挥手（因为是全双工的，所以需要四次挥手）。\n\n四次挥手的步骤（抽象派）\n* 主动方：我已经关闭了向你那边的主动通道了，只能被动接收了\n* 被动方：收到通道关闭的信息\n* 被动方：那我也告诉你，我这边向你的主动通道也关闭了\n* 主动方：最后收到数据，之后双方无法通信\n\n","source":"_posts/2020-12-29-process-of-render-page.md","raw":"---\nlayout: post\ntitle: 浏览器从输入URL到渲染完页面的整个过程\ntags: [web]\ncomments: true\ndate: 2020-12-29 10:22:02\n---\n\n从输入URL到渲染出整个页面的过程包括以下部分：\n\n* 1、DNS解析URL的过程\n\n* 2、浏览器发送请求与服务器交互的过程（3次握手）\n\n* 3、浏览器对接收到的html页面渲染的过程\n\n* 4、浏览器和服务器断开连接（4次握手）\n\n<!-- more -->\n\n## DNS解析URL的过程\n\nDNS解析的过程就是寻找哪个服务器上有请求的资源。因为ip地址不容易记忆，一般会使用URL域名（如www.baidu.com）作为网址。DNS解析就是将域名翻译成IP地址的过程。\n\n具体过程：\n\n* 1）浏览器缓存：浏览器会按照一定的频率 缓存DNS记录\n\n* 2）操作系统缓存：如果浏览器缓存中找不到需要的DNS记录，就会取操作系统中找\n\n* 3）路由缓存：路由器也有DNS缓存\n\n* 4）ISP的DNS服务器：ISP有专门的DNS服务器应对DNS查询请求\n\n* 5）根服务器：ISP的DNS服务器找不到之后，就要向根服务器发出请求，进行递归查询\n\n## 浏览器与服务器交互过程\n\n* 1）首先浏览器利用tcp协议通过三次握手与服务器建立连接\n　　http请求包括header和body。header中包括请求的方式（get和post）、请求的协议 （http、https、ftp）、请求的地址ip、缓存cookie。body中有请求的内容。\n> tcp将http长报文划分为短报文，通过三次握手与服务端建立连接，进行可靠传输。  \n> 三次握手的步骤（抽象派）  \n> 客户端：hello，你是server么？  \n> 服务端：hello，我是server，你是client么  \n> 客户端：yes，我是client  \n\n* 2）浏览器根据解析到的IP地址和端口号发起http的get请求.\n\n* 3）服务器接收到http请求之后，开始搜索html页面，并使用http返回响应报文\n\n* 4）若状态码为200显示响应成功，浏览器接收到返回的html页面之后，开始进行页面的渲染\n\n## 浏览器页面渲染过程\n\n* 1）浏览器根据深度遍历的方式把html节点遍历成dom 树\n\n* 2）将css解析成CSS DOM树\n\n* 3）将dom树和CSS DOM树构造成render树\n\n* 4）JS根据得到的render树 计算所有节点在屏幕中的位置，进行布局（回流）\n\n* 5）遍历render树并调用硬件API绘制所有节点（重绘）\n\n## 浏览器与服务器断开连接\n\n断开连接时，需要进行四次挥手（因为是全双工的，所以需要四次挥手）。\n\n四次挥手的步骤（抽象派）\n* 主动方：我已经关闭了向你那边的主动通道了，只能被动接收了\n* 被动方：收到通道关闭的信息\n* 被动方：那我也告诉你，我这边向你的主动通道也关闭了\n* 主动方：最后收到数据，之后双方无法通信\n\n","slug":"2020-12-29-process-of-render-page","published":1,"updated":"2020-12-29T02:33:16.484Z","photos":[],"link":"","_id":"ckoe9igw3002a8cpne2sm8wnt","content":"<p>从输入URL到渲染出整个页面的过程包括以下部分：</p>\n<ul>\n<li><p>1、DNS解析URL的过程</p>\n</li>\n<li><p>2、浏览器发送请求与服务器交互的过程（3次握手）</p>\n</li>\n<li><p>3、浏览器对接收到的html页面渲染的过程</p>\n</li>\n<li><p>4、浏览器和服务器断开连接（4次握手）</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"DNS解析URL的过程\"><a href=\"#DNS解析URL的过程\" class=\"headerlink\" title=\"DNS解析URL的过程\"></a>DNS解析URL的过程</h2><p>DNS解析的过程就是寻找哪个服务器上有请求的资源。因为ip地址不容易记忆，一般会使用URL域名（如<a href=\"http://www.baidu.com)作为网址.dns解析就是将域名翻译成ip地址的过程./\">www.baidu.com）作为网址。DNS解析就是将域名翻译成IP地址的过程。</a></p>\n<p>具体过程：</p>\n<ul>\n<li><p>1）浏览器缓存：浏览器会按照一定的频率 缓存DNS记录</p>\n</li>\n<li><p>2）操作系统缓存：如果浏览器缓存中找不到需要的DNS记录，就会取操作系统中找</p>\n</li>\n<li><p>3）路由缓存：路由器也有DNS缓存</p>\n</li>\n<li><p>4）ISP的DNS服务器：ISP有专门的DNS服务器应对DNS查询请求</p>\n</li>\n<li><p>5）根服务器：ISP的DNS服务器找不到之后，就要向根服务器发出请求，进行递归查询</p>\n</li>\n</ul>\n<h2 id=\"浏览器与服务器交互过程\"><a href=\"#浏览器与服务器交互过程\" class=\"headerlink\" title=\"浏览器与服务器交互过程\"></a>浏览器与服务器交互过程</h2><ul>\n<li><p>1）首先浏览器利用tcp协议通过三次握手与服务器建立连接<br>　　http请求包括header和body。header中包括请求的方式（get和post）、请求的协议 （http、https、ftp）、请求的地址ip、缓存cookie。body中有请求的内容。</p>\n<blockquote>\n<p>tcp将http长报文划分为短报文，通过三次握手与服务端建立连接，进行可靠传输。<br>三次握手的步骤（抽象派）<br>客户端：hello，你是server么？<br>服务端：hello，我是server，你是client么<br>客户端：yes，我是client  </p>\n</blockquote>\n</li>\n<li><p>2）浏览器根据解析到的IP地址和端口号发起http的get请求.</p>\n</li>\n<li><p>3）服务器接收到http请求之后，开始搜索html页面，并使用http返回响应报文</p>\n</li>\n<li><p>4）若状态码为200显示响应成功，浏览器接收到返回的html页面之后，开始进行页面的渲染</p>\n</li>\n</ul>\n<h2 id=\"浏览器页面渲染过程\"><a href=\"#浏览器页面渲染过程\" class=\"headerlink\" title=\"浏览器页面渲染过程\"></a>浏览器页面渲染过程</h2><ul>\n<li><p>1）浏览器根据深度遍历的方式把html节点遍历成dom 树</p>\n</li>\n<li><p>2）将css解析成CSS DOM树</p>\n</li>\n<li><p>3）将dom树和CSS DOM树构造成render树</p>\n</li>\n<li><p>4）JS根据得到的render树 计算所有节点在屏幕中的位置，进行布局（回流）</p>\n</li>\n<li><p>5）遍历render树并调用硬件API绘制所有节点（重绘）</p>\n</li>\n</ul>\n<h2 id=\"浏览器与服务器断开连接\"><a href=\"#浏览器与服务器断开连接\" class=\"headerlink\" title=\"浏览器与服务器断开连接\"></a>浏览器与服务器断开连接</h2><p>断开连接时，需要进行四次挥手（因为是全双工的，所以需要四次挥手）。</p>\n<p>四次挥手的步骤（抽象派）</p>\n<ul>\n<li>主动方：我已经关闭了向你那边的主动通道了，只能被动接收了</li>\n<li>被动方：收到通道关闭的信息</li>\n<li>被动方：那我也告诉你，我这边向你的主动通道也关闭了</li>\n<li>主动方：最后收到数据，之后双方无法通信</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>从输入URL到渲染出整个页面的过程包括以下部分：</p>\n<ul>\n<li><p>1、DNS解析URL的过程</p>\n</li>\n<li><p>2、浏览器发送请求与服务器交互的过程（3次握手）</p>\n</li>\n<li><p>3、浏览器对接收到的html页面渲染的过程</p>\n</li>\n<li><p>4、浏览器和服务器断开连接（4次握手）</p>\n</li>\n</ul>","more":"<h2 id=\"DNS解析URL的过程\"><a href=\"#DNS解析URL的过程\" class=\"headerlink\" title=\"DNS解析URL的过程\"></a>DNS解析URL的过程</h2><p>DNS解析的过程就是寻找哪个服务器上有请求的资源。因为ip地址不容易记忆，一般会使用URL域名（如<a href=\"http://www.baidu.com)作为网址.dns解析就是将域名翻译成ip地址的过程./\">www.baidu.com）作为网址。DNS解析就是将域名翻译成IP地址的过程。</a></p>\n<p>具体过程：</p>\n<ul>\n<li><p>1）浏览器缓存：浏览器会按照一定的频率 缓存DNS记录</p>\n</li>\n<li><p>2）操作系统缓存：如果浏览器缓存中找不到需要的DNS记录，就会取操作系统中找</p>\n</li>\n<li><p>3）路由缓存：路由器也有DNS缓存</p>\n</li>\n<li><p>4）ISP的DNS服务器：ISP有专门的DNS服务器应对DNS查询请求</p>\n</li>\n<li><p>5）根服务器：ISP的DNS服务器找不到之后，就要向根服务器发出请求，进行递归查询</p>\n</li>\n</ul>\n<h2 id=\"浏览器与服务器交互过程\"><a href=\"#浏览器与服务器交互过程\" class=\"headerlink\" title=\"浏览器与服务器交互过程\"></a>浏览器与服务器交互过程</h2><ul>\n<li><p>1）首先浏览器利用tcp协议通过三次握手与服务器建立连接<br>　　http请求包括header和body。header中包括请求的方式（get和post）、请求的协议 （http、https、ftp）、请求的地址ip、缓存cookie。body中有请求的内容。</p>\n<blockquote>\n<p>tcp将http长报文划分为短报文，通过三次握手与服务端建立连接，进行可靠传输。<br>三次握手的步骤（抽象派）<br>客户端：hello，你是server么？<br>服务端：hello，我是server，你是client么<br>客户端：yes，我是client  </p>\n</blockquote>\n</li>\n<li><p>2）浏览器根据解析到的IP地址和端口号发起http的get请求.</p>\n</li>\n<li><p>3）服务器接收到http请求之后，开始搜索html页面，并使用http返回响应报文</p>\n</li>\n<li><p>4）若状态码为200显示响应成功，浏览器接收到返回的html页面之后，开始进行页面的渲染</p>\n</li>\n</ul>\n<h2 id=\"浏览器页面渲染过程\"><a href=\"#浏览器页面渲染过程\" class=\"headerlink\" title=\"浏览器页面渲染过程\"></a>浏览器页面渲染过程</h2><ul>\n<li><p>1）浏览器根据深度遍历的方式把html节点遍历成dom 树</p>\n</li>\n<li><p>2）将css解析成CSS DOM树</p>\n</li>\n<li><p>3）将dom树和CSS DOM树构造成render树</p>\n</li>\n<li><p>4）JS根据得到的render树 计算所有节点在屏幕中的位置，进行布局（回流）</p>\n</li>\n<li><p>5）遍历render树并调用硬件API绘制所有节点（重绘）</p>\n</li>\n</ul>\n<h2 id=\"浏览器与服务器断开连接\"><a href=\"#浏览器与服务器断开连接\" class=\"headerlink\" title=\"浏览器与服务器断开连接\"></a>浏览器与服务器断开连接</h2><p>断开连接时，需要进行四次挥手（因为是全双工的，所以需要四次挥手）。</p>\n<p>四次挥手的步骤（抽象派）</p>\n<ul>\n<li>主动方：我已经关闭了向你那边的主动通道了，只能被动接收了</li>\n<li>被动方：收到通道关闭的信息</li>\n<li>被动方：那我也告诉你，我这边向你的主动通道也关闭了</li>\n<li>主动方：最后收到数据，之后双方无法通信</li>\n</ul>"},{"layout":"post","title":"js事件运行机制event loop","excerpt":"我们都知道javascript是单线程运行的，那么javascript在执行一些异步操作时，是如何调度分配任务的","comments":1,"date":"2020-12-20T03:06:21.000Z","_content":"\n## 为什么会有event loop\njs是一种单线程运行机制，可以预见的是，由于浏览器运行机制的特殊性，js以后将一直会是一种单线程语言，因为有dom操作的时候，如果可以多线程操作，就会让浏览器渲染变得混乱。  \n单线程运行，意味着在同一时间，只能执行一个进程，对于某些会阻塞的服务，像http请求、I/O设备，js会挂起这些任务，让他们进入计划任务里面，等待所有主进程的任务运行完毕后，再执行被挂起的任务。\n\n## 执行过程\n任务队列存在多个，同一个任务队列中，按队列顺序被主线程取走；不同的任务队列中，存在着优先级，优先级高的现获取  \n>step1:主线程读取JS代码，此时为同步环境，形成相应的堆和执行栈；  \n>step2:主线程遇到异步任务，指给对应的异步进程进行处理（WEB API）；  \n>step3:异步进程处理完毕（Ajax返回，DOM事件处理，Timer定时器等），将对应的异步任务推入异步队列中；  \n>step4:主线程查询任务队列，执行microtask(宏任务) queue，将其按序执行，全部执行完毕；  \n>step5:主线程查询任务队列，执行macrotask(微任务) queue，将其按序执行，全部执行完毕；  \n>step6:重复step4，5；  \n\n### 宏任务\n>setTimeout、setInterval和setImmediate  \n>I/O操作、UI渲染、script脚本执行  \n>MessageChannel(Vue的nexttick有使用)  \n### 微任务\n>promise  \n>MutationObserver  \n>process.nextTick (Node)  \n\n## 实例\n事件循环的顺序，决定js代码的执行顺序。进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。听起来有点绕，我们用一段代码说明：\n```\nsetTimeout(function() {\n    console.log('setTimeout');\n})\n\nnew Promise(function(resolve) {\n    console.log('promise');\n}).then(function() {\n    console.log('then');\n})\n\nconsole.log('console');\n\n```\n* 这段代码作为宏任务，进入主线程。  \n* 先遇到setTimeout，那么将其回调函数注册后分发到宏任务Event Queue。(注册过程与上同，下文不再描述)  \n* 接下来遇到了Promise，new Promise立即执行，then函数分发到微任务Event Queue。  \n* 遇到console.log()，立即执行。  \n* 好啦，整体代码script作为第一个宏任务执行结束，看看有哪些微任务？我们发现了then在微任务Event Queue里面，执行。  \n* ok，第一轮事件循环结束了，我们开始第二轮循环，当然要从宏任务Event Queue开始。我们发现了宏任务Event Queue中setTimeout对应的回调函数，立即执行。  \n* 结束。\n\n> 注意promise的异步是指`then`和`catch`,运行在`promise`中的代码会被当作同步任务\n\n## 参考\n[这一次，彻底弄懂 JavaScript 执行机制\n](https://juejin.cn/post/6844903512845860872)  \n[js面试——eventLoop\n](https://blog.csdn.net/qq_26443535/article/details/106785350)\n[面试题之Event Loop终极篇](https://segmentfault.com/a/1190000019494012)","source":"_posts/2020-12-20-js-event-loop.md","raw":"---\nlayout: post\ntitle: js事件运行机制event loop\nexcerpt: '我们都知道javascript是单线程运行的，那么javascript在执行一些异步操作时，是如何调度分配任务的'\ntags: [javascript]\ncomments: true\ndate: 2020-12-20 11:06:21\n---\n\n## 为什么会有event loop\njs是一种单线程运行机制，可以预见的是，由于浏览器运行机制的特殊性，js以后将一直会是一种单线程语言，因为有dom操作的时候，如果可以多线程操作，就会让浏览器渲染变得混乱。  \n单线程运行，意味着在同一时间，只能执行一个进程，对于某些会阻塞的服务，像http请求、I/O设备，js会挂起这些任务，让他们进入计划任务里面，等待所有主进程的任务运行完毕后，再执行被挂起的任务。\n\n## 执行过程\n任务队列存在多个，同一个任务队列中，按队列顺序被主线程取走；不同的任务队列中，存在着优先级，优先级高的现获取  \n>step1:主线程读取JS代码，此时为同步环境，形成相应的堆和执行栈；  \n>step2:主线程遇到异步任务，指给对应的异步进程进行处理（WEB API）；  \n>step3:异步进程处理完毕（Ajax返回，DOM事件处理，Timer定时器等），将对应的异步任务推入异步队列中；  \n>step4:主线程查询任务队列，执行microtask(宏任务) queue，将其按序执行，全部执行完毕；  \n>step5:主线程查询任务队列，执行macrotask(微任务) queue，将其按序执行，全部执行完毕；  \n>step6:重复step4，5；  \n\n### 宏任务\n>setTimeout、setInterval和setImmediate  \n>I/O操作、UI渲染、script脚本执行  \n>MessageChannel(Vue的nexttick有使用)  \n### 微任务\n>promise  \n>MutationObserver  \n>process.nextTick (Node)  \n\n## 实例\n事件循环的顺序，决定js代码的执行顺序。进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。听起来有点绕，我们用一段代码说明：\n```\nsetTimeout(function() {\n    console.log('setTimeout');\n})\n\nnew Promise(function(resolve) {\n    console.log('promise');\n}).then(function() {\n    console.log('then');\n})\n\nconsole.log('console');\n\n```\n* 这段代码作为宏任务，进入主线程。  \n* 先遇到setTimeout，那么将其回调函数注册后分发到宏任务Event Queue。(注册过程与上同，下文不再描述)  \n* 接下来遇到了Promise，new Promise立即执行，then函数分发到微任务Event Queue。  \n* 遇到console.log()，立即执行。  \n* 好啦，整体代码script作为第一个宏任务执行结束，看看有哪些微任务？我们发现了then在微任务Event Queue里面，执行。  \n* ok，第一轮事件循环结束了，我们开始第二轮循环，当然要从宏任务Event Queue开始。我们发现了宏任务Event Queue中setTimeout对应的回调函数，立即执行。  \n* 结束。\n\n> 注意promise的异步是指`then`和`catch`,运行在`promise`中的代码会被当作同步任务\n\n## 参考\n[这一次，彻底弄懂 JavaScript 执行机制\n](https://juejin.cn/post/6844903512845860872)  \n[js面试——eventLoop\n](https://blog.csdn.net/qq_26443535/article/details/106785350)\n[面试题之Event Loop终极篇](https://segmentfault.com/a/1190000019494012)","slug":"2020-12-20-js-event-loop","published":1,"updated":"2021-02-03T10:33:34.769Z","photos":[],"link":"","_id":"ckoe9igw6002c8cpn12tohsga","content":"<h2 id=\"为什么会有event-loop\"><a href=\"#为什么会有event-loop\" class=\"headerlink\" title=\"为什么会有event loop\"></a>为什么会有event loop</h2><p>js是一种单线程运行机制，可以预见的是，由于浏览器运行机制的特殊性，js以后将一直会是一种单线程语言，因为有dom操作的时候，如果可以多线程操作，就会让浏览器渲染变得混乱。<br>单线程运行，意味着在同一时间，只能执行一个进程，对于某些会阻塞的服务，像http请求、I/O设备，js会挂起这些任务，让他们进入计划任务里面，等待所有主进程的任务运行完毕后，再执行被挂起的任务。</p>\n<h2 id=\"执行过程\"><a href=\"#执行过程\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h2><p>任务队列存在多个，同一个任务队列中，按队列顺序被主线程取走；不同的任务队列中，存在着优先级，优先级高的现获取  </p>\n<blockquote>\n<p>step1:主线程读取JS代码，此时为同步环境，形成相应的堆和执行栈；<br>step2:主线程遇到异步任务，指给对应的异步进程进行处理（WEB API）；<br>step3:异步进程处理完毕（Ajax返回，DOM事件处理，Timer定时器等），将对应的异步任务推入异步队列中；<br>step4:主线程查询任务队列，执行microtask(宏任务) queue，将其按序执行，全部执行完毕；<br>step5:主线程查询任务队列，执行macrotask(微任务) queue，将其按序执行，全部执行完毕；<br>step6:重复step4，5；  </p>\n</blockquote>\n<h3 id=\"宏任务\"><a href=\"#宏任务\" class=\"headerlink\" title=\"宏任务\"></a>宏任务</h3><blockquote>\n<p>setTimeout、setInterval和setImmediate<br>I/O操作、UI渲染、script脚本执行<br>MessageChannel(Vue的nexttick有使用)  </p>\n</blockquote>\n<h3 id=\"微任务\"><a href=\"#微任务\" class=\"headerlink\" title=\"微任务\"></a>微任务</h3><blockquote>\n<p>promise<br>MutationObserver<br>process.nextTick (Node)  </p>\n</blockquote>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>事件循环的顺序，决定js代码的执行顺序。进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。听起来有点绕，我们用一段代码说明：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;setTimeout&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;promise&#x27;</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;then&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;console&#x27;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>这段代码作为宏任务，进入主线程。  </li>\n<li>先遇到setTimeout，那么将其回调函数注册后分发到宏任务Event Queue。(注册过程与上同，下文不再描述)  </li>\n<li>接下来遇到了Promise，new Promise立即执行，then函数分发到微任务Event Queue。  </li>\n<li>遇到console.log()，立即执行。  </li>\n<li>好啦，整体代码script作为第一个宏任务执行结束，看看有哪些微任务？我们发现了then在微任务Event Queue里面，执行。  </li>\n<li>ok，第一轮事件循环结束了，我们开始第二轮循环，当然要从宏任务Event Queue开始。我们发现了宏任务Event Queue中setTimeout对应的回调函数，立即执行。  </li>\n<li>结束。</li>\n</ul>\n<blockquote>\n<p>注意promise的异步是指<code>then</code>和<code>catch</code>,运行在<code>promise</code>中的代码会被当作同步任务</p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://juejin.cn/post/6844903512845860872\">这一次，彻底弄懂 JavaScript 执行机制\n</a><br><a href=\"https://blog.csdn.net/qq_26443535/article/details/106785350\">js面试——eventLoop\n</a><br><a href=\"https://segmentfault.com/a/1190000019494012\">面试题之Event Loop终极篇</a></p>\n","site":{"data":{}},"more":"<h2 id=\"为什么会有event-loop\"><a href=\"#为什么会有event-loop\" class=\"headerlink\" title=\"为什么会有event loop\"></a>为什么会有event loop</h2><p>js是一种单线程运行机制，可以预见的是，由于浏览器运行机制的特殊性，js以后将一直会是一种单线程语言，因为有dom操作的时候，如果可以多线程操作，就会让浏览器渲染变得混乱。<br>单线程运行，意味着在同一时间，只能执行一个进程，对于某些会阻塞的服务，像http请求、I/O设备，js会挂起这些任务，让他们进入计划任务里面，等待所有主进程的任务运行完毕后，再执行被挂起的任务。</p>\n<h2 id=\"执行过程\"><a href=\"#执行过程\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h2><p>任务队列存在多个，同一个任务队列中，按队列顺序被主线程取走；不同的任务队列中，存在着优先级，优先级高的现获取  </p>\n<blockquote>\n<p>step1:主线程读取JS代码，此时为同步环境，形成相应的堆和执行栈；<br>step2:主线程遇到异步任务，指给对应的异步进程进行处理（WEB API）；<br>step3:异步进程处理完毕（Ajax返回，DOM事件处理，Timer定时器等），将对应的异步任务推入异步队列中；<br>step4:主线程查询任务队列，执行microtask(宏任务) queue，将其按序执行，全部执行完毕；<br>step5:主线程查询任务队列，执行macrotask(微任务) queue，将其按序执行，全部执行完毕；<br>step6:重复step4，5；  </p>\n</blockquote>\n<h3 id=\"宏任务\"><a href=\"#宏任务\" class=\"headerlink\" title=\"宏任务\"></a>宏任务</h3><blockquote>\n<p>setTimeout、setInterval和setImmediate<br>I/O操作、UI渲染、script脚本执行<br>MessageChannel(Vue的nexttick有使用)  </p>\n</blockquote>\n<h3 id=\"微任务\"><a href=\"#微任务\" class=\"headerlink\" title=\"微任务\"></a>微任务</h3><blockquote>\n<p>promise<br>MutationObserver<br>process.nextTick (Node)  </p>\n</blockquote>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>事件循环的顺序，决定js代码的执行顺序。进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。听起来有点绕，我们用一段代码说明：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;setTimeout&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;promise&#x27;</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;then&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;console&#x27;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>这段代码作为宏任务，进入主线程。  </li>\n<li>先遇到setTimeout，那么将其回调函数注册后分发到宏任务Event Queue。(注册过程与上同，下文不再描述)  </li>\n<li>接下来遇到了Promise，new Promise立即执行，then函数分发到微任务Event Queue。  </li>\n<li>遇到console.log()，立即执行。  </li>\n<li>好啦，整体代码script作为第一个宏任务执行结束，看看有哪些微任务？我们发现了then在微任务Event Queue里面，执行。  </li>\n<li>ok，第一轮事件循环结束了，我们开始第二轮循环，当然要从宏任务Event Queue开始。我们发现了宏任务Event Queue中setTimeout对应的回调函数，立即执行。  </li>\n<li>结束。</li>\n</ul>\n<blockquote>\n<p>注意promise的异步是指<code>then</code>和<code>catch</code>,运行在<code>promise</code>中的代码会被当作同步任务</p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://juejin.cn/post/6844903512845860872\">这一次，彻底弄懂 JavaScript 执行机制\n</a><br><a href=\"https://blog.csdn.net/qq_26443535/article/details/106785350\">js面试——eventLoop\n</a><br><a href=\"https://segmentfault.com/a/1190000019494012\">面试题之Event Loop终极篇</a></p>\n"},{"layout":"post","title":"js数据类型判断","comments":1,"date":"2021-01-01T03:19:20.000Z","_content":"\njavascrip中有几种判断数据类型的办法，不同的场景使用不同的方法`typeof`、`Object.prototype.toString.call`、`instance of`\n\n<!-- more -->\n\n## typeof\ntypeof 是一个一元运算，放在一个运算数之前，运算数可以是任意类型。\n返回值是一个字符串，该字符串说明运算数的类型。\ntypeof 一般只能返回如下几个结果：\n`number,boolean,string,function,object,undefined`。一般可以使用 `typeof` 来获取一个变量是否存在，如 \n```\nif(typeof a!=\"undefined\"){alert(\"ok\")}\n```\n而不要去使用 `if(a)` 因为如果 `a` 不存在（未声明）则会出错，对于 `Array`,`Null` 等特殊对象使用 `typeof` 一律返回 `object`，这正是 `typeof` 的局限性。\n\n## Object.prototype.toString.call\n### 1.判断基本类型：\n```\nObject.prototype.toString.call(null);//\"[object Null]\"\nObject.prototype.toString.call(undefined);//\"[object Undefined]\"\nObject.prototype.toString.call(\"abc\");//\"[object String]\"\nObject.prototype.toString.call(123);//\"[object Number]\"\nObject.prototype.toString.call(true);//\"[object Boolean]\"\n```\n### 2.判断原生引用类型：\n```\n函数类型\nFunction fn(){console.log(\"test\");}\nObject.prototype.toString.call(fn);//\"[object Function]\"\n日期类型\nvar date = new Date();\nObject.prototype.toString.call(date);//\"[object Date]\"\n数组类型\nvar arr = [1,2,3];\nObject.prototype.toString.call(arr);//\"[object Array]\"\n正则表达式\nvar reg = /[hbc]at/gi;\nObject.prototype.toString.call(arr);//\"[object RegExp]\"\n自定义类型\nfunction Person(name, age) {\n    this.name = name;\n    this.age = age;\n}\nvar person = new Person(\"Rose\", 18);\nObject.prototype.toString.call(person); //\"[object Object]\"\n```\n\n## instance of\n\n`instanceof` 用于判断一个变量是否某个对象的实例，如 \n```\nvar a=new Array();\nalert(a instanceof Array);\n```\n 会返回 `true，同时` `alert(a instanceof Object)` 也会返回 `true`;这是因为 `Array` 是 `object` 的子类。  \n 但是当我们用变量直接赋值时，它不是由构造函数产生的，`instanceof`为`false`\n```\nvar a = '123'\nundefined\na instanceof Object\nfalse\n\nvar a = new String('123')\nundefined\na instanceof Object\ntrue\n```","source":"_posts/2021-01-01-js-data-type-judge.md","raw":"---\nlayout: post\ntitle: js数据类型判断\ntags: [javascript]\ncomments: true\ndate: 2021-01-01 11:19:20\n---\n\njavascrip中有几种判断数据类型的办法，不同的场景使用不同的方法`typeof`、`Object.prototype.toString.call`、`instance of`\n\n<!-- more -->\n\n## typeof\ntypeof 是一个一元运算，放在一个运算数之前，运算数可以是任意类型。\n返回值是一个字符串，该字符串说明运算数的类型。\ntypeof 一般只能返回如下几个结果：\n`number,boolean,string,function,object,undefined`。一般可以使用 `typeof` 来获取一个变量是否存在，如 \n```\nif(typeof a!=\"undefined\"){alert(\"ok\")}\n```\n而不要去使用 `if(a)` 因为如果 `a` 不存在（未声明）则会出错，对于 `Array`,`Null` 等特殊对象使用 `typeof` 一律返回 `object`，这正是 `typeof` 的局限性。\n\n## Object.prototype.toString.call\n### 1.判断基本类型：\n```\nObject.prototype.toString.call(null);//\"[object Null]\"\nObject.prototype.toString.call(undefined);//\"[object Undefined]\"\nObject.prototype.toString.call(\"abc\");//\"[object String]\"\nObject.prototype.toString.call(123);//\"[object Number]\"\nObject.prototype.toString.call(true);//\"[object Boolean]\"\n```\n### 2.判断原生引用类型：\n```\n函数类型\nFunction fn(){console.log(\"test\");}\nObject.prototype.toString.call(fn);//\"[object Function]\"\n日期类型\nvar date = new Date();\nObject.prototype.toString.call(date);//\"[object Date]\"\n数组类型\nvar arr = [1,2,3];\nObject.prototype.toString.call(arr);//\"[object Array]\"\n正则表达式\nvar reg = /[hbc]at/gi;\nObject.prototype.toString.call(arr);//\"[object RegExp]\"\n自定义类型\nfunction Person(name, age) {\n    this.name = name;\n    this.age = age;\n}\nvar person = new Person(\"Rose\", 18);\nObject.prototype.toString.call(person); //\"[object Object]\"\n```\n\n## instance of\n\n`instanceof` 用于判断一个变量是否某个对象的实例，如 \n```\nvar a=new Array();\nalert(a instanceof Array);\n```\n 会返回 `true，同时` `alert(a instanceof Object)` 也会返回 `true`;这是因为 `Array` 是 `object` 的子类。  \n 但是当我们用变量直接赋值时，它不是由构造函数产生的，`instanceof`为`false`\n```\nvar a = '123'\nundefined\na instanceof Object\nfalse\n\nvar a = new String('123')\nundefined\na instanceof Object\ntrue\n```","slug":"2021-01-01-js-data-type-judge","published":1,"updated":"2021-02-03T10:33:34.771Z","photos":[],"link":"","_id":"ckoe9igw7002e8cpnfnmk76ie","content":"<p>javascrip中有几种判断数据类型的办法，不同的场景使用不同的方法<code>typeof</code>、<code>Object.prototype.toString.call</code>、<code>instance of</code></p>\n<a id=\"more\"></a>\n\n<h2 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h2><p>typeof 是一个一元运算，放在一个运算数之前，运算数可以是任意类型。<br>返回值是一个字符串，该字符串说明运算数的类型。<br>typeof 一般只能返回如下几个结果：<br><code>number,boolean,string,function,object,undefined</code>。一般可以使用 <code>typeof</code> 来获取一个变量是否存在，如 </p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">if</span><span class=\"params\">(typeof a!=<span class=\"string\">&quot;undefined&quot;</span>)</span></span>&#123;alert(<span class=\"string\">&quot;ok&quot;</span>)&#125;</span><br></pre></td></tr></table></figure>\n<p>而不要去使用 <code>if(a)</code> 因为如果 <code>a</code> 不存在（未声明）则会出错，对于 <code>Array</code>,<code>Null</code> 等特殊对象使用 <code>typeof</code> 一律返回 <code>object</code>，这正是 <code>typeof</code> 的局限性。</p>\n<h2 id=\"Object-prototype-toString-call\"><a href=\"#Object-prototype-toString-call\" class=\"headerlink\" title=\"Object.prototype.toString.call\"></a>Object.prototype.toString.call</h2><h3 id=\"1-判断基本类型：\"><a href=\"#1-判断基本类型：\" class=\"headerlink\" title=\"1.判断基本类型：\"></a>1.判断基本类型：</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Object</span>.prototype.toString.<span class=\"keyword\">call</span>(<span class=\"keyword\">null</span>);//&quot;[object Null]&quot;</span><br><span class=\"line\"><span class=\"keyword\">Object</span>.prototype.toString.<span class=\"keyword\">call</span>(undefined);//&quot;[object Undefined]&quot;</span><br><span class=\"line\"><span class=\"keyword\">Object</span>.prototype.toString.<span class=\"keyword\">call</span>(&quot;abc&quot;);//&quot;[object String]&quot;</span><br><span class=\"line\"><span class=\"keyword\">Object</span>.prototype.toString.<span class=\"keyword\">call</span>(<span class=\"number\">123</span>);//&quot;[object Number]&quot;</span><br><span class=\"line\"><span class=\"keyword\">Object</span>.prototype.toString.<span class=\"keyword\">call</span>(<span class=\"keyword\">true</span>);//&quot;[object Boolean]&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-判断原生引用类型：\"><a href=\"#2-判断原生引用类型：\" class=\"headerlink\" title=\"2.判断原生引用类型：\"></a>2.判断原生引用类型：</h3><figure class=\"highlight qml\"><table><tr><td class=\"code\"><pre><span class=\"line\">函数类型</span><br><span class=\"line\"><span class=\"built_in\">Function</span> fn()&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;test&quot;</span>);&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(fn);<span class=\"comment\">//&quot;[object Function]&quot;</span></span><br><span class=\"line\">日期类型</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">date</span> = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"built_in\">date</span>);<span class=\"comment\">//&quot;[object Date]&quot;</span></span><br><span class=\"line\">数组类型</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(arr);<span class=\"comment\">//&quot;[object Array]&quot;</span></span><br><span class=\"line\">正则表达式</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[hbc]at/gi</span>;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(arr);<span class=\"comment\">//&quot;[object RegExp]&quot;</span></span><br><span class=\"line\">自定义类型</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;Rose&quot;</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(person); <span class=\"comment\">//&quot;[object Object]&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"instance-of\"><a href=\"#instance-of\" class=\"headerlink\" title=\"instance of\"></a>instance of</h2><p><code>instanceof</code> 用于判断一个变量是否某个对象的实例，如 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">alert(a <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>);</span><br></pre></td></tr></table></figure>\n<p> 会返回 <code>true，同时</code> <code>alert(a instanceof Object)</code> 也会返回 <code>true</code>;这是因为 <code>Array</code> 是 <code>object</code> 的子类。<br> 但是当我们用变量直接赋值时，它不是由构造函数产生的，<code>instanceof</code>为<code>false</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;123&#x27;</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">a <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&#x27;123&#x27;</span>)</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">a <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>javascrip中有几种判断数据类型的办法，不同的场景使用不同的方法<code>typeof</code>、<code>Object.prototype.toString.call</code>、<code>instance of</code></p>","more":"<h2 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h2><p>typeof 是一个一元运算，放在一个运算数之前，运算数可以是任意类型。<br>返回值是一个字符串，该字符串说明运算数的类型。<br>typeof 一般只能返回如下几个结果：<br><code>number,boolean,string,function,object,undefined</code>。一般可以使用 <code>typeof</code> 来获取一个变量是否存在，如 </p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">if</span><span class=\"params\">(typeof a!=<span class=\"string\">&quot;undefined&quot;</span>)</span></span>&#123;alert(<span class=\"string\">&quot;ok&quot;</span>)&#125;</span><br></pre></td></tr></table></figure>\n<p>而不要去使用 <code>if(a)</code> 因为如果 <code>a</code> 不存在（未声明）则会出错，对于 <code>Array</code>,<code>Null</code> 等特殊对象使用 <code>typeof</code> 一律返回 <code>object</code>，这正是 <code>typeof</code> 的局限性。</p>\n<h2 id=\"Object-prototype-toString-call\"><a href=\"#Object-prototype-toString-call\" class=\"headerlink\" title=\"Object.prototype.toString.call\"></a>Object.prototype.toString.call</h2><h3 id=\"1-判断基本类型：\"><a href=\"#1-判断基本类型：\" class=\"headerlink\" title=\"1.判断基本类型：\"></a>1.判断基本类型：</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Object</span>.prototype.toString.<span class=\"keyword\">call</span>(<span class=\"keyword\">null</span>);//&quot;[object Null]&quot;</span><br><span class=\"line\"><span class=\"keyword\">Object</span>.prototype.toString.<span class=\"keyword\">call</span>(undefined);//&quot;[object Undefined]&quot;</span><br><span class=\"line\"><span class=\"keyword\">Object</span>.prototype.toString.<span class=\"keyword\">call</span>(&quot;abc&quot;);//&quot;[object String]&quot;</span><br><span class=\"line\"><span class=\"keyword\">Object</span>.prototype.toString.<span class=\"keyword\">call</span>(<span class=\"number\">123</span>);//&quot;[object Number]&quot;</span><br><span class=\"line\"><span class=\"keyword\">Object</span>.prototype.toString.<span class=\"keyword\">call</span>(<span class=\"keyword\">true</span>);//&quot;[object Boolean]&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-判断原生引用类型：\"><a href=\"#2-判断原生引用类型：\" class=\"headerlink\" title=\"2.判断原生引用类型：\"></a>2.判断原生引用类型：</h3><figure class=\"highlight qml\"><table><tr><td class=\"code\"><pre><span class=\"line\">函数类型</span><br><span class=\"line\"><span class=\"built_in\">Function</span> fn()&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;test&quot;</span>);&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(fn);<span class=\"comment\">//&quot;[object Function]&quot;</span></span><br><span class=\"line\">日期类型</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">date</span> = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"built_in\">date</span>);<span class=\"comment\">//&quot;[object Date]&quot;</span></span><br><span class=\"line\">数组类型</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(arr);<span class=\"comment\">//&quot;[object Array]&quot;</span></span><br><span class=\"line\">正则表达式</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[hbc]at/gi</span>;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(arr);<span class=\"comment\">//&quot;[object RegExp]&quot;</span></span><br><span class=\"line\">自定义类型</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;Rose&quot;</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(person); <span class=\"comment\">//&quot;[object Object]&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"instance-of\"><a href=\"#instance-of\" class=\"headerlink\" title=\"instance of\"></a>instance of</h2><p><code>instanceof</code> 用于判断一个变量是否某个对象的实例，如 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">alert(a <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>);</span><br></pre></td></tr></table></figure>\n<p> 会返回 <code>true，同时</code> <code>alert(a instanceof Object)</code> 也会返回 <code>true</code>;这是因为 <code>Array</code> 是 <code>object</code> 的子类。<br> 但是当我们用变量直接赋值时，它不是由构造函数产生的，<code>instanceof</code>为<code>false</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;123&#x27;</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">a <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&#x27;123&#x27;</span>)</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">a <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"css从右往左匹配规则","comments":1,"date":"2021-01-16T09:37:04.000Z","_content":"\n举个例子\n```\n.mod-nav h3 span {font-size: 16px;}\n```\n上述代码在css运行时，是从左往右匹配呢，还是从右往左匹配。\n\n<!-- more -->\n如果不知道匹配规则，可能的理解是从左向右匹配:先找到.mod-nav，然后逐级匹配h3、span，在这个过程中如果遍历到叶子节点都没有匹配就需要回溯，继续寻找下一个分支。\n\n**但事实上，CSS选择器的读取顺序是从右向左。**\n\n还是上面的选择器，它的读取顺序变成：先找到所有的span，沿着span的父元素查找h3，中途找到了符合匹配规则的节点就加入结果集；如果直到根元素html都没有匹配，则不再遍历这条路径，从下一个span开始重复这个过程（如果有多个最右节点为span的话）。\n\n## 为什么从右向左的规则要比从左向右的高效？\n\n```\n                    .mode-nav\n                  /           \\\n                header        div\n               /                \\\n               h3               ul\n               |               /   \\\n              span           li ... li   \n                              |      |\n                              a      a \n```\n\n假如DOM的结构如上图，匹配规则是`.mod-nav h3 span`。\n\n若从左向右的匹配，过程是：从`.mod-nav`开始，遍历子节点`header`和子节点`div`，然后各自向子节点遍历。在右侧`div`的分支中，最后遍历到叶子节点`a`，发现不符合规则，需要回溯到`ul`节点，再遍历下一个`li-a`，假如有1000个`li`，则这1000次的遍历与回溯会损失很多性能。\n\n再看看从右至左的匹配：先找到所有的最右节点`span`，对于每一个`span`，向上寻找节点`h3`，由h3再向上寻找class=mod-nav的节点，最后找到根元素`html`则结束这个分支的遍历。\n\n很明显，两种匹配规则的性能差别很大。之所以会差别很大，是因为从右向左的匹配在第一步就筛选掉了大量的不符合条件的最右节点（叶子节点）；而从左向右的匹配规则的性能都浪费在了失败的查找上面。\n\n当然这是比较明显情况，如果在叶子上存在多个不符合条件的`span`，从右向左的规则也会走一些弯路（这时就需要优化`CSS`选择器了）。但平均来说它还是更高效，因为大多时候，一个`DOM`树中，符合匹配条件的节点（如`.mod-nav h3 span`）远远远远少于不符合条件的节点。\n\n`jQuery`从1.3版本开始使用的`Sizzle`引擎，它按照了`CSS`选择器的匹配规则（从右至左）进行DOM元素的查找与匹配（当然其中做了很多优化），性能得到了很大的提升。\n\n## 参考\n[CSS选择器从右向左的匹配规则](https://www.cnblogs.com/zhaodongyu/p/3341080.html)\n\n","source":"_posts/2021-01-16-css-match-principle.md","raw":"---\nlayout: post\ntitle: css从右往左匹配规则\ntags: [css]\ncomments: true\ndate: 2021-01-16 17:37:04\n---\n\n举个例子\n```\n.mod-nav h3 span {font-size: 16px;}\n```\n上述代码在css运行时，是从左往右匹配呢，还是从右往左匹配。\n\n<!-- more -->\n如果不知道匹配规则，可能的理解是从左向右匹配:先找到.mod-nav，然后逐级匹配h3、span，在这个过程中如果遍历到叶子节点都没有匹配就需要回溯，继续寻找下一个分支。\n\n**但事实上，CSS选择器的读取顺序是从右向左。**\n\n还是上面的选择器，它的读取顺序变成：先找到所有的span，沿着span的父元素查找h3，中途找到了符合匹配规则的节点就加入结果集；如果直到根元素html都没有匹配，则不再遍历这条路径，从下一个span开始重复这个过程（如果有多个最右节点为span的话）。\n\n## 为什么从右向左的规则要比从左向右的高效？\n\n```\n                    .mode-nav\n                  /           \\\n                header        div\n               /                \\\n               h3               ul\n               |               /   \\\n              span           li ... li   \n                              |      |\n                              a      a \n```\n\n假如DOM的结构如上图，匹配规则是`.mod-nav h3 span`。\n\n若从左向右的匹配，过程是：从`.mod-nav`开始，遍历子节点`header`和子节点`div`，然后各自向子节点遍历。在右侧`div`的分支中，最后遍历到叶子节点`a`，发现不符合规则，需要回溯到`ul`节点，再遍历下一个`li-a`，假如有1000个`li`，则这1000次的遍历与回溯会损失很多性能。\n\n再看看从右至左的匹配：先找到所有的最右节点`span`，对于每一个`span`，向上寻找节点`h3`，由h3再向上寻找class=mod-nav的节点，最后找到根元素`html`则结束这个分支的遍历。\n\n很明显，两种匹配规则的性能差别很大。之所以会差别很大，是因为从右向左的匹配在第一步就筛选掉了大量的不符合条件的最右节点（叶子节点）；而从左向右的匹配规则的性能都浪费在了失败的查找上面。\n\n当然这是比较明显情况，如果在叶子上存在多个不符合条件的`span`，从右向左的规则也会走一些弯路（这时就需要优化`CSS`选择器了）。但平均来说它还是更高效，因为大多时候，一个`DOM`树中，符合匹配条件的节点（如`.mod-nav h3 span`）远远远远少于不符合条件的节点。\n\n`jQuery`从1.3版本开始使用的`Sizzle`引擎，它按照了`CSS`选择器的匹配规则（从右至左）进行DOM元素的查找与匹配（当然其中做了很多优化），性能得到了很大的提升。\n\n## 参考\n[CSS选择器从右向左的匹配规则](https://www.cnblogs.com/zhaodongyu/p/3341080.html)\n\n","slug":"2021-01-16-css-match-principle","published":1,"updated":"2021-02-03T10:33:34.773Z","photos":[],"link":"","_id":"ckoe9igw9002h8cpn657j0b7a","content":"<p>举个例子</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.mod-nav</span> <span class=\"selector-tag\">h3</span> <span class=\"selector-tag\">span</span> &#123;<span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码在css运行时，是从左往右匹配呢，还是从右往左匹配。</p>\n<a id=\"more\"></a>\n<p>如果不知道匹配规则，可能的理解是从左向右匹配:先找到.mod-nav，然后逐级匹配h3、span，在这个过程中如果遍历到叶子节点都没有匹配就需要回溯，继续寻找下一个分支。</p>\n<p><strong>但事实上，CSS选择器的读取顺序是从右向左。</strong></p>\n<p>还是上面的选择器，它的读取顺序变成：先找到所有的span，沿着span的父元素查找h3，中途找到了符合匹配规则的节点就加入结果集；如果直到根元素html都没有匹配，则不再遍历这条路径，从下一个span开始重复这个过程（如果有多个最右节点为span的话）。</p>\n<h2 id=\"为什么从右向左的规则要比从左向右的高效？\"><a href=\"#为什么从右向左的规则要比从左向右的高效？\" class=\"headerlink\" title=\"为什么从右向左的规则要比从左向右的高效？\"></a>为什么从右向左的规则要比从左向右的高效？</h2><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">.mode-nav</span></span><br><span class=\"line\">    <span class=\"meta\">/</span>           <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"attr\">header</span>        <span class=\"string\">div</span></span><br><span class=\"line\"> <span class=\"meta\">/</span>                <span class=\"string\">\\</span></span><br><span class=\"line\"> <span class=\"attr\">h3</span>               <span class=\"string\">ul</span></span><br><span class=\"line\"> <span class=\"meta\">|</span>               <span class=\"string\">/   \\</span></span><br><span class=\"line\"><span class=\"attr\">span</span>           <span class=\"string\">li ... li   </span></span><br><span class=\"line\">                <span class=\"meta\">|</span>      <span class=\"string\">|</span></span><br><span class=\"line\">                <span class=\"attr\">a</span>      <span class=\"string\">a </span></span><br></pre></td></tr></table></figure>\n\n<p>假如DOM的结构如上图，匹配规则是<code>.mod-nav h3 span</code>。</p>\n<p>若从左向右的匹配，过程是：从<code>.mod-nav</code>开始，遍历子节点<code>header</code>和子节点<code>div</code>，然后各自向子节点遍历。在右侧<code>div</code>的分支中，最后遍历到叶子节点<code>a</code>，发现不符合规则，需要回溯到<code>ul</code>节点，再遍历下一个<code>li-a</code>，假如有1000个<code>li</code>，则这1000次的遍历与回溯会损失很多性能。</p>\n<p>再看看从右至左的匹配：先找到所有的最右节点<code>span</code>，对于每一个<code>span</code>，向上寻找节点<code>h3</code>，由h3再向上寻找class=mod-nav的节点，最后找到根元素<code>html</code>则结束这个分支的遍历。</p>\n<p>很明显，两种匹配规则的性能差别很大。之所以会差别很大，是因为从右向左的匹配在第一步就筛选掉了大量的不符合条件的最右节点（叶子节点）；而从左向右的匹配规则的性能都浪费在了失败的查找上面。</p>\n<p>当然这是比较明显情况，如果在叶子上存在多个不符合条件的<code>span</code>，从右向左的规则也会走一些弯路（这时就需要优化<code>CSS</code>选择器了）。但平均来说它还是更高效，因为大多时候，一个<code>DOM</code>树中，符合匹配条件的节点（如<code>.mod-nav h3 span</code>）远远远远少于不符合条件的节点。</p>\n<p><code>jQuery</code>从1.3版本开始使用的<code>Sizzle</code>引擎，它按照了<code>CSS</code>选择器的匹配规则（从右至左）进行DOM元素的查找与匹配（当然其中做了很多优化），性能得到了很大的提升。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.cnblogs.com/zhaodongyu/p/3341080.html\">CSS选择器从右向左的匹配规则</a></p>\n","site":{"data":{}},"excerpt":"<p>举个例子</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.mod-nav</span> <span class=\"selector-tag\">h3</span> <span class=\"selector-tag\">span</span> &#123;<span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码在css运行时，是从左往右匹配呢，还是从右往左匹配。</p>","more":"<p>如果不知道匹配规则，可能的理解是从左向右匹配:先找到.mod-nav，然后逐级匹配h3、span，在这个过程中如果遍历到叶子节点都没有匹配就需要回溯，继续寻找下一个分支。</p>\n<p><strong>但事实上，CSS选择器的读取顺序是从右向左。</strong></p>\n<p>还是上面的选择器，它的读取顺序变成：先找到所有的span，沿着span的父元素查找h3，中途找到了符合匹配规则的节点就加入结果集；如果直到根元素html都没有匹配，则不再遍历这条路径，从下一个span开始重复这个过程（如果有多个最右节点为span的话）。</p>\n<h2 id=\"为什么从右向左的规则要比从左向右的高效？\"><a href=\"#为什么从右向左的规则要比从左向右的高效？\" class=\"headerlink\" title=\"为什么从右向左的规则要比从左向右的高效？\"></a>为什么从右向左的规则要比从左向右的高效？</h2><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">.mode-nav</span></span><br><span class=\"line\">    <span class=\"meta\">/</span>           <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"attr\">header</span>        <span class=\"string\">div</span></span><br><span class=\"line\"> <span class=\"meta\">/</span>                <span class=\"string\">\\</span></span><br><span class=\"line\"> <span class=\"attr\">h3</span>               <span class=\"string\">ul</span></span><br><span class=\"line\"> <span class=\"meta\">|</span>               <span class=\"string\">/   \\</span></span><br><span class=\"line\"><span class=\"attr\">span</span>           <span class=\"string\">li ... li   </span></span><br><span class=\"line\">                <span class=\"meta\">|</span>      <span class=\"string\">|</span></span><br><span class=\"line\">                <span class=\"attr\">a</span>      <span class=\"string\">a </span></span><br></pre></td></tr></table></figure>\n\n<p>假如DOM的结构如上图，匹配规则是<code>.mod-nav h3 span</code>。</p>\n<p>若从左向右的匹配，过程是：从<code>.mod-nav</code>开始，遍历子节点<code>header</code>和子节点<code>div</code>，然后各自向子节点遍历。在右侧<code>div</code>的分支中，最后遍历到叶子节点<code>a</code>，发现不符合规则，需要回溯到<code>ul</code>节点，再遍历下一个<code>li-a</code>，假如有1000个<code>li</code>，则这1000次的遍历与回溯会损失很多性能。</p>\n<p>再看看从右至左的匹配：先找到所有的最右节点<code>span</code>，对于每一个<code>span</code>，向上寻找节点<code>h3</code>，由h3再向上寻找class=mod-nav的节点，最后找到根元素<code>html</code>则结束这个分支的遍历。</p>\n<p>很明显，两种匹配规则的性能差别很大。之所以会差别很大，是因为从右向左的匹配在第一步就筛选掉了大量的不符合条件的最右节点（叶子节点）；而从左向右的匹配规则的性能都浪费在了失败的查找上面。</p>\n<p>当然这是比较明显情况，如果在叶子上存在多个不符合条件的<code>span</code>，从右向左的规则也会走一些弯路（这时就需要优化<code>CSS</code>选择器了）。但平均来说它还是更高效，因为大多时候，一个<code>DOM</code>树中，符合匹配条件的节点（如<code>.mod-nav h3 span</code>）远远远远少于不符合条件的节点。</p>\n<p><code>jQuery</code>从1.3版本开始使用的<code>Sizzle</code>引擎，它按照了<code>CSS</code>选择器的匹配规则（从右至左）进行DOM元素的查找与匹配（当然其中做了很多优化），性能得到了很大的提升。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.cnblogs.com/zhaodongyu/p/3341080.html\">CSS选择器从右向左的匹配规则</a></p>"},{"layout":"post","title":"js箭头函数和普通函数区别","comments":1,"date":"2021-01-16T09:51:10.000Z","_content":"\n普通函数在es5中就有了，箭头函数是es6中出现的函数形式，当然也可以继续用普通函数。\n\n箭头函数代码少，更利于阅读，但是在有些情况下，会表现出和普通函数不一样的特性\n<!-- more -->\n## 箭头函数\n### 语法\n* 开发时根据实际情况可以省略一些东西\n* 单条处理可以省略return和{大括号}\n* 单个参数可以省略(小括号)\n```\n> [1,2,3].map(item => item*2)\n< (3) [2, 4, 6]\n```\n\n### 不能作为构造函数\n箭头函数不能作为构造函数 不能new。会报错\n\n```\n> let A=() => {}\nundefined\n> let a = new A();\nVM423:1 Uncaught TypeError: A is not a constructor\n    at <anonymous>:1:9\n```\n\n### 不绑定arguments，但是可使用`…rest`参数\n普通函数使用`arguments`\n```\n> let A = function(a) {\n>   console.log(arguments)\n> }\nundefined\n\n> A(1,2,3,4)\nVM530:2 Arguments(4) [1, 2, 3, 4, callee: ƒ, Symbol(Symbol.iterator): ƒ]\nundefined\n```\n箭头函数使用，用了会报错。\n\n但是可以使用`...rest`函数\n```\n> let A = (...a) => console.log(a)\nundefined\n\n> A(1,2,3,4)\nVM680:1 (4) [1, 2, 3, 4]\nundefined\n```\n`arguments`的一般使用场景是：允许传入3个参数，中间一个参数是可选。如果只传1个参就是参数1用，传入2个参就是参数1和参数3用…\n```\nlet f = function(a, b, c) {\n    if (arguments.length == 2) {\n        c = b;\n        b = null;\n    }\n    console.log(a, b, c)\n}\n\nf(1)\nVM850:6 1 undefined undefined\n\nf(1,2)\nVM850:6 1 null 2\n\nf(1,2,3)\nVM850:6 1 2 3\n```\n\nrest参数使用效果：\nrest默认是[]，多余的传参会加入数组\n\n### `this`指向不一样\n* f1是箭头函数，this代表上层对象，若无自定义上层，则代表window。\n* f2是普通函数，this代表当前对象。\n\n箭头函数的call()或apply()函数，不会影响到this的代表对象：\n\n箭头函数没有原型属性：\n\nprototype是普通函数用于获取原型对象的。\n\n## 总结\n箭头函数内的this指向上层对象，bind()、call()、apply()均无法改变指向。\n\n普通函数内的this执行调用其函数的对象。\n\n## 参考\n[理解普通函数和箭头函数的区别点](https://blog.csdn.net/qq_25753979/article/details/90237123)","source":"_posts/2021-01-16-diff-from-arrow-function-and-function.md","raw":"---\nlayout: post\ntitle: js箭头函数和普通函数区别\ntags: [javascript]\ncomments: true\ndate: 2021-01-16 17:51:10\n---\n\n普通函数在es5中就有了，箭头函数是es6中出现的函数形式，当然也可以继续用普通函数。\n\n箭头函数代码少，更利于阅读，但是在有些情况下，会表现出和普通函数不一样的特性\n<!-- more -->\n## 箭头函数\n### 语法\n* 开发时根据实际情况可以省略一些东西\n* 单条处理可以省略return和{大括号}\n* 单个参数可以省略(小括号)\n```\n> [1,2,3].map(item => item*2)\n< (3) [2, 4, 6]\n```\n\n### 不能作为构造函数\n箭头函数不能作为构造函数 不能new。会报错\n\n```\n> let A=() => {}\nundefined\n> let a = new A();\nVM423:1 Uncaught TypeError: A is not a constructor\n    at <anonymous>:1:9\n```\n\n### 不绑定arguments，但是可使用`…rest`参数\n普通函数使用`arguments`\n```\n> let A = function(a) {\n>   console.log(arguments)\n> }\nundefined\n\n> A(1,2,3,4)\nVM530:2 Arguments(4) [1, 2, 3, 4, callee: ƒ, Symbol(Symbol.iterator): ƒ]\nundefined\n```\n箭头函数使用，用了会报错。\n\n但是可以使用`...rest`函数\n```\n> let A = (...a) => console.log(a)\nundefined\n\n> A(1,2,3,4)\nVM680:1 (4) [1, 2, 3, 4]\nundefined\n```\n`arguments`的一般使用场景是：允许传入3个参数，中间一个参数是可选。如果只传1个参就是参数1用，传入2个参就是参数1和参数3用…\n```\nlet f = function(a, b, c) {\n    if (arguments.length == 2) {\n        c = b;\n        b = null;\n    }\n    console.log(a, b, c)\n}\n\nf(1)\nVM850:6 1 undefined undefined\n\nf(1,2)\nVM850:6 1 null 2\n\nf(1,2,3)\nVM850:6 1 2 3\n```\n\nrest参数使用效果：\nrest默认是[]，多余的传参会加入数组\n\n### `this`指向不一样\n* f1是箭头函数，this代表上层对象，若无自定义上层，则代表window。\n* f2是普通函数，this代表当前对象。\n\n箭头函数的call()或apply()函数，不会影响到this的代表对象：\n\n箭头函数没有原型属性：\n\nprototype是普通函数用于获取原型对象的。\n\n## 总结\n箭头函数内的this指向上层对象，bind()、call()、apply()均无法改变指向。\n\n普通函数内的this执行调用其函数的对象。\n\n## 参考\n[理解普通函数和箭头函数的区别点](https://blog.csdn.net/qq_25753979/article/details/90237123)","slug":"2021-01-16-diff-from-arrow-function-and-function","published":1,"updated":"2021-02-03T10:33:34.773Z","photos":[],"link":"","_id":"ckoe9igwa002j8cpnf28lb2gi","content":"<p>普通函数在es5中就有了，箭头函数是es6中出现的函数形式，当然也可以继续用普通函数。</p>\n<p>箭头函数代码少，更利于阅读，但是在有些情况下，会表现出和普通函数不一样的特性</p>\n<a id=\"more\"></a>\n<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><ul>\n<li>开发时根据实际情况可以省略一些东西</li>\n<li>单条处理可以省略return和{大括号}</li>\n<li>单个参数可以省略(小括号)<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].map(item =&gt; item*<span class=\"number\">2</span>)</span><br><span class=\"line\">&lt; (<span class=\"number\">3</span>) [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>]</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"不能作为构造函数\"><a href=\"#不能作为构造函数\" class=\"headerlink\" title=\"不能作为构造函数\"></a>不能作为构造函数</h3><p>箭头函数不能作为构造函数 不能new。会报错</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; let A=() =&gt; <span class=\"comment\">&#123;&#125;</span></span><br><span class=\"line\">undefined</span><br><span class=\"line\">&gt; let a = new A();</span><br><span class=\"line\">VM423:<span class=\"number\">1</span> Uncaught TypeError: A <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> a <span class=\"function\"><span class=\"keyword\">constructor</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">at</span> &lt;<span class=\"title\">anonymous</span>&gt;:</span><span class=\"number\">1</span>:<span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"不绑定arguments，但是可使用…rest参数\"><a href=\"#不绑定arguments，但是可使用…rest参数\" class=\"headerlink\" title=\"不绑定arguments，但是可使用…rest参数\"></a>不绑定arguments，但是可使用<code>…rest</code>参数</h3><p>普通函数使用<code>arguments</code></p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; let A = function(a) &#123;</span><br><span class=\"line\">&gt;   console.log(arguments)</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">undefined</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; A(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\">VM530:<span class=\"number\">2</span> Arguments(<span class=\"number\">4</span>) [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span><br><span class=\"line\">undefined</span><br></pre></td></tr></table></figure>\n<p>箭头函数使用，用了会报错。</p>\n<p>但是可以使用<code>...rest</code>函数</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; let A = (...a) =&gt; console.log(a)</span><br><span class=\"line\">undefined</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; A(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\">VM680:<span class=\"number\">1</span> (<span class=\"number\">4</span>) [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">undefined</span><br></pre></td></tr></table></figure>\n<p><code>arguments</code>的一般使用场景是：允许传入3个参数，中间一个参数是可选。如果只传1个参就是参数1用，传入2个参就是参数1和参数3用…</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">let f = function(a, b, c) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arguments.length == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        c = b;</span><br><span class=\"line\">        b = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(a, b, c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f(<span class=\"number\">1</span>)</span><br><span class=\"line\">VM850:<span class=\"number\">6</span> <span class=\"number\">1</span> undefined undefined</span><br><span class=\"line\"></span><br><span class=\"line\">f(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">VM850:<span class=\"number\">6</span> <span class=\"number\">1</span> <span class=\"literal\">null</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">f(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">VM850:<span class=\"number\">6</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p>rest参数使用效果：<br>rest默认是[]，多余的传参会加入数组</p>\n<h3 id=\"this指向不一样\"><a href=\"#this指向不一样\" class=\"headerlink\" title=\"this指向不一样\"></a><code>this</code>指向不一样</h3><ul>\n<li>f1是箭头函数，this代表上层对象，若无自定义上层，则代表window。</li>\n<li>f2是普通函数，this代表当前对象。</li>\n</ul>\n<p>箭头函数的call()或apply()函数，不会影响到this的代表对象：</p>\n<p>箭头函数没有原型属性：</p>\n<p>prototype是普通函数用于获取原型对象的。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>箭头函数内的this指向上层对象，bind()、call()、apply()均无法改变指向。</p>\n<p>普通函数内的this执行调用其函数的对象。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://blog.csdn.net/qq_25753979/article/details/90237123\">理解普通函数和箭头函数的区别点</a></p>\n","site":{"data":{}},"excerpt":"<p>普通函数在es5中就有了，箭头函数是es6中出现的函数形式，当然也可以继续用普通函数。</p>\n<p>箭头函数代码少，更利于阅读，但是在有些情况下，会表现出和普通函数不一样的特性</p>","more":"<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><ul>\n<li>开发时根据实际情况可以省略一些东西</li>\n<li>单条处理可以省略return和{大括号}</li>\n<li>单个参数可以省略(小括号)<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].map(item =&gt; item*<span class=\"number\">2</span>)</span><br><span class=\"line\">&lt; (<span class=\"number\">3</span>) [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>]</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"不能作为构造函数\"><a href=\"#不能作为构造函数\" class=\"headerlink\" title=\"不能作为构造函数\"></a>不能作为构造函数</h3><p>箭头函数不能作为构造函数 不能new。会报错</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; let A=() =&gt; <span class=\"comment\">&#123;&#125;</span></span><br><span class=\"line\">undefined</span><br><span class=\"line\">&gt; let a = new A();</span><br><span class=\"line\">VM423:<span class=\"number\">1</span> Uncaught TypeError: A <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> a <span class=\"function\"><span class=\"keyword\">constructor</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">at</span> &lt;<span class=\"title\">anonymous</span>&gt;:</span><span class=\"number\">1</span>:<span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"不绑定arguments，但是可使用…rest参数\"><a href=\"#不绑定arguments，但是可使用…rest参数\" class=\"headerlink\" title=\"不绑定arguments，但是可使用…rest参数\"></a>不绑定arguments，但是可使用<code>…rest</code>参数</h3><p>普通函数使用<code>arguments</code></p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; let A = function(a) &#123;</span><br><span class=\"line\">&gt;   console.log(arguments)</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">undefined</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; A(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\">VM530:<span class=\"number\">2</span> Arguments(<span class=\"number\">4</span>) [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span><br><span class=\"line\">undefined</span><br></pre></td></tr></table></figure>\n<p>箭头函数使用，用了会报错。</p>\n<p>但是可以使用<code>...rest</code>函数</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; let A = (...a) =&gt; console.log(a)</span><br><span class=\"line\">undefined</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; A(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\">VM680:<span class=\"number\">1</span> (<span class=\"number\">4</span>) [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">undefined</span><br></pre></td></tr></table></figure>\n<p><code>arguments</code>的一般使用场景是：允许传入3个参数，中间一个参数是可选。如果只传1个参就是参数1用，传入2个参就是参数1和参数3用…</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">let f = function(a, b, c) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arguments.length == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        c = b;</span><br><span class=\"line\">        b = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(a, b, c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f(<span class=\"number\">1</span>)</span><br><span class=\"line\">VM850:<span class=\"number\">6</span> <span class=\"number\">1</span> undefined undefined</span><br><span class=\"line\"></span><br><span class=\"line\">f(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">VM850:<span class=\"number\">6</span> <span class=\"number\">1</span> <span class=\"literal\">null</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">f(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">VM850:<span class=\"number\">6</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p>rest参数使用效果：<br>rest默认是[]，多余的传参会加入数组</p>\n<h3 id=\"this指向不一样\"><a href=\"#this指向不一样\" class=\"headerlink\" title=\"this指向不一样\"></a><code>this</code>指向不一样</h3><ul>\n<li>f1是箭头函数，this代表上层对象，若无自定义上层，则代表window。</li>\n<li>f2是普通函数，this代表当前对象。</li>\n</ul>\n<p>箭头函数的call()或apply()函数，不会影响到this的代表对象：</p>\n<p>箭头函数没有原型属性：</p>\n<p>prototype是普通函数用于获取原型对象的。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>箭头函数内的this指向上层对象，bind()、call()、apply()均无法改变指向。</p>\n<p>普通函数内的this执行调用其函数的对象。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://blog.csdn.net/qq_25753979/article/details/90237123\">理解普通函数和箭头函数的区别点</a></p>"},{"layout":"post","title":"js fetch简介","comments":1,"date":"2021-02-03T10:34:45.000Z","_content":"\n`fetch`与`jquery`的ajax类似，提供一种访问http的方法，它是浏览器的全局方法，`目前IE不支持`\n\n<!-- more -->\n## 简介\n\n`Fetch API` 提供了一个 JavaScript 接口，用于访问和操纵 HTTP 管道的一些具体部分，例如请求和响应。它还提供了一个全局 `fetch()` 方法，该方法提供了一种简单，合理的方式来跨网络异步获取资源。\n\n这种功能以前是使用`XMLHttpRequest`实现的。Fetch 提供了一个更理想的替代方案，可以很容易地被其他技术使用，例如  Service Workers。Fetch 还提供了专门的逻辑空间来定义其他与 HTTP 相关的概念，例如 `CORS` 和 `HTTP` 的扩展。\n\n请注意，fetch 规范与 jQuery.ajax() 主要有三种方式的不同：  \n* 当接收到一个代表错误的 HTTP 状态码时，从 fetch() 返回的 Promise 不会被标记为 reject， 即使响应的 HTTP 状态码是 404 或 500。相反，它会将 Promise 状态标记为 resolve （但是会将 resolve 的返回值的 ok 属性设置为 false ），仅当网络故障时或请求被阻止时，才会标记为 reject。\n* fetch() 可以接受跨域 cookies；你也可以使用 fetch() 建立起跨域会话。\n* fetch 不会发送 cookies。除非你使用了credentials 的初始化选项。（自 2017 年 8 月 25 日以后，默认的 credentials 政策变更为 same-origin。Firefox 也在 61.0b13 版本中进行了修改）\n\n## 示例\n```\nfetch('http://example.com/movies.json')\n  .then(function(response) {\n    return response.json();\n  })\n  .then(function(myJson) {\n    console.log(myJson);\n  });\n```\n> 这里我们通过网络获取一个 JSON 文件并将其打印到控制台。最简单的用法是只提供一个参数用来指明想 fetch() 到的资源路径，然后返回一个包含响应结果的promise（一个 Response 对象）。\n当然它只是一个 HTTP 响应，而不是真的JSON。为了获取JSON的内容，我们需要使用 json() 方法\n\n## 参数\n```\n// Example POST method implementation:\n\npostData('http://example.com/answer', {answer: 42})\n  .then(data => console.log(data)) // JSON from `response.json()` call\n  .catch(error => console.error(error))\n\nfunction postData(url, data) {\n  // Default options are marked with *\n  return fetch(url, {\n    body: JSON.stringify(data), // must match 'Content-Type' header\n    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: 'same-origin', // include, same-origin, *omit\n    headers: {\n      'user-agent': 'Mozilla/4.0 MDN Example',\n      'content-type': 'application/json'\n    },\n    method: 'POST', // *GET, POST, PUT, DELETE, etc.\n    mode: 'cors', // no-cors, cors, *same-origin\n    redirect: 'follow', // manual, *follow, error\n    referrer: 'no-referrer', // *client, no-referrer\n  })\n  .then(response => response.json()) // parses response to JSON\n}\n```\n\n## 参考\n[使用 Fetch](https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch)","source":"_posts/2021-02-03-js-fetch.md","raw":"---\nlayout: post\ntitle: js fetch简介\ntags: [javascript]\ncomments: true\ndate: 2021-02-03 18:34:45\n---\n\n`fetch`与`jquery`的ajax类似，提供一种访问http的方法，它是浏览器的全局方法，`目前IE不支持`\n\n<!-- more -->\n## 简介\n\n`Fetch API` 提供了一个 JavaScript 接口，用于访问和操纵 HTTP 管道的一些具体部分，例如请求和响应。它还提供了一个全局 `fetch()` 方法，该方法提供了一种简单，合理的方式来跨网络异步获取资源。\n\n这种功能以前是使用`XMLHttpRequest`实现的。Fetch 提供了一个更理想的替代方案，可以很容易地被其他技术使用，例如  Service Workers。Fetch 还提供了专门的逻辑空间来定义其他与 HTTP 相关的概念，例如 `CORS` 和 `HTTP` 的扩展。\n\n请注意，fetch 规范与 jQuery.ajax() 主要有三种方式的不同：  \n* 当接收到一个代表错误的 HTTP 状态码时，从 fetch() 返回的 Promise 不会被标记为 reject， 即使响应的 HTTP 状态码是 404 或 500。相反，它会将 Promise 状态标记为 resolve （但是会将 resolve 的返回值的 ok 属性设置为 false ），仅当网络故障时或请求被阻止时，才会标记为 reject。\n* fetch() 可以接受跨域 cookies；你也可以使用 fetch() 建立起跨域会话。\n* fetch 不会发送 cookies。除非你使用了credentials 的初始化选项。（自 2017 年 8 月 25 日以后，默认的 credentials 政策变更为 same-origin。Firefox 也在 61.0b13 版本中进行了修改）\n\n## 示例\n```\nfetch('http://example.com/movies.json')\n  .then(function(response) {\n    return response.json();\n  })\n  .then(function(myJson) {\n    console.log(myJson);\n  });\n```\n> 这里我们通过网络获取一个 JSON 文件并将其打印到控制台。最简单的用法是只提供一个参数用来指明想 fetch() 到的资源路径，然后返回一个包含响应结果的promise（一个 Response 对象）。\n当然它只是一个 HTTP 响应，而不是真的JSON。为了获取JSON的内容，我们需要使用 json() 方法\n\n## 参数\n```\n// Example POST method implementation:\n\npostData('http://example.com/answer', {answer: 42})\n  .then(data => console.log(data)) // JSON from `response.json()` call\n  .catch(error => console.error(error))\n\nfunction postData(url, data) {\n  // Default options are marked with *\n  return fetch(url, {\n    body: JSON.stringify(data), // must match 'Content-Type' header\n    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: 'same-origin', // include, same-origin, *omit\n    headers: {\n      'user-agent': 'Mozilla/4.0 MDN Example',\n      'content-type': 'application/json'\n    },\n    method: 'POST', // *GET, POST, PUT, DELETE, etc.\n    mode: 'cors', // no-cors, cors, *same-origin\n    redirect: 'follow', // manual, *follow, error\n    referrer: 'no-referrer', // *client, no-referrer\n  })\n  .then(response => response.json()) // parses response to JSON\n}\n```\n\n## 参考\n[使用 Fetch](https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch)","slug":"2021-02-03-js-fetch","published":1,"updated":"2021-03-02T02:13:04.643Z","photos":[],"link":"","_id":"ckoe9igwf002m8cpneftseb1n","content":"<p><code>fetch</code>与<code>jquery</code>的ajax类似，提供一种访问http的方法，它是浏览器的全局方法，<code>目前IE不支持</code></p>\n<a id=\"more\"></a>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><code>Fetch API</code> 提供了一个 JavaScript 接口，用于访问和操纵 HTTP 管道的一些具体部分，例如请求和响应。它还提供了一个全局 <code>fetch()</code> 方法，该方法提供了一种简单，合理的方式来跨网络异步获取资源。</p>\n<p>这种功能以前是使用<code>XMLHttpRequest</code>实现的。Fetch 提供了一个更理想的替代方案，可以很容易地被其他技术使用，例如  Service Workers。Fetch 还提供了专门的逻辑空间来定义其他与 HTTP 相关的概念，例如 <code>CORS</code> 和 <code>HTTP</code> 的扩展。</p>\n<p>请注意，fetch 规范与 jQuery.ajax() 主要有三种方式的不同：  </p>\n<ul>\n<li>当接收到一个代表错误的 HTTP 状态码时，从 fetch() 返回的 Promise 不会被标记为 reject， 即使响应的 HTTP 状态码是 404 或 500。相反，它会将 Promise 状态标记为 resolve （但是会将 resolve 的返回值的 ok 属性设置为 false ），仅当网络故障时或请求被阻止时，才会标记为 reject。</li>\n<li>fetch() 可以接受跨域 cookies；你也可以使用 fetch() 建立起跨域会话。</li>\n<li>fetch 不会发送 cookies。除非你使用了credentials 的初始化选项。（自 2017 年 8 月 25 日以后，默认的 credentials 政策变更为 same-origin。Firefox 也在 61.0b13 版本中进行了修改）</li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">&#x27;http://example.com/movies.json&#x27;</span>)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response.json();</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">myJson</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(myJson);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里我们通过网络获取一个 JSON 文件并将其打印到控制台。最简单的用法是只提供一个参数用来指明想 fetch() 到的资源路径，然后返回一个包含响应结果的promise（一个 Response 对象）。<br>当然它只是一个 HTTP 响应，而不是真的JSON。为了获取JSON的内容，我们需要使用 json() 方法</p>\n</blockquote>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Example POST method implementation:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">postData</span>(<span class=\"string\">&#x27;http://example.com/answer&#x27;</span>, &#123;<span class=\"attribute\">answer</span>: <span class=\"number\">42</span>&#125;)</span><br><span class=\"line\">  <span class=\"selector-class\">.then</span>(data =&gt; console.log(data)) <span class=\"comment\">// JSON from `response.json()` call</span></span><br><span class=\"line\">  <span class=\"selector-class\">.catch</span>(error =&gt; console.error(error))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">function</span> <span class=\"selector-tag\">postData</span>(url, data) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Default options are marked with *</span></span><br><span class=\"line\">  <span class=\"selector-tag\">return</span> <span class=\"selector-tag\">fetch</span>(url, &#123;</span><br><span class=\"line\">    <span class=\"attribute\">body</span>: JSON.stringify(data), <span class=\"comment\">// must match &#x27;Content-Type&#x27; header</span></span><br><span class=\"line\">    <span class=\"attribute\">cache</span>: <span class=\"string\">&#x27;no-cache&#x27;</span>, <span class=\"comment\">// *default, no-cache, reload, force-cache, only-if-cached</span></span><br><span class=\"line\">    <span class=\"attribute\">credentials</span>: <span class=\"string\">&#x27;same-origin&#x27;</span>, <span class=\"comment\">// include, same-origin, *omit</span></span><br><span class=\"line\">    <span class=\"attribute\">headers</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;user-agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/4.0 MDN Example&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;content-type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attribute\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>, <span class=\"comment\">// *GET, POST, PUT, DELETE, etc.</span></span><br><span class=\"line\">    <span class=\"attribute\">mode</span>: <span class=\"string\">&#x27;cors&#x27;</span>, <span class=\"comment\">// no-cors, cors, *same-origin</span></span><br><span class=\"line\">    <span class=\"attribute\">redirect</span>: <span class=\"string\">&#x27;follow&#x27;</span>, <span class=\"comment\">// manual, *follow, error</span></span><br><span class=\"line\">    <span class=\"attribute\">referrer</span>: <span class=\"string\">&#x27;no-referrer&#x27;</span>, <span class=\"comment\">// *client, no-referrer</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"selector-class\">.then</span>(response =&gt; response.json()) <span class=\"comment\">// parses response to JSON</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch\">使用 Fetch</a></p>\n","site":{"data":{}},"excerpt":"<p><code>fetch</code>与<code>jquery</code>的ajax类似，提供一种访问http的方法，它是浏览器的全局方法，<code>目前IE不支持</code></p>","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><code>Fetch API</code> 提供了一个 JavaScript 接口，用于访问和操纵 HTTP 管道的一些具体部分，例如请求和响应。它还提供了一个全局 <code>fetch()</code> 方法，该方法提供了一种简单，合理的方式来跨网络异步获取资源。</p>\n<p>这种功能以前是使用<code>XMLHttpRequest</code>实现的。Fetch 提供了一个更理想的替代方案，可以很容易地被其他技术使用，例如  Service Workers。Fetch 还提供了专门的逻辑空间来定义其他与 HTTP 相关的概念，例如 <code>CORS</code> 和 <code>HTTP</code> 的扩展。</p>\n<p>请注意，fetch 规范与 jQuery.ajax() 主要有三种方式的不同：  </p>\n<ul>\n<li>当接收到一个代表错误的 HTTP 状态码时，从 fetch() 返回的 Promise 不会被标记为 reject， 即使响应的 HTTP 状态码是 404 或 500。相反，它会将 Promise 状态标记为 resolve （但是会将 resolve 的返回值的 ok 属性设置为 false ），仅当网络故障时或请求被阻止时，才会标记为 reject。</li>\n<li>fetch() 可以接受跨域 cookies；你也可以使用 fetch() 建立起跨域会话。</li>\n<li>fetch 不会发送 cookies。除非你使用了credentials 的初始化选项。（自 2017 年 8 月 25 日以后，默认的 credentials 政策变更为 same-origin。Firefox 也在 61.0b13 版本中进行了修改）</li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">&#x27;http://example.com/movies.json&#x27;</span>)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response.json();</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">myJson</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(myJson);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里我们通过网络获取一个 JSON 文件并将其打印到控制台。最简单的用法是只提供一个参数用来指明想 fetch() 到的资源路径，然后返回一个包含响应结果的promise（一个 Response 对象）。<br>当然它只是一个 HTTP 响应，而不是真的JSON。为了获取JSON的内容，我们需要使用 json() 方法</p>\n</blockquote>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Example POST method implementation:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">postData</span>(<span class=\"string\">&#x27;http://example.com/answer&#x27;</span>, &#123;<span class=\"attribute\">answer</span>: <span class=\"number\">42</span>&#125;)</span><br><span class=\"line\">  <span class=\"selector-class\">.then</span>(data =&gt; console.log(data)) <span class=\"comment\">// JSON from `response.json()` call</span></span><br><span class=\"line\">  <span class=\"selector-class\">.catch</span>(error =&gt; console.error(error))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">function</span> <span class=\"selector-tag\">postData</span>(url, data) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Default options are marked with *</span></span><br><span class=\"line\">  <span class=\"selector-tag\">return</span> <span class=\"selector-tag\">fetch</span>(url, &#123;</span><br><span class=\"line\">    <span class=\"attribute\">body</span>: JSON.stringify(data), <span class=\"comment\">// must match &#x27;Content-Type&#x27; header</span></span><br><span class=\"line\">    <span class=\"attribute\">cache</span>: <span class=\"string\">&#x27;no-cache&#x27;</span>, <span class=\"comment\">// *default, no-cache, reload, force-cache, only-if-cached</span></span><br><span class=\"line\">    <span class=\"attribute\">credentials</span>: <span class=\"string\">&#x27;same-origin&#x27;</span>, <span class=\"comment\">// include, same-origin, *omit</span></span><br><span class=\"line\">    <span class=\"attribute\">headers</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;user-agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/4.0 MDN Example&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;content-type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attribute\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>, <span class=\"comment\">// *GET, POST, PUT, DELETE, etc.</span></span><br><span class=\"line\">    <span class=\"attribute\">mode</span>: <span class=\"string\">&#x27;cors&#x27;</span>, <span class=\"comment\">// no-cors, cors, *same-origin</span></span><br><span class=\"line\">    <span class=\"attribute\">redirect</span>: <span class=\"string\">&#x27;follow&#x27;</span>, <span class=\"comment\">// manual, *follow, error</span></span><br><span class=\"line\">    <span class=\"attribute\">referrer</span>: <span class=\"string\">&#x27;no-referrer&#x27;</span>, <span class=\"comment\">// *client, no-referrer</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"selector-class\">.then</span>(response =&gt; response.json()) <span class=\"comment\">// parses response to JSON</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch\">使用 Fetch</a></p>"},{"layout":"post","title":"import和require的区别","comments":1,"date":"2021-01-02T07:43:34.000Z","_content":"\n我们在使用前端框架、es6语法时，常常会用到`require`和`import`，那么他们的区别时什么呢\n\n<!-- more -->\n\n## 区别\n### 遵循规范\n* require 是 AMD规范引入方式\n* import是es6的一个语法标准，如果要兼容浏览器的话必须转化成es5的语法\n\n### 调用时间\n* require是运行时调用，所以require理论上可以运用在代码的任何地方\n* import是编译时调用，所以必须放在文件开头\n\n### 本质\n* require是赋值过程，其实require的结果就是对象、数字、字符串、函数等，再把require的结果赋值给某个变量\n* import是解构过程，但是目前所有的引擎都还没有实现import，我们在node中使用babel支持ES6，也仅仅是将ES6转码为ES5再执行，import语法会被转码为require\n\n## import的用法\n### import导入模块\nimport的语法跟require不同，而且import必须放在文件的最开始，且前面不允许有其他逻辑代码，这和其他所有编程语言风格一致。\n\nimport的使用和export一样，也挺复杂，可以在 这里 大致了解。举几个例子：\n```\nimport $ from 'jquery';\nimport * as _ from '_';\nimport {a,b,c} from './a';\nimport {default as alias, a as a_a, b, c} from './a';\n```\n`import`后面跟上花括号的形式是最基本的用法，花括号里面的变量与`export`后面的变量一一对应。这里，你必须了解 对象的解构赋值 的知识，没这知识，你根本没法在这里装逼。了解了解构赋值，这里的\"一一对应\"的关系就能具体理解了。\n\n### as关键字\n编程的同学对as都容易理解，简单的说就是取一个别名。`export`中可以用，`import`中其实可以用：\n```\n// a.js\nvar a = function() {};\nexport {a as fun};\n\n// b.js\nimport {fun as a} from './a';\na();\n```\n上面这段代码，`export`的时候，对外提供的接口是`fun`，它是`a.js`内部a这个函数的别名，但是在模块外面，认不到a，只能认到`fun`。\n\n`import`中的`as`就很简单，就是你在使用模块里面的方法的时候，给这个方法取一个别名，好在当前的文件里面使用。之所以是这样，是因为有的时候不同的两个模块可能通过相同的接口，比如有一个c.js也通过了`fun`这个接口：\n```\n// c.js\nexport function fun() {};\n```\n如果在b.js中同时使用a和c这两个模块，就必须想办法解决接口重名的问题，as就解决了。\n\n### default关键字\n其他人写教程什么的，都把`default`放到`export`那个部分，我觉得不利于理解。在`export`的时候，可能会用到`default`，说白了，它其实是别名的语法糖：\n```\n// d.js\nexport default function() {}\n\n// 等效于：\nfunction a() {};\nexport {a as default};\n```\n在import的时候，可以这样用：\n```\nimport a from './d';\n\n// 等效于，或者说就是下面这种写法的简写，是同一个意思\nimport {default as a} from './d';\n```\n\n这个语法糖的好处就是`import`的时候，可以省去花括号`{}`。简单的说，如果`import`的时候，你发现某个变量没有花括号括起来（没有*号），那么你在脑海中应该把它还原成有花括号的`as`语法。\n\n所以，下面这种写法你也应该理解了吧：\n```\nimport $,{each,map} from 'jquery';\nimport后面第一个 $ 是 {defalut as $} 的替代写法。\n```\n### *符号\n*就是代表所有，只用在import中，我们看下两个例子：\n```\nimport * as _ from '';\n```\n在意义上和 `import _ from '';` 是不同的，虽然实际上后面的使用方法是一样的。它表示的是把 '_' 模块中的所有接口挂载到 _ 这个对象上，所以可以用 `_.each` 调用某个接口。\n\n另外还可以通过*号直接继承某一个模块的接口：\n```\nexport * from '_';\n\n// 等效于：\nimport * as all from '_';\nexport all;\n```\n*符号尽可能少用，它实际上是使用所有`export`的接口，但是很有可能你的当前模块并不会用到所有接口，可能仅仅是一个，所以最好的建议是使用花括号，用一个加一个。\n\n### 该用require还是import？\n`require`的使用非常简单，它相当于`module.exports`的传送门，`module.exports`后面的内容是什么，`require`的结果就是什么，对象、数字、字符串、函数……再把`require`的结果赋值给某个变量，相当于把`require`和`module.exports`进行平行空间的位置重叠。\n\n而且`require`理论上可以运用在代码的任何地方，甚至不需要赋值给某个变量之后再使用，比如：\n```\nrequire('./a')(); // a模块是一个函数，立即执行a模块函数\nvar data = require('./a').data; // a模块导出的是一个对象\nvar a = require('./a')[0]; // a模块导出的是一个数组\n```\n你在使用时，完全可以忽略模块化这个概念来使用`require`，仅仅把它当做一个`node`内置的全局函数，它的参数甚至可以是表达式：\n```\nrequire(process.cwd() + '/a');\n```\n但是`import`则不同，它是编译时的（`require`是运行时的），它必须放在文件开头，而且使用格式也是确定的，不容置疑。它不会将整个模块运行后赋值给某个变量，而是只选择`import`的接口进行编译，这样在性能上比`require`好很多。\n\n从理解上，`require`是赋值过程，`import`是解构过程，当然，`require`也可以将结果解构赋值给一组变量，但是`import`在遇到`default`时，和`require`则完全不同：` var $ = require('jquery'); `和 `import $ from 'jquery'` 是完全不同的两种概念。\n\n上面完全没有回答\"改用require还是import？\"这个问题，因为这个问题就目前而言，根本没法回答，因为目前所有的引擎都还没有实现import，我们在node中使用babel支持ES6，也仅仅是将ES6转码为ES5再执行，import语法会被转码为require。这也是为什么在模块导出时使用module.exports，在引入模块时使用import仍然起效，因为本质上，import会被转码为require去执行。\n\n但是，我们要知道这样一个道理，ES7很快也会发布，js引擎们会尽快实现ES6标准的规定，如果一个引擎连标准都实现不了，就会被淘汰， ES6是迟早的事 。如果你现在仍然在代码中部署require，那么等到ES6被引擎支持时，你必须升级你的代码，而如果现在开始部署import，那么未来可能只需要做很少的改动。\n\n## 参考\n[浅谈require和import](https://blog.csdn.net/weixin_42966484/article/details/82889608)\n","source":"_posts/2021-01-02-diff-from-require-import.md","raw":"---\nlayout: post\ntitle: import和require的区别\ntags: [javascript]\ncomments: true\ndate: 2021-01-02 15:43:34\n---\n\n我们在使用前端框架、es6语法时，常常会用到`require`和`import`，那么他们的区别时什么呢\n\n<!-- more -->\n\n## 区别\n### 遵循规范\n* require 是 AMD规范引入方式\n* import是es6的一个语法标准，如果要兼容浏览器的话必须转化成es5的语法\n\n### 调用时间\n* require是运行时调用，所以require理论上可以运用在代码的任何地方\n* import是编译时调用，所以必须放在文件开头\n\n### 本质\n* require是赋值过程，其实require的结果就是对象、数字、字符串、函数等，再把require的结果赋值给某个变量\n* import是解构过程，但是目前所有的引擎都还没有实现import，我们在node中使用babel支持ES6，也仅仅是将ES6转码为ES5再执行，import语法会被转码为require\n\n## import的用法\n### import导入模块\nimport的语法跟require不同，而且import必须放在文件的最开始，且前面不允许有其他逻辑代码，这和其他所有编程语言风格一致。\n\nimport的使用和export一样，也挺复杂，可以在 这里 大致了解。举几个例子：\n```\nimport $ from 'jquery';\nimport * as _ from '_';\nimport {a,b,c} from './a';\nimport {default as alias, a as a_a, b, c} from './a';\n```\n`import`后面跟上花括号的形式是最基本的用法，花括号里面的变量与`export`后面的变量一一对应。这里，你必须了解 对象的解构赋值 的知识，没这知识，你根本没法在这里装逼。了解了解构赋值，这里的\"一一对应\"的关系就能具体理解了。\n\n### as关键字\n编程的同学对as都容易理解，简单的说就是取一个别名。`export`中可以用，`import`中其实可以用：\n```\n// a.js\nvar a = function() {};\nexport {a as fun};\n\n// b.js\nimport {fun as a} from './a';\na();\n```\n上面这段代码，`export`的时候，对外提供的接口是`fun`，它是`a.js`内部a这个函数的别名，但是在模块外面，认不到a，只能认到`fun`。\n\n`import`中的`as`就很简单，就是你在使用模块里面的方法的时候，给这个方法取一个别名，好在当前的文件里面使用。之所以是这样，是因为有的时候不同的两个模块可能通过相同的接口，比如有一个c.js也通过了`fun`这个接口：\n```\n// c.js\nexport function fun() {};\n```\n如果在b.js中同时使用a和c这两个模块，就必须想办法解决接口重名的问题，as就解决了。\n\n### default关键字\n其他人写教程什么的，都把`default`放到`export`那个部分，我觉得不利于理解。在`export`的时候，可能会用到`default`，说白了，它其实是别名的语法糖：\n```\n// d.js\nexport default function() {}\n\n// 等效于：\nfunction a() {};\nexport {a as default};\n```\n在import的时候，可以这样用：\n```\nimport a from './d';\n\n// 等效于，或者说就是下面这种写法的简写，是同一个意思\nimport {default as a} from './d';\n```\n\n这个语法糖的好处就是`import`的时候，可以省去花括号`{}`。简单的说，如果`import`的时候，你发现某个变量没有花括号括起来（没有*号），那么你在脑海中应该把它还原成有花括号的`as`语法。\n\n所以，下面这种写法你也应该理解了吧：\n```\nimport $,{each,map} from 'jquery';\nimport后面第一个 $ 是 {defalut as $} 的替代写法。\n```\n### *符号\n*就是代表所有，只用在import中，我们看下两个例子：\n```\nimport * as _ from '';\n```\n在意义上和 `import _ from '';` 是不同的，虽然实际上后面的使用方法是一样的。它表示的是把 '_' 模块中的所有接口挂载到 _ 这个对象上，所以可以用 `_.each` 调用某个接口。\n\n另外还可以通过*号直接继承某一个模块的接口：\n```\nexport * from '_';\n\n// 等效于：\nimport * as all from '_';\nexport all;\n```\n*符号尽可能少用，它实际上是使用所有`export`的接口，但是很有可能你的当前模块并不会用到所有接口，可能仅仅是一个，所以最好的建议是使用花括号，用一个加一个。\n\n### 该用require还是import？\n`require`的使用非常简单，它相当于`module.exports`的传送门，`module.exports`后面的内容是什么，`require`的结果就是什么，对象、数字、字符串、函数……再把`require`的结果赋值给某个变量，相当于把`require`和`module.exports`进行平行空间的位置重叠。\n\n而且`require`理论上可以运用在代码的任何地方，甚至不需要赋值给某个变量之后再使用，比如：\n```\nrequire('./a')(); // a模块是一个函数，立即执行a模块函数\nvar data = require('./a').data; // a模块导出的是一个对象\nvar a = require('./a')[0]; // a模块导出的是一个数组\n```\n你在使用时，完全可以忽略模块化这个概念来使用`require`，仅仅把它当做一个`node`内置的全局函数，它的参数甚至可以是表达式：\n```\nrequire(process.cwd() + '/a');\n```\n但是`import`则不同，它是编译时的（`require`是运行时的），它必须放在文件开头，而且使用格式也是确定的，不容置疑。它不会将整个模块运行后赋值给某个变量，而是只选择`import`的接口进行编译，这样在性能上比`require`好很多。\n\n从理解上，`require`是赋值过程，`import`是解构过程，当然，`require`也可以将结果解构赋值给一组变量，但是`import`在遇到`default`时，和`require`则完全不同：` var $ = require('jquery'); `和 `import $ from 'jquery'` 是完全不同的两种概念。\n\n上面完全没有回答\"改用require还是import？\"这个问题，因为这个问题就目前而言，根本没法回答，因为目前所有的引擎都还没有实现import，我们在node中使用babel支持ES6，也仅仅是将ES6转码为ES5再执行，import语法会被转码为require。这也是为什么在模块导出时使用module.exports，在引入模块时使用import仍然起效，因为本质上，import会被转码为require去执行。\n\n但是，我们要知道这样一个道理，ES7很快也会发布，js引擎们会尽快实现ES6标准的规定，如果一个引擎连标准都实现不了，就会被淘汰， ES6是迟早的事 。如果你现在仍然在代码中部署require，那么等到ES6被引擎支持时，你必须升级你的代码，而如果现在开始部署import，那么未来可能只需要做很少的改动。\n\n## 参考\n[浅谈require和import](https://blog.csdn.net/weixin_42966484/article/details/82889608)\n","slug":"2021-01-02-diff-from-require-import","published":1,"updated":"2021-02-03T10:33:34.772Z","photos":[],"link":"","_id":"ckoe9igwg002o8cpn5vm39iht","content":"<p>我们在使用前端框架、es6语法时，常常会用到<code>require</code>和<code>import</code>，那么他们的区别时什么呢</p>\n<a id=\"more\"></a>\n\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><h3 id=\"遵循规范\"><a href=\"#遵循规范\" class=\"headerlink\" title=\"遵循规范\"></a>遵循规范</h3><ul>\n<li>require 是 AMD规范引入方式</li>\n<li>import是es6的一个语法标准，如果要兼容浏览器的话必须转化成es5的语法</li>\n</ul>\n<h3 id=\"调用时间\"><a href=\"#调用时间\" class=\"headerlink\" title=\"调用时间\"></a>调用时间</h3><ul>\n<li>require是运行时调用，所以require理论上可以运用在代码的任何地方</li>\n<li>import是编译时调用，所以必须放在文件开头</li>\n</ul>\n<h3 id=\"本质\"><a href=\"#本质\" class=\"headerlink\" title=\"本质\"></a>本质</h3><ul>\n<li>require是赋值过程，其实require的结果就是对象、数字、字符串、函数等，再把require的结果赋值给某个变量</li>\n<li>import是解构过程，但是目前所有的引擎都还没有实现import，我们在node中使用babel支持ES6，也仅仅是将ES6转码为ES5再执行，import语法会被转码为require</li>\n</ul>\n<h2 id=\"import的用法\"><a href=\"#import的用法\" class=\"headerlink\" title=\"import的用法\"></a>import的用法</h2><h3 id=\"import导入模块\"><a href=\"#import导入模块\" class=\"headerlink\" title=\"import导入模块\"></a>import导入模块</h3><p>import的语法跟require不同，而且import必须放在文件的最开始，且前面不允许有其他逻辑代码，这和其他所有编程语言风格一致。</p>\n<p>import的使用和export一样，也挺复杂，可以在 这里 大致了解。举几个例子：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">&#x27;jquery&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> _ <span class=\"keyword\">from</span> <span class=\"string\">&#x27;_&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;a,b,c&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./a&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> <span class=\"keyword\">alias</span>, a <span class=\"keyword\">as</span> a_a, b, c&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./a&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p><code>import</code>后面跟上花括号的形式是最基本的用法，花括号里面的变量与<code>export</code>后面的变量一一对应。这里，你必须了解 对象的解构赋值 的知识，没这知识，你根本没法在这里装逼。了解了解构赋值，这里的”一一对应”的关系就能具体理解了。</p>\n<h3 id=\"as关键字\"><a href=\"#as关键字\" class=\"headerlink\" title=\"as关键字\"></a>as关键字</h3><p>编程的同学对as都容易理解，简单的说就是取一个别名。<code>export</code>中可以用，<code>import</code>中其实可以用：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = function() &#123;&#125;;</span><br><span class=\"line\">export &#123;a <span class=\"keyword\">as</span> <span class=\"function\"><span class=\"keyword\">fun</span>&#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"keyword\">as</span> a&#125; from &#x27;./a&#x27;;</span></span><br><span class=\"line\">a();</span><br></pre></td></tr></table></figure>\n<p>上面这段代码，<code>export</code>的时候，对外提供的接口是<code>fun</code>，它是<code>a.js</code>内部a这个函数的别名，但是在模块外面，认不到a，只能认到<code>fun</code>。</p>\n<p><code>import</code>中的<code>as</code>就很简单，就是你在使用模块里面的方法的时候，给这个方法取一个别名，好在当前的文件里面使用。之所以是这样，是因为有的时候不同的两个模块可能通过相同的接口，比如有一个c.js也通过了<code>fun</code>这个接口：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// c.js</span></span><br><span class=\"line\">export function <span class=\"function\"><span class=\"title\">fun</span><span class=\"params\">()</span></span> &#123;&#125;;</span><br></pre></td></tr></table></figure>\n<p>如果在b.js中同时使用a和c这两个模块，就必须想办法解决接口重名的问题，as就解决了。</p>\n<h3 id=\"default关键字\"><a href=\"#default关键字\" class=\"headerlink\" title=\"default关键字\"></a>default关键字</h3><p>其他人写教程什么的，都把<code>default</code>放到<code>export</code>那个部分，我觉得不利于理解。在<code>export</code>的时候，可能会用到<code>default</code>，说白了，它其实是别名的语法糖：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// d.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等效于：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;a <span class=\"keyword\">as</span> <span class=\"keyword\">default</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p>在import的时候，可以这样用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> a <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./d&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等效于，或者说就是下面这种写法的简写，是同一个意思</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> a&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./d&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这个语法糖的好处就是<code>import</code>的时候，可以省去花括号<code>&#123;&#125;</code>。简单的说，如果<code>import</code>的时候，你发现某个变量没有花括号括起来（没有*号），那么你在脑海中应该把它还原成有花括号的<code>as</code>语法。</p>\n<p>所以，下面这种写法你也应该理解了吧：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"variable\">$,</span>&#123;each,map&#125; from <span class=\"string\">&#x27;jquery&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span>后面第一个 <span class=\"variable\">$ </span>是 &#123;defalut as <span class=\"variable\">$&#125;</span> 的替代写法。</span><br></pre></td></tr></table></figure>\n<h3 id=\"符号\"><a href=\"#符号\" class=\"headerlink\" title=\"*符号\"></a>*符号</h3><p>*就是代表所有，只用在import中，我们看下两个例子：</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> _ <span class=\"keyword\">from</span> <span class=\"string\">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>在意义上和 <code>import _ from &#39;&#39;;</code> 是不同的，虽然实际上后面的使用方法是一样的。它表示的是把 ‘_’ 模块中的所有接口挂载到 _ 这个对象上，所以可以用 <code>_.each</code> 调用某个接口。</p>\n<p>另外还可以通过*号直接继承某一个模块的接口：</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">&#x27;_&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等效于：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> all <span class=\"keyword\">from</span> <span class=\"string\">&#x27;_&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> all;</span><br></pre></td></tr></table></figure>\n<p>*符号尽可能少用，它实际上是使用所有<code>export</code>的接口，但是很有可能你的当前模块并不会用到所有接口，可能仅仅是一个，所以最好的建议是使用花括号，用一个加一个。</p>\n<h3 id=\"该用require还是import？\"><a href=\"#该用require还是import？\" class=\"headerlink\" title=\"该用require还是import？\"></a>该用require还是import？</h3><p><code>require</code>的使用非常简单，它相当于<code>module.exports</code>的传送门，<code>module.exports</code>后面的内容是什么，<code>require</code>的结果就是什么，对象、数字、字符串、函数……再把<code>require</code>的结果赋值给某个变量，相当于把<code>require</code>和<code>module.exports</code>进行平行空间的位置重叠。</p>\n<p>而且<code>require</code>理论上可以运用在代码的任何地方，甚至不需要赋值给某个变量之后再使用，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./a&#x27;</span>)(); <span class=\"comment\">// a模块是一个函数，立即执行a模块函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> data = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./a&#x27;</span>).data; <span class=\"comment\">// a模块导出的是一个对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./a&#x27;</span>)[<span class=\"number\">0</span>]; <span class=\"comment\">// a模块导出的是一个数组</span></span><br></pre></td></tr></table></figure>\n<p>你在使用时，完全可以忽略模块化这个概念来使用<code>require</code>，仅仅把它当做一个<code>node</code>内置的全局函数，它的参数甚至可以是表达式：</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"code\"><pre><span class=\"line\">require(<span class=\"name\">process</span>.cwd() + &#x27;/a&#x27;)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>但是<code>import</code>则不同，它是编译时的（<code>require</code>是运行时的），它必须放在文件开头，而且使用格式也是确定的，不容置疑。它不会将整个模块运行后赋值给某个变量，而是只选择<code>import</code>的接口进行编译，这样在性能上比<code>require</code>好很多。</p>\n<p>从理解上，<code>require</code>是赋值过程，<code>import</code>是解构过程，当然，<code>require</code>也可以将结果解构赋值给一组变量，但是<code>import</code>在遇到<code>default</code>时，和<code>require</code>则完全不同：<code>var $ = require(&#39;jquery&#39;);</code>和 <code>import $ from &#39;jquery&#39;</code> 是完全不同的两种概念。</p>\n<p>上面完全没有回答”改用require还是import？”这个问题，因为这个问题就目前而言，根本没法回答，因为目前所有的引擎都还没有实现import，我们在node中使用babel支持ES6，也仅仅是将ES6转码为ES5再执行，import语法会被转码为require。这也是为什么在模块导出时使用module.exports，在引入模块时使用import仍然起效，因为本质上，import会被转码为require去执行。</p>\n<p>但是，我们要知道这样一个道理，ES7很快也会发布，js引擎们会尽快实现ES6标准的规定，如果一个引擎连标准都实现不了，就会被淘汰， ES6是迟早的事 。如果你现在仍然在代码中部署require，那么等到ES6被引擎支持时，你必须升级你的代码，而如果现在开始部署import，那么未来可能只需要做很少的改动。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://blog.csdn.net/weixin_42966484/article/details/82889608\">浅谈require和import</a></p>\n","site":{"data":{}},"excerpt":"<p>我们在使用前端框架、es6语法时，常常会用到<code>require</code>和<code>import</code>，那么他们的区别时什么呢</p>","more":"<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><h3 id=\"遵循规范\"><a href=\"#遵循规范\" class=\"headerlink\" title=\"遵循规范\"></a>遵循规范</h3><ul>\n<li>require 是 AMD规范引入方式</li>\n<li>import是es6的一个语法标准，如果要兼容浏览器的话必须转化成es5的语法</li>\n</ul>\n<h3 id=\"调用时间\"><a href=\"#调用时间\" class=\"headerlink\" title=\"调用时间\"></a>调用时间</h3><ul>\n<li>require是运行时调用，所以require理论上可以运用在代码的任何地方</li>\n<li>import是编译时调用，所以必须放在文件开头</li>\n</ul>\n<h3 id=\"本质\"><a href=\"#本质\" class=\"headerlink\" title=\"本质\"></a>本质</h3><ul>\n<li>require是赋值过程，其实require的结果就是对象、数字、字符串、函数等，再把require的结果赋值给某个变量</li>\n<li>import是解构过程，但是目前所有的引擎都还没有实现import，我们在node中使用babel支持ES6，也仅仅是将ES6转码为ES5再执行，import语法会被转码为require</li>\n</ul>\n<h2 id=\"import的用法\"><a href=\"#import的用法\" class=\"headerlink\" title=\"import的用法\"></a>import的用法</h2><h3 id=\"import导入模块\"><a href=\"#import导入模块\" class=\"headerlink\" title=\"import导入模块\"></a>import导入模块</h3><p>import的语法跟require不同，而且import必须放在文件的最开始，且前面不允许有其他逻辑代码，这和其他所有编程语言风格一致。</p>\n<p>import的使用和export一样，也挺复杂，可以在 这里 大致了解。举几个例子：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">&#x27;jquery&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> _ <span class=\"keyword\">from</span> <span class=\"string\">&#x27;_&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;a,b,c&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./a&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> <span class=\"keyword\">alias</span>, a <span class=\"keyword\">as</span> a_a, b, c&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./a&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p><code>import</code>后面跟上花括号的形式是最基本的用法，花括号里面的变量与<code>export</code>后面的变量一一对应。这里，你必须了解 对象的解构赋值 的知识，没这知识，你根本没法在这里装逼。了解了解构赋值，这里的”一一对应”的关系就能具体理解了。</p>\n<h3 id=\"as关键字\"><a href=\"#as关键字\" class=\"headerlink\" title=\"as关键字\"></a>as关键字</h3><p>编程的同学对as都容易理解，简单的说就是取一个别名。<code>export</code>中可以用，<code>import</code>中其实可以用：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = function() &#123;&#125;;</span><br><span class=\"line\">export &#123;a <span class=\"keyword\">as</span> <span class=\"function\"><span class=\"keyword\">fun</span>&#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"keyword\">as</span> a&#125; from &#x27;./a&#x27;;</span></span><br><span class=\"line\">a();</span><br></pre></td></tr></table></figure>\n<p>上面这段代码，<code>export</code>的时候，对外提供的接口是<code>fun</code>，它是<code>a.js</code>内部a这个函数的别名，但是在模块外面，认不到a，只能认到<code>fun</code>。</p>\n<p><code>import</code>中的<code>as</code>就很简单，就是你在使用模块里面的方法的时候，给这个方法取一个别名，好在当前的文件里面使用。之所以是这样，是因为有的时候不同的两个模块可能通过相同的接口，比如有一个c.js也通过了<code>fun</code>这个接口：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// c.js</span></span><br><span class=\"line\">export function <span class=\"function\"><span class=\"title\">fun</span><span class=\"params\">()</span></span> &#123;&#125;;</span><br></pre></td></tr></table></figure>\n<p>如果在b.js中同时使用a和c这两个模块，就必须想办法解决接口重名的问题，as就解决了。</p>\n<h3 id=\"default关键字\"><a href=\"#default关键字\" class=\"headerlink\" title=\"default关键字\"></a>default关键字</h3><p>其他人写教程什么的，都把<code>default</code>放到<code>export</code>那个部分，我觉得不利于理解。在<code>export</code>的时候，可能会用到<code>default</code>，说白了，它其实是别名的语法糖：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// d.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等效于：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;a <span class=\"keyword\">as</span> <span class=\"keyword\">default</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p>在import的时候，可以这样用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> a <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./d&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等效于，或者说就是下面这种写法的简写，是同一个意思</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> a&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./d&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这个语法糖的好处就是<code>import</code>的时候，可以省去花括号<code>&#123;&#125;</code>。简单的说，如果<code>import</code>的时候，你发现某个变量没有花括号括起来（没有*号），那么你在脑海中应该把它还原成有花括号的<code>as</code>语法。</p>\n<p>所以，下面这种写法你也应该理解了吧：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"variable\">$,</span>&#123;each,map&#125; from <span class=\"string\">&#x27;jquery&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span>后面第一个 <span class=\"variable\">$ </span>是 &#123;defalut as <span class=\"variable\">$&#125;</span> 的替代写法。</span><br></pre></td></tr></table></figure>\n<h3 id=\"符号\"><a href=\"#符号\" class=\"headerlink\" title=\"*符号\"></a>*符号</h3><p>*就是代表所有，只用在import中，我们看下两个例子：</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> _ <span class=\"keyword\">from</span> <span class=\"string\">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>在意义上和 <code>import _ from &#39;&#39;;</code> 是不同的，虽然实际上后面的使用方法是一样的。它表示的是把 ‘_’ 模块中的所有接口挂载到 _ 这个对象上，所以可以用 <code>_.each</code> 调用某个接口。</p>\n<p>另外还可以通过*号直接继承某一个模块的接口：</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">&#x27;_&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等效于：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> all <span class=\"keyword\">from</span> <span class=\"string\">&#x27;_&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> all;</span><br></pre></td></tr></table></figure>\n<p>*符号尽可能少用，它实际上是使用所有<code>export</code>的接口，但是很有可能你的当前模块并不会用到所有接口，可能仅仅是一个，所以最好的建议是使用花括号，用一个加一个。</p>\n<h3 id=\"该用require还是import？\"><a href=\"#该用require还是import？\" class=\"headerlink\" title=\"该用require还是import？\"></a>该用require还是import？</h3><p><code>require</code>的使用非常简单，它相当于<code>module.exports</code>的传送门，<code>module.exports</code>后面的内容是什么，<code>require</code>的结果就是什么，对象、数字、字符串、函数……再把<code>require</code>的结果赋值给某个变量，相当于把<code>require</code>和<code>module.exports</code>进行平行空间的位置重叠。</p>\n<p>而且<code>require</code>理论上可以运用在代码的任何地方，甚至不需要赋值给某个变量之后再使用，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./a&#x27;</span>)(); <span class=\"comment\">// a模块是一个函数，立即执行a模块函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> data = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./a&#x27;</span>).data; <span class=\"comment\">// a模块导出的是一个对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./a&#x27;</span>)[<span class=\"number\">0</span>]; <span class=\"comment\">// a模块导出的是一个数组</span></span><br></pre></td></tr></table></figure>\n<p>你在使用时，完全可以忽略模块化这个概念来使用<code>require</code>，仅仅把它当做一个<code>node</code>内置的全局函数，它的参数甚至可以是表达式：</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"code\"><pre><span class=\"line\">require(<span class=\"name\">process</span>.cwd() + &#x27;/a&#x27;)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>但是<code>import</code>则不同，它是编译时的（<code>require</code>是运行时的），它必须放在文件开头，而且使用格式也是确定的，不容置疑。它不会将整个模块运行后赋值给某个变量，而是只选择<code>import</code>的接口进行编译，这样在性能上比<code>require</code>好很多。</p>\n<p>从理解上，<code>require</code>是赋值过程，<code>import</code>是解构过程，当然，<code>require</code>也可以将结果解构赋值给一组变量，但是<code>import</code>在遇到<code>default</code>时，和<code>require</code>则完全不同：<code>var $ = require(&#39;jquery&#39;);</code>和 <code>import $ from &#39;jquery&#39;</code> 是完全不同的两种概念。</p>\n<p>上面完全没有回答”改用require还是import？”这个问题，因为这个问题就目前而言，根本没法回答，因为目前所有的引擎都还没有实现import，我们在node中使用babel支持ES6，也仅仅是将ES6转码为ES5再执行，import语法会被转码为require。这也是为什么在模块导出时使用module.exports，在引入模块时使用import仍然起效，因为本质上，import会被转码为require去执行。</p>\n<p>但是，我们要知道这样一个道理，ES7很快也会发布，js引擎们会尽快实现ES6标准的规定，如果一个引擎连标准都实现不了，就会被淘汰， ES6是迟早的事 。如果你现在仍然在代码中部署require，那么等到ES6被引擎支持时，你必须升级你的代码，而如果现在开始部署import，那么未来可能只需要做很少的改动。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://blog.csdn.net/weixin_42966484/article/details/82889608\">浅谈require和import</a></p>"},{"layout":"post","title":"js正则方法","comments":1,"date":"2021-02-14T07:08:27.000Z","_content":"\njs有很多正则方法：`test、search、match、replace、exec`，他们之间的区别是什么呢\n\n<!-- more -->\n\n定义正则：\n```\n var re = new RegExp(“a”);  //RegExp对象。参数就是我们想要制定的规则。当参数为变量时，可以使用这种方式\n var re = /a/;   // 简写方法 推荐使用 性能更好  不能为空 不然以为是注释 ，\n```\n\njavascript中正则表达式支持的正则表达式有三个，`g、i、m`，分别代表全局匹配、忽略大小写、多行模式。三种属性可以自由组合共存。\n\n## test\n在字符串中查找符合正则的内容，若查找到返回true,反之返回false.  \n用法：`reg.test(str)`\n```\nvar str = '374829348791';\n   var re = /\\D/;      //  \\D代表非数字\n   if (re.test(str)) {   // 返回true,代表在字符串中找到了非数字。\n       console.log('不全是数字');\n   } else {\n       console.log('全是数字');\n   }\n```\n\n## search\n在字符串搜索符合正则的内容，搜索到就返回出现的位置（从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置）， 如果搜索失败就返回 -1  \n用法: `str.search(reg)`\n```\nvar str = 'abcdef';\n\n   var re = /B/i;\n\n   //var re = new RegExp('B','i'); 也可以这样写\n\n   console.log( str.search(re) ); // 1\n```\n\n## match\n在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。\n用法：`str.match(reg)`\n```\nvar str = 'haj123sdk54hask33dkhalsd879';\n   var re = /\\d+/g;   \n   // 每次匹配至少一个数字  且全局匹配  如果不是全局匹配，当找到数字123，它就会停止了。\n   // 就只会弹出123.加上全局匹配，就会从开始到结束一直去搜索符合规则的。如果没有加号，匹配的结果就是1，2，3，5，4，3，3，8，7，9并不是我们想要的，\n   // 有了加号，每次匹配的数字就是至少一个了。\n   console.log( str.match(re) );   // [123，54，33，879]\n```\n\n## replace\n查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。\n用法： `str.replace(//,新的字符串/回调函数)`\n第一个参数也可以是字符串\n\n```\nvar str = \"我爱北京天安门，天安门上太阳升。\";\nvar re = /北京|天安门/g;  //  找到北京 或者天安门 全局匹配\nvar str2 = str.replace(re, function (str) {\n    console.log(str); //用来测试：函数的第一个参数代表每次搜索到的符合正则的字符，所以第一次str指的是北京 第二次str是天安门 第三次str是天安门\n    var result = '';\n    for (var i = 0; i < str.length; i++) {\n        result += '*';\n    }\n    return result; //所以搜索到了几个字就返回几个*\n});\nconsole.log(str2)  //我爱*****，***上太阳升\n//整个过程就是，找到北京，替换成了两个*，找到天安门替换成了3个*，找到天安门替换成3个*。\n\n```\nreplace()的第二个参数replacement是一个字符串，表示替换的文本，其中可以使用一些特殊字符串。\n* $&：匹配的子字符串。\n* $` ：匹配结果前面的文本。\n* $'：匹配结果后面的文本。\n* $n：匹配成功的第n组内容，n是从1开始的自然数。这个参数生效的前提是，第一个参数必须是正则* 表达式。\n* $$：指代美元符号$。\n\n### 参考\n[replace](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\n\n## exec\n和match方法一样，搜索符合规则的内容，并返回内容，格式为数组，失败就返回null。\n用法： `reg.exec(str)`\n```\n    var testStr = \"now test001 test002\";\n    var re = /test(\\d+)/; //只匹配一次\n    var r = \"\";\n    var r = re.exec(testStr)\n    console.log(r);// test001  001 返回匹配结果，以及子项\n    console.log(r.length); //2   返回内容的长度\n    console.log(r.input); //now test001 test002    代表每次匹配成功的字符串\n    console.log(r[0]);   //test001\n    console.log(r[1]);  //001    代表每次匹配成功字符串中的第一个子项 (\\d+)\n    console.log(r.index );   //  4   每次匹配成功的字符串中的第一个字符的位置\n\n```\n\n## replaceAll\nes6新增，历史上，字符串的实例方法replace()只能替换第一个匹配。\n```\n'aabbcc'.replace('b', '_')\n// 'aa_bcc'\n```\n上面例子中，replace()只将第一个b替换成了下划线。  \n如果要替换所有的匹配，不得不使用正则表达式的g修饰符。\n```\n'aabbcc'.replace(/b/g, '_')\n// 'aa__cc'\n```\n正则表达式毕竟不是那么方便和直观，ES2021 引入了replaceAll()方法，可以一次性替换所有匹配。\n```\n'aabbcc'.replaceAll('b', '_')\n// 'aa__cc'\n\n```\n如果searchValue是一个不带有g修饰符的正则表达式，replaceAll()会报错。这一点跟replace()不同。\n```\n// 不报错\n'aabbcc'.replace(/b/, '_')\n\n// 报错\n'aabbcc'.replaceAll(/b/, '_')\n```\n上面代码中，searchValue是搜索模式，可以是一个字符串，也可以是一个全局的正则表达式（带有g修饰符）。\n\n## [matchAll](https://es6.ruanyifeng.com/#docs/regex#String-prototype-matchAll)\n\n","source":"_posts/2021-02-14-js-regex-method.md","raw":"---\nlayout: post\ntitle: js正则方法\ntags: [javascript]\ncomments: true\ndate: 2021-02-14 15:08:27\n---\n\njs有很多正则方法：`test、search、match、replace、exec`，他们之间的区别是什么呢\n\n<!-- more -->\n\n定义正则：\n```\n var re = new RegExp(“a”);  //RegExp对象。参数就是我们想要制定的规则。当参数为变量时，可以使用这种方式\n var re = /a/;   // 简写方法 推荐使用 性能更好  不能为空 不然以为是注释 ，\n```\n\njavascript中正则表达式支持的正则表达式有三个，`g、i、m`，分别代表全局匹配、忽略大小写、多行模式。三种属性可以自由组合共存。\n\n## test\n在字符串中查找符合正则的内容，若查找到返回true,反之返回false.  \n用法：`reg.test(str)`\n```\nvar str = '374829348791';\n   var re = /\\D/;      //  \\D代表非数字\n   if (re.test(str)) {   // 返回true,代表在字符串中找到了非数字。\n       console.log('不全是数字');\n   } else {\n       console.log('全是数字');\n   }\n```\n\n## search\n在字符串搜索符合正则的内容，搜索到就返回出现的位置（从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置）， 如果搜索失败就返回 -1  \n用法: `str.search(reg)`\n```\nvar str = 'abcdef';\n\n   var re = /B/i;\n\n   //var re = new RegExp('B','i'); 也可以这样写\n\n   console.log( str.search(re) ); // 1\n```\n\n## match\n在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。\n用法：`str.match(reg)`\n```\nvar str = 'haj123sdk54hask33dkhalsd879';\n   var re = /\\d+/g;   \n   // 每次匹配至少一个数字  且全局匹配  如果不是全局匹配，当找到数字123，它就会停止了。\n   // 就只会弹出123.加上全局匹配，就会从开始到结束一直去搜索符合规则的。如果没有加号，匹配的结果就是1，2，3，5，4，3，3，8，7，9并不是我们想要的，\n   // 有了加号，每次匹配的数字就是至少一个了。\n   console.log( str.match(re) );   // [123，54，33，879]\n```\n\n## replace\n查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。\n用法： `str.replace(//,新的字符串/回调函数)`\n第一个参数也可以是字符串\n\n```\nvar str = \"我爱北京天安门，天安门上太阳升。\";\nvar re = /北京|天安门/g;  //  找到北京 或者天安门 全局匹配\nvar str2 = str.replace(re, function (str) {\n    console.log(str); //用来测试：函数的第一个参数代表每次搜索到的符合正则的字符，所以第一次str指的是北京 第二次str是天安门 第三次str是天安门\n    var result = '';\n    for (var i = 0; i < str.length; i++) {\n        result += '*';\n    }\n    return result; //所以搜索到了几个字就返回几个*\n});\nconsole.log(str2)  //我爱*****，***上太阳升\n//整个过程就是，找到北京，替换成了两个*，找到天安门替换成了3个*，找到天安门替换成3个*。\n\n```\nreplace()的第二个参数replacement是一个字符串，表示替换的文本，其中可以使用一些特殊字符串。\n* $&：匹配的子字符串。\n* $` ：匹配结果前面的文本。\n* $'：匹配结果后面的文本。\n* $n：匹配成功的第n组内容，n是从1开始的自然数。这个参数生效的前提是，第一个参数必须是正则* 表达式。\n* $$：指代美元符号$。\n\n### 参考\n[replace](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\n\n## exec\n和match方法一样，搜索符合规则的内容，并返回内容，格式为数组，失败就返回null。\n用法： `reg.exec(str)`\n```\n    var testStr = \"now test001 test002\";\n    var re = /test(\\d+)/; //只匹配一次\n    var r = \"\";\n    var r = re.exec(testStr)\n    console.log(r);// test001  001 返回匹配结果，以及子项\n    console.log(r.length); //2   返回内容的长度\n    console.log(r.input); //now test001 test002    代表每次匹配成功的字符串\n    console.log(r[0]);   //test001\n    console.log(r[1]);  //001    代表每次匹配成功字符串中的第一个子项 (\\d+)\n    console.log(r.index );   //  4   每次匹配成功的字符串中的第一个字符的位置\n\n```\n\n## replaceAll\nes6新增，历史上，字符串的实例方法replace()只能替换第一个匹配。\n```\n'aabbcc'.replace('b', '_')\n// 'aa_bcc'\n```\n上面例子中，replace()只将第一个b替换成了下划线。  \n如果要替换所有的匹配，不得不使用正则表达式的g修饰符。\n```\n'aabbcc'.replace(/b/g, '_')\n// 'aa__cc'\n```\n正则表达式毕竟不是那么方便和直观，ES2021 引入了replaceAll()方法，可以一次性替换所有匹配。\n```\n'aabbcc'.replaceAll('b', '_')\n// 'aa__cc'\n\n```\n如果searchValue是一个不带有g修饰符的正则表达式，replaceAll()会报错。这一点跟replace()不同。\n```\n// 不报错\n'aabbcc'.replace(/b/, '_')\n\n// 报错\n'aabbcc'.replaceAll(/b/, '_')\n```\n上面代码中，searchValue是搜索模式，可以是一个字符串，也可以是一个全局的正则表达式（带有g修饰符）。\n\n## [matchAll](https://es6.ruanyifeng.com/#docs/regex#String-prototype-matchAll)\n\n","slug":"2021-02-14-js-regex-method","published":1,"updated":"2021-04-30T12:01:11.363Z","photos":[],"link":"","_id":"ckoe9igwi002r8cpnhkphev2r","content":"<p>js有很多正则方法：<code>test、search、match、replace、exec</code>，他们之间的区别是什么呢</p>\n<a id=\"more\"></a>\n\n<p>定义正则：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(“a”);  <span class=\"comment\">//RegExp对象。参数就是我们想要制定的规则。当参数为变量时，可以使用这种方式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/a/</span>;   <span class=\"comment\">// 简写方法 推荐使用 性能更好  不能为空 不然以为是注释 ，</span></span><br></pre></td></tr></table></figure>\n\n<p>javascript中正则表达式支持的正则表达式有三个，<code>g、i、m</code>，分别代表全局匹配、忽略大小写、多行模式。三种属性可以自由组合共存。</p>\n<h2 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h2><p>在字符串中查找符合正则的内容，若查找到返回true,反之返回false.<br>用法：<code>reg.test(str)</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;374829348791&#x27;</span>;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> re = <span class=\"regexp\">/\\D/</span>;      <span class=\"comment\">//  \\D代表非数字</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (re.test(str)) &#123;   <span class=\"comment\">// 返回true,代表在字符串中找到了非数字。</span></span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;不全是数字&#x27;</span>);</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;全是数字&#x27;</span>);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"search\"><a href=\"#search\" class=\"headerlink\" title=\"search\"></a>search</h2><p>在字符串搜索符合正则的内容，搜索到就返回出现的位置（从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置）， 如果搜索失败就返回 -1<br>用法: <code>str.search(reg)</code></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">var str = <span class=\"string\">&#x27;abcdef&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   var re = <span class=\"regexp\">/B/i</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"regexp\">//</span>var re = new RegExp(<span class=\"string\">&#x27;B&#x27;</span>,<span class=\"string\">&#x27;i&#x27;</span>); 也可以这样写</span><br><span class=\"line\"></span><br><span class=\"line\">   console.log( str.search(re) ); <span class=\"regexp\">//</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"match\"></a>match</h2><p>在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。<br>用法：<code>str.match(reg)</code></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">var str = <span class=\"string\">&#x27;haj123sdk54hask33dkhalsd879&#x27;</span>;</span><br><span class=\"line\">   var re = <span class=\"regexp\">/\\d+/g</span>;   </span><br><span class=\"line\">   <span class=\"regexp\">//</span> 每次匹配至少一个数字  且全局匹配  如果不是全局匹配，当找到数字<span class=\"number\">123</span>，它就会停止了。</span><br><span class=\"line\">   <span class=\"regexp\">//</span> 就只会弹出<span class=\"number\">123</span>.加上全局匹配，就会从开始到结束一直去搜索符合规则的。如果没有加号，匹配的结果就是<span class=\"number\">1</span>，<span class=\"number\">2</span>，<span class=\"number\">3</span>，<span class=\"number\">5</span>，<span class=\"number\">4</span>，<span class=\"number\">3</span>，<span class=\"number\">3</span>，<span class=\"number\">8</span>，<span class=\"number\">7</span>，<span class=\"number\">9</span>并不是我们想要的，</span><br><span class=\"line\">   <span class=\"regexp\">//</span> 有了加号，每次匹配的数字就是至少一个了。</span><br><span class=\"line\">   console.log( str.match(re) );   <span class=\"regexp\">//</span> [<span class=\"number\">123</span>，<span class=\"number\">54</span>，<span class=\"number\">33</span>，<span class=\"number\">879</span>]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace\"></a>replace</h2><p>查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。<br>用法： <code>str.replace(//,新的字符串/回调函数)</code><br>第一个参数也可以是字符串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;我爱北京天安门，天安门上太阳升。&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/北京|天安门/g</span>;  <span class=\"comment\">//  找到北京 或者天安门 全局匹配</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = str.replace(re, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str); <span class=\"comment\">//用来测试：函数的第一个参数代表每次搜索到的符合正则的字符，所以第一次str指的是北京 第二次str是天安门 第三次str是天安门</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">        result += <span class=\"string\">&#x27;*&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result; <span class=\"comment\">//所以搜索到了几个字就返回几个*</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str2)  <span class=\"comment\">//我爱*****，***上太阳升</span></span><br><span class=\"line\"><span class=\"comment\">//整个过程就是，找到北京，替换成了两个*，找到天安门替换成了3个*，找到天安门替换成3个*。</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>replace()的第二个参数replacement是一个字符串，表示替换的文本，其中可以使用一些特殊字符串。</p>\n<ul>\n<li>$&amp;：匹配的子字符串。</li>\n<li>$` ：匹配结果前面的文本。</li>\n<li>$’：匹配结果后面的文本。</li>\n<li>$n：匹配成功的第n组内容，n是从1开始的自然数。这个参数生效的前提是，第一个参数必须是正则* 表达式。</li>\n<li>$$：指代美元符号$。</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace\">replace</a></p>\n<h2 id=\"exec\"><a href=\"#exec\" class=\"headerlink\" title=\"exec\"></a>exec</h2><p>和match方法一样，搜索符合规则的内容，并返回内容，格式为数组，失败就返回null。<br>用法： <code>reg.exec(str)</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> testStr = <span class=\"string\">&quot;now test001 test002&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/test(\\d+)/</span>; <span class=\"comment\">//只匹配一次</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> r = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> r = re.exec(testStr)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r);<span class=\"comment\">// test001  001 返回匹配结果，以及子项</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r.length); <span class=\"comment\">//2   返回内容的长度</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r.input); <span class=\"comment\">//now test001 test002    代表每次匹配成功的字符串</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r[<span class=\"number\">0</span>]);   <span class=\"comment\">//test001</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r[<span class=\"number\">1</span>]);  <span class=\"comment\">//001    代表每次匹配成功字符串中的第一个子项 (\\d+)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r.index );   <span class=\"comment\">//  4   每次匹配成功的字符串中的第一个字符的位置</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"replaceAll\"><a href=\"#replaceAll\" class=\"headerlink\" title=\"replaceAll\"></a>replaceAll</h2><p>es6新增，历史上，字符串的实例方法replace()只能替换第一个匹配。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;aabbcc&#x27;</span>.replace(<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;_&#x27;</span>)</span><br><span class=\"line\"><span class=\"regexp\">//</span> <span class=\"string\">&#x27;aa_bcc&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>上面例子中，replace()只将第一个b替换成了下划线。<br>如果要替换所有的匹配，不得不使用正则表达式的g修饰符。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;aabbcc&#x27;</span>.replace(<span class=\"regexp\">/b/g</span>, <span class=\"string\">&#x27;_&#x27;</span>)</span><br><span class=\"line\"><span class=\"regexp\">//</span> <span class=\"string\">&#x27;aa__cc&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>正则表达式毕竟不是那么方便和直观，ES2021 引入了replaceAll()方法，可以一次性替换所有匹配。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;aabbcc&#x27;</span>.replaceAll(<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;_&#x27;</span>)</span><br><span class=\"line\"><span class=\"regexp\">//</span> <span class=\"string\">&#x27;aa__cc&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>如果searchValue是一个不带有g修饰符的正则表达式，replaceAll()会报错。这一点跟replace()不同。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> 不报错</span><br><span class=\"line\"><span class=\"string\">&#x27;aabbcc&#x27;</span>.replace(<span class=\"regexp\">/b/</span>, <span class=\"string\">&#x27;_&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span> 报错</span><br><span class=\"line\"><span class=\"string\">&#x27;aabbcc&#x27;</span>.replaceAll(<span class=\"regexp\">/b/</span>, <span class=\"string\">&#x27;_&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>上面代码中，searchValue是搜索模式，可以是一个字符串，也可以是一个全局的正则表达式（带有g修饰符）。</p>\n<h2 id=\"matchAll\"><a href=\"#matchAll\" class=\"headerlink\" title=\"matchAll\"></a><a href=\"https://es6.ruanyifeng.com/#docs/regex#String-prototype-matchAll\">matchAll</a></h2>","site":{"data":{}},"excerpt":"<p>js有很多正则方法：<code>test、search、match、replace、exec</code>，他们之间的区别是什么呢</p>","more":"<p>定义正则：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(“a”);  <span class=\"comment\">//RegExp对象。参数就是我们想要制定的规则。当参数为变量时，可以使用这种方式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/a/</span>;   <span class=\"comment\">// 简写方法 推荐使用 性能更好  不能为空 不然以为是注释 ，</span></span><br></pre></td></tr></table></figure>\n\n<p>javascript中正则表达式支持的正则表达式有三个，<code>g、i、m</code>，分别代表全局匹配、忽略大小写、多行模式。三种属性可以自由组合共存。</p>\n<h2 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h2><p>在字符串中查找符合正则的内容，若查找到返回true,反之返回false.<br>用法：<code>reg.test(str)</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;374829348791&#x27;</span>;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> re = <span class=\"regexp\">/\\D/</span>;      <span class=\"comment\">//  \\D代表非数字</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (re.test(str)) &#123;   <span class=\"comment\">// 返回true,代表在字符串中找到了非数字。</span></span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;不全是数字&#x27;</span>);</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;全是数字&#x27;</span>);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"search\"><a href=\"#search\" class=\"headerlink\" title=\"search\"></a>search</h2><p>在字符串搜索符合正则的内容，搜索到就返回出现的位置（从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置）， 如果搜索失败就返回 -1<br>用法: <code>str.search(reg)</code></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">var str = <span class=\"string\">&#x27;abcdef&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   var re = <span class=\"regexp\">/B/i</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"regexp\">//</span>var re = new RegExp(<span class=\"string\">&#x27;B&#x27;</span>,<span class=\"string\">&#x27;i&#x27;</span>); 也可以这样写</span><br><span class=\"line\"></span><br><span class=\"line\">   console.log( str.search(re) ); <span class=\"regexp\">//</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"match\"></a>match</h2><p>在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。<br>用法：<code>str.match(reg)</code></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">var str = <span class=\"string\">&#x27;haj123sdk54hask33dkhalsd879&#x27;</span>;</span><br><span class=\"line\">   var re = <span class=\"regexp\">/\\d+/g</span>;   </span><br><span class=\"line\">   <span class=\"regexp\">//</span> 每次匹配至少一个数字  且全局匹配  如果不是全局匹配，当找到数字<span class=\"number\">123</span>，它就会停止了。</span><br><span class=\"line\">   <span class=\"regexp\">//</span> 就只会弹出<span class=\"number\">123</span>.加上全局匹配，就会从开始到结束一直去搜索符合规则的。如果没有加号，匹配的结果就是<span class=\"number\">1</span>，<span class=\"number\">2</span>，<span class=\"number\">3</span>，<span class=\"number\">5</span>，<span class=\"number\">4</span>，<span class=\"number\">3</span>，<span class=\"number\">3</span>，<span class=\"number\">8</span>，<span class=\"number\">7</span>，<span class=\"number\">9</span>并不是我们想要的，</span><br><span class=\"line\">   <span class=\"regexp\">//</span> 有了加号，每次匹配的数字就是至少一个了。</span><br><span class=\"line\">   console.log( str.match(re) );   <span class=\"regexp\">//</span> [<span class=\"number\">123</span>，<span class=\"number\">54</span>，<span class=\"number\">33</span>，<span class=\"number\">879</span>]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace\"></a>replace</h2><p>查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。<br>用法： <code>str.replace(//,新的字符串/回调函数)</code><br>第一个参数也可以是字符串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;我爱北京天安门，天安门上太阳升。&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/北京|天安门/g</span>;  <span class=\"comment\">//  找到北京 或者天安门 全局匹配</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = str.replace(re, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str); <span class=\"comment\">//用来测试：函数的第一个参数代表每次搜索到的符合正则的字符，所以第一次str指的是北京 第二次str是天安门 第三次str是天安门</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">        result += <span class=\"string\">&#x27;*&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result; <span class=\"comment\">//所以搜索到了几个字就返回几个*</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str2)  <span class=\"comment\">//我爱*****，***上太阳升</span></span><br><span class=\"line\"><span class=\"comment\">//整个过程就是，找到北京，替换成了两个*，找到天安门替换成了3个*，找到天安门替换成3个*。</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>replace()的第二个参数replacement是一个字符串，表示替换的文本，其中可以使用一些特殊字符串。</p>\n<ul>\n<li>$&amp;：匹配的子字符串。</li>\n<li>$` ：匹配结果前面的文本。</li>\n<li>$’：匹配结果后面的文本。</li>\n<li>$n：匹配成功的第n组内容，n是从1开始的自然数。这个参数生效的前提是，第一个参数必须是正则* 表达式。</li>\n<li>$$：指代美元符号$。</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace\">replace</a></p>\n<h2 id=\"exec\"><a href=\"#exec\" class=\"headerlink\" title=\"exec\"></a>exec</h2><p>和match方法一样，搜索符合规则的内容，并返回内容，格式为数组，失败就返回null。<br>用法： <code>reg.exec(str)</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> testStr = <span class=\"string\">&quot;now test001 test002&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/test(\\d+)/</span>; <span class=\"comment\">//只匹配一次</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> r = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> r = re.exec(testStr)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r);<span class=\"comment\">// test001  001 返回匹配结果，以及子项</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r.length); <span class=\"comment\">//2   返回内容的长度</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r.input); <span class=\"comment\">//now test001 test002    代表每次匹配成功的字符串</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r[<span class=\"number\">0</span>]);   <span class=\"comment\">//test001</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r[<span class=\"number\">1</span>]);  <span class=\"comment\">//001    代表每次匹配成功字符串中的第一个子项 (\\d+)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r.index );   <span class=\"comment\">//  4   每次匹配成功的字符串中的第一个字符的位置</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"replaceAll\"><a href=\"#replaceAll\" class=\"headerlink\" title=\"replaceAll\"></a>replaceAll</h2><p>es6新增，历史上，字符串的实例方法replace()只能替换第一个匹配。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;aabbcc&#x27;</span>.replace(<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;_&#x27;</span>)</span><br><span class=\"line\"><span class=\"regexp\">//</span> <span class=\"string\">&#x27;aa_bcc&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>上面例子中，replace()只将第一个b替换成了下划线。<br>如果要替换所有的匹配，不得不使用正则表达式的g修饰符。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;aabbcc&#x27;</span>.replace(<span class=\"regexp\">/b/g</span>, <span class=\"string\">&#x27;_&#x27;</span>)</span><br><span class=\"line\"><span class=\"regexp\">//</span> <span class=\"string\">&#x27;aa__cc&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>正则表达式毕竟不是那么方便和直观，ES2021 引入了replaceAll()方法，可以一次性替换所有匹配。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;aabbcc&#x27;</span>.replaceAll(<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;_&#x27;</span>)</span><br><span class=\"line\"><span class=\"regexp\">//</span> <span class=\"string\">&#x27;aa__cc&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>如果searchValue是一个不带有g修饰符的正则表达式，replaceAll()会报错。这一点跟replace()不同。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> 不报错</span><br><span class=\"line\"><span class=\"string\">&#x27;aabbcc&#x27;</span>.replace(<span class=\"regexp\">/b/</span>, <span class=\"string\">&#x27;_&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span> 报错</span><br><span class=\"line\"><span class=\"string\">&#x27;aabbcc&#x27;</span>.replaceAll(<span class=\"regexp\">/b/</span>, <span class=\"string\">&#x27;_&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>上面代码中，searchValue是搜索模式，可以是一个字符串，也可以是一个全局的正则表达式（带有g修饰符）。</p>\n<h2 id=\"matchAll\"><a href=\"#matchAll\" class=\"headerlink\" title=\"matchAll\"></a><a href=\"https://es6.ruanyifeng.com/#docs/regex#String-prototype-matchAll\">matchAll</a></h2>"},{"layout":"post","title":"jsonp的原理和实现","comments":1,"date":"2021-03-07T09:07:42.000Z","_content":"\n在应对浏览器跨域问题时，我们经常会遇到一种解决方法，使用`jsonp`。那么`jsonp`到底是什么呢？\n\n<!-- more -->\n\n## 概述\njsonp是一种跨域通信的手段，它的原理其实很简单：\n\n* 首先是利用script标签的src属性来实现跨域。\n\n* 通过将前端方法作为参数传递到服务器端，然后由服务器端注入参数之后再返回，实现服务器端向客户端通信。\n\n* 由于使用script标签的src属性，因此只支持get方法\n\n## 实现流程\n设定一个script标签\n```\n<script src=\"http://jsonp.js?callback=xxx\"></script>\n```\n`callback`定义了一个函数名，而远程服务端通过调用指定的函数并传入参数来实现传递参数，将`fn(response)`传递回客户端\n```\n$callback = !empty($_GET['callback']) ? $_GET['callback'] : 'callback';\necho $callback.'(.json_encode($data).)';\n```\n客户端接收到返回的js脚本，开始解析和执行`fn(response)`\n\n## jsonp简单实现\n一个简单的jsonp实现，其实就是拼接url，然后将动态添加一个script元素到头部。\n```\nfunction jsonp(req){\n    var script = document.createElement('script');\n    var url = req.url + '?callback=' + req.callback.name;\n    script.src = url;\n    document.getElementsByTagName('head')[0].appendChild(script); \n}\n```\n前端js示例\n```\nfunction hello(res){\n    alert('hello ' + res.data);\n}\njsonp({\n    url : '',\n    callback : hello \n});\n```\n服务器端代码\n```\nvar http = require('http');\nvar urllib = require('url');\n\nvar port = 8080;\nvar data = {'data':'world'};\n\nhttp.createServer(function(req,res){\n    var params = urllib.parse(req.url,true);\n    if(params.query.callback){\n        console.log(params.query.callback);\n        //jsonp\n        var str = params.query.callback + '(' + JSON.stringify(data) + ')';\n        res.end(str);\n    } else {\n        res.end();\n    }\n    \n}).listen(port,function(){\n    console.log('jsonp server is on');\n});\n```\n然而，这个实现虽然简单，但有一些不足的地方：\n\n* 我们传递的回调必须是一个全局方法，我们都知道要尽量减少全局的方法。\n\n* 需要加入一些参数校验，确保接口可以正常执行。\n\n## 可靠的jsonp实现\n```\n(function (global) {\n    var id = 0,\n        container = document.getElementsByTagName(\"head\")[0];\n\n    function jsonp(options) {\n        if(!options || !options.url) return;\n\n        var scriptNode = document.createElement(\"script\"),\n            data = options.data || {},\n            url = options.url,\n            callback = options.callback,\n            fnName = \"jsonp\" + id++;\n\n        // 添加回调函数\n        data[\"callback\"] = fnName;\n\n        // 拼接url\n        var params = [];\n        for (var key in data) {\n            params.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(data[key]));\n        }\n        url = url.indexOf(\"?\") > 0 ? (url + \"&\") : (url + \"?\");\n        url += params.join(\"&\");\n        scriptNode.src = url;\n\n        // 传递的是一个匿名的回调函数，要执行的话，暴露为一个全局方法\n        global[fnName] = function (ret) {\n            callback && callback(ret);\n            container.removeChild(scriptNode);\n            delete global[fnName];\n        }\n\n        // 出错处理\n        scriptNode.onerror = function () {\n            callback && callback({error:\"error\"});\n            container.removeChild(scriptNode);\n            global[fnName] && delete global[fnName];\n        }\n\n        scriptNode.type = \"text/javascript\";\n        container.appendChild(scriptNode)\n    }\n\n    global.jsonp = jsonp;\n\n})(this);\n```\n使用示例\n```\njsonp({\n    url : \"www.example.com\",\n    data : {id : 1},\n    callback : function (ret) {\n        console.log(ret);\n    }\n});\n```\n\n## 参考\n[jsonp的原理与实现](https://segmentfault.com/a/1190000007665361)\n","source":"_posts/2021-03-07-jsonp.md","raw":"---\nlayout: post\ntitle: jsonp的原理和实现\ntags: [javascript]\ncomments: true\ndate: 2021-03-07 17:07:42\n---\n\n在应对浏览器跨域问题时，我们经常会遇到一种解决方法，使用`jsonp`。那么`jsonp`到底是什么呢？\n\n<!-- more -->\n\n## 概述\njsonp是一种跨域通信的手段，它的原理其实很简单：\n\n* 首先是利用script标签的src属性来实现跨域。\n\n* 通过将前端方法作为参数传递到服务器端，然后由服务器端注入参数之后再返回，实现服务器端向客户端通信。\n\n* 由于使用script标签的src属性，因此只支持get方法\n\n## 实现流程\n设定一个script标签\n```\n<script src=\"http://jsonp.js?callback=xxx\"></script>\n```\n`callback`定义了一个函数名，而远程服务端通过调用指定的函数并传入参数来实现传递参数，将`fn(response)`传递回客户端\n```\n$callback = !empty($_GET['callback']) ? $_GET['callback'] : 'callback';\necho $callback.'(.json_encode($data).)';\n```\n客户端接收到返回的js脚本，开始解析和执行`fn(response)`\n\n## jsonp简单实现\n一个简单的jsonp实现，其实就是拼接url，然后将动态添加一个script元素到头部。\n```\nfunction jsonp(req){\n    var script = document.createElement('script');\n    var url = req.url + '?callback=' + req.callback.name;\n    script.src = url;\n    document.getElementsByTagName('head')[0].appendChild(script); \n}\n```\n前端js示例\n```\nfunction hello(res){\n    alert('hello ' + res.data);\n}\njsonp({\n    url : '',\n    callback : hello \n});\n```\n服务器端代码\n```\nvar http = require('http');\nvar urllib = require('url');\n\nvar port = 8080;\nvar data = {'data':'world'};\n\nhttp.createServer(function(req,res){\n    var params = urllib.parse(req.url,true);\n    if(params.query.callback){\n        console.log(params.query.callback);\n        //jsonp\n        var str = params.query.callback + '(' + JSON.stringify(data) + ')';\n        res.end(str);\n    } else {\n        res.end();\n    }\n    \n}).listen(port,function(){\n    console.log('jsonp server is on');\n});\n```\n然而，这个实现虽然简单，但有一些不足的地方：\n\n* 我们传递的回调必须是一个全局方法，我们都知道要尽量减少全局的方法。\n\n* 需要加入一些参数校验，确保接口可以正常执行。\n\n## 可靠的jsonp实现\n```\n(function (global) {\n    var id = 0,\n        container = document.getElementsByTagName(\"head\")[0];\n\n    function jsonp(options) {\n        if(!options || !options.url) return;\n\n        var scriptNode = document.createElement(\"script\"),\n            data = options.data || {},\n            url = options.url,\n            callback = options.callback,\n            fnName = \"jsonp\" + id++;\n\n        // 添加回调函数\n        data[\"callback\"] = fnName;\n\n        // 拼接url\n        var params = [];\n        for (var key in data) {\n            params.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(data[key]));\n        }\n        url = url.indexOf(\"?\") > 0 ? (url + \"&\") : (url + \"?\");\n        url += params.join(\"&\");\n        scriptNode.src = url;\n\n        // 传递的是一个匿名的回调函数，要执行的话，暴露为一个全局方法\n        global[fnName] = function (ret) {\n            callback && callback(ret);\n            container.removeChild(scriptNode);\n            delete global[fnName];\n        }\n\n        // 出错处理\n        scriptNode.onerror = function () {\n            callback && callback({error:\"error\"});\n            container.removeChild(scriptNode);\n            global[fnName] && delete global[fnName];\n        }\n\n        scriptNode.type = \"text/javascript\";\n        container.appendChild(scriptNode)\n    }\n\n    global.jsonp = jsonp;\n\n})(this);\n```\n使用示例\n```\njsonp({\n    url : \"www.example.com\",\n    data : {id : 1},\n    callback : function (ret) {\n        console.log(ret);\n    }\n});\n```\n\n## 参考\n[jsonp的原理与实现](https://segmentfault.com/a/1190000007665361)\n","slug":"2021-03-07-jsonp","published":1,"updated":"2021-04-06T06:22:07.560Z","photos":[],"link":"","_id":"ckoe9igwj002t8cpn7r7y6e95","content":"<p>在应对浏览器跨域问题时，我们经常会遇到一种解决方法，使用<code>jsonp</code>。那么<code>jsonp</code>到底是什么呢？</p>\n<a id=\"more\"></a>\n\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>jsonp是一种跨域通信的手段，它的原理其实很简单：</p>\n<ul>\n<li><p>首先是利用script标签的src属性来实现跨域。</p>\n</li>\n<li><p>通过将前端方法作为参数传递到服务器端，然后由服务器端注入参数之后再返回，实现服务器端向客户端通信。</p>\n</li>\n<li><p>由于使用script标签的src属性，因此只支持get方法</p>\n</li>\n</ul>\n<h2 id=\"实现流程\"><a href=\"#实现流程\" class=\"headerlink\" title=\"实现流程\"></a>实现流程</h2><p>设定一个script标签</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://jsonp.js?callback=xxx&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>callback</code>定义了一个函数名，而远程服务端通过调用指定的函数并传入参数来实现传递参数，将<code>fn(response)</code>传递回客户端</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$callback = !<span class=\"keyword\">empty</span>($_GET[<span class=\"string\">&#x27;callback&#x27;</span>]) ? $_GET[<span class=\"string\">&#x27;callback&#x27;</span>] : <span class=\"string\">&#x27;callback&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $callback.<span class=\"string\">&#x27;(.json_encode($data).)&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>客户端接收到返回的js脚本，开始解析和执行<code>fn(response)</code></p>\n<h2 id=\"jsonp简单实现\"><a href=\"#jsonp简单实现\" class=\"headerlink\" title=\"jsonp简单实现\"></a>jsonp简单实现</h2><p>一个简单的jsonp实现，其实就是拼接url，然后将动态添加一个script元素到头部。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">function jsonp(req)&#123;</span><br><span class=\"line\">    var<span class=\"built_in\"> script </span>= document.createElement(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">    var url = req.url + <span class=\"string\">&#x27;?callback=&#x27;</span> + req.callback.name;</span><br><span class=\"line\">    script.src = url;</span><br><span class=\"line\">    document.getElementsByTagName(<span class=\"string\">&#x27;head&#x27;</span>)[0].appendChild(script); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>前端js示例</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">function</span> <span class=\"selector-tag\">hello</span>(res)&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">alert</span>(<span class=\"string\">&#x27;hello &#x27;</span> + res.data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">jsonp</span>(&#123;</span><br><span class=\"line\">    <span class=\"attribute\">url </span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attribute\">callback </span>: hello </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>服务器端代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> urllib = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;url&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> port = <span class=\"number\">8080</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;<span class=\"string\">&#x27;data&#x27;</span>:<span class=\"string\">&#x27;world&#x27;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> params = urllib.parse(req.url,<span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(params.query.callback)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(params.query.callback);</span><br><span class=\"line\">        <span class=\"comment\">//jsonp</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> str = params.query.callback + <span class=\"string\">&#x27;(&#x27;</span> + <span class=\"built_in\">JSON</span>.stringify(data) + <span class=\"string\">&#x27;)&#x27;</span>;</span><br><span class=\"line\">        res.end(str);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        res.end();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;).listen(port,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;jsonp server is on&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>然而，这个实现虽然简单，但有一些不足的地方：</p>\n<ul>\n<li><p>我们传递的回调必须是一个全局方法，我们都知道要尽量减少全局的方法。</p>\n</li>\n<li><p>需要加入一些参数校验，确保接口可以正常执行。</p>\n</li>\n</ul>\n<h2 id=\"可靠的jsonp实现\"><a href=\"#可靠的jsonp实现\" class=\"headerlink\" title=\"可靠的jsonp实现\"></a>可靠的jsonp实现</h2><figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"name\">function</span> (<span class=\"name\">global</span>) &#123;</span><br><span class=\"line\">    var id = <span class=\"number\">0</span>,</span><br><span class=\"line\">        container = document.getElementsByTagName(<span class=\"string\">&quot;head&quot;</span>)[<span class=\"number\">0</span>]<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    function jsonp(<span class=\"name\">options</span>) &#123;</span><br><span class=\"line\">        if(<span class=\"name\">!options</span> || !options.url) return;</span><br><span class=\"line\"></span><br><span class=\"line\">        var scriptNode = document.createElement(<span class=\"string\">&quot;script&quot;</span>),</span><br><span class=\"line\">            data = options.data || &#123;&#125;,</span><br><span class=\"line\">            url = options.url,</span><br><span class=\"line\">            callback = options.callback,</span><br><span class=\"line\">            fnName = <span class=\"string\">&quot;jsonp&quot;</span> + id++;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 添加回调函数</span><br><span class=\"line\">        data[<span class=\"string\">&quot;callback&quot;</span>] = fnName;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 拼接url</span><br><span class=\"line\">        var params = []<span class=\"comment\">;</span></span><br><span class=\"line\">        for (<span class=\"name\"><span class=\"builtin-name\">var</span></span> key in data) &#123;</span><br><span class=\"line\">            params.push(<span class=\"name\">encodeURIComponent</span>(<span class=\"name\"><span class=\"builtin-name\">key</span></span>) + <span class=\"string\">&quot;=&quot;</span> + encodeURIComponent(<span class=\"name\">data</span>[key]))<span class=\"comment\">;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        url = url.indexOf(<span class=\"string\">&quot;?&quot;</span>) &gt; <span class=\"number\">0</span> ? (<span class=\"name\">url</span> + <span class=\"string\">&quot;&amp;&quot;</span>) : (<span class=\"name\">url</span> + <span class=\"string\">&quot;?&quot;</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">        url += params.join(<span class=\"string\">&quot;&amp;&quot;</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">        scriptNode.src = url;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 传递的是一个匿名的回调函数，要执行的话，暴露为一个全局方法</span><br><span class=\"line\">        global[fnName] = function (<span class=\"name\">ret</span>) &#123;</span><br><span class=\"line\">            callback &amp;&amp; callback(<span class=\"name\">ret</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">            container.removeChild(<span class=\"name\">scriptNode</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">            delete global[fnName]<span class=\"comment\">;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 出错处理</span><br><span class=\"line\">        scriptNode.onerror = function () &#123;</span><br><span class=\"line\">            callback &amp;&amp; callback(&#123;error:<span class=\"string\">&quot;error&quot;</span>&#125;)<span class=\"comment\">;</span></span><br><span class=\"line\">            container.removeChild(<span class=\"name\">scriptNode</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">            global[fnName] &amp;&amp; delete global[fnName]<span class=\"comment\">;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        scriptNode.type = <span class=\"string\">&quot;text/javascript&quot;</span><span class=\"comment\">;</span></span><br><span class=\"line\">        container.appendChild(<span class=\"name\">scriptNode</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    global.jsonp = jsonp;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)(<span class=\"name\">this</span>)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>使用示例</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">jsonp</span>(&#123;</span><br><span class=\"line\">    <span class=\"attribute\">url </span>: <span class=\"string\">&quot;www.example.com&quot;</span>,</span><br><span class=\"line\">    <span class=\"attribute\">data </span>: &#123;<span class=\"attribute\">id </span>: <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">    <span class=\"attribute\">callback </span>: function (ret) &#123;</span><br><span class=\"line\">        console.log(ret);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://segmentfault.com/a/1190000007665361\">jsonp的原理与实现</a></p>\n","site":{"data":{}},"excerpt":"<p>在应对浏览器跨域问题时，我们经常会遇到一种解决方法，使用<code>jsonp</code>。那么<code>jsonp</code>到底是什么呢？</p>","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>jsonp是一种跨域通信的手段，它的原理其实很简单：</p>\n<ul>\n<li><p>首先是利用script标签的src属性来实现跨域。</p>\n</li>\n<li><p>通过将前端方法作为参数传递到服务器端，然后由服务器端注入参数之后再返回，实现服务器端向客户端通信。</p>\n</li>\n<li><p>由于使用script标签的src属性，因此只支持get方法</p>\n</li>\n</ul>\n<h2 id=\"实现流程\"><a href=\"#实现流程\" class=\"headerlink\" title=\"实现流程\"></a>实现流程</h2><p>设定一个script标签</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://jsonp.js?callback=xxx&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>callback</code>定义了一个函数名，而远程服务端通过调用指定的函数并传入参数来实现传递参数，将<code>fn(response)</code>传递回客户端</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$callback = !<span class=\"keyword\">empty</span>($_GET[<span class=\"string\">&#x27;callback&#x27;</span>]) ? $_GET[<span class=\"string\">&#x27;callback&#x27;</span>] : <span class=\"string\">&#x27;callback&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $callback.<span class=\"string\">&#x27;(.json_encode($data).)&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>客户端接收到返回的js脚本，开始解析和执行<code>fn(response)</code></p>\n<h2 id=\"jsonp简单实现\"><a href=\"#jsonp简单实现\" class=\"headerlink\" title=\"jsonp简单实现\"></a>jsonp简单实现</h2><p>一个简单的jsonp实现，其实就是拼接url，然后将动态添加一个script元素到头部。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">function jsonp(req)&#123;</span><br><span class=\"line\">    var<span class=\"built_in\"> script </span>= document.createElement(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">    var url = req.url + <span class=\"string\">&#x27;?callback=&#x27;</span> + req.callback.name;</span><br><span class=\"line\">    script.src = url;</span><br><span class=\"line\">    document.getElementsByTagName(<span class=\"string\">&#x27;head&#x27;</span>)[0].appendChild(script); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>前端js示例</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">function</span> <span class=\"selector-tag\">hello</span>(res)&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">alert</span>(<span class=\"string\">&#x27;hello &#x27;</span> + res.data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">jsonp</span>(&#123;</span><br><span class=\"line\">    <span class=\"attribute\">url </span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attribute\">callback </span>: hello </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>服务器端代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> urllib = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;url&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> port = <span class=\"number\">8080</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;<span class=\"string\">&#x27;data&#x27;</span>:<span class=\"string\">&#x27;world&#x27;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> params = urllib.parse(req.url,<span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(params.query.callback)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(params.query.callback);</span><br><span class=\"line\">        <span class=\"comment\">//jsonp</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> str = params.query.callback + <span class=\"string\">&#x27;(&#x27;</span> + <span class=\"built_in\">JSON</span>.stringify(data) + <span class=\"string\">&#x27;)&#x27;</span>;</span><br><span class=\"line\">        res.end(str);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        res.end();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;).listen(port,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;jsonp server is on&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>然而，这个实现虽然简单，但有一些不足的地方：</p>\n<ul>\n<li><p>我们传递的回调必须是一个全局方法，我们都知道要尽量减少全局的方法。</p>\n</li>\n<li><p>需要加入一些参数校验，确保接口可以正常执行。</p>\n</li>\n</ul>\n<h2 id=\"可靠的jsonp实现\"><a href=\"#可靠的jsonp实现\" class=\"headerlink\" title=\"可靠的jsonp实现\"></a>可靠的jsonp实现</h2><figure class=\"highlight clojure\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"name\">function</span> (<span class=\"name\">global</span>) &#123;</span><br><span class=\"line\">    var id = <span class=\"number\">0</span>,</span><br><span class=\"line\">        container = document.getElementsByTagName(<span class=\"string\">&quot;head&quot;</span>)[<span class=\"number\">0</span>]<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    function jsonp(<span class=\"name\">options</span>) &#123;</span><br><span class=\"line\">        if(<span class=\"name\">!options</span> || !options.url) return;</span><br><span class=\"line\"></span><br><span class=\"line\">        var scriptNode = document.createElement(<span class=\"string\">&quot;script&quot;</span>),</span><br><span class=\"line\">            data = options.data || &#123;&#125;,</span><br><span class=\"line\">            url = options.url,</span><br><span class=\"line\">            callback = options.callback,</span><br><span class=\"line\">            fnName = <span class=\"string\">&quot;jsonp&quot;</span> + id++;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 添加回调函数</span><br><span class=\"line\">        data[<span class=\"string\">&quot;callback&quot;</span>] = fnName;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 拼接url</span><br><span class=\"line\">        var params = []<span class=\"comment\">;</span></span><br><span class=\"line\">        for (<span class=\"name\"><span class=\"builtin-name\">var</span></span> key in data) &#123;</span><br><span class=\"line\">            params.push(<span class=\"name\">encodeURIComponent</span>(<span class=\"name\"><span class=\"builtin-name\">key</span></span>) + <span class=\"string\">&quot;=&quot;</span> + encodeURIComponent(<span class=\"name\">data</span>[key]))<span class=\"comment\">;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        url = url.indexOf(<span class=\"string\">&quot;?&quot;</span>) &gt; <span class=\"number\">0</span> ? (<span class=\"name\">url</span> + <span class=\"string\">&quot;&amp;&quot;</span>) : (<span class=\"name\">url</span> + <span class=\"string\">&quot;?&quot;</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">        url += params.join(<span class=\"string\">&quot;&amp;&quot;</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">        scriptNode.src = url;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 传递的是一个匿名的回调函数，要执行的话，暴露为一个全局方法</span><br><span class=\"line\">        global[fnName] = function (<span class=\"name\">ret</span>) &#123;</span><br><span class=\"line\">            callback &amp;&amp; callback(<span class=\"name\">ret</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">            container.removeChild(<span class=\"name\">scriptNode</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">            delete global[fnName]<span class=\"comment\">;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 出错处理</span><br><span class=\"line\">        scriptNode.onerror = function () &#123;</span><br><span class=\"line\">            callback &amp;&amp; callback(&#123;error:<span class=\"string\">&quot;error&quot;</span>&#125;)<span class=\"comment\">;</span></span><br><span class=\"line\">            container.removeChild(<span class=\"name\">scriptNode</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">            global[fnName] &amp;&amp; delete global[fnName]<span class=\"comment\">;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        scriptNode.type = <span class=\"string\">&quot;text/javascript&quot;</span><span class=\"comment\">;</span></span><br><span class=\"line\">        container.appendChild(<span class=\"name\">scriptNode</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    global.jsonp = jsonp;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)(<span class=\"name\">this</span>)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>使用示例</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">jsonp</span>(&#123;</span><br><span class=\"line\">    <span class=\"attribute\">url </span>: <span class=\"string\">&quot;www.example.com&quot;</span>,</span><br><span class=\"line\">    <span class=\"attribute\">data </span>: &#123;<span class=\"attribute\">id </span>: <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">    <span class=\"attribute\">callback </span>: function (ret) &#123;</span><br><span class=\"line\">        console.log(ret);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://segmentfault.com/a/1190000007665361\">jsonp的原理与实现</a></p>"},{"layout":"post","title":"angular css样式作用域","comments":1,"date":"2021-03-20T08:56:01.000Z","_content":"\n在使用`angular`时，我们发现每个组件的`css`作用域都是独立的，且无法修改引用组件的样式，这是因为：  \n\n<!-- more -->\n在封装组件的时候，组件会分配一个唯一的属性，并将这个属性添加到组件内的每一个标签上，封装后的样式表的选择器中会加上属性选择器，从而形成了一个样式表的作用域，域内样式不会影响外部  \n这与`Vue`中的`scoped`属性原理一样，我们引入`ViewEncapsulation `类就可以解决这个问题\n\n## ViewEncapsulation\n```\nenum ViewEncapsulation {\n  Emulated\n  Native\n  None\n}\n```\n`ViewEncapsulation` 的值是用来指定，在封装Angular组件的时候，如何处理样式和标签之间的关系，默认值是：`ViewEncapsulation.Emulated`;\n用法是：\n```\nimport { ViewEncapsulation } from \"@angular/core\";\n\n@Component({\n  templateUrl: \"./login.html\",\n  styleUrls: ['./login.css','/bootstrap/css/bootstrap.min.css'],\n  encapsulation: ViewEncapsulation.Emulated\n})\n```\n### ViewEncapsulation.Emulated\n这种方式在封装组件的时候，会给组件分配一个唯一的属性，并将这个属性添加到组件内的每一个标签上，封装后的样式表的选择器中会加上属性选择器，从而形成了一个样式表的作用域，域内样式不会影响外部，但是组件会受到父级样式的影响\n\n\n\n### ViewEncapsulation.Native\n这种方式把组件封装成一个shadow DOM；\n\n\n### ViewEncapsulation.None\n这种方法的样式表为全局的作用域，组件中声明的样式既可以影响到本组件，同时也会影响全局样式表；反过来，该组件收全局样式表的影响。\n\n两种情况：\n1、外部样式表作用的标签是静态的（如`bootstrap`）:\n\n直接在组件元数据中引入，使用默认方式：\n```\n@Component({\n  templateUrl: \"./login.html\",\n  styleUrls: ['./login.css','/bootstrap/css/bootstrap.min.css']\n})\n```\n2、样式表作用于动态创建的标签（如创建一个富文本编辑器`CKEditor`，`wangEditor`等）：\n\n因为标签是动态创建的，也就是说打包组件的时候，引入的外部样式表作用的标签尚未存在（代码运行的时候，new一个Editor之后才会创建标签），而打包的时候却给所有选择器都添加了一个属性选择器，因此，动态创建的标签就不会被引入的样式表影响。也就是说新创建的标签不属于组件这个作用域。为了避免这种情况，只能在打包组件的时候，不给这个组件创建作用于：\n```\nimport { ViewEncapsulation } from \"@angular/core\";\n\n@Component({\n  templateUrl: \"./login.html\",\n  styleUrls: ['./login.css','/bootstrap/css/bootstrap.min.css'],\n  encapsulation: ViewEncapsulation.None\n})\n```\n\n## 参考\n[在Angular组件中引入外部样式](https://blog.csdn.net/u011135260/article/details/78196516)\n","source":"_posts/2021-03-20-angular-css-scope.md","raw":"---\nlayout: post\ntitle: angular css样式作用域\ntags: [javascript, angular]\ncomments: true\ndate: 2021-03-20 16:56:01\n---\n\n在使用`angular`时，我们发现每个组件的`css`作用域都是独立的，且无法修改引用组件的样式，这是因为：  \n\n<!-- more -->\n在封装组件的时候，组件会分配一个唯一的属性，并将这个属性添加到组件内的每一个标签上，封装后的样式表的选择器中会加上属性选择器，从而形成了一个样式表的作用域，域内样式不会影响外部  \n这与`Vue`中的`scoped`属性原理一样，我们引入`ViewEncapsulation `类就可以解决这个问题\n\n## ViewEncapsulation\n```\nenum ViewEncapsulation {\n  Emulated\n  Native\n  None\n}\n```\n`ViewEncapsulation` 的值是用来指定，在封装Angular组件的时候，如何处理样式和标签之间的关系，默认值是：`ViewEncapsulation.Emulated`;\n用法是：\n```\nimport { ViewEncapsulation } from \"@angular/core\";\n\n@Component({\n  templateUrl: \"./login.html\",\n  styleUrls: ['./login.css','/bootstrap/css/bootstrap.min.css'],\n  encapsulation: ViewEncapsulation.Emulated\n})\n```\n### ViewEncapsulation.Emulated\n这种方式在封装组件的时候，会给组件分配一个唯一的属性，并将这个属性添加到组件内的每一个标签上，封装后的样式表的选择器中会加上属性选择器，从而形成了一个样式表的作用域，域内样式不会影响外部，但是组件会受到父级样式的影响\n\n\n\n### ViewEncapsulation.Native\n这种方式把组件封装成一个shadow DOM；\n\n\n### ViewEncapsulation.None\n这种方法的样式表为全局的作用域，组件中声明的样式既可以影响到本组件，同时也会影响全局样式表；反过来，该组件收全局样式表的影响。\n\n两种情况：\n1、外部样式表作用的标签是静态的（如`bootstrap`）:\n\n直接在组件元数据中引入，使用默认方式：\n```\n@Component({\n  templateUrl: \"./login.html\",\n  styleUrls: ['./login.css','/bootstrap/css/bootstrap.min.css']\n})\n```\n2、样式表作用于动态创建的标签（如创建一个富文本编辑器`CKEditor`，`wangEditor`等）：\n\n因为标签是动态创建的，也就是说打包组件的时候，引入的外部样式表作用的标签尚未存在（代码运行的时候，new一个Editor之后才会创建标签），而打包的时候却给所有选择器都添加了一个属性选择器，因此，动态创建的标签就不会被引入的样式表影响。也就是说新创建的标签不属于组件这个作用域。为了避免这种情况，只能在打包组件的时候，不给这个组件创建作用于：\n```\nimport { ViewEncapsulation } from \"@angular/core\";\n\n@Component({\n  templateUrl: \"./login.html\",\n  styleUrls: ['./login.css','/bootstrap/css/bootstrap.min.css'],\n  encapsulation: ViewEncapsulation.None\n})\n```\n\n## 参考\n[在Angular组件中引入外部样式](https://blog.csdn.net/u011135260/article/details/78196516)\n","slug":"2021-03-20-angular-css-scope","published":1,"updated":"2021-03-20T09:13:54.577Z","photos":[],"link":"","_id":"ckoe9igwl002w8cpnd9qxgky4","content":"<p>在使用<code>angular</code>时，我们发现每个组件的<code>css</code>作用域都是独立的，且无法修改引用组件的样式，这是因为：  </p>\n<a id=\"more\"></a>\n<p>在封装组件的时候，组件会分配一个唯一的属性，并将这个属性添加到组件内的每一个标签上，封装后的样式表的选择器中会加上属性选择器，从而形成了一个样式表的作用域，域内样式不会影响外部<br>这与<code>Vue</code>中的<code>scoped</code>属性原理一样，我们引入<code>ViewEncapsulation </code>类就可以解决这个问题</p>\n<h2 id=\"ViewEncapsulation\"><a href=\"#ViewEncapsulation\" class=\"headerlink\" title=\"ViewEncapsulation\"></a>ViewEncapsulation</h2><figure class=\"highlight crystal\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">ViewEncapsulation</span> &#123;</span></span><br><span class=\"line\">  Emulated</span><br><span class=\"line\">  Native</span><br><span class=\"line\">  None</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>ViewEncapsulation</code> 的值是用来指定，在封装Angular组件的时候，如何处理样式和标签之间的关系，默认值是：<code>ViewEncapsulation.Emulated</code>;<br>用法是：</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ViewEncapsulation &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@angular/core&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">  templateUrl: <span class=\"string\">&quot;./login.html&quot;</span>,</span><br><span class=\"line\">  styleUrls: [<span class=\"string\">&#x27;./login.css&#x27;</span>,<span class=\"string\">&#x27;/bootstrap/css/bootstrap.min.css&#x27;</span>],</span><br><span class=\"line\">  encapsulation: ViewEncapsulation.Emulated</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"ViewEncapsulation-Emulated\"><a href=\"#ViewEncapsulation-Emulated\" class=\"headerlink\" title=\"ViewEncapsulation.Emulated\"></a>ViewEncapsulation.Emulated</h3><p>这种方式在封装组件的时候，会给组件分配一个唯一的属性，并将这个属性添加到组件内的每一个标签上，封装后的样式表的选择器中会加上属性选择器，从而形成了一个样式表的作用域，域内样式不会影响外部，但是组件会受到父级样式的影响</p>\n<h3 id=\"ViewEncapsulation-Native\"><a href=\"#ViewEncapsulation-Native\" class=\"headerlink\" title=\"ViewEncapsulation.Native\"></a>ViewEncapsulation.Native</h3><p>这种方式把组件封装成一个shadow DOM；</p>\n<h3 id=\"ViewEncapsulation-None\"><a href=\"#ViewEncapsulation-None\" class=\"headerlink\" title=\"ViewEncapsulation.None\"></a>ViewEncapsulation.None</h3><p>这种方法的样式表为全局的作用域，组件中声明的样式既可以影响到本组件，同时也会影响全局样式表；反过来，该组件收全局样式表的影响。</p>\n<p>两种情况：<br>1、外部样式表作用的标签是静态的（如<code>bootstrap</code>）:</p>\n<p>直接在组件元数据中引入，使用默认方式：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attribute\">templateUrl</span>: <span class=\"string\">&quot;./login.html&quot;</span>,</span><br><span class=\"line\">  <span class=\"attribute\">styleUrls</span>: [<span class=\"string\">&#x27;./login.css&#x27;</span>,<span class=\"string\">&#x27;/bootstrap/css/bootstrap.min.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>2、样式表作用于动态创建的标签（如创建一个富文本编辑器<code>CKEditor</code>，<code>wangEditor</code>等）：</p>\n<p>因为标签是动态创建的，也就是说打包组件的时候，引入的外部样式表作用的标签尚未存在（代码运行的时候，new一个Editor之后才会创建标签），而打包的时候却给所有选择器都添加了一个属性选择器，因此，动态创建的标签就不会被引入的样式表影响。也就是说新创建的标签不属于组件这个作用域。为了避免这种情况，只能在打包组件的时候，不给这个组件创建作用于：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ViewEncapsulation &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@angular/core&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component(&#123;</span></span><br><span class=\"line\">  templateUrl: <span class=\"string\">&quot;./login.html&quot;</span>,</span><br><span class=\"line\">  styleUrls: [<span class=\"string\">&#x27;./login.css&#x27;</span>,<span class=\"string\">&#x27;/bootstrap/css/bootstrap.min.css&#x27;</span>],</span><br><span class=\"line\">  encapsulation: ViewEncapsulation.<span class=\"literal\">None</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://blog.csdn.net/u011135260/article/details/78196516\">在Angular组件中引入外部样式</a></p>\n","site":{"data":{}},"excerpt":"<p>在使用<code>angular</code>时，我们发现每个组件的<code>css</code>作用域都是独立的，且无法修改引用组件的样式，这是因为：  </p>","more":"<p>在封装组件的时候，组件会分配一个唯一的属性，并将这个属性添加到组件内的每一个标签上，封装后的样式表的选择器中会加上属性选择器，从而形成了一个样式表的作用域，域内样式不会影响外部<br>这与<code>Vue</code>中的<code>scoped</code>属性原理一样，我们引入<code>ViewEncapsulation </code>类就可以解决这个问题</p>\n<h2 id=\"ViewEncapsulation\"><a href=\"#ViewEncapsulation\" class=\"headerlink\" title=\"ViewEncapsulation\"></a>ViewEncapsulation</h2><figure class=\"highlight crystal\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">ViewEncapsulation</span> &#123;</span></span><br><span class=\"line\">  Emulated</span><br><span class=\"line\">  Native</span><br><span class=\"line\">  None</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>ViewEncapsulation</code> 的值是用来指定，在封装Angular组件的时候，如何处理样式和标签之间的关系，默认值是：<code>ViewEncapsulation.Emulated</code>;<br>用法是：</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ViewEncapsulation &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@angular/core&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">  templateUrl: <span class=\"string\">&quot;./login.html&quot;</span>,</span><br><span class=\"line\">  styleUrls: [<span class=\"string\">&#x27;./login.css&#x27;</span>,<span class=\"string\">&#x27;/bootstrap/css/bootstrap.min.css&#x27;</span>],</span><br><span class=\"line\">  encapsulation: ViewEncapsulation.Emulated</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"ViewEncapsulation-Emulated\"><a href=\"#ViewEncapsulation-Emulated\" class=\"headerlink\" title=\"ViewEncapsulation.Emulated\"></a>ViewEncapsulation.Emulated</h3><p>这种方式在封装组件的时候，会给组件分配一个唯一的属性，并将这个属性添加到组件内的每一个标签上，封装后的样式表的选择器中会加上属性选择器，从而形成了一个样式表的作用域，域内样式不会影响外部，但是组件会受到父级样式的影响</p>\n<h3 id=\"ViewEncapsulation-Native\"><a href=\"#ViewEncapsulation-Native\" class=\"headerlink\" title=\"ViewEncapsulation.Native\"></a>ViewEncapsulation.Native</h3><p>这种方式把组件封装成一个shadow DOM；</p>\n<h3 id=\"ViewEncapsulation-None\"><a href=\"#ViewEncapsulation-None\" class=\"headerlink\" title=\"ViewEncapsulation.None\"></a>ViewEncapsulation.None</h3><p>这种方法的样式表为全局的作用域，组件中声明的样式既可以影响到本组件，同时也会影响全局样式表；反过来，该组件收全局样式表的影响。</p>\n<p>两种情况：<br>1、外部样式表作用的标签是静态的（如<code>bootstrap</code>）:</p>\n<p>直接在组件元数据中引入，使用默认方式：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attribute\">templateUrl</span>: <span class=\"string\">&quot;./login.html&quot;</span>,</span><br><span class=\"line\">  <span class=\"attribute\">styleUrls</span>: [<span class=\"string\">&#x27;./login.css&#x27;</span>,<span class=\"string\">&#x27;/bootstrap/css/bootstrap.min.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>2、样式表作用于动态创建的标签（如创建一个富文本编辑器<code>CKEditor</code>，<code>wangEditor</code>等）：</p>\n<p>因为标签是动态创建的，也就是说打包组件的时候，引入的外部样式表作用的标签尚未存在（代码运行的时候，new一个Editor之后才会创建标签），而打包的时候却给所有选择器都添加了一个属性选择器，因此，动态创建的标签就不会被引入的样式表影响。也就是说新创建的标签不属于组件这个作用域。为了避免这种情况，只能在打包组件的时候，不给这个组件创建作用于：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ViewEncapsulation &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@angular/core&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component(&#123;</span></span><br><span class=\"line\">  templateUrl: <span class=\"string\">&quot;./login.html&quot;</span>,</span><br><span class=\"line\">  styleUrls: [<span class=\"string\">&#x27;./login.css&#x27;</span>,<span class=\"string\">&#x27;/bootstrap/css/bootstrap.min.css&#x27;</span>],</span><br><span class=\"line\">  encapsulation: ViewEncapsulation.<span class=\"literal\">None</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://blog.csdn.net/u011135260/article/details/78196516\">在Angular组件中引入外部样式</a></p>"},{"layout":"post","title":"跨域（服务端解决）","comments":1,"date":"2021-03-20T09:31:30.000Z","_content":"\n在开发web项目的时候，经常会遇见跨域问题，虽然是个前端，但是了解一些后端解决跨域的方法，有助于我们更快解决问题\n<!-- more -->\n\n## nodejs express框架跨域解决\n\n```\napp.all(\"*\",function(req,res,next){\n  //设置允许跨域的域名，*代表允许任意域名跨域\n  res.header(\"Access-Control-Allow-Origin\",\"*\");\n\n  //允许的header类型\n  res.header(\"Access-Control-Allow-Headers\",\"Origin, X-Requested-With, Content-Type, Accept, Authorization\");\n\n  //跨域允许的请求方式\n  res.header(\"Access-Control-Allow-Methods\",\"DELETE,PUT,POST,GET,OPTIONS\");\n  next();\n});\n```\n\n## nginx转发跨域\nnginx设置\n```\nlocation ~ ^/aaaa {\n    add_header Access-Control-Allow-Origin *;\n    add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';\n    add_header Access-Control-Allow-Headers 'Origin, X-Requested-With, Content-Type, Accept, Authorization';\n    proxy_pass http://xx.xx.xx.xx:7071;\n}\n```\n\n","source":"_posts/2021-03-20-cross-domain-server.md","raw":"---\nlayout: post\ntitle: 跨域（服务端解决）\ntags: [web, nodejs, javascript]\ncomments: true\ndate: 2021-03-20 17:31:30\n---\n\n在开发web项目的时候，经常会遇见跨域问题，虽然是个前端，但是了解一些后端解决跨域的方法，有助于我们更快解决问题\n<!-- more -->\n\n## nodejs express框架跨域解决\n\n```\napp.all(\"*\",function(req,res,next){\n  //设置允许跨域的域名，*代表允许任意域名跨域\n  res.header(\"Access-Control-Allow-Origin\",\"*\");\n\n  //允许的header类型\n  res.header(\"Access-Control-Allow-Headers\",\"Origin, X-Requested-With, Content-Type, Accept, Authorization\");\n\n  //跨域允许的请求方式\n  res.header(\"Access-Control-Allow-Methods\",\"DELETE,PUT,POST,GET,OPTIONS\");\n  next();\n});\n```\n\n## nginx转发跨域\nnginx设置\n```\nlocation ~ ^/aaaa {\n    add_header Access-Control-Allow-Origin *;\n    add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';\n    add_header Access-Control-Allow-Headers 'Origin, X-Requested-With, Content-Type, Accept, Authorization';\n    proxy_pass http://xx.xx.xx.xx:7071;\n}\n```\n\n","slug":"2021-03-20-cross-domain-server","published":1,"updated":"2021-03-20T09:57:46.428Z","photos":[],"link":"","_id":"ckoe9igwm002y8cpn0k768010","content":"<p>在开发web项目的时候，经常会遇见跨域问题，虽然是个前端，但是了解一些后端解决跨域的方法，有助于我们更快解决问题</p>\n<a id=\"more\"></a>\n\n<h2 id=\"nodejs-express框架跨域解决\"><a href=\"#nodejs-express框架跨域解决\" class=\"headerlink\" title=\"nodejs express框架跨域解决\"></a>nodejs express框架跨域解决</h2><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.all(<span class=\"string\">&quot;*&quot;</span>,<span class=\"keyword\">function</span>(req,res,<span class=\"keyword\">next</span>)&#123;</span><br><span class=\"line\">  <span class=\"regexp\">//</span>设置允许跨域的域名，*代表允许任意域名跨域</span><br><span class=\"line\">  res.header(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>,<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"regexp\">//</span>允许的header类型</span><br><span class=\"line\">  res.header(<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span>,<span class=\"string\">&quot;Origin, X-Requested-With, Content-Type, Accept, Authorization&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"regexp\">//</span>跨域允许的请求方式</span><br><span class=\"line\">  res.header(<span class=\"string\">&quot;Access-Control-Allow-Methods&quot;</span>,<span class=\"string\">&quot;DELETE,PUT,POST,GET,OPTIONS&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">next</span>();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nginx转发跨域\"><a href=\"#nginx转发跨域\" class=\"headerlink\" title=\"nginx转发跨域\"></a>nginx转发跨域</h2><p>nginx设置</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> <span class=\"regexp\">~ ^/aaaa</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">add_header</span> Access-Control-Allow-Origin *;</span><br><span class=\"line\">    <span class=\"attribute\">add_header</span> Access-Control-Allow-Methods <span class=\"string\">&#x27;GET, POST, OPTIONS&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">add_header</span> Access-Control-Allow-Headers <span class=\"string\">&#x27;Origin, X-Requested-With, Content-Type, Accept, Authorization&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://xx.xx.xx.xx:7071;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>在开发web项目的时候，经常会遇见跨域问题，虽然是个前端，但是了解一些后端解决跨域的方法，有助于我们更快解决问题</p>","more":"<h2 id=\"nodejs-express框架跨域解决\"><a href=\"#nodejs-express框架跨域解决\" class=\"headerlink\" title=\"nodejs express框架跨域解决\"></a>nodejs express框架跨域解决</h2><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.all(<span class=\"string\">&quot;*&quot;</span>,<span class=\"keyword\">function</span>(req,res,<span class=\"keyword\">next</span>)&#123;</span><br><span class=\"line\">  <span class=\"regexp\">//</span>设置允许跨域的域名，*代表允许任意域名跨域</span><br><span class=\"line\">  res.header(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>,<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"regexp\">//</span>允许的header类型</span><br><span class=\"line\">  res.header(<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span>,<span class=\"string\">&quot;Origin, X-Requested-With, Content-Type, Accept, Authorization&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"regexp\">//</span>跨域允许的请求方式</span><br><span class=\"line\">  res.header(<span class=\"string\">&quot;Access-Control-Allow-Methods&quot;</span>,<span class=\"string\">&quot;DELETE,PUT,POST,GET,OPTIONS&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">next</span>();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nginx转发跨域\"><a href=\"#nginx转发跨域\" class=\"headerlink\" title=\"nginx转发跨域\"></a>nginx转发跨域</h2><p>nginx设置</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> <span class=\"regexp\">~ ^/aaaa</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">add_header</span> Access-Control-Allow-Origin *;</span><br><span class=\"line\">    <span class=\"attribute\">add_header</span> Access-Control-Allow-Methods <span class=\"string\">&#x27;GET, POST, OPTIONS&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">add_header</span> Access-Control-Allow-Headers <span class=\"string\">&#x27;Origin, X-Requested-With, Content-Type, Accept, Authorization&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://xx.xx.xx.xx:7071;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"node-sass安装失败问题汇总","comments":1,"date":"2021-03-20T09:17:45.000Z","_content":"\n`node-scss`是我们常见的依赖包，但是安装的时候，`node-scss`总是报错，特地汇总一下，以避免踩坑\n<!-- more -->\n## npm源速度慢\n由于众所周知的国内网络环境，从国内安装官方源的依赖包会很慢。可以将npm源设置成国内镜像源(如淘宝npm)：\n```\nnpm config set registry https://registry.npm.taobao.org\n```\n或者通过`.npmrc`文件设置:\n```\n// .npmrc\nregistry=https://registry.npm.taobao.org/\n```\n\n## binding.node源无法访问或速度慢\n`node-sass`除了npm部分的代码，还会下载二进制文件`binding.node`，默认源是github，国内访问较慢,特殊时期甚至无法访问。我们也可以将其改成国内源：\n```\n// linux、mac 下\nSASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ npm install node-sass\n\n// window 下\nset SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ && npm install node-sass\n```\n有类似问题的还有chromedriver,phantomjs,electron等常见依赖包,我们可以一并写到.npmrc中:\n```\n// .npmrc\nsass_binary_site=https://npm.taobao.org/mirrors/node-sass\nchromedriver_cdnurl=https://npm.taobao.org/mirrors/chromedriver\nphantomjs_cdnurl=https://npm.taobao.org/mirrors/phantomjs\nelectron_mirror=https://npm.taobao.org/mirrors/electron\n```\n可以参考[npm安装](https://luckyship.gitee.io/2020/12/01/2020-12-01-npm-install-md)\n\n## node版本与node-sass版本不兼容\nnode-sass版本兼容性并不好，老项目中依赖的node-sass很可能已经不兼容新的node，对应版本兼容如下(或参考[官方仓库](https://github.com/sass/node-sass))：\n\n| NodeJS|Minimum node-sass version| Node Module\n|  ----  | ----  |----  |\n|Node 13 |\t4.13+\t|79|\n|Node 12 |\t4.12+\t|72|\n|Node 11 |\t4.10+\t|67|\n|Node 10 |\t4.9+\t|64|\n|Node 8\t |4.5.3+\t|57|\n\n## 缓存中binding.node版本不一致\n假如本地node版本改了，或在不同机器上运行，node版本不一致，会报类似错误：\n```\nFound bindings for the following environments:\n  - Windows 64-bit with Node.js 6.x\n```\n这是因为原有`binding.node`缓存跟现node版本不一致。按提示`npm rebuild node-sass`或清除缓存重新安装即可。\n\n## 安装失败后重新安装\n安装失败后重新安装，有可能无权限删除已安装内容，此时`npm uninstall node-sass`或手动删掉原目录后再安装即可。\n\n## 提示没有安装python、build失败等\n假如拉取`binding.node`失败，node-sass会尝试在本地编译`binding.node`，过程就需要`python`。假如你遇到前面几种情况解决了，实际上也不会出现在本地构建的情况了，我们就不谈这种失败中失败的情况吧 :-)\n","source":"_posts/2021-03-20-node-sass-failure.md","raw":"---\nlayout: post\ntitle: node-sass安装失败问题汇总\ntags: [npm, nodejs, sass]\ncomments: true\ndate: 2021-03-20 17:17:45\n---\n\n`node-scss`是我们常见的依赖包，但是安装的时候，`node-scss`总是报错，特地汇总一下，以避免踩坑\n<!-- more -->\n## npm源速度慢\n由于众所周知的国内网络环境，从国内安装官方源的依赖包会很慢。可以将npm源设置成国内镜像源(如淘宝npm)：\n```\nnpm config set registry https://registry.npm.taobao.org\n```\n或者通过`.npmrc`文件设置:\n```\n// .npmrc\nregistry=https://registry.npm.taobao.org/\n```\n\n## binding.node源无法访问或速度慢\n`node-sass`除了npm部分的代码，还会下载二进制文件`binding.node`，默认源是github，国内访问较慢,特殊时期甚至无法访问。我们也可以将其改成国内源：\n```\n// linux、mac 下\nSASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ npm install node-sass\n\n// window 下\nset SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ && npm install node-sass\n```\n有类似问题的还有chromedriver,phantomjs,electron等常见依赖包,我们可以一并写到.npmrc中:\n```\n// .npmrc\nsass_binary_site=https://npm.taobao.org/mirrors/node-sass\nchromedriver_cdnurl=https://npm.taobao.org/mirrors/chromedriver\nphantomjs_cdnurl=https://npm.taobao.org/mirrors/phantomjs\nelectron_mirror=https://npm.taobao.org/mirrors/electron\n```\n可以参考[npm安装](https://luckyship.gitee.io/2020/12/01/2020-12-01-npm-install-md)\n\n## node版本与node-sass版本不兼容\nnode-sass版本兼容性并不好，老项目中依赖的node-sass很可能已经不兼容新的node，对应版本兼容如下(或参考[官方仓库](https://github.com/sass/node-sass))：\n\n| NodeJS|Minimum node-sass version| Node Module\n|  ----  | ----  |----  |\n|Node 13 |\t4.13+\t|79|\n|Node 12 |\t4.12+\t|72|\n|Node 11 |\t4.10+\t|67|\n|Node 10 |\t4.9+\t|64|\n|Node 8\t |4.5.3+\t|57|\n\n## 缓存中binding.node版本不一致\n假如本地node版本改了，或在不同机器上运行，node版本不一致，会报类似错误：\n```\nFound bindings for the following environments:\n  - Windows 64-bit with Node.js 6.x\n```\n这是因为原有`binding.node`缓存跟现node版本不一致。按提示`npm rebuild node-sass`或清除缓存重新安装即可。\n\n## 安装失败后重新安装\n安装失败后重新安装，有可能无权限删除已安装内容，此时`npm uninstall node-sass`或手动删掉原目录后再安装即可。\n\n## 提示没有安装python、build失败等\n假如拉取`binding.node`失败，node-sass会尝试在本地编译`binding.node`，过程就需要`python`。假如你遇到前面几种情况解决了，实际上也不会出现在本地构建的情况了，我们就不谈这种失败中失败的情况吧 :-)\n","slug":"2021-03-20-node-sass-failure","published":1,"updated":"2021-04-30T12:01:11.345Z","photos":[],"link":"","_id":"ckoe9igwn00318cpn4fb6c0eu","content":"<p><code>node-scss</code>是我们常见的依赖包，但是安装的时候，<code>node-scss</code>总是报错，特地汇总一下，以避免踩坑</p>\n<a id=\"more\"></a>\n<h2 id=\"npm源速度慢\"><a href=\"#npm源速度慢\" class=\"headerlink\" title=\"npm源速度慢\"></a>npm源速度慢</h2><p>由于众所周知的国内网络环境，从国内安装官方源的依赖包会很慢。可以将npm源设置成国内镜像源(如淘宝npm)：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> registry https:<span class=\"comment\">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>\n<p>或者通过<code>.npmrc</code>文件设置:</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> .npmrc</span><br><span class=\"line\">registry=https:<span class=\"regexp\">//</span>registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"binding-node源无法访问或速度慢\"><a href=\"#binding-node源无法访问或速度慢\" class=\"headerlink\" title=\"binding.node源无法访问或速度慢\"></a>binding.node源无法访问或速度慢</h2><p><code>node-sass</code>除了npm部分的代码，还会下载二进制文件<code>binding.node</code>，默认源是github，国内访问较慢,特殊时期甚至无法访问。我们也可以将其改成国内源：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"code\"><pre><span class=\"line\">// linux、mac 下</span><br><span class=\"line\"><span class=\"attr\">SASS_BINARY_SITE=</span>https://npm.taobao.org/mirrors/<span class=\"keyword\">node</span><span class=\"title\">-sass</span>/ npm install <span class=\"keyword\">node</span><span class=\"title\">-sass</span></span><br><span class=\"line\"></span><br><span class=\"line\">// window 下</span><br><span class=\"line\">set <span class=\"attr\">SASS_BINARY_SITE=</span>https://npm.taobao.org/mirrors/<span class=\"keyword\">node</span><span class=\"title\">-sass</span>/ &amp;&amp; npm install <span class=\"keyword\">node</span><span class=\"title\">-sass</span></span><br></pre></td></tr></table></figure>\n<p>有类似问题的还有chromedriver,phantomjs,electron等常见依赖包,我们可以一并写到.npmrc中:</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> .npmrc</span><br><span class=\"line\">sass_binary_site=https:<span class=\"regexp\">//</span>npm.taobao.org<span class=\"regexp\">/mirrors/</span>node-sass</span><br><span class=\"line\">chromedriver_cdnurl=https:<span class=\"regexp\">//</span>npm.taobao.org<span class=\"regexp\">/mirrors/</span>chromedriver</span><br><span class=\"line\">phantomjs_cdnurl=https:<span class=\"regexp\">//</span>npm.taobao.org<span class=\"regexp\">/mirrors/</span>phantomjs</span><br><span class=\"line\">electron_mirror=https:<span class=\"regexp\">//</span>npm.taobao.org<span class=\"regexp\">/mirrors/</span>electron</span><br></pre></td></tr></table></figure>\n<p>可以参考<a href=\"https://luckyship.gitee.io/2020/12/01/2020-12-01-npm-install-md\">npm安装</a></p>\n<h2 id=\"node版本与node-sass版本不兼容\"><a href=\"#node版本与node-sass版本不兼容\" class=\"headerlink\" title=\"node版本与node-sass版本不兼容\"></a>node版本与node-sass版本不兼容</h2><p>node-sass版本兼容性并不好，老项目中依赖的node-sass很可能已经不兼容新的node，对应版本兼容如下(或参考<a href=\"https://github.com/sass/node-sass\">官方仓库</a>)：</p>\n<table>\n<thead>\n<tr>\n<th>NodeJS</th>\n<th>Minimum node-sass version</th>\n<th>Node Module</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Node 13</td>\n<td>4.13+</td>\n<td>79</td>\n</tr>\n<tr>\n<td>Node 12</td>\n<td>4.12+</td>\n<td>72</td>\n</tr>\n<tr>\n<td>Node 11</td>\n<td>4.10+</td>\n<td>67</td>\n</tr>\n<tr>\n<td>Node 10</td>\n<td>4.9+</td>\n<td>64</td>\n</tr>\n<tr>\n<td>Node 8</td>\n<td>4.5.3+</td>\n<td>57</td>\n</tr>\n</tbody></table>\n<h2 id=\"缓存中binding-node版本不一致\"><a href=\"#缓存中binding-node版本不一致\" class=\"headerlink\" title=\"缓存中binding.node版本不一致\"></a>缓存中binding.node版本不一致</h2><p>假如本地node版本改了，或在不同机器上运行，node版本不一致，会报类似错误：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\">Found <span class=\"keyword\">bindings </span>for the following environments:</span><br><span class=\"line\">  - Windows <span class=\"number\">64</span>-<span class=\"keyword\">bit </span>with Node.<span class=\"keyword\">js </span><span class=\"number\">6</span>.x</span><br></pre></td></tr></table></figure>\n<p>这是因为原有<code>binding.node</code>缓存跟现node版本不一致。按提示<code>npm rebuild node-sass</code>或清除缓存重新安装即可。</p>\n<h2 id=\"安装失败后重新安装\"><a href=\"#安装失败后重新安装\" class=\"headerlink\" title=\"安装失败后重新安装\"></a>安装失败后重新安装</h2><p>安装失败后重新安装，有可能无权限删除已安装内容，此时<code>npm uninstall node-sass</code>或手动删掉原目录后再安装即可。</p>\n<h2 id=\"提示没有安装python、build失败等\"><a href=\"#提示没有安装python、build失败等\" class=\"headerlink\" title=\"提示没有安装python、build失败等\"></a>提示没有安装python、build失败等</h2><p>假如拉取<code>binding.node</code>失败，node-sass会尝试在本地编译<code>binding.node</code>，过程就需要<code>python</code>。假如你遇到前面几种情况解决了，实际上也不会出现在本地构建的情况了，我们就不谈这种失败中失败的情况吧 :-)</p>\n","site":{"data":{}},"excerpt":"<p><code>node-scss</code>是我们常见的依赖包，但是安装的时候，<code>node-scss</code>总是报错，特地汇总一下，以避免踩坑</p>","more":"<h2 id=\"npm源速度慢\"><a href=\"#npm源速度慢\" class=\"headerlink\" title=\"npm源速度慢\"></a>npm源速度慢</h2><p>由于众所周知的国内网络环境，从国内安装官方源的依赖包会很慢。可以将npm源设置成国内镜像源(如淘宝npm)：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm <span class=\"built_in\">config</span> <span class=\"built_in\">set</span> registry https:<span class=\"comment\">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>\n<p>或者通过<code>.npmrc</code>文件设置:</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> .npmrc</span><br><span class=\"line\">registry=https:<span class=\"regexp\">//</span>registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"binding-node源无法访问或速度慢\"><a href=\"#binding-node源无法访问或速度慢\" class=\"headerlink\" title=\"binding.node源无法访问或速度慢\"></a>binding.node源无法访问或速度慢</h2><p><code>node-sass</code>除了npm部分的代码，还会下载二进制文件<code>binding.node</code>，默认源是github，国内访问较慢,特殊时期甚至无法访问。我们也可以将其改成国内源：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"code\"><pre><span class=\"line\">// linux、mac 下</span><br><span class=\"line\"><span class=\"attr\">SASS_BINARY_SITE=</span>https://npm.taobao.org/mirrors/<span class=\"keyword\">node</span><span class=\"title\">-sass</span>/ npm install <span class=\"keyword\">node</span><span class=\"title\">-sass</span></span><br><span class=\"line\"></span><br><span class=\"line\">// window 下</span><br><span class=\"line\">set <span class=\"attr\">SASS_BINARY_SITE=</span>https://npm.taobao.org/mirrors/<span class=\"keyword\">node</span><span class=\"title\">-sass</span>/ &amp;&amp; npm install <span class=\"keyword\">node</span><span class=\"title\">-sass</span></span><br></pre></td></tr></table></figure>\n<p>有类似问题的还有chromedriver,phantomjs,electron等常见依赖包,我们可以一并写到.npmrc中:</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> .npmrc</span><br><span class=\"line\">sass_binary_site=https:<span class=\"regexp\">//</span>npm.taobao.org<span class=\"regexp\">/mirrors/</span>node-sass</span><br><span class=\"line\">chromedriver_cdnurl=https:<span class=\"regexp\">//</span>npm.taobao.org<span class=\"regexp\">/mirrors/</span>chromedriver</span><br><span class=\"line\">phantomjs_cdnurl=https:<span class=\"regexp\">//</span>npm.taobao.org<span class=\"regexp\">/mirrors/</span>phantomjs</span><br><span class=\"line\">electron_mirror=https:<span class=\"regexp\">//</span>npm.taobao.org<span class=\"regexp\">/mirrors/</span>electron</span><br></pre></td></tr></table></figure>\n<p>可以参考<a href=\"https://luckyship.gitee.io/2020/12/01/2020-12-01-npm-install-md\">npm安装</a></p>\n<h2 id=\"node版本与node-sass版本不兼容\"><a href=\"#node版本与node-sass版本不兼容\" class=\"headerlink\" title=\"node版本与node-sass版本不兼容\"></a>node版本与node-sass版本不兼容</h2><p>node-sass版本兼容性并不好，老项目中依赖的node-sass很可能已经不兼容新的node，对应版本兼容如下(或参考<a href=\"https://github.com/sass/node-sass\">官方仓库</a>)：</p>\n<table>\n<thead>\n<tr>\n<th>NodeJS</th>\n<th>Minimum node-sass version</th>\n<th>Node Module</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Node 13</td>\n<td>4.13+</td>\n<td>79</td>\n</tr>\n<tr>\n<td>Node 12</td>\n<td>4.12+</td>\n<td>72</td>\n</tr>\n<tr>\n<td>Node 11</td>\n<td>4.10+</td>\n<td>67</td>\n</tr>\n<tr>\n<td>Node 10</td>\n<td>4.9+</td>\n<td>64</td>\n</tr>\n<tr>\n<td>Node 8</td>\n<td>4.5.3+</td>\n<td>57</td>\n</tr>\n</tbody></table>\n<h2 id=\"缓存中binding-node版本不一致\"><a href=\"#缓存中binding-node版本不一致\" class=\"headerlink\" title=\"缓存中binding.node版本不一致\"></a>缓存中binding.node版本不一致</h2><p>假如本地node版本改了，或在不同机器上运行，node版本不一致，会报类似错误：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\">Found <span class=\"keyword\">bindings </span>for the following environments:</span><br><span class=\"line\">  - Windows <span class=\"number\">64</span>-<span class=\"keyword\">bit </span>with Node.<span class=\"keyword\">js </span><span class=\"number\">6</span>.x</span><br></pre></td></tr></table></figure>\n<p>这是因为原有<code>binding.node</code>缓存跟现node版本不一致。按提示<code>npm rebuild node-sass</code>或清除缓存重新安装即可。</p>\n<h2 id=\"安装失败后重新安装\"><a href=\"#安装失败后重新安装\" class=\"headerlink\" title=\"安装失败后重新安装\"></a>安装失败后重新安装</h2><p>安装失败后重新安装，有可能无权限删除已安装内容，此时<code>npm uninstall node-sass</code>或手动删掉原目录后再安装即可。</p>\n<h2 id=\"提示没有安装python、build失败等\"><a href=\"#提示没有安装python、build失败等\" class=\"headerlink\" title=\"提示没有安装python、build失败等\"></a>提示没有安装python、build失败等</h2><p>假如拉取<code>binding.node</code>失败，node-sass会尝试在本地编译<code>binding.node</code>，过程就需要<code>python</code>。假如你遇到前面几种情况解决了，实际上也不会出现在本地构建的情况了，我们就不谈这种失败中失败的情况吧 :-)</p>"},{"layout":"post","title":"使用css实现4个角边框","comments":1,"date":"2021-03-20T09:45:39.000Z","_content":"\n目前发现2种实现方式，使用`css3 background` 或者使用伪元素\n<!-- more -->\n## css3 background实现\n```\n.rect {\n    position: absolute; \n    top: 20px;\n    left: 20px; \n    width: 100px; \n    height: 100px; \n    background: linear-gradient(to left, #f00, #f00) left top no-repeat, \n                linear-gradient(to bottom, #f00, #f00) left top no-repeat, \n                linear-gradient(to left, #f00, #f00) right top no-repeat,\n                linear-gradient(to bottom, #f00, #f00) right top no-repeat, \n                linear-gradient(to left, #f00, #f00) left bottom no-repeat,\n                linear-gradient(to bottom, #f00, #f00) left bottom no-repeat,\n                linear-gradient(to left, #f00, #f00) right bottom no-repeat,\n                linear-gradient(to left, #f00, #f00) right bottom no-repeat;\n    background-size: 1px 20px, 20px 1px, 1px 20px, 20px 1px;  \n}\n```\n```\n<div class=\"rect\"></div>\n```\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n.rect {\n    position: absolute; \n    top: 20px;\n    left: 20px; \n    width: 100px; \n    height: 100px; \n    background: linear-gradient(to left, #f00, #f00) left top no-repeat, \n                linear-gradient(to bottom, #f00, #f00) left top no-repeat, \n                linear-gradient(to left, #f00, #f00) right top no-repeat,\n                linear-gradient(to bottom, #f00, #f00) right top no-repeat, \n                linear-gradient(to left, #f00, #f00) left bottom no-repeat,\n                linear-gradient(to bottom, #f00, #f00) left bottom no-repeat,\n                linear-gradient(to left, #f00, #f00) right bottom no-repeat,\n                linear-gradient(to left, #f00, #f00) right bottom no-repeat;\n    background-size: 1px 20px, 20px 1px, 1px 20px, 20px 1px;  \n}\n</style>\n<div class='rect'></div>\n\">\n</iframe>\n\n\n## 伪元素实现\n```\n#border{\n  width: 100px;\n  height: 50px;\n  position: relative;\n}\n#border:after{\n  position: absolute;\n  top: 0;\n  left: 0;\n  content: '';\n  display: block;\n  height: 25%;\n  width: 25%;\n  border-left: 1px solid black;\n  border-top: 1px solid black;\n}\n#border:before{\n  position: absolute;\n  top: 0;\n  right: 0;\n  content: '';\n  display: block;\n  height: 25%;\n  width: 25%;\n  border-right: 1px solid black;\n  border-top: 1px solid black;\n}\n#border2{\n  width: 100px;\n  height: 50px;\n  position: relative;\n}\n#border2:after{\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  content: '';\n  display: block;\n  height: 25%;\n  width: 25%;\n  border-left: 1px solid black;\n  border-bottom: 1px solid black;\n}\n#border2:before{\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  content: '';\n  display: block;\n  height: 25%;\n  width: 25%;\n  border-right: 1px solid black;\n  border-bottom: 1px solid black;\n}\n```\n```\n<div id='border'></div>\n<div id='border2'></div>\n```\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n#border{\n  width: 100px;\n  height: 50px;\n  position: relative;\n}\n#border:after{\n  position: absolute;\n  top: 0;\n  left: 0;\n  content: '';\n  display: block;\n  height: 25%;\n  width: 25%;\n  border-left: 1px solid black;\n  border-top: 1px solid black;\n}\n#border:before{\n  position: absolute;\n  top: 0;\n  right: 0;\n  content: '';\n  display: block;\n  height: 25%;\n  width: 25%;\n  border-right: 1px solid black;\n  border-top: 1px solid black;\n}\n#border2{\n  width: 100px;\n  height: 50px;\n  position: relative;\n}\n#border2:after{\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  content: '';\n  display: block;\n  height: 25%;\n  width: 25%;\n  border-left: 1px solid black;\n  border-bottom: 1px solid black;\n}\n#border2:before{\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  content: '';\n  display: block;\n  height: 25%;\n  width: 25%;\n  border-right: 1px solid black;\n  border-bottom: 1px solid black;\n}\n</style>\n<div id='border'></div>\n<div id='border2'></div>\n\">\n</iframe>\n\n## 参考\n[div只有四个角有边框怎么实现？](https://segmentfault.com/q/1010000011882269)","source":"_posts/2021-03-20-four-angle-border-by-css.md","raw":"---\nlayout: post\ntitle: 使用css实现4个角边框\ntags: [css]\ncomments: true\ndate: 2021-03-20 17:45:39\n---\n\n目前发现2种实现方式，使用`css3 background` 或者使用伪元素\n<!-- more -->\n## css3 background实现\n```\n.rect {\n    position: absolute; \n    top: 20px;\n    left: 20px; \n    width: 100px; \n    height: 100px; \n    background: linear-gradient(to left, #f00, #f00) left top no-repeat, \n                linear-gradient(to bottom, #f00, #f00) left top no-repeat, \n                linear-gradient(to left, #f00, #f00) right top no-repeat,\n                linear-gradient(to bottom, #f00, #f00) right top no-repeat, \n                linear-gradient(to left, #f00, #f00) left bottom no-repeat,\n                linear-gradient(to bottom, #f00, #f00) left bottom no-repeat,\n                linear-gradient(to left, #f00, #f00) right bottom no-repeat,\n                linear-gradient(to left, #f00, #f00) right bottom no-repeat;\n    background-size: 1px 20px, 20px 1px, 1px 20px, 20px 1px;  \n}\n```\n```\n<div class=\"rect\"></div>\n```\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n.rect {\n    position: absolute; \n    top: 20px;\n    left: 20px; \n    width: 100px; \n    height: 100px; \n    background: linear-gradient(to left, #f00, #f00) left top no-repeat, \n                linear-gradient(to bottom, #f00, #f00) left top no-repeat, \n                linear-gradient(to left, #f00, #f00) right top no-repeat,\n                linear-gradient(to bottom, #f00, #f00) right top no-repeat, \n                linear-gradient(to left, #f00, #f00) left bottom no-repeat,\n                linear-gradient(to bottom, #f00, #f00) left bottom no-repeat,\n                linear-gradient(to left, #f00, #f00) right bottom no-repeat,\n                linear-gradient(to left, #f00, #f00) right bottom no-repeat;\n    background-size: 1px 20px, 20px 1px, 1px 20px, 20px 1px;  \n}\n</style>\n<div class='rect'></div>\n\">\n</iframe>\n\n\n## 伪元素实现\n```\n#border{\n  width: 100px;\n  height: 50px;\n  position: relative;\n}\n#border:after{\n  position: absolute;\n  top: 0;\n  left: 0;\n  content: '';\n  display: block;\n  height: 25%;\n  width: 25%;\n  border-left: 1px solid black;\n  border-top: 1px solid black;\n}\n#border:before{\n  position: absolute;\n  top: 0;\n  right: 0;\n  content: '';\n  display: block;\n  height: 25%;\n  width: 25%;\n  border-right: 1px solid black;\n  border-top: 1px solid black;\n}\n#border2{\n  width: 100px;\n  height: 50px;\n  position: relative;\n}\n#border2:after{\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  content: '';\n  display: block;\n  height: 25%;\n  width: 25%;\n  border-left: 1px solid black;\n  border-bottom: 1px solid black;\n}\n#border2:before{\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  content: '';\n  display: block;\n  height: 25%;\n  width: 25%;\n  border-right: 1px solid black;\n  border-bottom: 1px solid black;\n}\n```\n```\n<div id='border'></div>\n<div id='border2'></div>\n```\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n#border{\n  width: 100px;\n  height: 50px;\n  position: relative;\n}\n#border:after{\n  position: absolute;\n  top: 0;\n  left: 0;\n  content: '';\n  display: block;\n  height: 25%;\n  width: 25%;\n  border-left: 1px solid black;\n  border-top: 1px solid black;\n}\n#border:before{\n  position: absolute;\n  top: 0;\n  right: 0;\n  content: '';\n  display: block;\n  height: 25%;\n  width: 25%;\n  border-right: 1px solid black;\n  border-top: 1px solid black;\n}\n#border2{\n  width: 100px;\n  height: 50px;\n  position: relative;\n}\n#border2:after{\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  content: '';\n  display: block;\n  height: 25%;\n  width: 25%;\n  border-left: 1px solid black;\n  border-bottom: 1px solid black;\n}\n#border2:before{\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  content: '';\n  display: block;\n  height: 25%;\n  width: 25%;\n  border-right: 1px solid black;\n  border-bottom: 1px solid black;\n}\n</style>\n<div id='border'></div>\n<div id='border2'></div>\n\">\n</iframe>\n\n## 参考\n[div只有四个角有边框怎么实现？](https://segmentfault.com/q/1010000011882269)","slug":"2021-03-20-four-angle-border-by-css","published":1,"updated":"2021-03-20T09:52:03.526Z","photos":[],"link":"","_id":"ckoe9igwq00338cpnfsfh2x6u","content":"<p>目前发现2种实现方式，使用<code>css3 background</code> 或者使用伪元素</p>\n<a id=\"more\"></a>\n<h2 id=\"css3-background实现\"><a href=\"#css3-background实现\" class=\"headerlink\" title=\"css3 background实现\"></a>css3 background实现</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.rect</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute; </span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">20px</span>; </span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>; </span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>; </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(to left, #f00, #f00) left top no-repeat, </span><br><span class=\"line\">                <span class=\"built_in\">linear-gradient</span>(to bottom, #f00, #f00) left top no-repeat, </span><br><span class=\"line\">                <span class=\"built_in\">linear-gradient</span>(to left, #f00, #f00) right top no-repeat,</span><br><span class=\"line\">                <span class=\"built_in\">linear-gradient</span>(to bottom, #f00, #f00) right top no-repeat, </span><br><span class=\"line\">                <span class=\"built_in\">linear-gradient</span>(to left, #f00, #f00) left bottom no-repeat,</span><br><span class=\"line\">                <span class=\"built_in\">linear-gradient</span>(to bottom, #f00, #f00) left bottom no-repeat,</span><br><span class=\"line\">                <span class=\"built_in\">linear-gradient</span>(to left, #f00, #f00) right bottom no-repeat,</span><br><span class=\"line\">                <span class=\"built_in\">linear-gradient</span>(to left, #f00, #f00) right bottom no-repeat;</span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>: <span class=\"number\">1px</span> <span class=\"number\">20px</span>, <span class=\"number\">20px</span> <span class=\"number\">1px</span>, <span class=\"number\">1px</span> <span class=\"number\">20px</span>, <span class=\"number\">20px</span> <span class=\"number\">1px</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">&quot;rect&quot;</span>&gt;&lt;/<span class=\"keyword\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n.rect {\n    position: absolute; \n    top: 20px;\n    left: 20px; \n    width: 100px; \n    height: 100px; \n    background: linear-gradient(to left, #f00, #f00) left top no-repeat, \n                linear-gradient(to bottom, #f00, #f00) left top no-repeat, \n                linear-gradient(to left, #f00, #f00) right top no-repeat,\n                linear-gradient(to bottom, #f00, #f00) right top no-repeat, \n                linear-gradient(to left, #f00, #f00) left bottom no-repeat,\n                linear-gradient(to bottom, #f00, #f00) left bottom no-repeat,\n                linear-gradient(to left, #f00, #f00) right bottom no-repeat,\n                linear-gradient(to left, #f00, #f00) right bottom no-repeat;\n    background-size: 1px 20px, 20px 1px, 1px 20px, 20px 1px;  \n}\n</style>\n<div class='rect'></div>\n\">\n</iframe>\n\n\n<h2 id=\"伪元素实现\"><a href=\"#伪元素实现\" class=\"headerlink\" title=\"伪元素实现\"></a>伪元素实现</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#border</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#border</span><span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">25%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">25%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">1px</span> solid black;</span><br><span class=\"line\">  <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#border</span><span class=\"selector-pseudo\">:before</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">25%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">25%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">1px</span> solid black;</span><br><span class=\"line\">  <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#border2</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#border2</span><span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">25%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">25%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">1px</span> solid black;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#border2</span><span class=\"selector-pseudo\">:before</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">25%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">25%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">1px</span> solid black;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid black;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight gml\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"symbol\">id</span>=<span class=\"string\">&#x27;border&#x27;</span>&gt;&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"symbol\">id</span>=<span class=\"string\">&#x27;border2&#x27;</span>&gt;&lt;/<span class=\"keyword\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n#border{\n  width: 100px;\n  height: 50px;\n  position: relative;\n}\n#border:after{\n  position: absolute;\n  top: 0;\n  left: 0;\n  content: '';\n  display: block;\n  height: 25%;\n  width: 25%;\n  border-left: 1px solid black;\n  border-top: 1px solid black;\n}\n#border:before{\n  position: absolute;\n  top: 0;\n  right: 0;\n  content: '';\n  display: block;\n  height: 25%;\n  width: 25%;\n  border-right: 1px solid black;\n  border-top: 1px solid black;\n}\n#border2{\n  width: 100px;\n  height: 50px;\n  position: relative;\n}\n#border2:after{\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  content: '';\n  display: block;\n  height: 25%;\n  width: 25%;\n  border-left: 1px solid black;\n  border-bottom: 1px solid black;\n}\n#border2:before{\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  content: '';\n  display: block;\n  height: 25%;\n  width: 25%;\n  border-right: 1px solid black;\n  border-bottom: 1px solid black;\n}\n</style>\n<div id='border'></div>\n<div id='border2'></div>\n\">\n</iframe>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://segmentfault.com/q/1010000011882269\">div只有四个角有边框怎么实现？</a></p>\n","site":{"data":{}},"excerpt":"<p>目前发现2种实现方式，使用<code>css3 background</code> 或者使用伪元素</p>","more":"<h2 id=\"css3-background实现\"><a href=\"#css3-background实现\" class=\"headerlink\" title=\"css3 background实现\"></a>css3 background实现</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.rect</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute; </span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">20px</span>; </span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>; </span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>; </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(to left, #f00, #f00) left top no-repeat, </span><br><span class=\"line\">                <span class=\"built_in\">linear-gradient</span>(to bottom, #f00, #f00) left top no-repeat, </span><br><span class=\"line\">                <span class=\"built_in\">linear-gradient</span>(to left, #f00, #f00) right top no-repeat,</span><br><span class=\"line\">                <span class=\"built_in\">linear-gradient</span>(to bottom, #f00, #f00) right top no-repeat, </span><br><span class=\"line\">                <span class=\"built_in\">linear-gradient</span>(to left, #f00, #f00) left bottom no-repeat,</span><br><span class=\"line\">                <span class=\"built_in\">linear-gradient</span>(to bottom, #f00, #f00) left bottom no-repeat,</span><br><span class=\"line\">                <span class=\"built_in\">linear-gradient</span>(to left, #f00, #f00) right bottom no-repeat,</span><br><span class=\"line\">                <span class=\"built_in\">linear-gradient</span>(to left, #f00, #f00) right bottom no-repeat;</span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>: <span class=\"number\">1px</span> <span class=\"number\">20px</span>, <span class=\"number\">20px</span> <span class=\"number\">1px</span>, <span class=\"number\">1px</span> <span class=\"number\">20px</span>, <span class=\"number\">20px</span> <span class=\"number\">1px</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">&quot;rect&quot;</span>&gt;&lt;/<span class=\"keyword\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n.rect {\n    position: absolute; \n    top: 20px;\n    left: 20px; \n    width: 100px; \n    height: 100px; \n    background: linear-gradient(to left, #f00, #f00) left top no-repeat, \n                linear-gradient(to bottom, #f00, #f00) left top no-repeat, \n                linear-gradient(to left, #f00, #f00) right top no-repeat,\n                linear-gradient(to bottom, #f00, #f00) right top no-repeat, \n                linear-gradient(to left, #f00, #f00) left bottom no-repeat,\n                linear-gradient(to bottom, #f00, #f00) left bottom no-repeat,\n                linear-gradient(to left, #f00, #f00) right bottom no-repeat,\n                linear-gradient(to left, #f00, #f00) right bottom no-repeat;\n    background-size: 1px 20px, 20px 1px, 1px 20px, 20px 1px;  \n}\n</style>\n<div class='rect'></div>\n\">\n</iframe>\n\n\n<h2 id=\"伪元素实现\"><a href=\"#伪元素实现\" class=\"headerlink\" title=\"伪元素实现\"></a>伪元素实现</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#border</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#border</span><span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">25%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">25%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">1px</span> solid black;</span><br><span class=\"line\">  <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#border</span><span class=\"selector-pseudo\">:before</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">25%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">25%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">1px</span> solid black;</span><br><span class=\"line\">  <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#border2</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#border2</span><span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">25%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">25%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">1px</span> solid black;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#border2</span><span class=\"selector-pseudo\">:before</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">25%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">25%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">1px</span> solid black;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid black;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight gml\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"symbol\">id</span>=<span class=\"string\">&#x27;border&#x27;</span>&gt;&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"symbol\">id</span>=<span class=\"string\">&#x27;border2&#x27;</span>&gt;&lt;/<span class=\"keyword\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n#border{\n  width: 100px;\n  height: 50px;\n  position: relative;\n}\n#border:after{\n  position: absolute;\n  top: 0;\n  left: 0;\n  content: '';\n  display: block;\n  height: 25%;\n  width: 25%;\n  border-left: 1px solid black;\n  border-top: 1px solid black;\n}\n#border:before{\n  position: absolute;\n  top: 0;\n  right: 0;\n  content: '';\n  display: block;\n  height: 25%;\n  width: 25%;\n  border-right: 1px solid black;\n  border-top: 1px solid black;\n}\n#border2{\n  width: 100px;\n  height: 50px;\n  position: relative;\n}\n#border2:after{\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  content: '';\n  display: block;\n  height: 25%;\n  width: 25%;\n  border-left: 1px solid black;\n  border-bottom: 1px solid black;\n}\n#border2:before{\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  content: '';\n  display: block;\n  height: 25%;\n  width: 25%;\n  border-right: 1px solid black;\n  border-bottom: 1px solid black;\n}\n</style>\n<div id='border'></div>\n<div id='border2'></div>\n\">\n</iframe>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://segmentfault.com/q/1010000011882269\">div只有四个角有边框怎么实现？</a></p>"},{"layout":"post","title":"css中的换行","comments":1,"date":"2021-04-06T06:58:25.000Z","_content":"\n强制不换行:\n\n`p { white-space:nowrap; }\n`\n\n自动换行:\n\n`p { word-wrap:break-word; }\n`\n\n强制英文单词断行:\n\n`p { word-break:break-all; }\n`\n\n> 注意：设置强制将英文单词断行，需要将行内元素设置为块级元素。\n<!-- more -->\n\n超出显示省略号:\n\n```\np{text-overflow:ellipsis;overflow:hidden;}\n```\n\n## `white-space: normal|pre|nowrap|pre-wrap|pre-line|inherit;` \n* white-space: 属性设置如何处理元素内的空白\n* normal: 默认。空白会被浏览器忽略。\n* pre: 空白会被浏览器保留。其行为方式类似 HTML 中的 pre 标签。\n* nowrap: 文本不会换行，文本会在在同一行上继续，直到遇到 br 标签为止。\n* pre-wrap: 保留空白符序列，但是正常地进行换行。\n* pre-line: 合并空白符序列，但是保留换行符。\n* inherit: 规定应该从父元素继承 white-space 属性的值。\n\n## `word-wrap: normal|break-word; `\n* word-wrap: 属性用来标明是否允许浏览器在单词内进行断句，这是为了防止当一个字符串太长而找不到它的自然断句点时产生溢出现象。\n* normal: 只在允许的断字点换行(浏览器保持默认处理)\n* break-word: 在长单词或URL地址内部进行换行\n\n## `word-break: normal|break-all|keep-all;`\n* word-break 属性用来标明怎么样进行单词内的断句。\n* normal：使用浏览器默认的换行规则。\n* break-all:允许再单词内换行\n* keep-all:只能在半角空格或连字符处换行\n\n## 实例\n```\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>菜鸟教程(runoob.com)</title>\n<style>\n    .word{background:#E4FFE9;width:250px;margin:50px auto;padding:20px;font-family:\"microsoft yahei\";}\n\n    /* 强制不换行 */\n    .nowrap{white-space:nowrap;}\n\n    /* 允许单词内断句，首先会尝试挪到下一行，看看下一行的宽度够不够，\n    不够的话就进行单词内的断句 */\n    .breakword{word-wrap: break-word;}\n\n    /* 断句时，不会把长单词挪到下一行，而是直接进行单词内的断句 */\n    .breakAll{word-break:break-all;}  \n\n    /* 超出部分显示省略号 */\n    .ellipsis{text-overflow:ellipsis;overflow:hidden;}\n</style>\n</head>\n<body>\n<div class = \"word\">\n    <p class = \"normal\">wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihuivfsa</p>\n    <p class = \"nowrap\">wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihuivfs</p>          \n    <p class = \"breakword\">wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihui</p>\n    <p class = \"breakAll\">wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihuivf</p>\n    <p class = \"ellipsis\">wordwrap:breakword;absavhsafhuafdfbjhfvsalguvfaihuivfsab</p>\n</div>\n</body>\n</html>\n```\n\n<iframe width=\"100%\" height=\"450px\" srcdoc=\"\n<style type='text/css'>\n    .word{background:#E4FFE9;width:250px;margin:50px auto;padding:20px;font-family:'microsoft yahei';}\n    .nowrap{white-space:nowrap;}\n    .breakword{word-wrap: break-word;}\n    .breakAll{word-break:break-all;}  \n    .ellipsis{text-overflow:ellipsis;overflow:hidden;}\n</style>\n<body>\n<div class = 'word'>\n    <p class = 'normal'>wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihuivfsa</p>\n    <p class = 'nowrap'>wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihuivfs</p>          \n    <p class = 'breakword'>wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihui</p>\n    <p class = 'breakAll'>wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihuivf</p>\n    <p class = 'ellipsis'>wordwrap:breakword;absavhsafhuafdfbjhfvsalguvfaihuivfsab</p>\n</div>\n</body>\n\">\n</iframe>","source":"_posts/2021-04-06-css-wrap-line.md","raw":"---\nlayout: post\ntitle: css中的换行\ntags: [css, web]\ncomments: true\ndate: 2021-04-06 14:58:25\n---\n\n强制不换行:\n\n`p { white-space:nowrap; }\n`\n\n自动换行:\n\n`p { word-wrap:break-word; }\n`\n\n强制英文单词断行:\n\n`p { word-break:break-all; }\n`\n\n> 注意：设置强制将英文单词断行，需要将行内元素设置为块级元素。\n<!-- more -->\n\n超出显示省略号:\n\n```\np{text-overflow:ellipsis;overflow:hidden;}\n```\n\n## `white-space: normal|pre|nowrap|pre-wrap|pre-line|inherit;` \n* white-space: 属性设置如何处理元素内的空白\n* normal: 默认。空白会被浏览器忽略。\n* pre: 空白会被浏览器保留。其行为方式类似 HTML 中的 pre 标签。\n* nowrap: 文本不会换行，文本会在在同一行上继续，直到遇到 br 标签为止。\n* pre-wrap: 保留空白符序列，但是正常地进行换行。\n* pre-line: 合并空白符序列，但是保留换行符。\n* inherit: 规定应该从父元素继承 white-space 属性的值。\n\n## `word-wrap: normal|break-word; `\n* word-wrap: 属性用来标明是否允许浏览器在单词内进行断句，这是为了防止当一个字符串太长而找不到它的自然断句点时产生溢出现象。\n* normal: 只在允许的断字点换行(浏览器保持默认处理)\n* break-word: 在长单词或URL地址内部进行换行\n\n## `word-break: normal|break-all|keep-all;`\n* word-break 属性用来标明怎么样进行单词内的断句。\n* normal：使用浏览器默认的换行规则。\n* break-all:允许再单词内换行\n* keep-all:只能在半角空格或连字符处换行\n\n## 实例\n```\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>菜鸟教程(runoob.com)</title>\n<style>\n    .word{background:#E4FFE9;width:250px;margin:50px auto;padding:20px;font-family:\"microsoft yahei\";}\n\n    /* 强制不换行 */\n    .nowrap{white-space:nowrap;}\n\n    /* 允许单词内断句，首先会尝试挪到下一行，看看下一行的宽度够不够，\n    不够的话就进行单词内的断句 */\n    .breakword{word-wrap: break-word;}\n\n    /* 断句时，不会把长单词挪到下一行，而是直接进行单词内的断句 */\n    .breakAll{word-break:break-all;}  \n\n    /* 超出部分显示省略号 */\n    .ellipsis{text-overflow:ellipsis;overflow:hidden;}\n</style>\n</head>\n<body>\n<div class = \"word\">\n    <p class = \"normal\">wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihuivfsa</p>\n    <p class = \"nowrap\">wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihuivfs</p>          \n    <p class = \"breakword\">wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihui</p>\n    <p class = \"breakAll\">wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihuivf</p>\n    <p class = \"ellipsis\">wordwrap:breakword;absavhsafhuafdfbjhfvsalguvfaihuivfsab</p>\n</div>\n</body>\n</html>\n```\n\n<iframe width=\"100%\" height=\"450px\" srcdoc=\"\n<style type='text/css'>\n    .word{background:#E4FFE9;width:250px;margin:50px auto;padding:20px;font-family:'microsoft yahei';}\n    .nowrap{white-space:nowrap;}\n    .breakword{word-wrap: break-word;}\n    .breakAll{word-break:break-all;}  \n    .ellipsis{text-overflow:ellipsis;overflow:hidden;}\n</style>\n<body>\n<div class = 'word'>\n    <p class = 'normal'>wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihuivfsa</p>\n    <p class = 'nowrap'>wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihuivfs</p>          \n    <p class = 'breakword'>wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihui</p>\n    <p class = 'breakAll'>wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihuivf</p>\n    <p class = 'ellipsis'>wordwrap:breakword;absavhsafhuafdfbjhfvsalguvfaihuivfsab</p>\n</div>\n</body>\n\">\n</iframe>","slug":"2021-04-06-css-wrap-line","published":1,"updated":"2021-04-06T07:11:08.842Z","photos":[],"link":"","_id":"ckoe9igwr00368cpnao3y6q4e","content":"<p>强制不换行:</p>\n<p><code>p &#123; white-space:nowrap; &#125; </code></p>\n<p>自动换行:</p>\n<p><code>p &#123; word-wrap:break-word; &#125; </code></p>\n<p>强制英文单词断行:</p>\n<p><code>p &#123; word-break:break-all; &#125; </code></p>\n<blockquote>\n<p>注意：设置强制将英文单词断行，需要将行内元素设置为块级元素。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>超出显示省略号:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span>&#123;<span class=\"attribute\">text-overflow</span>:ellipsis;<span class=\"attribute\">overflow</span>:hidden;&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"white-space-normal-pre-nowrap-pre-wrap-pre-line-inherit\"><a href=\"#white-space-normal-pre-nowrap-pre-wrap-pre-line-inherit\" class=\"headerlink\" title=\"white-space: normal|pre|nowrap|pre-wrap|pre-line|inherit;\"></a><code>white-space: normal|pre|nowrap|pre-wrap|pre-line|inherit;</code></h2><ul>\n<li>white-space: 属性设置如何处理元素内的空白</li>\n<li>normal: 默认。空白会被浏览器忽略。</li>\n<li>pre: 空白会被浏览器保留。其行为方式类似 HTML 中的 pre 标签。</li>\n<li>nowrap: 文本不会换行，文本会在在同一行上继续，直到遇到 br 标签为止。</li>\n<li>pre-wrap: 保留空白符序列，但是正常地进行换行。</li>\n<li>pre-line: 合并空白符序列，但是保留换行符。</li>\n<li>inherit: 规定应该从父元素继承 white-space 属性的值。</li>\n</ul>\n<h2 id=\"word-wrap-normal-break-word\"><a href=\"#word-wrap-normal-break-word\" class=\"headerlink\" title=\"word-wrap: normal|break-word; \"></a><code>word-wrap: normal|break-word; </code></h2><ul>\n<li>word-wrap: 属性用来标明是否允许浏览器在单词内进行断句，这是为了防止当一个字符串太长而找不到它的自然断句点时产生溢出现象。</li>\n<li>normal: 只在允许的断字点换行(浏览器保持默认处理)</li>\n<li>break-word: 在长单词或URL地址内部进行换行</li>\n</ul>\n<h2 id=\"word-break-normal-break-all-keep-all\"><a href=\"#word-break-normal-break-all-keep-all\" class=\"headerlink\" title=\"word-break: normal|break-all|keep-all;\"></a><code>word-break: normal|break-all|keep-all;</code></h2><ul>\n<li>word-break 属性用来标明怎么样进行单词内的断句。</li>\n<li>normal：使用浏览器默认的换行规则。</li>\n<li>break-all:允许再单词内换行</li>\n<li>keep-all:只能在半角空格或连字符处换行</li>\n</ul>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>菜鸟教程(runoob.com)<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.word</span>&#123;<span class=\"attribute\">background</span>:<span class=\"number\">#E4FFE9</span>;<span class=\"attribute\">width</span>:<span class=\"number\">250px</span>;<span class=\"attribute\">margin</span>:<span class=\"number\">50px</span> auto;<span class=\"attribute\">padding</span>:<span class=\"number\">20px</span>;<span class=\"attribute\">font-family</span>:<span class=\"string\">&quot;microsoft yahei&quot;</span>;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">    <span class=\"comment\">/* 强制不换行 */</span></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.nowrap</span>&#123;<span class=\"attribute\">white-space</span>:nowrap;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    /* 允许单词内断句，首先会尝试挪到下一行，看看下一行的宽度够不够，</span><br><span class=\"line\">    不够的话就进行单词内的断句 */</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.breakword</span>&#123;<span class=\"attribute\">word-wrap</span>: break-word;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">    <span class=\"comment\">/* 断句时，不会把长单词挪到下一行，而是直接进行单词内的断句 */</span></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.breakAll</span>&#123;<span class=\"attribute\">word-break</span>:break-all;&#125;  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">    <span class=\"comment\">/* 超出部分显示省略号 */</span></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.ellipsis</span>&#123;<span class=\"attribute\">text-overflow</span>:ellipsis;<span class=\"attribute\">overflow</span>:hidden;&#125;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span> = <span class=\"string\">&quot;word&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span> = <span class=\"string\">&quot;normal&quot;</span>&gt;</span>wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihuivfsa<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span> = <span class=\"string\">&quot;nowrap&quot;</span>&gt;</span>wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihuivfs<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>          </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span> = <span class=\"string\">&quot;breakword&quot;</span>&gt;</span>wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihui<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span> = <span class=\"string\">&quot;breakAll&quot;</span>&gt;</span>wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihuivf<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span> = <span class=\"string\">&quot;ellipsis&quot;</span>&gt;</span>wordwrap:breakword;absavhsafhuafdfbjhfvsalguvfaihuivfsab<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<iframe width=\"100%\" height=\"450px\" srcdoc=\"\n<style type='text/css'>\n    .word{background:#E4FFE9;width:250px;margin:50px auto;padding:20px;font-family:'microsoft yahei';}\n    .nowrap{white-space:nowrap;}\n    .breakword{word-wrap: break-word;}\n    .breakAll{word-break:break-all;}  \n    .ellipsis{text-overflow:ellipsis;overflow:hidden;}\n</style>\n<body>\n<div class = 'word'>\n    <p class = 'normal'>wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihuivfsa</p>\n    <p class = 'nowrap'>wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihuivfs</p>          \n    <p class = 'breakword'>wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihui</p>\n    <p class = 'breakAll'>wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihuivf</p>\n    <p class = 'ellipsis'>wordwrap:breakword;absavhsafhuafdfbjhfvsalguvfaihuivfsab</p>\n</div>\n</body>\n\">\n</iframe>","site":{"data":{}},"excerpt":"<p>强制不换行:</p>\n<p><code>p &#123; white-space:nowrap; &#125; </code></p>\n<p>自动换行:</p>\n<p><code>p &#123; word-wrap:break-word; &#125; </code></p>\n<p>强制英文单词断行:</p>\n<p><code>p &#123; word-break:break-all; &#125; </code></p>\n<blockquote>\n<p>注意：设置强制将英文单词断行，需要将行内元素设置为块级元素。</p>\n</blockquote>","more":"<p>超出显示省略号:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span>&#123;<span class=\"attribute\">text-overflow</span>:ellipsis;<span class=\"attribute\">overflow</span>:hidden;&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"white-space-normal-pre-nowrap-pre-wrap-pre-line-inherit\"><a href=\"#white-space-normal-pre-nowrap-pre-wrap-pre-line-inherit\" class=\"headerlink\" title=\"white-space: normal|pre|nowrap|pre-wrap|pre-line|inherit;\"></a><code>white-space: normal|pre|nowrap|pre-wrap|pre-line|inherit;</code></h2><ul>\n<li>white-space: 属性设置如何处理元素内的空白</li>\n<li>normal: 默认。空白会被浏览器忽略。</li>\n<li>pre: 空白会被浏览器保留。其行为方式类似 HTML 中的 pre 标签。</li>\n<li>nowrap: 文本不会换行，文本会在在同一行上继续，直到遇到 br 标签为止。</li>\n<li>pre-wrap: 保留空白符序列，但是正常地进行换行。</li>\n<li>pre-line: 合并空白符序列，但是保留换行符。</li>\n<li>inherit: 规定应该从父元素继承 white-space 属性的值。</li>\n</ul>\n<h2 id=\"word-wrap-normal-break-word\"><a href=\"#word-wrap-normal-break-word\" class=\"headerlink\" title=\"word-wrap: normal|break-word; \"></a><code>word-wrap: normal|break-word; </code></h2><ul>\n<li>word-wrap: 属性用来标明是否允许浏览器在单词内进行断句，这是为了防止当一个字符串太长而找不到它的自然断句点时产生溢出现象。</li>\n<li>normal: 只在允许的断字点换行(浏览器保持默认处理)</li>\n<li>break-word: 在长单词或URL地址内部进行换行</li>\n</ul>\n<h2 id=\"word-break-normal-break-all-keep-all\"><a href=\"#word-break-normal-break-all-keep-all\" class=\"headerlink\" title=\"word-break: normal|break-all|keep-all;\"></a><code>word-break: normal|break-all|keep-all;</code></h2><ul>\n<li>word-break 属性用来标明怎么样进行单词内的断句。</li>\n<li>normal：使用浏览器默认的换行规则。</li>\n<li>break-all:允许再单词内换行</li>\n<li>keep-all:只能在半角空格或连字符处换行</li>\n</ul>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>菜鸟教程(runoob.com)<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.word</span>&#123;<span class=\"attribute\">background</span>:<span class=\"number\">#E4FFE9</span>;<span class=\"attribute\">width</span>:<span class=\"number\">250px</span>;<span class=\"attribute\">margin</span>:<span class=\"number\">50px</span> auto;<span class=\"attribute\">padding</span>:<span class=\"number\">20px</span>;<span class=\"attribute\">font-family</span>:<span class=\"string\">&quot;microsoft yahei&quot;</span>;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">    <span class=\"comment\">/* 强制不换行 */</span></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.nowrap</span>&#123;<span class=\"attribute\">white-space</span>:nowrap;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    /* 允许单词内断句，首先会尝试挪到下一行，看看下一行的宽度够不够，</span><br><span class=\"line\">    不够的话就进行单词内的断句 */</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.breakword</span>&#123;<span class=\"attribute\">word-wrap</span>: break-word;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">    <span class=\"comment\">/* 断句时，不会把长单词挪到下一行，而是直接进行单词内的断句 */</span></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.breakAll</span>&#123;<span class=\"attribute\">word-break</span>:break-all;&#125;  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">    <span class=\"comment\">/* 超出部分显示省略号 */</span></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.ellipsis</span>&#123;<span class=\"attribute\">text-overflow</span>:ellipsis;<span class=\"attribute\">overflow</span>:hidden;&#125;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span> = <span class=\"string\">&quot;word&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span> = <span class=\"string\">&quot;normal&quot;</span>&gt;</span>wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihuivfsa<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span> = <span class=\"string\">&quot;nowrap&quot;</span>&gt;</span>wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihuivfs<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>          </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span> = <span class=\"string\">&quot;breakword&quot;</span>&gt;</span>wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihui<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span> = <span class=\"string\">&quot;breakAll&quot;</span>&gt;</span>wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihuivf<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span> = <span class=\"string\">&quot;ellipsis&quot;</span>&gt;</span>wordwrap:breakword;absavhsafhuafdfbjhfvsalguvfaihuivfsab<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<iframe width=\"100%\" height=\"450px\" srcdoc=\"\n<style type='text/css'>\n    .word{background:#E4FFE9;width:250px;margin:50px auto;padding:20px;font-family:'microsoft yahei';}\n    .nowrap{white-space:nowrap;}\n    .breakword{word-wrap: break-word;}\n    .breakAll{word-break:break-all;}  \n    .ellipsis{text-overflow:ellipsis;overflow:hidden;}\n</style>\n<body>\n<div class = 'word'>\n    <p class = 'normal'>wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihuivfsa</p>\n    <p class = 'nowrap'>wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihuivfs</p>          \n    <p class = 'breakword'>wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihui</p>\n    <p class = 'breakAll'>wordwrap:break-word;absavhsafhuafdfbjhfvsalguvfaihuivf</p>\n    <p class = 'ellipsis'>wordwrap:breakword;absavhsafhuafdfbjhfvsalguvfaihuivfsab</p>\n</div>\n</body>\n\">\n</iframe>"},{"layout":"post","title":"escape,encodeURI,encodeURIComponent有什么区别","comments":1,"date":"2021-04-06T06:27:26.000Z","_content":"\n`escape`,`encodeURI`,`encodeURIComponent`都是`javascript`的编码方法\n<!-- more -->\n## escape\n简单来说，escape是对字符串(string)进行编码(而另外两种是对URL)，作用是让它们在所有电脑上可读。编码之后的效果是%XX或者%uXXXX这种形式。其中 `ASCII字母 、 数字 、 @*/+`   这几个字符**不会**被编码，其余的都会。最关键的是，当你需要对URL编码时，请忘记这个方法，这个方法是针对字符串使用的，不适用于URL。\n\n## encodeURI和encodeURIComponent区别\n对URL编码是常见的事，所以这两个方法应该是实际中要特别注意的。它们都是编码URL，唯一区别就是编码的字符范围，其中`encodeURI`方法不会对下列字符编码  `ASCII字母  数字  ~!@#$&*()=:/,;?+'`\n\nencodeURIComponent方法不会对下列字符编码 `ASCII字母  数字  ~!*()'`\n\n所以`encodeURIComponent`比`encodeURI`编码的范围更大。实际例子来说，`encodeURIComponent`会把 `http://`  编码成  `http%3A%2F%2F` 而`encodeURI`却不会。\n\n## 使用场景\n1、如果只是编码字符串，不和URL有半毛钱关系，那么用`escape`。\n\n2、如果你需要编码整个URL，然后需要使用这个URL，那么用`encodeURI`。\n\n3、当你需要编码URL中的参数的时候，那么encodeURIComponent是最好方法。\n```\nvar param = \"http://www.cnblogs.com/season-huang/\"; //param为参数\nparam = encodeURIComponent(param);\nvar url = \"http://www.cnblogs.com?next=\" + param;\nconsole.log(url) //\"http://www.cnblogs.com?next=http%3A%2F%2Fwww.cnblogs.com%2Fseason-huang%2F\"\n```\n## 参考\n[escape,encodeURI,encodeURIComponent有什么区别](https://www.zhihu.com/question/21861899)","source":"_posts/2021-04-06-difference-escape-encodeURI-encodeURIComponent.md","raw":"---\nlayout: post\ntitle: escape,encodeURI,encodeURIComponent有什么区别\ntags: [javascript]\ncomments: true\ndate: 2021-04-06 14:27:26\n---\n\n`escape`,`encodeURI`,`encodeURIComponent`都是`javascript`的编码方法\n<!-- more -->\n## escape\n简单来说，escape是对字符串(string)进行编码(而另外两种是对URL)，作用是让它们在所有电脑上可读。编码之后的效果是%XX或者%uXXXX这种形式。其中 `ASCII字母 、 数字 、 @*/+`   这几个字符**不会**被编码，其余的都会。最关键的是，当你需要对URL编码时，请忘记这个方法，这个方法是针对字符串使用的，不适用于URL。\n\n## encodeURI和encodeURIComponent区别\n对URL编码是常见的事，所以这两个方法应该是实际中要特别注意的。它们都是编码URL，唯一区别就是编码的字符范围，其中`encodeURI`方法不会对下列字符编码  `ASCII字母  数字  ~!@#$&*()=:/,;?+'`\n\nencodeURIComponent方法不会对下列字符编码 `ASCII字母  数字  ~!*()'`\n\n所以`encodeURIComponent`比`encodeURI`编码的范围更大。实际例子来说，`encodeURIComponent`会把 `http://`  编码成  `http%3A%2F%2F` 而`encodeURI`却不会。\n\n## 使用场景\n1、如果只是编码字符串，不和URL有半毛钱关系，那么用`escape`。\n\n2、如果你需要编码整个URL，然后需要使用这个URL，那么用`encodeURI`。\n\n3、当你需要编码URL中的参数的时候，那么encodeURIComponent是最好方法。\n```\nvar param = \"http://www.cnblogs.com/season-huang/\"; //param为参数\nparam = encodeURIComponent(param);\nvar url = \"http://www.cnblogs.com?next=\" + param;\nconsole.log(url) //\"http://www.cnblogs.com?next=http%3A%2F%2Fwww.cnblogs.com%2Fseason-huang%2F\"\n```\n## 参考\n[escape,encodeURI,encodeURIComponent有什么区别](https://www.zhihu.com/question/21861899)","slug":"2021-04-06-difference-escape-encodeURI-encodeURIComponent","published":1,"updated":"2021-04-13T12:21:44.329Z","photos":[],"link":"","_id":"ckoe9igwx00388cpn9hkcfbps","content":"<p><code>escape</code>,<code>encodeURI</code>,<code>encodeURIComponent</code>都是<code>javascript</code>的编码方法</p>\n<a id=\"more\"></a>\n<h2 id=\"escape\"><a href=\"#escape\" class=\"headerlink\" title=\"escape\"></a>escape</h2><p>简单来说，escape是对字符串(string)进行编码(而另外两种是对URL)，作用是让它们在所有电脑上可读。编码之后的效果是%XX或者%uXXXX这种形式。其中 <code>ASCII字母 、 数字 、 @*/+</code>   这几个字符<strong>不会</strong>被编码，其余的都会。最关键的是，当你需要对URL编码时，请忘记这个方法，这个方法是针对字符串使用的，不适用于URL。</p>\n<h2 id=\"encodeURI和encodeURIComponent区别\"><a href=\"#encodeURI和encodeURIComponent区别\" class=\"headerlink\" title=\"encodeURI和encodeURIComponent区别\"></a>encodeURI和encodeURIComponent区别</h2><p>对URL编码是常见的事，所以这两个方法应该是实际中要特别注意的。它们都是编码URL，唯一区别就是编码的字符范围，其中<code>encodeURI</code>方法不会对下列字符编码  <code>ASCII字母  数字  ~!@#$&amp;*()=:/,;?+&#39;</code></p>\n<p>encodeURIComponent方法不会对下列字符编码 <code>ASCII字母  数字  ~!*()&#39;</code></p>\n<p>所以<code>encodeURIComponent</code>比<code>encodeURI</code>编码的范围更大。实际例子来说，<code>encodeURIComponent</code>会把 <code>http://</code>  编码成  <code>http%3A%2F%2F</code> 而<code>encodeURI</code>却不会。</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>1、如果只是编码字符串，不和URL有半毛钱关系，那么用<code>escape</code>。</p>\n<p>2、如果你需要编码整个URL，然后需要使用这个URL，那么用<code>encodeURI</code>。</p>\n<p>3、当你需要编码URL中的参数的时候，那么encodeURIComponent是最好方法。</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> param = <span class=\"string\">&quot;http://www.cnblogs.com/season-huang/&quot;</span>; <span class=\"comment\">//param为参数</span></span><br><span class=\"line\">param = <span class=\"built_in\">encodeURIComponent</span>(param);</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">url</span> = <span class=\"string\">&quot;http://www.cnblogs.com?next=&quot;</span> + param;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">url</span>) <span class=\"comment\">//&quot;http://www.cnblogs.com?next=http%3A%2F%2Fwww.cnblogs.com%2Fseason-huang%2F&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.zhihu.com/question/21861899\">escape,encodeURI,encodeURIComponent有什么区别</a></p>\n","site":{"data":{}},"excerpt":"<p><code>escape</code>,<code>encodeURI</code>,<code>encodeURIComponent</code>都是<code>javascript</code>的编码方法</p>","more":"<h2 id=\"escape\"><a href=\"#escape\" class=\"headerlink\" title=\"escape\"></a>escape</h2><p>简单来说，escape是对字符串(string)进行编码(而另外两种是对URL)，作用是让它们在所有电脑上可读。编码之后的效果是%XX或者%uXXXX这种形式。其中 <code>ASCII字母 、 数字 、 @*/+</code>   这几个字符<strong>不会</strong>被编码，其余的都会。最关键的是，当你需要对URL编码时，请忘记这个方法，这个方法是针对字符串使用的，不适用于URL。</p>\n<h2 id=\"encodeURI和encodeURIComponent区别\"><a href=\"#encodeURI和encodeURIComponent区别\" class=\"headerlink\" title=\"encodeURI和encodeURIComponent区别\"></a>encodeURI和encodeURIComponent区别</h2><p>对URL编码是常见的事，所以这两个方法应该是实际中要特别注意的。它们都是编码URL，唯一区别就是编码的字符范围，其中<code>encodeURI</code>方法不会对下列字符编码  <code>ASCII字母  数字  ~!@#$&amp;*()=:/,;?+&#39;</code></p>\n<p>encodeURIComponent方法不会对下列字符编码 <code>ASCII字母  数字  ~!*()&#39;</code></p>\n<p>所以<code>encodeURIComponent</code>比<code>encodeURI</code>编码的范围更大。实际例子来说，<code>encodeURIComponent</code>会把 <code>http://</code>  编码成  <code>http%3A%2F%2F</code> 而<code>encodeURI</code>却不会。</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>1、如果只是编码字符串，不和URL有半毛钱关系，那么用<code>escape</code>。</p>\n<p>2、如果你需要编码整个URL，然后需要使用这个URL，那么用<code>encodeURI</code>。</p>\n<p>3、当你需要编码URL中的参数的时候，那么encodeURIComponent是最好方法。</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> param = <span class=\"string\">&quot;http://www.cnblogs.com/season-huang/&quot;</span>; <span class=\"comment\">//param为参数</span></span><br><span class=\"line\">param = <span class=\"built_in\">encodeURIComponent</span>(param);</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">url</span> = <span class=\"string\">&quot;http://www.cnblogs.com?next=&quot;</span> + param;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">url</span>) <span class=\"comment\">//&quot;http://www.cnblogs.com?next=http%3A%2F%2Fwww.cnblogs.com%2Fseason-huang%2F&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.zhihu.com/question/21861899\">escape,encodeURI,encodeURIComponent有什么区别</a></p>"},{"layout":"post","title":"less和sass的区别","comments":1,"date":"2021-04-06T14:20:21.000Z","_content":"\n`LESS` 和 `SCSS` 都属于 CSS 预处理器的范畴，也就是 CSS 的超集，但是两者的语法、如何使用和具体的功能实现还是有差异的。\n<!-- more -->\n\n## 声明和使用变量\n> LESS 采用 `@` 符号，SCSS 采用 `$` 符号。\n\n在下面的示例中，我们首先在规则外声明了一个名为 link-color 的变量，然后在名为 `#main` 的规则内声明一个名为 `width` 的变量，接着把 `width` 变量赋值给了 CSS 的 `width` 属性。\n\nLESS:\n```\n@link-color: #428bca;\n#main {\n  @width: 5em;\n  width: @width;\n}\n```\nSCSS:\n```\n$link-color: #428bca;\n#main {\n  $width: 5em;\n  width: $width;\n}\n```\n## 变量插值（Variable Interpolation）\n> LESS 采用 `@{xxxx}` 的形式，SCSS 采用 `#{xxxx}` 的形式。\n\nLESS：\n```\n// Variables \n@my-selector: banner;\n\n// Usage \n.@{my-selector} {\n  font-weight: bold;\n  line-height: 40px;\n  margin: 0 auto;\n}\n```\nSCSS:\n```\n// Variables \n$my-selector: banner;\n\n// Usage \n.#{$my-selector} {\n  font-weight: bold;\n  line-height: 40px;\n  margin: 0 auto;\n}\n```\n## Mixins 的定义、使用及参数\n### 定义方法\n定义一个 Mixin：LESS 使用 `dot` 符号（也就是句点）来定义一个 Mixin，并且可以把任意的 CSS 规则作为 Mixin 使用；SCSS 使用 `@mixin` 指令来定义一个 Mixin。\n\n示例 - 来自 BootStrap 的 alert-variant Mixin 的定义\nLESS：\n```\n.alert-variant(@background; @border; @text-color) {\n  background-color: @background;\n  border-color: @border;\n  color: @text-color;\n\n  hr {\n    border-top-color: darken(@border, 5%);\n  }\n  .alert-link {\n    color: darken(@text-color, 10%);\n  }\n}\n```\nSCSS:\n```\n@mixin alert-variant($background, $border, $text-color) {\n  background-color: $background;\n  border-color: $border;\n  color: $text-color;\n\n  hr {\n    border-top-color: darken($border, 5%);\n  }\n  .alert-link {\n    color: darken($text-color, 10%);\n  }\n}\n```\n### 使用\n使用 Mixin：LESS 仍是使用 `dot` 符号（句点），如果 Mixin 没有参数的话可以省略后面的圆括号；SCSS 使用 `@include` 指令来引入一个 Mixin。\n\n示例 - 引入一个名为 center-block 的 Mixin。\nLESS：\n```\n.center-block() {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.a {\n    .center-block;\n}\n```\nSCSS:\n```\n@mixin center-block() {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.a {\n    @include center-block;\n}\n```\n### 参数形式\n如果存在多个参数的话，LESS 使用分号分隔；SCSS 使用逗号分隔。两者都支持为参数设置默认值。\n\n示例 - 来在 BootStrap 的 form-control-validation Mixin 的使用\n\nLESS：\n```\n@state-success-text:             #3c763d;\n@state-success-bg:               #dff0d8;\n@state-success-border:           darken(spin(@state-success-bg, -10), 5%);\n\n@state-info-text:                #31708f;\n@state-info-bg:                  #d9edf7;\n@state-info-border:              darken(spin(@state-info-bg, -10), 7%);\n\n@state-warning-text:             #8a6d3b;\n@state-warning-bg:               #fcf8e3;\n@state-warning-border:           darken(spin(@state-warning-bg, -10), 5%);\n\n@state-danger-text:              #a94442;\n@state-danger-bg:                #f2dede;\n@state-danger-border:            darken(spin(@state-danger-bg, -10), 5%);\n\n.box-shadow(@shadow) {\n  -webkit-box-shadow: @shadow; // iOS <4.3 & Android <4.1 \n          box-shadow: @shadow;\n}\n\n.form-control-validation(@text-color: #555; @border-color: #ccc; @background-color: #f5f5f5) {\n  // Color the label and help text \n  .help-block,\n  .control-label,\n  .radio,\n  .checkbox,\n  .radio-inline,\n  .checkbox-inline,\n  &.radio label,\n  &.checkbox label,\n  &.radio-inline label,\n  &.checkbox-inline label  {\n    color: @text-color;\n  }\n  // Set the border and box shadow on specific inputs to match \n  .form-control {\n    border-color: @border-color;\n    .box-shadow(inset 0 1px 1px rgba(0,0,0,.075)); // Redeclare so transitions work \n    &:focus {\n      border-color: darken(@border-color, 10%);\n      @shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 6px lighten(@border-color, 20%);\n      .box-shadow(@shadow);\n    }\n  }\n  // Set validation states also for addons \n  .input-group-addon {\n    color: @text-color;\n    border-color: @border-color;\n    background-color: @background-color;\n  }\n  // Optional feedback icon \n  .form-control-feedback {\n    color: @text-color;\n  }\n}\n\n// Feedback states \n.has-success {\n  .form-control-validation(@state-success-text; @state-success-text; @state-success-bg);\n}\n.has-warning {\n  .form-control-validation(@state-warning-text; @state-warning-text; @state-warning-bg);\n}\n.has-error {\n  .form-control-validation(@state-danger-text; @state-danger-text; @state-danger-bg);\n}\n```\nSCSS:\n```\n$state-success-text:             #3c763d;\n$state-success-bg:               #dff0d8;\n$state-success-border:           darken(adjust_hue($state-success-bg, -10), 5%);\n\n$state-info-text:                #31708f;\n$state-info-bg:                  #d9edf7;\n$state-info-border:              darken(adjust_hue($state-info-bg, -10), 7%);\n\n$state-warning-text:             #8a6d3b;\n$state-warning-bg:               #fcf8e3;\n$state-warning-border:           darken(adjust_hue($state-warning-bg, -10), 5%);\n\n$state-danger-text:              #a94442;\n$state-danger-bg:                #f2dede;\n$state-danger-border:            darken(adjust_hue($state-danger-bg, -10), 5%);\n\n@mixin box-shadow($shadow) {\n  -webkit-box-shadow: $shadow; // iOS <4.3 & Android <4.1 \n          box-shadow: $shadow;\n}\n\n@mixin form-control-validation($text-color: #555, $border-color: #ccc, $background-color: #f5f5f5) {\n  // Color the label and help text \n  .help-block,\n  .control-label,\n  .radio,\n  .checkbox,\n  .radio-inline,\n  .checkbox-inline,\n  &.radio label,\n  &.checkbox label,\n  &.radio-inline label,\n  &.checkbox-inline label  {\n    color: $text-color;\n  }\n  // Set the border and box shadow on specific inputs to match \n  .form-control {\n    border-color: $border-color;\n    @include box-shadow(inset 0 1px 1px rgba(0,0,0,.075)); // Redeclare so transitions work \n    &:focus {\n      border-color: darken($border-color, 10%);\n      $shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 6px lighten($border-color, 20%);\n      @include box-shadow($shadow);\n    }\n  }\n  // Set validation states also for addons \n  .input-group-addon {\n    color: $text-color;\n    border-color: $border-color;\n    background-color: $background-color;\n  }\n  // Optional feedback icon \n  .form-control-feedback {\n    color: $text-color;\n  }\n}\n\n// Feedback states \n.has-success {\n  @include form-control-validation($state-success-text, $state-success-text, $state-success-bg);\n}\n.has-warning {\n  @include form-control-validation($state-warning-text, $state-warning-text, $state-warning-bg);\n}\n.has-error {\n  @include form-control-validation($state-danger-text, $state-danger-text, $state-danger-bg);\n}\n```\n\n## 函数的使用\n### 字符串函数\nLESS 使用 e 或者 `~\"xxxx\"` 这种语法进行 CSS 转义；SCSS 本身并没有提供 CSS 转义的函数，要达到相同的效果可以使用变量插值（Variable Interpolation）实现。\n\nLESS:\n```\n@input-border-focus:             #66afe9;\n\n.box-shadow(@shadow) {\n  -webkit-box-shadow: @shadow; // iOS <4.3 & Android <4.1 \n  box-shadow: @shadow;\n}\n\n.form-control-focus(@color: @input-border-focus) {\n  @color-rgba: rgba(red(@color), green(@color), blue(@color), .6);\n  &:focus {\n    border-color: @color;\n    outline: 0;\n    .box-shadow(~\"inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px @{color-rgba}\");\n    //或者\n    @str: \"inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px @{color-rgba}\"\n    .box-shadow(e(@str));\n  }\n}\n\n.form-control {\n  .form-control-focus();\n}\n```\nSCSS:\n```\n$input-border-focus:             #66afe9;\n\n@mixin box-shadow($shadow) {\n  -webkit-box-shadow: $shadow; // iOS <4.3 & Android <4.1 \n  box-shadow: $shadow;\n}\n\n@mixin form-control-focus($color: $input-border-focus) {\n  $color-rgba: rgba(red($color), green($color), blue($color), .6);\n  &:focus {\n    border-color: $color;\n    outline: 0;\n    @include box-shadow(#{inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px $color-rgba});\n  }\n}\n\n.form-control {\n  @include form-control-focus();\n}\n```\n### 颜色函数\n调节色相，LESS 使用名为 `spin()` 的函数；SCSS 使用名为 `adjust_hue()` 的函数。\n\nLESS:\n```\n@state-success-border:           darken(spin(@state-success-bg, -10), 5%);\n```\nSCSS:\n```\n$state-success-border:           darken(adjust_hue($state-success-bg, -10), 5%);\n```\n### 数学函数\nLESS 提供了一些 SCSS 中并不具备的数学函数，在 SCSS 中只能通过自定义函数实现，然后通过 node-sass 的接口传递给编译器。\n\nSCSS：\n```\n// rotate for ie8 and blow\n@mixin ie-rotate($rotation) {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=@{rotation})\";\n}\n\n// rotate for ie8 and blow\n// degrees unit\n@mixin ie-rotate-via-degrees($degrees) {\n  /* IE6-IE8 */\n  $radians: parseInt(\"#{$degrees}\") * PI() * 2 / 360;\n  $costheta: cos(\"#{$radians}\");\n  $sintheta: sin(\"#{$radians}\");\n  $negsintheta: \"#{$sintheta}\" * -1;\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=@{costheta}, M12=@{negsintheta}, M21=@{sintheta}, M22=@{costheta})\";\n  zoom: 1;\n\n  :root & {\n    filter: none;\n  }\n}\n\n// support rotate for all browsers\n@mixin cross-rotate($degrees) {\n  @include rotate($degrees);\n  @include ie-rotate-via-degrees($degrees);\n}\n\n// Placeholder text\n@mixin placeholder($color: $input-placeholder-color) {\n  // Firefox\n  &::-moz-placeholder {\n    color: $color;\n    opacity: 1; // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526\n  }\n  // Internet Explorer 10+\n  &:-ms-input-placeholder {\n    color: $color;\n  }\n  // Safari and Chrome\n  &::-webkit-input-placeholder {\n    color: $color;\n  }\n}\n```\n上述 Math 实现所需的 JS 文件：\n\n```\nmodule.exports = {\n  'parseInt($str)': function (str) {\n    return parseInt(str, 10);\n  },\n  'Math.sin($degree)': function (degree) {\n    return Math.sin(degree);\n  },\n  'Math.cos($degree)': function (degree) {\n    return Math.cos(degree);\n  },\n  'Math.PI': Math.PI\n}\n```\n有关函数的区别还有：\nLESS 的 `fade()` 函数在 SCSS 中只能使用 `rgba()` 之类的实现，因为 SCSS 也没有这个函数。\n\n## @import 的实现\n> 像 `@media`, `@import` 这些带 @ 符号的在 CSS 中都称为 At-rules。\n值的一提的是 LESS 和 SCSS 对`@import` 实现的区别。\n### LESS\n* 如果扩展名为 `.css`，将文件识别为 CSS 文件\n* 其他任何扩展名都将被作为 LESS 文件处理\n* 没有扩展名会被附加一个 `.less` 的扩展名并且作为 LESS 文件处理\n### SCSS\n* 默认情况下，SCSS 的 @import 实现会试图寻找一个 Sass 文件进行导入。\n* 但是在下列情况出现时，@import 会直接被编译为 CSS 的 @import at-rule \n* * 文件扩展名是 `.css`\n* * 文件以 `http://` 开头\n* * 文件名是一个 `url()`\n* * `@import` 具有媒体查询\n* SCSS 按约定认为下划线开始的文件是内联文件，不会被编译为单独的 CSS 文件输出。\n\n示例\n\nLESS:\n```\n@import \"foo\";\n@import \"bar.less\";\n@import \"foo.php\"; // 当成 LESS 文件处理\n@import \"foo.css\";\n```\nSCSS:\n```\n@import \"foo\";\n@import \"foo.scss\";\n```\n都会导入 foo.scss 文件。\n\n## 其他区别\n> LESS 和 SCSS 均使用 `&` 符号表示父选择器引用，但是 SCSS 的 `&` 符号只能出现在一个组合选择器的开始位置，LESS 则没有这个限制。\n\n示例\n\nLESS：\n```\n.bg-variant(@color) {\n  background-color: @color;\n  a&:hover,\n  a&:focus {\n    background-color: darken(@color, 10%);\n  }\n}\n```\nSCSS:\n```\na {\n  font-weight: bold;\n  text-decoration: none;\n  &:hover { text-decoration: underline; }\n  body.firefox & { font-weight: normal; }\n}\n```\n> SCSS 不支持 LESS 中的 `CSS Guard` 功能，比如 `if, when ...`，在 SCSS 中需要换种方式实现。\n\nLESS 示例：\n```\n.my-optional-style() when (@my-option = true) {\n  button {\n    color: white;\n  }\n}\n.my-optional-style();\n```\nNote：SCSS 需要换一种写法实现同样的功能。\n> SCSS 支持 !default，一般是用在基础 Rule 的声明中，告诉使用者这是可以被覆盖的。\n\nSCSS 示例：\n```\n$primary:       $blue !default;\n$secondary:     $gray-600 !default;\n```\n> SCSS支持`if, else, for, each`等方法, LESS不支持\n\nSCSS:\n```\n$type: monster;\np {\n  @if $type == ocean {\n    color: blue;\n  } @else if $type == matador {\n    color: red;\n  } @else if $type == monster {\n    color: green;\n  } @else {\n    color: black;\n  }\n}\n\n@for $i from 1 through 3 {\n  .item-#{$i} { width: 2em * $i; }\n}\n\n@each $animal in puma, sea-slug, egret, salamander {\n  .#{$animal}-icon {\n    background-image: url('/images/#{$animal}.png');\n  }\n}\n```\n> SCSS 不像 LESS 一样默认可以把 rule 作为 Mixin 使用，但是 SCSS 有类似的 `@extend` 指令；而 LESS 的 extend 语法看起来则像是伪类一样。\n\n示例：\n\nLESS:\n```\n.error {\n  border: 1px #f00;\n  background-color: #fdd;\n}\n.seriousError {\n  @extend .error;\n  border-width: 3px;\n}\n```\nSCSS:\n```\n.error {\n  border: 1px #f00;\n  background-color: #fdd;\n}\n.seriousError {\n  @extend .error;\n  border-width: 3px;\n}\n```\n集成 JavaScript 功能的方式：LESS 使用 @functions 指令，可以把 js 代码直接放到 ~`xxx` 中间即可；SCSS 可以把 JS 代码放到一个单独的文件中，然后使用 node-sass编译的时候指定参数传给 node-sass。\n\nLESS 示例：[ant-design/ant-design](https://github.com/ant-design/ant-design/blob/7fa05996957ef0eded21d810d71364d294ea947d/components/style/color/tinyColor.less)\n\nSCSS 示例：  \n命令\n```\nnode-sass --output-style expanded --source-map true --precision 6 --functions components/style/custom.js components/button/style/index.scss components/button/style/index.css\n```\n\n\n* LESS 支持 lazy evaluation，但是  SCSS 不支持，所以在 LESS 中可以先使用再定义，但是在 SCSS 中一定要先定义再使用。\n* SCSS 是不支持 Mixin 重载的, 也就是说 LESS 可以有同名但是参数个数不同的几个 Mixins, SCSS 同样名字的 Mixin 只能有一个.\n\n## 参考\n[less和sass或者scss 有什么区别吗？\n](https://www.zhihu.com/question/270862074?sort=created)  \n[LESS官网](https://less.bootcss.com/)  \n[SASS官网](https://www.sass.hk/)\n","source":"_posts/2021-04-06-difference-sass-and-less.md","raw":"---\nlayout: post\ntitle: less和sass的区别\ntags: [css, less, sass]\ncomments: true\ndate: 2021-04-06 22:20:21\n---\n\n`LESS` 和 `SCSS` 都属于 CSS 预处理器的范畴，也就是 CSS 的超集，但是两者的语法、如何使用和具体的功能实现还是有差异的。\n<!-- more -->\n\n## 声明和使用变量\n> LESS 采用 `@` 符号，SCSS 采用 `$` 符号。\n\n在下面的示例中，我们首先在规则外声明了一个名为 link-color 的变量，然后在名为 `#main` 的规则内声明一个名为 `width` 的变量，接着把 `width` 变量赋值给了 CSS 的 `width` 属性。\n\nLESS:\n```\n@link-color: #428bca;\n#main {\n  @width: 5em;\n  width: @width;\n}\n```\nSCSS:\n```\n$link-color: #428bca;\n#main {\n  $width: 5em;\n  width: $width;\n}\n```\n## 变量插值（Variable Interpolation）\n> LESS 采用 `@{xxxx}` 的形式，SCSS 采用 `#{xxxx}` 的形式。\n\nLESS：\n```\n// Variables \n@my-selector: banner;\n\n// Usage \n.@{my-selector} {\n  font-weight: bold;\n  line-height: 40px;\n  margin: 0 auto;\n}\n```\nSCSS:\n```\n// Variables \n$my-selector: banner;\n\n// Usage \n.#{$my-selector} {\n  font-weight: bold;\n  line-height: 40px;\n  margin: 0 auto;\n}\n```\n## Mixins 的定义、使用及参数\n### 定义方法\n定义一个 Mixin：LESS 使用 `dot` 符号（也就是句点）来定义一个 Mixin，并且可以把任意的 CSS 规则作为 Mixin 使用；SCSS 使用 `@mixin` 指令来定义一个 Mixin。\n\n示例 - 来自 BootStrap 的 alert-variant Mixin 的定义\nLESS：\n```\n.alert-variant(@background; @border; @text-color) {\n  background-color: @background;\n  border-color: @border;\n  color: @text-color;\n\n  hr {\n    border-top-color: darken(@border, 5%);\n  }\n  .alert-link {\n    color: darken(@text-color, 10%);\n  }\n}\n```\nSCSS:\n```\n@mixin alert-variant($background, $border, $text-color) {\n  background-color: $background;\n  border-color: $border;\n  color: $text-color;\n\n  hr {\n    border-top-color: darken($border, 5%);\n  }\n  .alert-link {\n    color: darken($text-color, 10%);\n  }\n}\n```\n### 使用\n使用 Mixin：LESS 仍是使用 `dot` 符号（句点），如果 Mixin 没有参数的话可以省略后面的圆括号；SCSS 使用 `@include` 指令来引入一个 Mixin。\n\n示例 - 引入一个名为 center-block 的 Mixin。\nLESS：\n```\n.center-block() {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.a {\n    .center-block;\n}\n```\nSCSS:\n```\n@mixin center-block() {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.a {\n    @include center-block;\n}\n```\n### 参数形式\n如果存在多个参数的话，LESS 使用分号分隔；SCSS 使用逗号分隔。两者都支持为参数设置默认值。\n\n示例 - 来在 BootStrap 的 form-control-validation Mixin 的使用\n\nLESS：\n```\n@state-success-text:             #3c763d;\n@state-success-bg:               #dff0d8;\n@state-success-border:           darken(spin(@state-success-bg, -10), 5%);\n\n@state-info-text:                #31708f;\n@state-info-bg:                  #d9edf7;\n@state-info-border:              darken(spin(@state-info-bg, -10), 7%);\n\n@state-warning-text:             #8a6d3b;\n@state-warning-bg:               #fcf8e3;\n@state-warning-border:           darken(spin(@state-warning-bg, -10), 5%);\n\n@state-danger-text:              #a94442;\n@state-danger-bg:                #f2dede;\n@state-danger-border:            darken(spin(@state-danger-bg, -10), 5%);\n\n.box-shadow(@shadow) {\n  -webkit-box-shadow: @shadow; // iOS <4.3 & Android <4.1 \n          box-shadow: @shadow;\n}\n\n.form-control-validation(@text-color: #555; @border-color: #ccc; @background-color: #f5f5f5) {\n  // Color the label and help text \n  .help-block,\n  .control-label,\n  .radio,\n  .checkbox,\n  .radio-inline,\n  .checkbox-inline,\n  &.radio label,\n  &.checkbox label,\n  &.radio-inline label,\n  &.checkbox-inline label  {\n    color: @text-color;\n  }\n  // Set the border and box shadow on specific inputs to match \n  .form-control {\n    border-color: @border-color;\n    .box-shadow(inset 0 1px 1px rgba(0,0,0,.075)); // Redeclare so transitions work \n    &:focus {\n      border-color: darken(@border-color, 10%);\n      @shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 6px lighten(@border-color, 20%);\n      .box-shadow(@shadow);\n    }\n  }\n  // Set validation states also for addons \n  .input-group-addon {\n    color: @text-color;\n    border-color: @border-color;\n    background-color: @background-color;\n  }\n  // Optional feedback icon \n  .form-control-feedback {\n    color: @text-color;\n  }\n}\n\n// Feedback states \n.has-success {\n  .form-control-validation(@state-success-text; @state-success-text; @state-success-bg);\n}\n.has-warning {\n  .form-control-validation(@state-warning-text; @state-warning-text; @state-warning-bg);\n}\n.has-error {\n  .form-control-validation(@state-danger-text; @state-danger-text; @state-danger-bg);\n}\n```\nSCSS:\n```\n$state-success-text:             #3c763d;\n$state-success-bg:               #dff0d8;\n$state-success-border:           darken(adjust_hue($state-success-bg, -10), 5%);\n\n$state-info-text:                #31708f;\n$state-info-bg:                  #d9edf7;\n$state-info-border:              darken(adjust_hue($state-info-bg, -10), 7%);\n\n$state-warning-text:             #8a6d3b;\n$state-warning-bg:               #fcf8e3;\n$state-warning-border:           darken(adjust_hue($state-warning-bg, -10), 5%);\n\n$state-danger-text:              #a94442;\n$state-danger-bg:                #f2dede;\n$state-danger-border:            darken(adjust_hue($state-danger-bg, -10), 5%);\n\n@mixin box-shadow($shadow) {\n  -webkit-box-shadow: $shadow; // iOS <4.3 & Android <4.1 \n          box-shadow: $shadow;\n}\n\n@mixin form-control-validation($text-color: #555, $border-color: #ccc, $background-color: #f5f5f5) {\n  // Color the label and help text \n  .help-block,\n  .control-label,\n  .radio,\n  .checkbox,\n  .radio-inline,\n  .checkbox-inline,\n  &.radio label,\n  &.checkbox label,\n  &.radio-inline label,\n  &.checkbox-inline label  {\n    color: $text-color;\n  }\n  // Set the border and box shadow on specific inputs to match \n  .form-control {\n    border-color: $border-color;\n    @include box-shadow(inset 0 1px 1px rgba(0,0,0,.075)); // Redeclare so transitions work \n    &:focus {\n      border-color: darken($border-color, 10%);\n      $shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 6px lighten($border-color, 20%);\n      @include box-shadow($shadow);\n    }\n  }\n  // Set validation states also for addons \n  .input-group-addon {\n    color: $text-color;\n    border-color: $border-color;\n    background-color: $background-color;\n  }\n  // Optional feedback icon \n  .form-control-feedback {\n    color: $text-color;\n  }\n}\n\n// Feedback states \n.has-success {\n  @include form-control-validation($state-success-text, $state-success-text, $state-success-bg);\n}\n.has-warning {\n  @include form-control-validation($state-warning-text, $state-warning-text, $state-warning-bg);\n}\n.has-error {\n  @include form-control-validation($state-danger-text, $state-danger-text, $state-danger-bg);\n}\n```\n\n## 函数的使用\n### 字符串函数\nLESS 使用 e 或者 `~\"xxxx\"` 这种语法进行 CSS 转义；SCSS 本身并没有提供 CSS 转义的函数，要达到相同的效果可以使用变量插值（Variable Interpolation）实现。\n\nLESS:\n```\n@input-border-focus:             #66afe9;\n\n.box-shadow(@shadow) {\n  -webkit-box-shadow: @shadow; // iOS <4.3 & Android <4.1 \n  box-shadow: @shadow;\n}\n\n.form-control-focus(@color: @input-border-focus) {\n  @color-rgba: rgba(red(@color), green(@color), blue(@color), .6);\n  &:focus {\n    border-color: @color;\n    outline: 0;\n    .box-shadow(~\"inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px @{color-rgba}\");\n    //或者\n    @str: \"inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px @{color-rgba}\"\n    .box-shadow(e(@str));\n  }\n}\n\n.form-control {\n  .form-control-focus();\n}\n```\nSCSS:\n```\n$input-border-focus:             #66afe9;\n\n@mixin box-shadow($shadow) {\n  -webkit-box-shadow: $shadow; // iOS <4.3 & Android <4.1 \n  box-shadow: $shadow;\n}\n\n@mixin form-control-focus($color: $input-border-focus) {\n  $color-rgba: rgba(red($color), green($color), blue($color), .6);\n  &:focus {\n    border-color: $color;\n    outline: 0;\n    @include box-shadow(#{inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px $color-rgba});\n  }\n}\n\n.form-control {\n  @include form-control-focus();\n}\n```\n### 颜色函数\n调节色相，LESS 使用名为 `spin()` 的函数；SCSS 使用名为 `adjust_hue()` 的函数。\n\nLESS:\n```\n@state-success-border:           darken(spin(@state-success-bg, -10), 5%);\n```\nSCSS:\n```\n$state-success-border:           darken(adjust_hue($state-success-bg, -10), 5%);\n```\n### 数学函数\nLESS 提供了一些 SCSS 中并不具备的数学函数，在 SCSS 中只能通过自定义函数实现，然后通过 node-sass 的接口传递给编译器。\n\nSCSS：\n```\n// rotate for ie8 and blow\n@mixin ie-rotate($rotation) {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=@{rotation})\";\n}\n\n// rotate for ie8 and blow\n// degrees unit\n@mixin ie-rotate-via-degrees($degrees) {\n  /* IE6-IE8 */\n  $radians: parseInt(\"#{$degrees}\") * PI() * 2 / 360;\n  $costheta: cos(\"#{$radians}\");\n  $sintheta: sin(\"#{$radians}\");\n  $negsintheta: \"#{$sintheta}\" * -1;\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=@{costheta}, M12=@{negsintheta}, M21=@{sintheta}, M22=@{costheta})\";\n  zoom: 1;\n\n  :root & {\n    filter: none;\n  }\n}\n\n// support rotate for all browsers\n@mixin cross-rotate($degrees) {\n  @include rotate($degrees);\n  @include ie-rotate-via-degrees($degrees);\n}\n\n// Placeholder text\n@mixin placeholder($color: $input-placeholder-color) {\n  // Firefox\n  &::-moz-placeholder {\n    color: $color;\n    opacity: 1; // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526\n  }\n  // Internet Explorer 10+\n  &:-ms-input-placeholder {\n    color: $color;\n  }\n  // Safari and Chrome\n  &::-webkit-input-placeholder {\n    color: $color;\n  }\n}\n```\n上述 Math 实现所需的 JS 文件：\n\n```\nmodule.exports = {\n  'parseInt($str)': function (str) {\n    return parseInt(str, 10);\n  },\n  'Math.sin($degree)': function (degree) {\n    return Math.sin(degree);\n  },\n  'Math.cos($degree)': function (degree) {\n    return Math.cos(degree);\n  },\n  'Math.PI': Math.PI\n}\n```\n有关函数的区别还有：\nLESS 的 `fade()` 函数在 SCSS 中只能使用 `rgba()` 之类的实现，因为 SCSS 也没有这个函数。\n\n## @import 的实现\n> 像 `@media`, `@import` 这些带 @ 符号的在 CSS 中都称为 At-rules。\n值的一提的是 LESS 和 SCSS 对`@import` 实现的区别。\n### LESS\n* 如果扩展名为 `.css`，将文件识别为 CSS 文件\n* 其他任何扩展名都将被作为 LESS 文件处理\n* 没有扩展名会被附加一个 `.less` 的扩展名并且作为 LESS 文件处理\n### SCSS\n* 默认情况下，SCSS 的 @import 实现会试图寻找一个 Sass 文件进行导入。\n* 但是在下列情况出现时，@import 会直接被编译为 CSS 的 @import at-rule \n* * 文件扩展名是 `.css`\n* * 文件以 `http://` 开头\n* * 文件名是一个 `url()`\n* * `@import` 具有媒体查询\n* SCSS 按约定认为下划线开始的文件是内联文件，不会被编译为单独的 CSS 文件输出。\n\n示例\n\nLESS:\n```\n@import \"foo\";\n@import \"bar.less\";\n@import \"foo.php\"; // 当成 LESS 文件处理\n@import \"foo.css\";\n```\nSCSS:\n```\n@import \"foo\";\n@import \"foo.scss\";\n```\n都会导入 foo.scss 文件。\n\n## 其他区别\n> LESS 和 SCSS 均使用 `&` 符号表示父选择器引用，但是 SCSS 的 `&` 符号只能出现在一个组合选择器的开始位置，LESS 则没有这个限制。\n\n示例\n\nLESS：\n```\n.bg-variant(@color) {\n  background-color: @color;\n  a&:hover,\n  a&:focus {\n    background-color: darken(@color, 10%);\n  }\n}\n```\nSCSS:\n```\na {\n  font-weight: bold;\n  text-decoration: none;\n  &:hover { text-decoration: underline; }\n  body.firefox & { font-weight: normal; }\n}\n```\n> SCSS 不支持 LESS 中的 `CSS Guard` 功能，比如 `if, when ...`，在 SCSS 中需要换种方式实现。\n\nLESS 示例：\n```\n.my-optional-style() when (@my-option = true) {\n  button {\n    color: white;\n  }\n}\n.my-optional-style();\n```\nNote：SCSS 需要换一种写法实现同样的功能。\n> SCSS 支持 !default，一般是用在基础 Rule 的声明中，告诉使用者这是可以被覆盖的。\n\nSCSS 示例：\n```\n$primary:       $blue !default;\n$secondary:     $gray-600 !default;\n```\n> SCSS支持`if, else, for, each`等方法, LESS不支持\n\nSCSS:\n```\n$type: monster;\np {\n  @if $type == ocean {\n    color: blue;\n  } @else if $type == matador {\n    color: red;\n  } @else if $type == monster {\n    color: green;\n  } @else {\n    color: black;\n  }\n}\n\n@for $i from 1 through 3 {\n  .item-#{$i} { width: 2em * $i; }\n}\n\n@each $animal in puma, sea-slug, egret, salamander {\n  .#{$animal}-icon {\n    background-image: url('/images/#{$animal}.png');\n  }\n}\n```\n> SCSS 不像 LESS 一样默认可以把 rule 作为 Mixin 使用，但是 SCSS 有类似的 `@extend` 指令；而 LESS 的 extend 语法看起来则像是伪类一样。\n\n示例：\n\nLESS:\n```\n.error {\n  border: 1px #f00;\n  background-color: #fdd;\n}\n.seriousError {\n  @extend .error;\n  border-width: 3px;\n}\n```\nSCSS:\n```\n.error {\n  border: 1px #f00;\n  background-color: #fdd;\n}\n.seriousError {\n  @extend .error;\n  border-width: 3px;\n}\n```\n集成 JavaScript 功能的方式：LESS 使用 @functions 指令，可以把 js 代码直接放到 ~`xxx` 中间即可；SCSS 可以把 JS 代码放到一个单独的文件中，然后使用 node-sass编译的时候指定参数传给 node-sass。\n\nLESS 示例：[ant-design/ant-design](https://github.com/ant-design/ant-design/blob/7fa05996957ef0eded21d810d71364d294ea947d/components/style/color/tinyColor.less)\n\nSCSS 示例：  \n命令\n```\nnode-sass --output-style expanded --source-map true --precision 6 --functions components/style/custom.js components/button/style/index.scss components/button/style/index.css\n```\n\n\n* LESS 支持 lazy evaluation，但是  SCSS 不支持，所以在 LESS 中可以先使用再定义，但是在 SCSS 中一定要先定义再使用。\n* SCSS 是不支持 Mixin 重载的, 也就是说 LESS 可以有同名但是参数个数不同的几个 Mixins, SCSS 同样名字的 Mixin 只能有一个.\n\n## 参考\n[less和sass或者scss 有什么区别吗？\n](https://www.zhihu.com/question/270862074?sort=created)  \n[LESS官网](https://less.bootcss.com/)  \n[SASS官网](https://www.sass.hk/)\n","slug":"2021-04-06-difference-sass-and-less","published":1,"updated":"2021-04-30T12:01:11.346Z","photos":[],"link":"","_id":"ckoe9igx0003b8cpng92w4lr3","content":"<p><code>LESS</code> 和 <code>SCSS</code> 都属于 CSS 预处理器的范畴，也就是 CSS 的超集，但是两者的语法、如何使用和具体的功能实现还是有差异的。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"声明和使用变量\"><a href=\"#声明和使用变量\" class=\"headerlink\" title=\"声明和使用变量\"></a>声明和使用变量</h2><blockquote>\n<p>LESS 采用 <code>@</code> 符号，SCSS 采用 <code>$</code> 符号。</p>\n</blockquote>\n<p>在下面的示例中，我们首先在规则外声明了一个名为 link-color 的变量，然后在名为 <code>#main</code> 的规则内声明一个名为 <code>width</code> 的变量，接着把 <code>width</code> 变量赋值给了 CSS 的 <code>width</code> 属性。</p>\n<p>LESS:</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@link-color:</span> <span class=\"number\">#428bca</span>;</span><br><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  <span class=\"variable\">@width:</span> <span class=\"number\">5em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"variable\">@width</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SCSS:</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$link-color</span>: <span class=\"number\">#428bca</span>;</span><br><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  <span class=\"variable\">$width</span>: <span class=\"number\">5em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"variable\">$width</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"变量插值（Variable-Interpolation）\"><a href=\"#变量插值（Variable-Interpolation）\" class=\"headerlink\" title=\"变量插值（Variable Interpolation）\"></a>变量插值（Variable Interpolation）</h2><blockquote>\n<p>LESS 采用 <code>@&#123;xxxx&#125;</code> 的形式，SCSS 采用 <code>#&#123;xxxx&#125;</code> 的形式。</p>\n</blockquote>\n<p>LESS：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Variables </span></span><br><span class=\"line\"><span class=\"variable\">@my-selector:</span> banner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Usage </span></span><br><span class=\"line\"><span class=\"selector-class\">.@&#123;my-selector&#125;</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SCSS:</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Variables </span></span><br><span class=\"line\"><span class=\"variable\">$my-selector</span>: banner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Usage </span></span><br><span class=\"line\">.#&#123;<span class=\"variable\">$my-selector</span>&#125; &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Mixins-的定义、使用及参数\"><a href=\"#Mixins-的定义、使用及参数\" class=\"headerlink\" title=\"Mixins 的定义、使用及参数\"></a>Mixins 的定义、使用及参数</h2><h3 id=\"定义方法\"><a href=\"#定义方法\" class=\"headerlink\" title=\"定义方法\"></a>定义方法</h3><p>定义一个 Mixin：LESS 使用 <code>dot</code> 符号（也就是句点）来定义一个 Mixin，并且可以把任意的 CSS 规则作为 Mixin 使用；SCSS 使用 <code>@mixin</code> 指令来定义一个 Mixin。</p>\n<p>示例 - 来自 BootStrap 的 alert-variant Mixin 的定义<br>LESS：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.alert-variant</span>(<span class=\"variable\">@background</span>; <span class=\"variable\">@border</span>; <span class=\"variable\">@text-color</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"variable\">@background</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-color</span>: <span class=\"variable\">@border</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">@text-color</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">hr</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-top-color</span>: darken(<span class=\"variable\">@border</span>, <span class=\"number\">5%</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.alert-link</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: darken(<span class=\"variable\">@text-color</span>, <span class=\"number\">10%</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SCSS:</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@mixin</span> alert-variant(<span class=\"variable\">$background</span>, <span class=\"variable\">$border</span>, <span class=\"variable\">$text-color</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"variable\">$background</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-color</span>: <span class=\"variable\">$border</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">$text-color</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">hr</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-top-color</span>: darken(<span class=\"variable\">$border</span>, <span class=\"number\">5%</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.alert-link</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: darken(<span class=\"variable\">$text-color</span>, <span class=\"number\">10%</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>使用 Mixin：LESS 仍是使用 <code>dot</code> 符号（句点），如果 Mixin 没有参数的话可以省略后面的圆括号；SCSS 使用 <code>@include</code> 指令来引入一个 Mixin。</p>\n<p>示例 - 引入一个名为 center-block 的 Mixin。<br>LESS：</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"code\"><pre><span class=\"line\">.<span class=\"built_in\">center</span>-<span class=\"built_in\">block</span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">display</span>: <span class=\"built_in\">block</span>;</span><br><span class=\"line\">  margin-left: auto;</span><br><span class=\"line\">  margin-right: auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.a &#123;</span><br><span class=\"line\">    .<span class=\"built_in\">center</span>-<span class=\"built_in\">block</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SCSS:</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> center-block() &#123;</span><br><span class=\"line\">  display: block;</span><br><span class=\"line\">  margin-left: <span class=\"built_in\">auto</span>;</span><br><span class=\"line\">  margin-right: <span class=\"built_in\">auto</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.a &#123;</span><br><span class=\"line\">    @include center-block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数形式\"><a href=\"#参数形式\" class=\"headerlink\" title=\"参数形式\"></a>参数形式</h3><p>如果存在多个参数的话，LESS 使用分号分隔；SCSS 使用逗号分隔。两者都支持为参数设置默认值。</p>\n<p>示例 - 来在 BootStrap 的 form-control-validation Mixin 的使用</p>\n<p>LESS：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@state-success-text:</span>             <span class=\"number\">#3c763d</span>;</span><br><span class=\"line\"><span class=\"variable\">@state-success-bg:</span>               <span class=\"number\">#dff0d8</span>;</span><br><span class=\"line\"><span class=\"variable\">@state-success-border:</span>           darken(spin(<span class=\"variable\">@state-success-bg</span>, -<span class=\"number\">10</span>), <span class=\"number\">5%</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">@state-info-text:</span>                <span class=\"number\">#31708f</span>;</span><br><span class=\"line\"><span class=\"variable\">@state-info-bg:</span>                  <span class=\"number\">#d9edf7</span>;</span><br><span class=\"line\"><span class=\"variable\">@state-info-border:</span>              darken(spin(<span class=\"variable\">@state-info-bg</span>, -<span class=\"number\">10</span>), <span class=\"number\">7%</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">@state-warning-text:</span>             <span class=\"number\">#8a6d3b</span>;</span><br><span class=\"line\"><span class=\"variable\">@state-warning-bg:</span>               <span class=\"number\">#fcf8e3</span>;</span><br><span class=\"line\"><span class=\"variable\">@state-warning-border:</span>           darken(spin(<span class=\"variable\">@state-warning-bg</span>, -<span class=\"number\">10</span>), <span class=\"number\">5%</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">@state-danger-text:</span>              <span class=\"number\">#a94442</span>;</span><br><span class=\"line\"><span class=\"variable\">@state-danger-bg:</span>                <span class=\"number\">#f2dede</span>;</span><br><span class=\"line\"><span class=\"variable\">@state-danger-border:</span>            darken(spin(<span class=\"variable\">@state-danger-bg</span>, -<span class=\"number\">10</span>), <span class=\"number\">5%</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-shadow</span>(<span class=\"variable\">@shadow</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-box-shadow</span>: <span class=\"variable\">@shadow</span>; <span class=\"comment\">// iOS &lt;4.3 &amp; Android &lt;4.1 </span></span><br><span class=\"line\">          <span class=\"attribute\">box-shadow</span>: <span class=\"variable\">@shadow</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.form-control-validation</span>(<span class=\"variable\">@text-color</span>: <span class=\"number\">#555</span>; <span class=\"variable\">@border-color</span>: <span class=\"number\">#ccc</span>; <span class=\"variable\">@background-color</span>: <span class=\"number\">#f5f5f5</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Color the label and help text </span></span><br><span class=\"line\">  <span class=\"selector-class\">.help-block</span>,</span><br><span class=\"line\">  <span class=\"selector-class\">.control-label</span>,</span><br><span class=\"line\">  <span class=\"selector-class\">.radio</span>,</span><br><span class=\"line\">  <span class=\"selector-class\">.checkbox</span>,</span><br><span class=\"line\">  <span class=\"selector-class\">.radio-inline</span>,</span><br><span class=\"line\">  <span class=\"selector-class\">.checkbox-inline</span>,</span><br><span class=\"line\">  <span class=\"selector-tag\">&amp;</span><span class=\"selector-class\">.radio</span> <span class=\"selector-tag\">label</span>,</span><br><span class=\"line\">  <span class=\"selector-tag\">&amp;</span><span class=\"selector-class\">.checkbox</span> <span class=\"selector-tag\">label</span>,</span><br><span class=\"line\">  <span class=\"selector-tag\">&amp;</span><span class=\"selector-class\">.radio-inline</span> <span class=\"selector-tag\">label</span>,</span><br><span class=\"line\">  <span class=\"selector-tag\">&amp;</span><span class=\"selector-class\">.checkbox-inline</span> <span class=\"selector-tag\">label</span>  &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">@text-color</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Set the border and box shadow on specific inputs to match </span></span><br><span class=\"line\">  <span class=\"selector-class\">.form-control</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"variable\">@border-color</span>;</span><br><span class=\"line\">    <span class=\"selector-class\">.box-shadow</span>(inset <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">1px</span> rgba(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,.<span class=\"number\">075</span>)); <span class=\"comment\">// Redeclare so transitions work </span></span><br><span class=\"line\">    <span class=\"selector-tag\">&amp;</span><span class=\"selector-pseudo\">:focus</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">border-color</span>: darken(<span class=\"variable\">@border-color</span>, <span class=\"number\">10%</span>);</span><br><span class=\"line\">      <span class=\"variable\">@shadow:</span> inset <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">1px</span> rgba(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,.<span class=\"number\">075</span>), <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">6px</span> lighten(<span class=\"variable\">@border-color</span>, <span class=\"number\">20%</span>);</span><br><span class=\"line\">      <span class=\"selector-class\">.box-shadow</span>(<span class=\"variable\">@shadow</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Set validation states also for addons </span></span><br><span class=\"line\">  <span class=\"selector-class\">.input-group-addon</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">@text-color</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"variable\">@border-color</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"variable\">@background-color</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Optional feedback icon </span></span><br><span class=\"line\">  <span class=\"selector-class\">.form-control-feedback</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">@text-color</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Feedback states </span></span><br><span class=\"line\"><span class=\"selector-class\">.has-success</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.form-control-validation</span>(<span class=\"variable\">@state-success-text</span>; <span class=\"variable\">@state-success-text</span>; <span class=\"variable\">@state-success-bg</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.has-warning</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.form-control-validation</span>(<span class=\"variable\">@state-warning-text</span>; <span class=\"variable\">@state-warning-text</span>; <span class=\"variable\">@state-warning-bg</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.has-error</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.form-control-validation</span>(<span class=\"variable\">@state-danger-text</span>; <span class=\"variable\">@state-danger-text</span>; <span class=\"variable\">@state-danger-bg</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SCSS:</p>\n<figure class=\"highlight mel\"><table><tr><td class=\"code\"><pre><span class=\"line\">$state-success-<span class=\"keyword\">text</span>:             #<span class=\"number\">3</span>c763d;</span><br><span class=\"line\">$state-success-bg:               #dff0d8;</span><br><span class=\"line\">$state-success-border:           darken(adjust_hue($state-success-bg, <span class=\"number\">-10</span>), <span class=\"number\">5</span>%);</span><br><span class=\"line\"></span><br><span class=\"line\">$state-info-<span class=\"keyword\">text</span>:                #<span class=\"number\">31708</span>f;</span><br><span class=\"line\">$state-info-bg:                  #d9edf7;</span><br><span class=\"line\">$state-info-border:              darken(adjust_hue($state-info-bg, <span class=\"number\">-10</span>), <span class=\"number\">7</span>%);</span><br><span class=\"line\"></span><br><span class=\"line\">$state-<span class=\"keyword\">warning</span>-<span class=\"keyword\">text</span>:             #<span class=\"number\">8</span>a6d3b;</span><br><span class=\"line\">$state-<span class=\"keyword\">warning</span>-bg:               #fcf8e3;</span><br><span class=\"line\">$state-<span class=\"keyword\">warning</span>-border:           darken(adjust_hue($state-<span class=\"keyword\">warning</span>-bg, <span class=\"number\">-10</span>), <span class=\"number\">5</span>%);</span><br><span class=\"line\"></span><br><span class=\"line\">$state-danger-<span class=\"keyword\">text</span>:              #a94442;</span><br><span class=\"line\">$state-danger-bg:                #f2dede;</span><br><span class=\"line\">$state-danger-border:            darken(adjust_hue($state-danger-bg, <span class=\"number\">-10</span>), <span class=\"number\">5</span>%);</span><br><span class=\"line\"></span><br><span class=\"line\">@mixin box-shadow($shadow) &#123;</span><br><span class=\"line\">  -webkit-box-shadow: $shadow; <span class=\"comment\">// iOS &lt;4.3 &amp; Android &lt;4.1 </span></span><br><span class=\"line\">          box-shadow: $shadow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@mixin form-<span class=\"keyword\">control</span>-validation($text-<span class=\"keyword\">color</span>: #<span class=\"number\">555</span>, $border-<span class=\"keyword\">color</span>: #ccc, $background-<span class=\"keyword\">color</span>: #f5f5f5) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Color the label and help text </span></span><br><span class=\"line\">  .<span class=\"keyword\">help</span>-block,</span><br><span class=\"line\">  .<span class=\"keyword\">control</span>-label,</span><br><span class=\"line\">  .radio,</span><br><span class=\"line\">  .checkbox,</span><br><span class=\"line\">  .radio-inline,</span><br><span class=\"line\">  .checkbox-inline,</span><br><span class=\"line\">  &amp;.radio label,</span><br><span class=\"line\">  &amp;.checkbox label,</span><br><span class=\"line\">  &amp;.radio-inline label,</span><br><span class=\"line\">  &amp;.checkbox-inline label  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">color</span>: $text-<span class=\"keyword\">color</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Set the border and box shadow on specific inputs to match </span></span><br><span class=\"line\">  .form-<span class=\"keyword\">control</span> &#123;</span><br><span class=\"line\">    border-<span class=\"keyword\">color</span>: $border-<span class=\"keyword\">color</span>;</span><br><span class=\"line\">    @include box-shadow(inset <span class=\"number\">0</span> <span class=\"number\">1</span>px <span class=\"number\">1</span>px rgba(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">.075</span>)); <span class=\"comment\">// Redeclare so transitions work </span></span><br><span class=\"line\">    &amp;:focus &#123;</span><br><span class=\"line\">      border-<span class=\"keyword\">color</span>: darken($border-<span class=\"keyword\">color</span>, <span class=\"number\">10</span>%);</span><br><span class=\"line\">      $shadow: inset <span class=\"number\">0</span> <span class=\"number\">1</span>px <span class=\"number\">1</span>px rgba(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">.075</span>), <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">6</span>px lighten($border-<span class=\"keyword\">color</span>, <span class=\"number\">20</span>%);</span><br><span class=\"line\">      @include box-shadow($shadow);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Set validation states also for addons </span></span><br><span class=\"line\">  .input-<span class=\"keyword\">group</span>-addon &#123;</span><br><span class=\"line\">    <span class=\"keyword\">color</span>: $text-<span class=\"keyword\">color</span>;</span><br><span class=\"line\">    border-<span class=\"keyword\">color</span>: $border-<span class=\"keyword\">color</span>;</span><br><span class=\"line\">    background-<span class=\"keyword\">color</span>: $background-<span class=\"keyword\">color</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Optional feedback icon </span></span><br><span class=\"line\">  .form-<span class=\"keyword\">control</span>-feedback &#123;</span><br><span class=\"line\">    <span class=\"keyword\">color</span>: $text-<span class=\"keyword\">color</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Feedback states </span></span><br><span class=\"line\">.has-success &#123;</span><br><span class=\"line\">  @include form-<span class=\"keyword\">control</span>-validation($state-success-<span class=\"keyword\">text</span>, $state-success-<span class=\"keyword\">text</span>, $state-success-bg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.has-<span class=\"keyword\">warning</span> &#123;</span><br><span class=\"line\">  @include form-<span class=\"keyword\">control</span>-validation($state-<span class=\"keyword\">warning</span>-<span class=\"keyword\">text</span>, $state-<span class=\"keyword\">warning</span>-<span class=\"keyword\">text</span>, $state-<span class=\"keyword\">warning</span>-bg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.has-<span class=\"keyword\">error</span> &#123;</span><br><span class=\"line\">  @include form-<span class=\"keyword\">control</span>-validation($state-danger-<span class=\"keyword\">text</span>, $state-danger-<span class=\"keyword\">text</span>, $state-danger-bg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数的使用\"><a href=\"#函数的使用\" class=\"headerlink\" title=\"函数的使用\"></a>函数的使用</h2><h3 id=\"字符串函数\"><a href=\"#字符串函数\" class=\"headerlink\" title=\"字符串函数\"></a>字符串函数</h3><p>LESS 使用 e 或者 <code>~&quot;xxxx&quot;</code> 这种语法进行 CSS 转义；SCSS 本身并没有提供 CSS 转义的函数，要达到相同的效果可以使用变量插值（Variable Interpolation）实现。</p>\n<p>LESS:</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@input-border-focus:</span>             <span class=\"number\">#66afe9</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-shadow</span>(<span class=\"variable\">@shadow</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-box-shadow</span>: <span class=\"variable\">@shadow</span>; <span class=\"comment\">// iOS &lt;4.3 &amp; Android &lt;4.1 </span></span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"variable\">@shadow</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.form-control-focus</span>(<span class=\"variable\">@color</span>: <span class=\"variable\">@input-border-focus</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable\">@color-rgba:</span> rgba(red(<span class=\"variable\">@color</span>), green(<span class=\"variable\">@color</span>), blue(<span class=\"variable\">@color</span>), .<span class=\"number\">6</span>);</span><br><span class=\"line\">  <span class=\"selector-tag\">&amp;</span><span class=\"selector-pseudo\">:focus</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"variable\">@color</span>;</span><br><span class=\"line\">    <span class=\"attribute\">outline</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"selector-class\">.box-shadow</span>(<span class=\"string\">~&quot;inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px @&#123;color-rgba&#125;&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//或者</span></span><br><span class=\"line\">    <span class=\"variable\">@str:</span> <span class=\"string\">&quot;inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px @&#123;color-rgba&#125;&quot;</span></span><br><span class=\"line\">    .box-shadow(e(<span class=\"variable\">@str</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.form-control</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.form-control-focus</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SCSS:</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$input-border-focus:             #<span class=\"number\">66</span>afe9;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">mixin</span> box-shadow($shadow) &#123;</span><br><span class=\"line\">  -webkit-box-shadow: $shadow; <span class=\"comment\">// iOS &lt;4.3 &amp; Android &lt;4.1 </span></span><br><span class=\"line\">  box-shadow: $shadow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">mixin</span> form-control-focus($color: $input-border-focus) &#123;</span><br><span class=\"line\">  $color-rgba: rgba(red($color), green($color), blue($color), <span class=\"number\">.6</span>);</span><br><span class=\"line\">  &amp;:focus &#123;</span><br><span class=\"line\">    border-color: $color;</span><br><span class=\"line\">    outline: <span class=\"number\">0</span>;</span><br><span class=\"line\">    @include box-shadow(#&#123;inset <span class=\"number\">0</span> <span class=\"number\">1</span>px <span class=\"number\">1</span>px rgba(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">.075</span>), <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">8</span>px $color-rgba&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.form-control &#123;</span><br><span class=\"line\">  @include form-control-focus();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"颜色函数\"><a href=\"#颜色函数\" class=\"headerlink\" title=\"颜色函数\"></a>颜色函数</h3><p>调节色相，LESS 使用名为 <code>spin()</code> 的函数；SCSS 使用名为 <code>adjust_hue()</code> 的函数。</p>\n<p>LESS:</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@state-success-border:</span>           darken(spin(<span class=\"variable\">@state-success-bg</span>, -<span class=\"number\">10</span>), <span class=\"number\">5%</span>);</span><br></pre></td></tr></table></figure>\n<p>SCSS:</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\">$state-success-border:           darken(adjust<span class=\"constructor\">_hue($<span class=\"params\">state</span>-<span class=\"params\">success</span>-<span class=\"params\">bg</span>, -10)</span>, <span class=\"number\">5</span>%);</span><br></pre></td></tr></table></figure>\n<h3 id=\"数学函数\"><a href=\"#数学函数\" class=\"headerlink\" title=\"数学函数\"></a>数学函数</h3><p>LESS 提供了一些 SCSS 中并不具备的数学函数，在 SCSS 中只能通过自定义函数实现，然后通过 node-sass 的接口传递给编译器。</p>\n<p>SCSS：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// rotate for ie8 and blow</span></span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> ie-rotate(<span class=\"variable\">$rotation</span>) &#123;</span><br><span class=\"line\">  -ms-<span class=\"attribute\">filter</span>: <span class=\"string\">&quot;progid:DXImageTransform.Microsoft.BasicImage(rotation=@&#123;rotation&#125;)&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// rotate for ie8 and blow</span></span><br><span class=\"line\"><span class=\"comment\">// degrees unit</span></span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> ie-rotate-via-degrees(<span class=\"variable\">$degrees</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* IE6-IE8 */</span></span><br><span class=\"line\">  <span class=\"variable\">$radians</span>: parseInt(<span class=\"string\">&quot;#&#123;$degrees&#125;&quot;</span>) * PI() * <span class=\"number\">2</span> / <span class=\"number\">360</span>;</span><br><span class=\"line\">  <span class=\"variable\">$costheta</span>: cos(<span class=\"string\">&quot;#&#123;$radians&#125;&quot;</span>);</span><br><span class=\"line\">  <span class=\"variable\">$sintheta</span>: sin(<span class=\"string\">&quot;#&#123;$radians&#125;&quot;</span>);</span><br><span class=\"line\">  <span class=\"variable\">$negsintheta</span>: <span class=\"string\">&quot;#&#123;$sintheta&#125;&quot;</span> * -<span class=\"number\">1</span>;</span><br><span class=\"line\">  -ms-<span class=\"attribute\">filter</span>: <span class=\"string\">&quot;progid:DXImageTransform.Microsoft.Matrix(sizingMethod=&#x27;auto expand&#x27;, M11=@&#123;costheta&#125;, M12=@&#123;negsintheta&#125;, M21=@&#123;sintheta&#125;, M22=@&#123;costheta&#125;)&quot;</span>;</span><br><span class=\"line\">  zoom: <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> &amp; &#123;</span><br><span class=\"line\">    <span class=\"attribute\">filter</span>: none;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// support rotate for all browsers</span></span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> cross-rotate(<span class=\"variable\">$degrees</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@include</span> rotate(<span class=\"variable\">$degrees</span>);</span><br><span class=\"line\">  <span class=\"keyword\">@include</span> ie-rotate-via-degrees(<span class=\"variable\">$degrees</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Placeholder text</span></span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> placeholder(<span class=\"variable\">$color</span>: <span class=\"variable\">$input-placeholder-color</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Firefox</span></span><br><span class=\"line\">  &amp;::-moz-placeholder &#123;</span><br><span class=\"line\">    color: <span class=\"variable\">$color</span>;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>; <span class=\"comment\">// Override Firefox&#x27;s unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Internet Explorer 10+</span></span><br><span class=\"line\">  &amp;:-ms-input-placeholder &#123;</span><br><span class=\"line\">    color: <span class=\"variable\">$color</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Safari and Chrome</span></span><br><span class=\"line\">  &amp;::-webkit-input-placeholder &#123;</span><br><span class=\"line\">    color: <span class=\"variable\">$color</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述 Math 实现所需的 JS 文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;parseInt($str)&#x27;</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(str, <span class=\"number\">10</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&#x27;Math.sin($degree)&#x27;</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">degree</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.sin(degree);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&#x27;Math.cos($degree)&#x27;</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">degree</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.cos(degree);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&#x27;Math.PI&#x27;</span>: <span class=\"built_in\">Math</span>.PI</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有关函数的区别还有：<br>LESS 的 <code>fade()</code> 函数在 SCSS 中只能使用 <code>rgba()</code> 之类的实现，因为 SCSS 也没有这个函数。</p>\n<h2 id=\"import-的实现\"><a href=\"#import-的实现\" class=\"headerlink\" title=\"@import 的实现\"></a>@import 的实现</h2><blockquote>\n<p>像 <code>@media</code>, <code>@import</code> 这些带 @ 符号的在 CSS 中都称为 At-rules。<br>值的一提的是 LESS 和 SCSS 对<code>@import</code> 实现的区别。</p>\n</blockquote>\n<h3 id=\"LESS\"><a href=\"#LESS\" class=\"headerlink\" title=\"LESS\"></a>LESS</h3><ul>\n<li>如果扩展名为 <code>.css</code>，将文件识别为 CSS 文件</li>\n<li>其他任何扩展名都将被作为 LESS 文件处理</li>\n<li>没有扩展名会被附加一个 <code>.less</code> 的扩展名并且作为 LESS 文件处理<h3 id=\"SCSS\"><a href=\"#SCSS\" class=\"headerlink\" title=\"SCSS\"></a>SCSS</h3></li>\n<li>默认情况下，SCSS 的 @import 实现会试图寻找一个 Sass 文件进行导入。</li>\n<li>但是在下列情况出现时，@import 会直接被编译为 CSS 的 @import at-rule </li>\n<li><ul>\n<li>文件扩展名是 <code>.css</code></li>\n</ul>\n</li>\n<li><ul>\n<li>文件以 <code>http://</code> 开头</li>\n</ul>\n</li>\n<li><ul>\n<li>文件名是一个 <code>url()</code></li>\n</ul>\n</li>\n<li><ul>\n<li><code>@import</code> 具有媒体查询</li>\n</ul>\n</li>\n<li>SCSS 按约定认为下划线开始的文件是内联文件，不会被编译为单独的 CSS 文件输出。</li>\n</ul>\n<p>示例</p>\n<p>LESS:</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">&quot;foo&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">&quot;bar.less&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">&quot;foo.php&quot;</span>; <span class=\"comment\">// 当成 LESS 文件处理</span></span><br><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">&quot;foo.css&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>SCSS:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">&quot;foo&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">&quot;foo.scss&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>都会导入 foo.scss 文件。</p>\n<h2 id=\"其他区别\"><a href=\"#其他区别\" class=\"headerlink\" title=\"其他区别\"></a>其他区别</h2><blockquote>\n<p>LESS 和 SCSS 均使用 <code>&amp;</code> 符号表示父选择器引用，但是 SCSS 的 <code>&amp;</code> 符号只能出现在一个组合选择器的开始位置，LESS 则没有这个限制。</p>\n</blockquote>\n<p>示例</p>\n<p>LESS：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.bg-variant</span>(<span class=\"variable\">@color</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"variable\">@color</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">a</span><span class=\"selector-tag\">&amp;</span><span class=\"selector-pseudo\">:hover</span>,</span><br><span class=\"line\">  <span class=\"selector-tag\">a</span><span class=\"selector-tag\">&amp;</span><span class=\"selector-pseudo\">:focus</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: darken(<span class=\"variable\">@color</span>, <span class=\"number\">10%</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SCSS:</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">text-decoration</span>: underline; &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span><span class=\"selector-class\">.firefox</span> &amp; &#123; <span class=\"attribute\">font-weight</span>: normal; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>SCSS 不支持 LESS 中的 <code>CSS Guard</code> 功能，比如 <code>if, when ...</code>，在 SCSS 中需要换种方式实现。</p>\n</blockquote>\n<p>LESS 示例：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.my-optional-style</span>() <span class=\"keyword\">when</span> (<span class=\"variable\">@my-option</span> = true) &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">button</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.my-optional-style</span>();</span><br></pre></td></tr></table></figure>\n<p>Note：SCSS 需要换一种写法实现同样的功能。</p>\n<blockquote>\n<p>SCSS 支持 !default，一般是用在基础 Rule 的声明中，告诉使用者这是可以被覆盖的。</p>\n</blockquote>\n<p>SCSS 示例：</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"code\"><pre><span class=\"line\">$primary:       $blue !<span class=\"keyword\">default</span><span class=\"comment\">;</span></span><br><span class=\"line\">$secondary:     $gray<span class=\"number\">-600</span> !<span class=\"keyword\">default</span><span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>SCSS支持<code>if, else, for, each</code>等方法, LESS不支持</p>\n</blockquote>\n<p>SCSS:</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$type</span>: monster;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@if</span> <span class=\"variable\">$type</span> == ocean &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">@else</span> if <span class=\"variable\">$type</span> == matador &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">@else</span> if <span class=\"variable\">$type</span> == monster &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: green;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">@else</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@for</span> <span class=\"variable\">$i</span> from <span class=\"number\">1</span> through <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.item-</span>#&#123;<span class=\"variable\">$i</span>&#125; &#123; <span class=\"attribute\">width</span>: <span class=\"number\">2em</span> * <span class=\"variable\">$i</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@each</span> <span class=\"variable\">$animal</span> in puma, sea-slug, egret, salamander &#123;</span><br><span class=\"line\">  .#&#123;<span class=\"variable\">$animal</span>&#125;-<span class=\"attribute\">icon</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: url(<span class=\"string\">&#x27;/images/#&#123;$animal&#125;.png&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>SCSS 不像 LESS 一样默认可以把 rule 作为 Mixin 使用，但是 SCSS 有类似的 <code>@extend</code> 指令；而 LESS 的 extend 语法看起来则像是伪类一样。</p>\n</blockquote>\n<p>示例：</p>\n<p>LESS:</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.error</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> <span class=\"number\">#f00</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#fdd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.seriousError</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@extend</span> .error;</span><br><span class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SCSS:</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.error</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> <span class=\"number\">#f00</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#fdd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.seriousError</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@extend</span> .error;</span><br><span class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>集成 JavaScript 功能的方式：LESS 使用 @functions 指令，可以把 js 代码直接放到 ~<code>xxx</code> 中间即可；SCSS 可以把 JS 代码放到一个单独的文件中，然后使用 node-sass编译的时候指定参数传给 node-sass。</p>\n<p>LESS 示例：<a href=\"https://github.com/ant-design/ant-design/blob/7fa05996957ef0eded21d810d71364d294ea947d/components/style/color/tinyColor.less\">ant-design/ant-design</a></p>\n<p>SCSS 示例：<br>命令</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\">node-sass --output-style expanded --<span class=\"keyword\">source</span>-map <span class=\"keyword\">true</span> --precision <span class=\"number\">6</span> --functions components<span class=\"regexp\">/style/</span>custom.js components<span class=\"regexp\">/button/</span>style<span class=\"regexp\">/index.scss components/</span>button<span class=\"regexp\">/style/i</span>ndex.css</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>LESS 支持 lazy evaluation，但是  SCSS 不支持，所以在 LESS 中可以先使用再定义，但是在 SCSS 中一定要先定义再使用。</li>\n<li>SCSS 是不支持 Mixin 重载的, 也就是说 LESS 可以有同名但是参数个数不同的几个 Mixins, SCSS 同样名字的 Mixin 只能有一个.</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.zhihu.com/question/270862074?sort=created\">less和sass或者scss 有什么区别吗？\n</a><br><a href=\"https://less.bootcss.com/\">LESS官网</a><br><a href=\"https://www.sass.hk/\">SASS官网</a></p>\n","site":{"data":{}},"excerpt":"<p><code>LESS</code> 和 <code>SCSS</code> 都属于 CSS 预处理器的范畴，也就是 CSS 的超集，但是两者的语法、如何使用和具体的功能实现还是有差异的。</p>","more":"<h2 id=\"声明和使用变量\"><a href=\"#声明和使用变量\" class=\"headerlink\" title=\"声明和使用变量\"></a>声明和使用变量</h2><blockquote>\n<p>LESS 采用 <code>@</code> 符号，SCSS 采用 <code>$</code> 符号。</p>\n</blockquote>\n<p>在下面的示例中，我们首先在规则外声明了一个名为 link-color 的变量，然后在名为 <code>#main</code> 的规则内声明一个名为 <code>width</code> 的变量，接着把 <code>width</code> 变量赋值给了 CSS 的 <code>width</code> 属性。</p>\n<p>LESS:</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@link-color:</span> <span class=\"number\">#428bca</span>;</span><br><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  <span class=\"variable\">@width:</span> <span class=\"number\">5em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"variable\">@width</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SCSS:</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$link-color</span>: <span class=\"number\">#428bca</span>;</span><br><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  <span class=\"variable\">$width</span>: <span class=\"number\">5em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"variable\">$width</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"变量插值（Variable-Interpolation）\"><a href=\"#变量插值（Variable-Interpolation）\" class=\"headerlink\" title=\"变量插值（Variable Interpolation）\"></a>变量插值（Variable Interpolation）</h2><blockquote>\n<p>LESS 采用 <code>@&#123;xxxx&#125;</code> 的形式，SCSS 采用 <code>#&#123;xxxx&#125;</code> 的形式。</p>\n</blockquote>\n<p>LESS：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Variables </span></span><br><span class=\"line\"><span class=\"variable\">@my-selector:</span> banner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Usage </span></span><br><span class=\"line\"><span class=\"selector-class\">.@&#123;my-selector&#125;</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SCSS:</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Variables </span></span><br><span class=\"line\"><span class=\"variable\">$my-selector</span>: banner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Usage </span></span><br><span class=\"line\">.#&#123;<span class=\"variable\">$my-selector</span>&#125; &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Mixins-的定义、使用及参数\"><a href=\"#Mixins-的定义、使用及参数\" class=\"headerlink\" title=\"Mixins 的定义、使用及参数\"></a>Mixins 的定义、使用及参数</h2><h3 id=\"定义方法\"><a href=\"#定义方法\" class=\"headerlink\" title=\"定义方法\"></a>定义方法</h3><p>定义一个 Mixin：LESS 使用 <code>dot</code> 符号（也就是句点）来定义一个 Mixin，并且可以把任意的 CSS 规则作为 Mixin 使用；SCSS 使用 <code>@mixin</code> 指令来定义一个 Mixin。</p>\n<p>示例 - 来自 BootStrap 的 alert-variant Mixin 的定义<br>LESS：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.alert-variant</span>(<span class=\"variable\">@background</span>; <span class=\"variable\">@border</span>; <span class=\"variable\">@text-color</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"variable\">@background</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-color</span>: <span class=\"variable\">@border</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">@text-color</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">hr</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-top-color</span>: darken(<span class=\"variable\">@border</span>, <span class=\"number\">5%</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.alert-link</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: darken(<span class=\"variable\">@text-color</span>, <span class=\"number\">10%</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SCSS:</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@mixin</span> alert-variant(<span class=\"variable\">$background</span>, <span class=\"variable\">$border</span>, <span class=\"variable\">$text-color</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"variable\">$background</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-color</span>: <span class=\"variable\">$border</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">$text-color</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">hr</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-top-color</span>: darken(<span class=\"variable\">$border</span>, <span class=\"number\">5%</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.alert-link</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: darken(<span class=\"variable\">$text-color</span>, <span class=\"number\">10%</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>使用 Mixin：LESS 仍是使用 <code>dot</code> 符号（句点），如果 Mixin 没有参数的话可以省略后面的圆括号；SCSS 使用 <code>@include</code> 指令来引入一个 Mixin。</p>\n<p>示例 - 引入一个名为 center-block 的 Mixin。<br>LESS：</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"code\"><pre><span class=\"line\">.<span class=\"built_in\">center</span>-<span class=\"built_in\">block</span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">display</span>: <span class=\"built_in\">block</span>;</span><br><span class=\"line\">  margin-left: auto;</span><br><span class=\"line\">  margin-right: auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.a &#123;</span><br><span class=\"line\">    .<span class=\"built_in\">center</span>-<span class=\"built_in\">block</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SCSS:</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> center-block() &#123;</span><br><span class=\"line\">  display: block;</span><br><span class=\"line\">  margin-left: <span class=\"built_in\">auto</span>;</span><br><span class=\"line\">  margin-right: <span class=\"built_in\">auto</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.a &#123;</span><br><span class=\"line\">    @include center-block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数形式\"><a href=\"#参数形式\" class=\"headerlink\" title=\"参数形式\"></a>参数形式</h3><p>如果存在多个参数的话，LESS 使用分号分隔；SCSS 使用逗号分隔。两者都支持为参数设置默认值。</p>\n<p>示例 - 来在 BootStrap 的 form-control-validation Mixin 的使用</p>\n<p>LESS：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@state-success-text:</span>             <span class=\"number\">#3c763d</span>;</span><br><span class=\"line\"><span class=\"variable\">@state-success-bg:</span>               <span class=\"number\">#dff0d8</span>;</span><br><span class=\"line\"><span class=\"variable\">@state-success-border:</span>           darken(spin(<span class=\"variable\">@state-success-bg</span>, -<span class=\"number\">10</span>), <span class=\"number\">5%</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">@state-info-text:</span>                <span class=\"number\">#31708f</span>;</span><br><span class=\"line\"><span class=\"variable\">@state-info-bg:</span>                  <span class=\"number\">#d9edf7</span>;</span><br><span class=\"line\"><span class=\"variable\">@state-info-border:</span>              darken(spin(<span class=\"variable\">@state-info-bg</span>, -<span class=\"number\">10</span>), <span class=\"number\">7%</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">@state-warning-text:</span>             <span class=\"number\">#8a6d3b</span>;</span><br><span class=\"line\"><span class=\"variable\">@state-warning-bg:</span>               <span class=\"number\">#fcf8e3</span>;</span><br><span class=\"line\"><span class=\"variable\">@state-warning-border:</span>           darken(spin(<span class=\"variable\">@state-warning-bg</span>, -<span class=\"number\">10</span>), <span class=\"number\">5%</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">@state-danger-text:</span>              <span class=\"number\">#a94442</span>;</span><br><span class=\"line\"><span class=\"variable\">@state-danger-bg:</span>                <span class=\"number\">#f2dede</span>;</span><br><span class=\"line\"><span class=\"variable\">@state-danger-border:</span>            darken(spin(<span class=\"variable\">@state-danger-bg</span>, -<span class=\"number\">10</span>), <span class=\"number\">5%</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-shadow</span>(<span class=\"variable\">@shadow</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-box-shadow</span>: <span class=\"variable\">@shadow</span>; <span class=\"comment\">// iOS &lt;4.3 &amp; Android &lt;4.1 </span></span><br><span class=\"line\">          <span class=\"attribute\">box-shadow</span>: <span class=\"variable\">@shadow</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.form-control-validation</span>(<span class=\"variable\">@text-color</span>: <span class=\"number\">#555</span>; <span class=\"variable\">@border-color</span>: <span class=\"number\">#ccc</span>; <span class=\"variable\">@background-color</span>: <span class=\"number\">#f5f5f5</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Color the label and help text </span></span><br><span class=\"line\">  <span class=\"selector-class\">.help-block</span>,</span><br><span class=\"line\">  <span class=\"selector-class\">.control-label</span>,</span><br><span class=\"line\">  <span class=\"selector-class\">.radio</span>,</span><br><span class=\"line\">  <span class=\"selector-class\">.checkbox</span>,</span><br><span class=\"line\">  <span class=\"selector-class\">.radio-inline</span>,</span><br><span class=\"line\">  <span class=\"selector-class\">.checkbox-inline</span>,</span><br><span class=\"line\">  <span class=\"selector-tag\">&amp;</span><span class=\"selector-class\">.radio</span> <span class=\"selector-tag\">label</span>,</span><br><span class=\"line\">  <span class=\"selector-tag\">&amp;</span><span class=\"selector-class\">.checkbox</span> <span class=\"selector-tag\">label</span>,</span><br><span class=\"line\">  <span class=\"selector-tag\">&amp;</span><span class=\"selector-class\">.radio-inline</span> <span class=\"selector-tag\">label</span>,</span><br><span class=\"line\">  <span class=\"selector-tag\">&amp;</span><span class=\"selector-class\">.checkbox-inline</span> <span class=\"selector-tag\">label</span>  &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">@text-color</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Set the border and box shadow on specific inputs to match </span></span><br><span class=\"line\">  <span class=\"selector-class\">.form-control</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"variable\">@border-color</span>;</span><br><span class=\"line\">    <span class=\"selector-class\">.box-shadow</span>(inset <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">1px</span> rgba(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,.<span class=\"number\">075</span>)); <span class=\"comment\">// Redeclare so transitions work </span></span><br><span class=\"line\">    <span class=\"selector-tag\">&amp;</span><span class=\"selector-pseudo\">:focus</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">border-color</span>: darken(<span class=\"variable\">@border-color</span>, <span class=\"number\">10%</span>);</span><br><span class=\"line\">      <span class=\"variable\">@shadow:</span> inset <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">1px</span> rgba(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,.<span class=\"number\">075</span>), <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">6px</span> lighten(<span class=\"variable\">@border-color</span>, <span class=\"number\">20%</span>);</span><br><span class=\"line\">      <span class=\"selector-class\">.box-shadow</span>(<span class=\"variable\">@shadow</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Set validation states also for addons </span></span><br><span class=\"line\">  <span class=\"selector-class\">.input-group-addon</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">@text-color</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"variable\">@border-color</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"variable\">@background-color</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Optional feedback icon </span></span><br><span class=\"line\">  <span class=\"selector-class\">.form-control-feedback</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">@text-color</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Feedback states </span></span><br><span class=\"line\"><span class=\"selector-class\">.has-success</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.form-control-validation</span>(<span class=\"variable\">@state-success-text</span>; <span class=\"variable\">@state-success-text</span>; <span class=\"variable\">@state-success-bg</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.has-warning</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.form-control-validation</span>(<span class=\"variable\">@state-warning-text</span>; <span class=\"variable\">@state-warning-text</span>; <span class=\"variable\">@state-warning-bg</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.has-error</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.form-control-validation</span>(<span class=\"variable\">@state-danger-text</span>; <span class=\"variable\">@state-danger-text</span>; <span class=\"variable\">@state-danger-bg</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SCSS:</p>\n<figure class=\"highlight mel\"><table><tr><td class=\"code\"><pre><span class=\"line\">$state-success-<span class=\"keyword\">text</span>:             #<span class=\"number\">3</span>c763d;</span><br><span class=\"line\">$state-success-bg:               #dff0d8;</span><br><span class=\"line\">$state-success-border:           darken(adjust_hue($state-success-bg, <span class=\"number\">-10</span>), <span class=\"number\">5</span>%);</span><br><span class=\"line\"></span><br><span class=\"line\">$state-info-<span class=\"keyword\">text</span>:                #<span class=\"number\">31708</span>f;</span><br><span class=\"line\">$state-info-bg:                  #d9edf7;</span><br><span class=\"line\">$state-info-border:              darken(adjust_hue($state-info-bg, <span class=\"number\">-10</span>), <span class=\"number\">7</span>%);</span><br><span class=\"line\"></span><br><span class=\"line\">$state-<span class=\"keyword\">warning</span>-<span class=\"keyword\">text</span>:             #<span class=\"number\">8</span>a6d3b;</span><br><span class=\"line\">$state-<span class=\"keyword\">warning</span>-bg:               #fcf8e3;</span><br><span class=\"line\">$state-<span class=\"keyword\">warning</span>-border:           darken(adjust_hue($state-<span class=\"keyword\">warning</span>-bg, <span class=\"number\">-10</span>), <span class=\"number\">5</span>%);</span><br><span class=\"line\"></span><br><span class=\"line\">$state-danger-<span class=\"keyword\">text</span>:              #a94442;</span><br><span class=\"line\">$state-danger-bg:                #f2dede;</span><br><span class=\"line\">$state-danger-border:            darken(adjust_hue($state-danger-bg, <span class=\"number\">-10</span>), <span class=\"number\">5</span>%);</span><br><span class=\"line\"></span><br><span class=\"line\">@mixin box-shadow($shadow) &#123;</span><br><span class=\"line\">  -webkit-box-shadow: $shadow; <span class=\"comment\">// iOS &lt;4.3 &amp; Android &lt;4.1 </span></span><br><span class=\"line\">          box-shadow: $shadow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@mixin form-<span class=\"keyword\">control</span>-validation($text-<span class=\"keyword\">color</span>: #<span class=\"number\">555</span>, $border-<span class=\"keyword\">color</span>: #ccc, $background-<span class=\"keyword\">color</span>: #f5f5f5) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Color the label and help text </span></span><br><span class=\"line\">  .<span class=\"keyword\">help</span>-block,</span><br><span class=\"line\">  .<span class=\"keyword\">control</span>-label,</span><br><span class=\"line\">  .radio,</span><br><span class=\"line\">  .checkbox,</span><br><span class=\"line\">  .radio-inline,</span><br><span class=\"line\">  .checkbox-inline,</span><br><span class=\"line\">  &amp;.radio label,</span><br><span class=\"line\">  &amp;.checkbox label,</span><br><span class=\"line\">  &amp;.radio-inline label,</span><br><span class=\"line\">  &amp;.checkbox-inline label  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">color</span>: $text-<span class=\"keyword\">color</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Set the border and box shadow on specific inputs to match </span></span><br><span class=\"line\">  .form-<span class=\"keyword\">control</span> &#123;</span><br><span class=\"line\">    border-<span class=\"keyword\">color</span>: $border-<span class=\"keyword\">color</span>;</span><br><span class=\"line\">    @include box-shadow(inset <span class=\"number\">0</span> <span class=\"number\">1</span>px <span class=\"number\">1</span>px rgba(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">.075</span>)); <span class=\"comment\">// Redeclare so transitions work </span></span><br><span class=\"line\">    &amp;:focus &#123;</span><br><span class=\"line\">      border-<span class=\"keyword\">color</span>: darken($border-<span class=\"keyword\">color</span>, <span class=\"number\">10</span>%);</span><br><span class=\"line\">      $shadow: inset <span class=\"number\">0</span> <span class=\"number\">1</span>px <span class=\"number\">1</span>px rgba(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">.075</span>), <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">6</span>px lighten($border-<span class=\"keyword\">color</span>, <span class=\"number\">20</span>%);</span><br><span class=\"line\">      @include box-shadow($shadow);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Set validation states also for addons </span></span><br><span class=\"line\">  .input-<span class=\"keyword\">group</span>-addon &#123;</span><br><span class=\"line\">    <span class=\"keyword\">color</span>: $text-<span class=\"keyword\">color</span>;</span><br><span class=\"line\">    border-<span class=\"keyword\">color</span>: $border-<span class=\"keyword\">color</span>;</span><br><span class=\"line\">    background-<span class=\"keyword\">color</span>: $background-<span class=\"keyword\">color</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Optional feedback icon </span></span><br><span class=\"line\">  .form-<span class=\"keyword\">control</span>-feedback &#123;</span><br><span class=\"line\">    <span class=\"keyword\">color</span>: $text-<span class=\"keyword\">color</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Feedback states </span></span><br><span class=\"line\">.has-success &#123;</span><br><span class=\"line\">  @include form-<span class=\"keyword\">control</span>-validation($state-success-<span class=\"keyword\">text</span>, $state-success-<span class=\"keyword\">text</span>, $state-success-bg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.has-<span class=\"keyword\">warning</span> &#123;</span><br><span class=\"line\">  @include form-<span class=\"keyword\">control</span>-validation($state-<span class=\"keyword\">warning</span>-<span class=\"keyword\">text</span>, $state-<span class=\"keyword\">warning</span>-<span class=\"keyword\">text</span>, $state-<span class=\"keyword\">warning</span>-bg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.has-<span class=\"keyword\">error</span> &#123;</span><br><span class=\"line\">  @include form-<span class=\"keyword\">control</span>-validation($state-danger-<span class=\"keyword\">text</span>, $state-danger-<span class=\"keyword\">text</span>, $state-danger-bg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数的使用\"><a href=\"#函数的使用\" class=\"headerlink\" title=\"函数的使用\"></a>函数的使用</h2><h3 id=\"字符串函数\"><a href=\"#字符串函数\" class=\"headerlink\" title=\"字符串函数\"></a>字符串函数</h3><p>LESS 使用 e 或者 <code>~&quot;xxxx&quot;</code> 这种语法进行 CSS 转义；SCSS 本身并没有提供 CSS 转义的函数，要达到相同的效果可以使用变量插值（Variable Interpolation）实现。</p>\n<p>LESS:</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@input-border-focus:</span>             <span class=\"number\">#66afe9</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box-shadow</span>(<span class=\"variable\">@shadow</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-box-shadow</span>: <span class=\"variable\">@shadow</span>; <span class=\"comment\">// iOS &lt;4.3 &amp; Android &lt;4.1 </span></span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"variable\">@shadow</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.form-control-focus</span>(<span class=\"variable\">@color</span>: <span class=\"variable\">@input-border-focus</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable\">@color-rgba:</span> rgba(red(<span class=\"variable\">@color</span>), green(<span class=\"variable\">@color</span>), blue(<span class=\"variable\">@color</span>), .<span class=\"number\">6</span>);</span><br><span class=\"line\">  <span class=\"selector-tag\">&amp;</span><span class=\"selector-pseudo\">:focus</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"variable\">@color</span>;</span><br><span class=\"line\">    <span class=\"attribute\">outline</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"selector-class\">.box-shadow</span>(<span class=\"string\">~&quot;inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px @&#123;color-rgba&#125;&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//或者</span></span><br><span class=\"line\">    <span class=\"variable\">@str:</span> <span class=\"string\">&quot;inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px @&#123;color-rgba&#125;&quot;</span></span><br><span class=\"line\">    .box-shadow(e(<span class=\"variable\">@str</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.form-control</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.form-control-focus</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SCSS:</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$input-border-focus:             #<span class=\"number\">66</span>afe9;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">mixin</span> box-shadow($shadow) &#123;</span><br><span class=\"line\">  -webkit-box-shadow: $shadow; <span class=\"comment\">// iOS &lt;4.3 &amp; Android &lt;4.1 </span></span><br><span class=\"line\">  box-shadow: $shadow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">mixin</span> form-control-focus($color: $input-border-focus) &#123;</span><br><span class=\"line\">  $color-rgba: rgba(red($color), green($color), blue($color), <span class=\"number\">.6</span>);</span><br><span class=\"line\">  &amp;:focus &#123;</span><br><span class=\"line\">    border-color: $color;</span><br><span class=\"line\">    outline: <span class=\"number\">0</span>;</span><br><span class=\"line\">    @include box-shadow(#&#123;inset <span class=\"number\">0</span> <span class=\"number\">1</span>px <span class=\"number\">1</span>px rgba(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">.075</span>), <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">8</span>px $color-rgba&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.form-control &#123;</span><br><span class=\"line\">  @include form-control-focus();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"颜色函数\"><a href=\"#颜色函数\" class=\"headerlink\" title=\"颜色函数\"></a>颜色函数</h3><p>调节色相，LESS 使用名为 <code>spin()</code> 的函数；SCSS 使用名为 <code>adjust_hue()</code> 的函数。</p>\n<p>LESS:</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@state-success-border:</span>           darken(spin(<span class=\"variable\">@state-success-bg</span>, -<span class=\"number\">10</span>), <span class=\"number\">5%</span>);</span><br></pre></td></tr></table></figure>\n<p>SCSS:</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\">$state-success-border:           darken(adjust<span class=\"constructor\">_hue($<span class=\"params\">state</span>-<span class=\"params\">success</span>-<span class=\"params\">bg</span>, -10)</span>, <span class=\"number\">5</span>%);</span><br></pre></td></tr></table></figure>\n<h3 id=\"数学函数\"><a href=\"#数学函数\" class=\"headerlink\" title=\"数学函数\"></a>数学函数</h3><p>LESS 提供了一些 SCSS 中并不具备的数学函数，在 SCSS 中只能通过自定义函数实现，然后通过 node-sass 的接口传递给编译器。</p>\n<p>SCSS：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// rotate for ie8 and blow</span></span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> ie-rotate(<span class=\"variable\">$rotation</span>) &#123;</span><br><span class=\"line\">  -ms-<span class=\"attribute\">filter</span>: <span class=\"string\">&quot;progid:DXImageTransform.Microsoft.BasicImage(rotation=@&#123;rotation&#125;)&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// rotate for ie8 and blow</span></span><br><span class=\"line\"><span class=\"comment\">// degrees unit</span></span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> ie-rotate-via-degrees(<span class=\"variable\">$degrees</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* IE6-IE8 */</span></span><br><span class=\"line\">  <span class=\"variable\">$radians</span>: parseInt(<span class=\"string\">&quot;#&#123;$degrees&#125;&quot;</span>) * PI() * <span class=\"number\">2</span> / <span class=\"number\">360</span>;</span><br><span class=\"line\">  <span class=\"variable\">$costheta</span>: cos(<span class=\"string\">&quot;#&#123;$radians&#125;&quot;</span>);</span><br><span class=\"line\">  <span class=\"variable\">$sintheta</span>: sin(<span class=\"string\">&quot;#&#123;$radians&#125;&quot;</span>);</span><br><span class=\"line\">  <span class=\"variable\">$negsintheta</span>: <span class=\"string\">&quot;#&#123;$sintheta&#125;&quot;</span> * -<span class=\"number\">1</span>;</span><br><span class=\"line\">  -ms-<span class=\"attribute\">filter</span>: <span class=\"string\">&quot;progid:DXImageTransform.Microsoft.Matrix(sizingMethod=&#x27;auto expand&#x27;, M11=@&#123;costheta&#125;, M12=@&#123;negsintheta&#125;, M21=@&#123;sintheta&#125;, M22=@&#123;costheta&#125;)&quot;</span>;</span><br><span class=\"line\">  zoom: <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> &amp; &#123;</span><br><span class=\"line\">    <span class=\"attribute\">filter</span>: none;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// support rotate for all browsers</span></span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> cross-rotate(<span class=\"variable\">$degrees</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@include</span> rotate(<span class=\"variable\">$degrees</span>);</span><br><span class=\"line\">  <span class=\"keyword\">@include</span> ie-rotate-via-degrees(<span class=\"variable\">$degrees</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Placeholder text</span></span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> placeholder(<span class=\"variable\">$color</span>: <span class=\"variable\">$input-placeholder-color</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Firefox</span></span><br><span class=\"line\">  &amp;::-moz-placeholder &#123;</span><br><span class=\"line\">    color: <span class=\"variable\">$color</span>;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>; <span class=\"comment\">// Override Firefox&#x27;s unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Internet Explorer 10+</span></span><br><span class=\"line\">  &amp;:-ms-input-placeholder &#123;</span><br><span class=\"line\">    color: <span class=\"variable\">$color</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Safari and Chrome</span></span><br><span class=\"line\">  &amp;::-webkit-input-placeholder &#123;</span><br><span class=\"line\">    color: <span class=\"variable\">$color</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述 Math 实现所需的 JS 文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;parseInt($str)&#x27;</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(str, <span class=\"number\">10</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&#x27;Math.sin($degree)&#x27;</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">degree</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.sin(degree);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&#x27;Math.cos($degree)&#x27;</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">degree</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.cos(degree);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&#x27;Math.PI&#x27;</span>: <span class=\"built_in\">Math</span>.PI</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有关函数的区别还有：<br>LESS 的 <code>fade()</code> 函数在 SCSS 中只能使用 <code>rgba()</code> 之类的实现，因为 SCSS 也没有这个函数。</p>\n<h2 id=\"import-的实现\"><a href=\"#import-的实现\" class=\"headerlink\" title=\"@import 的实现\"></a>@import 的实现</h2><blockquote>\n<p>像 <code>@media</code>, <code>@import</code> 这些带 @ 符号的在 CSS 中都称为 At-rules。<br>值的一提的是 LESS 和 SCSS 对<code>@import</code> 实现的区别。</p>\n</blockquote>\n<h3 id=\"LESS\"><a href=\"#LESS\" class=\"headerlink\" title=\"LESS\"></a>LESS</h3><ul>\n<li>如果扩展名为 <code>.css</code>，将文件识别为 CSS 文件</li>\n<li>其他任何扩展名都将被作为 LESS 文件处理</li>\n<li>没有扩展名会被附加一个 <code>.less</code> 的扩展名并且作为 LESS 文件处理<h3 id=\"SCSS\"><a href=\"#SCSS\" class=\"headerlink\" title=\"SCSS\"></a>SCSS</h3></li>\n<li>默认情况下，SCSS 的 @import 实现会试图寻找一个 Sass 文件进行导入。</li>\n<li>但是在下列情况出现时，@import 会直接被编译为 CSS 的 @import at-rule </li>\n<li><ul>\n<li>文件扩展名是 <code>.css</code></li>\n</ul>\n</li>\n<li><ul>\n<li>文件以 <code>http://</code> 开头</li>\n</ul>\n</li>\n<li><ul>\n<li>文件名是一个 <code>url()</code></li>\n</ul>\n</li>\n<li><ul>\n<li><code>@import</code> 具有媒体查询</li>\n</ul>\n</li>\n<li>SCSS 按约定认为下划线开始的文件是内联文件，不会被编译为单独的 CSS 文件输出。</li>\n</ul>\n<p>示例</p>\n<p>LESS:</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">&quot;foo&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">&quot;bar.less&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">&quot;foo.php&quot;</span>; <span class=\"comment\">// 当成 LESS 文件处理</span></span><br><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">&quot;foo.css&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>SCSS:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">&quot;foo&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">&quot;foo.scss&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>都会导入 foo.scss 文件。</p>\n<h2 id=\"其他区别\"><a href=\"#其他区别\" class=\"headerlink\" title=\"其他区别\"></a>其他区别</h2><blockquote>\n<p>LESS 和 SCSS 均使用 <code>&amp;</code> 符号表示父选择器引用，但是 SCSS 的 <code>&amp;</code> 符号只能出现在一个组合选择器的开始位置，LESS 则没有这个限制。</p>\n</blockquote>\n<p>示例</p>\n<p>LESS：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.bg-variant</span>(<span class=\"variable\">@color</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"variable\">@color</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">a</span><span class=\"selector-tag\">&amp;</span><span class=\"selector-pseudo\">:hover</span>,</span><br><span class=\"line\">  <span class=\"selector-tag\">a</span><span class=\"selector-tag\">&amp;</span><span class=\"selector-pseudo\">:focus</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: darken(<span class=\"variable\">@color</span>, <span class=\"number\">10%</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SCSS:</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">text-decoration</span>: underline; &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span><span class=\"selector-class\">.firefox</span> &amp; &#123; <span class=\"attribute\">font-weight</span>: normal; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>SCSS 不支持 LESS 中的 <code>CSS Guard</code> 功能，比如 <code>if, when ...</code>，在 SCSS 中需要换种方式实现。</p>\n</blockquote>\n<p>LESS 示例：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.my-optional-style</span>() <span class=\"keyword\">when</span> (<span class=\"variable\">@my-option</span> = true) &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">button</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.my-optional-style</span>();</span><br></pre></td></tr></table></figure>\n<p>Note：SCSS 需要换一种写法实现同样的功能。</p>\n<blockquote>\n<p>SCSS 支持 !default，一般是用在基础 Rule 的声明中，告诉使用者这是可以被覆盖的。</p>\n</blockquote>\n<p>SCSS 示例：</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"code\"><pre><span class=\"line\">$primary:       $blue !<span class=\"keyword\">default</span><span class=\"comment\">;</span></span><br><span class=\"line\">$secondary:     $gray<span class=\"number\">-600</span> !<span class=\"keyword\">default</span><span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>SCSS支持<code>if, else, for, each</code>等方法, LESS不支持</p>\n</blockquote>\n<p>SCSS:</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$type</span>: monster;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@if</span> <span class=\"variable\">$type</span> == ocean &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">@else</span> if <span class=\"variable\">$type</span> == matador &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">@else</span> if <span class=\"variable\">$type</span> == monster &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: green;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">@else</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@for</span> <span class=\"variable\">$i</span> from <span class=\"number\">1</span> through <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.item-</span>#&#123;<span class=\"variable\">$i</span>&#125; &#123; <span class=\"attribute\">width</span>: <span class=\"number\">2em</span> * <span class=\"variable\">$i</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@each</span> <span class=\"variable\">$animal</span> in puma, sea-slug, egret, salamander &#123;</span><br><span class=\"line\">  .#&#123;<span class=\"variable\">$animal</span>&#125;-<span class=\"attribute\">icon</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: url(<span class=\"string\">&#x27;/images/#&#123;$animal&#125;.png&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>SCSS 不像 LESS 一样默认可以把 rule 作为 Mixin 使用，但是 SCSS 有类似的 <code>@extend</code> 指令；而 LESS 的 extend 语法看起来则像是伪类一样。</p>\n</blockquote>\n<p>示例：</p>\n<p>LESS:</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.error</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> <span class=\"number\">#f00</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#fdd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.seriousError</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@extend</span> .error;</span><br><span class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SCSS:</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.error</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> <span class=\"number\">#f00</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#fdd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.seriousError</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@extend</span> .error;</span><br><span class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>集成 JavaScript 功能的方式：LESS 使用 @functions 指令，可以把 js 代码直接放到 ~<code>xxx</code> 中间即可；SCSS 可以把 JS 代码放到一个单独的文件中，然后使用 node-sass编译的时候指定参数传给 node-sass。</p>\n<p>LESS 示例：<a href=\"https://github.com/ant-design/ant-design/blob/7fa05996957ef0eded21d810d71364d294ea947d/components/style/color/tinyColor.less\">ant-design/ant-design</a></p>\n<p>SCSS 示例：<br>命令</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\">node-sass --output-style expanded --<span class=\"keyword\">source</span>-map <span class=\"keyword\">true</span> --precision <span class=\"number\">6</span> --functions components<span class=\"regexp\">/style/</span>custom.js components<span class=\"regexp\">/button/</span>style<span class=\"regexp\">/index.scss components/</span>button<span class=\"regexp\">/style/i</span>ndex.css</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>LESS 支持 lazy evaluation，但是  SCSS 不支持，所以在 LESS 中可以先使用再定义，但是在 SCSS 中一定要先定义再使用。</li>\n<li>SCSS 是不支持 Mixin 重载的, 也就是说 LESS 可以有同名但是参数个数不同的几个 Mixins, SCSS 同样名字的 Mixin 只能有一个.</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.zhihu.com/question/270862074?sort=created\">less和sass或者scss 有什么区别吗？\n</a><br><a href=\"https://less.bootcss.com/\">LESS官网</a><br><a href=\"https://www.sass.hk/\">SASS官网</a></p>"},{"layout":"post","title":"什么是BFC","comments":1,"date":"2021-05-06T03:49:52.000Z","_content":"## BFC\n`Formatting context`(格式化上下文) 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。\n\n\n那么 BFC 是什么呢？\n\nBFC 即 `Block Formatting Contexts` (块级格式化上下文)，它属于上述定位方案的普通流。\n\n`具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素`，并且 BFC 具有普通容器所没有的一些特性。\n\n通俗一点来讲，可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。\n\n<!-- more -->\n\n### 创建新的块格式上下文\n只要元素满足下面任一条件即可触发 BFC 特性：\n\n* body 根元素\n* 浮动元素：float 除 none 以外的值\n* 绝对定位元素：position (absolute、fixed)\n* display 为 inline-block、table-cells、flex\n* overflow 除了 visible 以外的值 (hidden、auto、scroll)\n\n这很有用，因为新的BFC的行为与最外层的文档非常相似，它在主布局中创造了一个小布局。BFC包含其内部的所有内容，float 和 clear 仅适用于同一格式上下文中的项目，而页边距仅在同一格式上下文中的元素之间折叠。\n\n### 边距上的运用\n从效果上看，因为两个 div 元素都处于同一个 `BFC` 容器下 (这里指 body 元素) 所以第一个 div 的下边距和第二个 div 的上边距发生了重叠，所以两个盒子之间距离只有 50px，而不是 100px。\n\n首先这不是 CSS 的 bug，我们可以理解为一种规范，如果想要避免外边距的重叠，可以将其放在不同的 BFC 容器中。\n```\n<style type=\"text/css\">\n.container {\n    overflow: hidden;\n}\np {\n    width: 100px;\n    height: 100px;\n    background: lightblue;\n    margin: 50px;\n}\n</style>\n<body>\n<div>\n    <p></p>\n</div>\n<div>\n    <p></p>\n</div>\n<hr>\n<div class=\"container\">\n    <p></p>\n</div>\n<div class=\"container\">\n    <p></p>\n</div>\n</body>\n```\n<iframe width=\"100%\" height=\"350px\" srcdoc='\n<style type=\"text/css\">\n.container {\n    overflow: hidden;\n}\np {\n    width: 100px;\n    height: 100px;\n    background: lightblue;\n    margin: 50px;\n}\n</style>\n<body>\n<div>\n    <p></p>\n</div>\n<div>\n    <p></p>\n</div>\n<hr>\n<div class=\"container\">\n    <p></p>\n</div>\n<div class=\"container\">\n    <p></p>\n</div>\n</body>\n'>\n</iframe>\n\n### BFC 可以包含浮动的元素（清除浮动）\n我们都知道，浮动的元素会脱离普通文档流，来看下下面一个例子\n```\n<div style=\"border: 1px solid #000;\">\n    <div style=\"width: 100px;height: 100px;background: #eee;float: left;\"></div>\n</div>\n```\n<iframe width=\"100%\" height=\"150px\" srcdoc='\n<body>\n<div style=\"border: 1px solid #000;\">\n    <div style=\"width: 100px;height: 100px;background: #eee;float: left;\"></div>\n</div>\n</body>\n'>\n</iframe>\n\n```\n<div style=\"border: 1px solid #000;\">\n    <div style=\"width: 100px;height: 100px;background: #eee;float: left;\"></div>\n</div>\n```\n\n<iframe width=\"100%\" height=\"150px\" srcdoc='\n<body>\n<div style=\"border: 1px solid #000;overflow: hidden\">\n    <div style=\"width: 100px;height: 100px;background: #eee;float: left;\"></div>\n</div>\n</body>\n'>\n</iframe>\n\n### BFC 可以阻止元素被浮动元素覆盖\n先来看一个文字环绕效果：\n```\n<div style=\"height: 100px;width: 100px;float: left;background: lightblue\">我是一个左浮动的元素</div>\n<div style=\"width: 200px; height: 200px;background: #eee\">我是一个没有设置浮动, \n也没有触发 BFC 元素, width: 200px; height:200px; background: #eee;</div>\n```\n<iframe width=\"100%\" height=\"150px\" srcdoc='\n<body>\n<div style=\"height: 100px;width: 100px;float: left;background: lightblue\">我是一个左浮动的元素</div>\n<div style=\"width: 200px; height: 200px;background: #eee;\">我是一个没有设置浮动, \n也没有触发 BFC 元素, width: 200px; height:200px; background: #eee;</div>\n</body>\n'>\n</iframe>\n\n这时候其实第二个元素有部分被浮动元素所覆盖，(但是文本信息不会被浮动元素所覆盖) 如果想避免元素被覆盖，可触第二个元素的 BFC 特性，在第二个元素中加入 overflow: hidden，就会变成：\n\n<iframe width=\"100%\" height=\"150px\" srcdoc='\n<body>\n<div style=\"height: 100px;width: 100px;float: left;background: lightblue\">我是一个左浮动的元素</div>\n<div style=\"width: 200px; height: 200px;background: #eee;overflow: hidden;\">我是一个没有设置浮动, \n也没有触发 BFC 元素, width: 200px; height:200px; background: #eee;</div>\n</body>\n'>\n</iframe>\n\n> 这个方法可以用来实现两列自适应布局，效果不错，这时候左边的宽度固定，右边的内容自适应宽度(去掉上面右边内容的宽度)。\n## 行内格式化上下文\n内联格式上下文存在于其他格式上下文中，可以将其视为段落的上下文。段落创建了一个内联格式上下文，其中在文本中使用诸如 `<strong>`、`<a>`或 `<span>` 元素等内容。\n\nbox model 不完全适用于参与内联格式上下文。在水平书写模式行中，水平填充、边框和边距将应用于元素，并左右移动文本。但是，元素上方和下方边距将不适用。应用垂直填充和边框可能会在内容的上方和下方重叠，因为在内联格式上下文中，填充和边框不会将行框撑开。\n\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n    strong {\n    margin: 20px;\n    padding: 20px;\n    border: 5px solid rebeccapurple;\n}\n</style>\n<body>\n<p>Before that night—<strong>a memorable night</strong>, as it was to prove—hundreds of millions of people had watched the rising smoke-wreaths of their fires without drawing any special inspiration from the fact.”</p>\n</body>\n\">\n</iframe>\n\n\n## 参考\n[Intro_to_formatting_contexts](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flow_Layout/Intro_to_formatting_contexts)\n\n[10 分钟理解 BFC 原理](https://zhuanlan.zhihu.com/p/25321647)","source":"_posts/2021-05-06-css-block-format-context.md","raw":"---\nlayout: post\ntitle: 什么是BFC\ntags: [css, web]\ncomments: true\ndate: 2021-05-06 11:49:52\n---\n## BFC\n`Formatting context`(格式化上下文) 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。\n\n\n那么 BFC 是什么呢？\n\nBFC 即 `Block Formatting Contexts` (块级格式化上下文)，它属于上述定位方案的普通流。\n\n`具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素`，并且 BFC 具有普通容器所没有的一些特性。\n\n通俗一点来讲，可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。\n\n<!-- more -->\n\n### 创建新的块格式上下文\n只要元素满足下面任一条件即可触发 BFC 特性：\n\n* body 根元素\n* 浮动元素：float 除 none 以外的值\n* 绝对定位元素：position (absolute、fixed)\n* display 为 inline-block、table-cells、flex\n* overflow 除了 visible 以外的值 (hidden、auto、scroll)\n\n这很有用，因为新的BFC的行为与最外层的文档非常相似，它在主布局中创造了一个小布局。BFC包含其内部的所有内容，float 和 clear 仅适用于同一格式上下文中的项目，而页边距仅在同一格式上下文中的元素之间折叠。\n\n### 边距上的运用\n从效果上看，因为两个 div 元素都处于同一个 `BFC` 容器下 (这里指 body 元素) 所以第一个 div 的下边距和第二个 div 的上边距发生了重叠，所以两个盒子之间距离只有 50px，而不是 100px。\n\n首先这不是 CSS 的 bug，我们可以理解为一种规范，如果想要避免外边距的重叠，可以将其放在不同的 BFC 容器中。\n```\n<style type=\"text/css\">\n.container {\n    overflow: hidden;\n}\np {\n    width: 100px;\n    height: 100px;\n    background: lightblue;\n    margin: 50px;\n}\n</style>\n<body>\n<div>\n    <p></p>\n</div>\n<div>\n    <p></p>\n</div>\n<hr>\n<div class=\"container\">\n    <p></p>\n</div>\n<div class=\"container\">\n    <p></p>\n</div>\n</body>\n```\n<iframe width=\"100%\" height=\"350px\" srcdoc='\n<style type=\"text/css\">\n.container {\n    overflow: hidden;\n}\np {\n    width: 100px;\n    height: 100px;\n    background: lightblue;\n    margin: 50px;\n}\n</style>\n<body>\n<div>\n    <p></p>\n</div>\n<div>\n    <p></p>\n</div>\n<hr>\n<div class=\"container\">\n    <p></p>\n</div>\n<div class=\"container\">\n    <p></p>\n</div>\n</body>\n'>\n</iframe>\n\n### BFC 可以包含浮动的元素（清除浮动）\n我们都知道，浮动的元素会脱离普通文档流，来看下下面一个例子\n```\n<div style=\"border: 1px solid #000;\">\n    <div style=\"width: 100px;height: 100px;background: #eee;float: left;\"></div>\n</div>\n```\n<iframe width=\"100%\" height=\"150px\" srcdoc='\n<body>\n<div style=\"border: 1px solid #000;\">\n    <div style=\"width: 100px;height: 100px;background: #eee;float: left;\"></div>\n</div>\n</body>\n'>\n</iframe>\n\n```\n<div style=\"border: 1px solid #000;\">\n    <div style=\"width: 100px;height: 100px;background: #eee;float: left;\"></div>\n</div>\n```\n\n<iframe width=\"100%\" height=\"150px\" srcdoc='\n<body>\n<div style=\"border: 1px solid #000;overflow: hidden\">\n    <div style=\"width: 100px;height: 100px;background: #eee;float: left;\"></div>\n</div>\n</body>\n'>\n</iframe>\n\n### BFC 可以阻止元素被浮动元素覆盖\n先来看一个文字环绕效果：\n```\n<div style=\"height: 100px;width: 100px;float: left;background: lightblue\">我是一个左浮动的元素</div>\n<div style=\"width: 200px; height: 200px;background: #eee\">我是一个没有设置浮动, \n也没有触发 BFC 元素, width: 200px; height:200px; background: #eee;</div>\n```\n<iframe width=\"100%\" height=\"150px\" srcdoc='\n<body>\n<div style=\"height: 100px;width: 100px;float: left;background: lightblue\">我是一个左浮动的元素</div>\n<div style=\"width: 200px; height: 200px;background: #eee;\">我是一个没有设置浮动, \n也没有触发 BFC 元素, width: 200px; height:200px; background: #eee;</div>\n</body>\n'>\n</iframe>\n\n这时候其实第二个元素有部分被浮动元素所覆盖，(但是文本信息不会被浮动元素所覆盖) 如果想避免元素被覆盖，可触第二个元素的 BFC 特性，在第二个元素中加入 overflow: hidden，就会变成：\n\n<iframe width=\"100%\" height=\"150px\" srcdoc='\n<body>\n<div style=\"height: 100px;width: 100px;float: left;background: lightblue\">我是一个左浮动的元素</div>\n<div style=\"width: 200px; height: 200px;background: #eee;overflow: hidden;\">我是一个没有设置浮动, \n也没有触发 BFC 元素, width: 200px; height:200px; background: #eee;</div>\n</body>\n'>\n</iframe>\n\n> 这个方法可以用来实现两列自适应布局，效果不错，这时候左边的宽度固定，右边的内容自适应宽度(去掉上面右边内容的宽度)。\n## 行内格式化上下文\n内联格式上下文存在于其他格式上下文中，可以将其视为段落的上下文。段落创建了一个内联格式上下文，其中在文本中使用诸如 `<strong>`、`<a>`或 `<span>` 元素等内容。\n\nbox model 不完全适用于参与内联格式上下文。在水平书写模式行中，水平填充、边框和边距将应用于元素，并左右移动文本。但是，元素上方和下方边距将不适用。应用垂直填充和边框可能会在内容的上方和下方重叠，因为在内联格式上下文中，填充和边框不会将行框撑开。\n\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n    strong {\n    margin: 20px;\n    padding: 20px;\n    border: 5px solid rebeccapurple;\n}\n</style>\n<body>\n<p>Before that night—<strong>a memorable night</strong>, as it was to prove—hundreds of millions of people had watched the rising smoke-wreaths of their fires without drawing any special inspiration from the fact.”</p>\n</body>\n\">\n</iframe>\n\n\n## 参考\n[Intro_to_formatting_contexts](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flow_Layout/Intro_to_formatting_contexts)\n\n[10 分钟理解 BFC 原理](https://zhuanlan.zhihu.com/p/25321647)","slug":"2021-05-06-css-block-format-context","published":1,"updated":"2021-05-07T11:55:40.981Z","photos":[],"link":"","_id":"ckoe9igx2003d8cpnfcbyfgsy","content":"<h2 id=\"BFC\"><a href=\"#BFC\" class=\"headerlink\" title=\"BFC\"></a>BFC</h2><p><code>Formatting context</code>(格式化上下文) 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。</p>\n<p>那么 BFC 是什么呢？</p>\n<p>BFC 即 <code>Block Formatting Contexts</code> (块级格式化上下文)，它属于上述定位方案的普通流。</p>\n<p><code>具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素</code>，并且 BFC 具有普通容器所没有的一些特性。</p>\n<p>通俗一点来讲，可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"创建新的块格式上下文\"><a href=\"#创建新的块格式上下文\" class=\"headerlink\" title=\"创建新的块格式上下文\"></a>创建新的块格式上下文</h3><p>只要元素满足下面任一条件即可触发 BFC 特性：</p>\n<ul>\n<li>body 根元素</li>\n<li>浮动元素：float 除 none 以外的值</li>\n<li>绝对定位元素：position (absolute、fixed)</li>\n<li>display 为 inline-block、table-cells、flex</li>\n<li>overflow 除了 visible 以外的值 (hidden、auto、scroll)</li>\n</ul>\n<p>这很有用，因为新的BFC的行为与最外层的文档非常相似，它在主布局中创造了一个小布局。BFC包含其内部的所有内容，float 和 clear 仅适用于同一格式上下文中的项目，而页边距仅在同一格式上下文中的元素之间折叠。</p>\n<h3 id=\"边距上的运用\"><a href=\"#边距上的运用\" class=\"headerlink\" title=\"边距上的运用\"></a>边距上的运用</h3><p>从效果上看，因为两个 div 元素都处于同一个 <code>BFC</code> 容器下 (这里指 body 元素) 所以第一个 div 的下边距和第二个 div 的上边距发生了重叠，所以两个盒子之间距离只有 50px，而不是 100px。</p>\n<p>首先这不是 CSS 的 bug，我们可以理解为一种规范，如果想要避免外边距的重叠，可以将其放在不同的 BFC 容器中。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">p &#123;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    background: lightblue;</span><br><span class=\"line\">    margin: 50px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<iframe width=\"100%\" height=\"350px\" srcdoc='\n<style type=\"text/css\">\n.container {\n    overflow: hidden;\n}\np {\n    width: 100px;\n    height: 100px;\n    background: lightblue;\n    margin: 50px;\n}\n</style>\n<body>\n<div>\n    <p></p>\n</div>\n<div>\n    <p></p>\n</div>\n<hr>\n<div class=\"container\">\n    <p></p>\n</div>\n<div class=\"container\">\n    <p></p>\n</div>\n</body>\n'>\n</iframe>\n\n<h3 id=\"BFC-可以包含浮动的元素（清除浮动）\"><a href=\"#BFC-可以包含浮动的元素（清除浮动）\" class=\"headerlink\" title=\"BFC 可以包含浮动的元素（清除浮动）\"></a>BFC 可以包含浮动的元素（清除浮动）</h3><p>我们都知道，浮动的元素会脱离普通文档流，来看下下面一个例子</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">div</span> style=<span class=\"string\">&quot;border: 1px solid #000;&quot;</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"keyword\">div</span> style=<span class=\"string\">&quot;width: 100px;height: 100px;background: #eee;float: left;&quot;</span>&gt;&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"keyword\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n<iframe width=\"100%\" height=\"150px\" srcdoc='\n<body>\n<div style=\"border: 1px solid #000;\">\n    <div style=\"width: 100px;height: 100px;background: #eee;float: left;\"></div>\n</div>\n</body>\n'>\n</iframe>\n\n<figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">div</span> style=<span class=\"string\">&quot;border: 1px solid #000;&quot;</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"keyword\">div</span> style=<span class=\"string\">&quot;width: 100px;height: 100px;background: #eee;float: left;&quot;</span>&gt;&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"keyword\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<iframe width=\"100%\" height=\"150px\" srcdoc='\n<body>\n<div style=\"border: 1px solid #000;overflow: hidden\">\n    <div style=\"width: 100px;height: 100px;background: #eee;float: left;\"></div>\n</div>\n</body>\n'>\n</iframe>\n\n<h3 id=\"BFC-可以阻止元素被浮动元素覆盖\"><a href=\"#BFC-可以阻止元素被浮动元素覆盖\" class=\"headerlink\" title=\"BFC 可以阻止元素被浮动元素覆盖\"></a>BFC 可以阻止元素被浮动元素覆盖</h3><p>先来看一个文字环绕效果：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> style=<span class=\"string\">&quot;height: 100px;width: 100px;float: left;background: lightblue&quot;</span>&gt;我是一个左浮动的元素&lt;/div&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> style=<span class=\"string\">&quot;width: 200px; height: 200px;background: #eee&quot;</span>&gt;我是一个没有设置浮动, </span><br><span class=\"line\">也没有触发 BFC 元素, <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>; <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>; <span class=\"attribute\">background</span>: <span class=\"number\">#eee</span>;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<iframe width=\"100%\" height=\"150px\" srcdoc='\n<body>\n<div style=\"height: 100px;width: 100px;float: left;background: lightblue\">我是一个左浮动的元素</div>\n<div style=\"width: 200px; height: 200px;background: #eee;\">我是一个没有设置浮动, \n也没有触发 BFC 元素, width: 200px; height:200px; background: #eee;</div>\n</body>\n'>\n</iframe>\n\n<p>这时候其实第二个元素有部分被浮动元素所覆盖，(但是文本信息不会被浮动元素所覆盖) 如果想避免元素被覆盖，可触第二个元素的 BFC 特性，在第二个元素中加入 overflow: hidden，就会变成：</p>\n<iframe width=\"100%\" height=\"150px\" srcdoc='\n<body>\n<div style=\"height: 100px;width: 100px;float: left;background: lightblue\">我是一个左浮动的元素</div>\n<div style=\"width: 200px; height: 200px;background: #eee;overflow: hidden;\">我是一个没有设置浮动, \n也没有触发 BFC 元素, width: 200px; height:200px; background: #eee;</div>\n</body>\n'>\n</iframe>\n\n<blockquote>\n<p>这个方法可以用来实现两列自适应布局，效果不错，这时候左边的宽度固定，右边的内容自适应宽度(去掉上面右边内容的宽度)。</p>\n</blockquote>\n<h2 id=\"行内格式化上下文\"><a href=\"#行内格式化上下文\" class=\"headerlink\" title=\"行内格式化上下文\"></a>行内格式化上下文</h2><p>内联格式上下文存在于其他格式上下文中，可以将其视为段落的上下文。段落创建了一个内联格式上下文，其中在文本中使用诸如 <code>&lt;strong&gt;</code>、<code>&lt;a&gt;</code>或 <code>&lt;span&gt;</code> 元素等内容。</p>\n<p>box model 不完全适用于参与内联格式上下文。在水平书写模式行中，水平填充、边框和边距将应用于元素，并左右移动文本。但是，元素上方和下方边距将不适用。应用垂直填充和边框可能会在内容的上方和下方重叠，因为在内联格式上下文中，填充和边框不会将行框撑开。</p>\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n    strong {\n    margin: 20px;\n    padding: 20px;\n    border: 5px solid rebeccapurple;\n}\n</style>\n<body>\n<p>Before that night—<strong>a memorable night</strong>, as it was to prove—hundreds of millions of people had watched the rising smoke-wreaths of their fires without drawing any special inspiration from the fact.”</p>\n</body>\n\">\n</iframe>\n\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flow_Layout/Intro_to_formatting_contexts\">Intro_to_formatting_contexts</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/25321647\">10 分钟理解 BFC 原理</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"BFC\"><a href=\"#BFC\" class=\"headerlink\" title=\"BFC\"></a>BFC</h2><p><code>Formatting context</code>(格式化上下文) 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。</p>\n<p>那么 BFC 是什么呢？</p>\n<p>BFC 即 <code>Block Formatting Contexts</code> (块级格式化上下文)，它属于上述定位方案的普通流。</p>\n<p><code>具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素</code>，并且 BFC 具有普通容器所没有的一些特性。</p>\n<p>通俗一点来讲，可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。</p>","more":"<h3 id=\"创建新的块格式上下文\"><a href=\"#创建新的块格式上下文\" class=\"headerlink\" title=\"创建新的块格式上下文\"></a>创建新的块格式上下文</h3><p>只要元素满足下面任一条件即可触发 BFC 特性：</p>\n<ul>\n<li>body 根元素</li>\n<li>浮动元素：float 除 none 以外的值</li>\n<li>绝对定位元素：position (absolute、fixed)</li>\n<li>display 为 inline-block、table-cells、flex</li>\n<li>overflow 除了 visible 以外的值 (hidden、auto、scroll)</li>\n</ul>\n<p>这很有用，因为新的BFC的行为与最外层的文档非常相似，它在主布局中创造了一个小布局。BFC包含其内部的所有内容，float 和 clear 仅适用于同一格式上下文中的项目，而页边距仅在同一格式上下文中的元素之间折叠。</p>\n<h3 id=\"边距上的运用\"><a href=\"#边距上的运用\" class=\"headerlink\" title=\"边距上的运用\"></a>边距上的运用</h3><p>从效果上看，因为两个 div 元素都处于同一个 <code>BFC</code> 容器下 (这里指 body 元素) 所以第一个 div 的下边距和第二个 div 的上边距发生了重叠，所以两个盒子之间距离只有 50px，而不是 100px。</p>\n<p>首先这不是 CSS 的 bug，我们可以理解为一种规范，如果想要避免外边距的重叠，可以将其放在不同的 BFC 容器中。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">p &#123;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    background: lightblue;</span><br><span class=\"line\">    margin: 50px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<iframe width=\"100%\" height=\"350px\" srcdoc='\n<style type=\"text/css\">\n.container {\n    overflow: hidden;\n}\np {\n    width: 100px;\n    height: 100px;\n    background: lightblue;\n    margin: 50px;\n}\n</style>\n<body>\n<div>\n    <p></p>\n</div>\n<div>\n    <p></p>\n</div>\n<hr>\n<div class=\"container\">\n    <p></p>\n</div>\n<div class=\"container\">\n    <p></p>\n</div>\n</body>\n'>\n</iframe>\n\n<h3 id=\"BFC-可以包含浮动的元素（清除浮动）\"><a href=\"#BFC-可以包含浮动的元素（清除浮动）\" class=\"headerlink\" title=\"BFC 可以包含浮动的元素（清除浮动）\"></a>BFC 可以包含浮动的元素（清除浮动）</h3><p>我们都知道，浮动的元素会脱离普通文档流，来看下下面一个例子</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">div</span> style=<span class=\"string\">&quot;border: 1px solid #000;&quot;</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"keyword\">div</span> style=<span class=\"string\">&quot;width: 100px;height: 100px;background: #eee;float: left;&quot;</span>&gt;&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"keyword\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n<iframe width=\"100%\" height=\"150px\" srcdoc='\n<body>\n<div style=\"border: 1px solid #000;\">\n    <div style=\"width: 100px;height: 100px;background: #eee;float: left;\"></div>\n</div>\n</body>\n'>\n</iframe>\n\n<figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">div</span> style=<span class=\"string\">&quot;border: 1px solid #000;&quot;</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"keyword\">div</span> style=<span class=\"string\">&quot;width: 100px;height: 100px;background: #eee;float: left;&quot;</span>&gt;&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"keyword\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<iframe width=\"100%\" height=\"150px\" srcdoc='\n<body>\n<div style=\"border: 1px solid #000;overflow: hidden\">\n    <div style=\"width: 100px;height: 100px;background: #eee;float: left;\"></div>\n</div>\n</body>\n'>\n</iframe>\n\n<h3 id=\"BFC-可以阻止元素被浮动元素覆盖\"><a href=\"#BFC-可以阻止元素被浮动元素覆盖\" class=\"headerlink\" title=\"BFC 可以阻止元素被浮动元素覆盖\"></a>BFC 可以阻止元素被浮动元素覆盖</h3><p>先来看一个文字环绕效果：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> style=<span class=\"string\">&quot;height: 100px;width: 100px;float: left;background: lightblue&quot;</span>&gt;我是一个左浮动的元素&lt;/div&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> style=<span class=\"string\">&quot;width: 200px; height: 200px;background: #eee&quot;</span>&gt;我是一个没有设置浮动, </span><br><span class=\"line\">也没有触发 BFC 元素, <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>; <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>; <span class=\"attribute\">background</span>: <span class=\"number\">#eee</span>;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<iframe width=\"100%\" height=\"150px\" srcdoc='\n<body>\n<div style=\"height: 100px;width: 100px;float: left;background: lightblue\">我是一个左浮动的元素</div>\n<div style=\"width: 200px; height: 200px;background: #eee;\">我是一个没有设置浮动, \n也没有触发 BFC 元素, width: 200px; height:200px; background: #eee;</div>\n</body>\n'>\n</iframe>\n\n<p>这时候其实第二个元素有部分被浮动元素所覆盖，(但是文本信息不会被浮动元素所覆盖) 如果想避免元素被覆盖，可触第二个元素的 BFC 特性，在第二个元素中加入 overflow: hidden，就会变成：</p>\n<iframe width=\"100%\" height=\"150px\" srcdoc='\n<body>\n<div style=\"height: 100px;width: 100px;float: left;background: lightblue\">我是一个左浮动的元素</div>\n<div style=\"width: 200px; height: 200px;background: #eee;overflow: hidden;\">我是一个没有设置浮动, \n也没有触发 BFC 元素, width: 200px; height:200px; background: #eee;</div>\n</body>\n'>\n</iframe>\n\n<blockquote>\n<p>这个方法可以用来实现两列自适应布局，效果不错，这时候左边的宽度固定，右边的内容自适应宽度(去掉上面右边内容的宽度)。</p>\n</blockquote>\n<h2 id=\"行内格式化上下文\"><a href=\"#行内格式化上下文\" class=\"headerlink\" title=\"行内格式化上下文\"></a>行内格式化上下文</h2><p>内联格式上下文存在于其他格式上下文中，可以将其视为段落的上下文。段落创建了一个内联格式上下文，其中在文本中使用诸如 <code>&lt;strong&gt;</code>、<code>&lt;a&gt;</code>或 <code>&lt;span&gt;</code> 元素等内容。</p>\n<p>box model 不完全适用于参与内联格式上下文。在水平书写模式行中，水平填充、边框和边距将应用于元素，并左右移动文本。但是，元素上方和下方边距将不适用。应用垂直填充和边框可能会在内容的上方和下方重叠，因为在内联格式上下文中，填充和边框不会将行框撑开。</p>\n<iframe width=\"100%\" height=\"150px\" srcdoc=\"\n<style type='text/css'>\n    strong {\n    margin: 20px;\n    padding: 20px;\n    border: 5px solid rebeccapurple;\n}\n</style>\n<body>\n<p>Before that night—<strong>a memorable night</strong>, as it was to prove—hundreds of millions of people had watched the rising smoke-wreaths of their fires without drawing any special inspiration from the fact.”</p>\n</body>\n\">\n</iframe>\n\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flow_Layout/Intro_to_formatting_contexts\">Intro_to_formatting_contexts</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/25321647\">10 分钟理解 BFC 原理</a></p>"},{"layout":"post","title":"only-child和only-of-type区别","comments":1,"date":"2021-05-06T06:45:11.000Z","_content":"\n## only-child选择器\n`:only-child`选择器选择的是父元素中只有一个子元素，而且只有唯一的一个子元素。也就是说，匹配的元素的父元素中仅有一个子元素，而且是一个唯一的子元素。\n\n## only-of-type选择器\n`:only-of-type`选择器用来选择一个元素是它的父元素的唯一一个相同类型的子元素。这样说或许不太好理解，换一种说法。`:only-of-type`是表示一个元素他有很多个子元素，而其中只有一种类型的子元素是唯一的，使用`:only-of-type`选择器就可以选中这个元素中的唯一一个类型子元素。\n\n<!-- more -->\n## 示例\n```\n<style> \np:only-of-type\n{\n    background:#ff0000;\n}\np:only-child\n{\n    border: 5px solid blue;\n}\n</style>\n\n<body>\n\n<div>\n<p>这是一个段落。</p>\n<span>123</span>\n<span>123</span>\n</div>\n\n<div>\n<p>这是一个段落。</p>\n<p>这是一个段落。</p>\n</div>\n\n<div>\n<p>这是一个段落。</p>\n</div>\n</body>\n```\n<iframe width=\"100%\" height=\"350px\" srcdoc='\n<style> \np:only-of-type\n{\nbackground:#ff0000;\n}\np:only-child\n{\nborder: 5px solid blue;\n}\n</style>\n<body>\n<div>\n<p>这是一个段落。</p>\n<span>123</span>\n<span>123</span>\n</div>\n<div>\n<p>这是一个段落。</p>\n<p>这是一个段落。</p>\n</div>\n<div>\n<p>这是一个段落。</p>\n</div>\n</body>\n'>\n</iframe>\n\n\n","source":"_posts/2021-05-06-css-diff-only-of-type-and-only-child.md","raw":"---\nlayout: post\ntitle: only-child和only-of-type区别\ntags: [css, web]\ncomments: true\ndate: 2021-05-06 14:45:11\n---\n\n## only-child选择器\n`:only-child`选择器选择的是父元素中只有一个子元素，而且只有唯一的一个子元素。也就是说，匹配的元素的父元素中仅有一个子元素，而且是一个唯一的子元素。\n\n## only-of-type选择器\n`:only-of-type`选择器用来选择一个元素是它的父元素的唯一一个相同类型的子元素。这样说或许不太好理解，换一种说法。`:only-of-type`是表示一个元素他有很多个子元素，而其中只有一种类型的子元素是唯一的，使用`:only-of-type`选择器就可以选中这个元素中的唯一一个类型子元素。\n\n<!-- more -->\n## 示例\n```\n<style> \np:only-of-type\n{\n    background:#ff0000;\n}\np:only-child\n{\n    border: 5px solid blue;\n}\n</style>\n\n<body>\n\n<div>\n<p>这是一个段落。</p>\n<span>123</span>\n<span>123</span>\n</div>\n\n<div>\n<p>这是一个段落。</p>\n<p>这是一个段落。</p>\n</div>\n\n<div>\n<p>这是一个段落。</p>\n</div>\n</body>\n```\n<iframe width=\"100%\" height=\"350px\" srcdoc='\n<style> \np:only-of-type\n{\nbackground:#ff0000;\n}\np:only-child\n{\nborder: 5px solid blue;\n}\n</style>\n<body>\n<div>\n<p>这是一个段落。</p>\n<span>123</span>\n<span>123</span>\n</div>\n<div>\n<p>这是一个段落。</p>\n<p>这是一个段落。</p>\n</div>\n<div>\n<p>这是一个段落。</p>\n</div>\n</body>\n'>\n</iframe>\n\n\n","slug":"2021-05-06-css-diff-only-of-type-and-only-child","published":1,"updated":"2021-05-07T11:55:40.982Z","photos":[],"link":"","_id":"ckoe9igx3003f8cpn48256ixe","content":"<h2 id=\"only-child选择器\"><a href=\"#only-child选择器\" class=\"headerlink\" title=\"only-child选择器\"></a>only-child选择器</h2><p><code>:only-child</code>选择器选择的是父元素中只有一个子元素，而且只有唯一的一个子元素。也就是说，匹配的元素的父元素中仅有一个子元素，而且是一个唯一的子元素。</p>\n<h2 id=\"only-of-type选择器\"><a href=\"#only-of-type选择器\" class=\"headerlink\" title=\"only-of-type选择器\"></a>only-of-type选择器</h2><p><code>:only-of-type</code>选择器用来选择一个元素是它的父元素的唯一一个相同类型的子元素。这样说或许不太好理解，换一种说法。<code>:only-of-type</code>是表示一个元素他有很多个子元素，而其中只有一种类型的子元素是唯一的，使用<code>:only-of-type</code>选择器就可以选中这个元素中的唯一一个类型子元素。</p>\n<a id=\"more\"></a>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span> </span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:only-of-type</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background</span>:<span class=\"selector-id\">#ff0000</span>;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:only-child</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    border: 5px solid blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<iframe width=\"100%\" height=\"350px\" srcdoc='\n<style> \np:only-of-type\n{\nbackground:#ff0000;\n}\np:only-child\n{\nborder: 5px solid blue;\n}\n</style>\n<body>\n<div>\n<p>这是一个段落。</p>\n<span>123</span>\n<span>123</span>\n</div>\n<div>\n<p>这是一个段落。</p>\n<p>这是一个段落。</p>\n</div>\n<div>\n<p>这是一个段落。</p>\n</div>\n</body>\n'>\n</iframe>\n\n\n","site":{"data":{}},"excerpt":"<h2 id=\"only-child选择器\"><a href=\"#only-child选择器\" class=\"headerlink\" title=\"only-child选择器\"></a>only-child选择器</h2><p><code>:only-child</code>选择器选择的是父元素中只有一个子元素，而且只有唯一的一个子元素。也就是说，匹配的元素的父元素中仅有一个子元素，而且是一个唯一的子元素。</p>\n<h2 id=\"only-of-type选择器\"><a href=\"#only-of-type选择器\" class=\"headerlink\" title=\"only-of-type选择器\"></a>only-of-type选择器</h2><p><code>:only-of-type</code>选择器用来选择一个元素是它的父元素的唯一一个相同类型的子元素。这样说或许不太好理解，换一种说法。<code>:only-of-type</code>是表示一个元素他有很多个子元素，而其中只有一种类型的子元素是唯一的，使用<code>:only-of-type</code>选择器就可以选中这个元素中的唯一一个类型子元素。</p>","more":"<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span> </span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:only-of-type</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background</span>:<span class=\"selector-id\">#ff0000</span>;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:only-child</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    border: 5px solid blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<iframe width=\"100%\" height=\"350px\" srcdoc='\n<style> \np:only-of-type\n{\nbackground:#ff0000;\n}\np:only-child\n{\nborder: 5px solid blue;\n}\n</style>\n<body>\n<div>\n<p>这是一个段落。</p>\n<span>123</span>\n<span>123</span>\n</div>\n<div>\n<p>这是一个段落。</p>\n<p>这是一个段落。</p>\n</div>\n<div>\n<p>这是一个段落。</p>\n</div>\n</body>\n'>\n</iframe>"},{"layout":"post","title":"css常用知识","comments":1,"date":"2021-05-06T02:35:44.000Z","_content":"\n## 什么是盒子模型\n盒模型分为标准盒模型和怪异盒模型（IE）\n```\nbox-sizing : content-box //标准盒模型\nbox-sizing : border-box  //怪异盒模型\n```\n* 标准盒模型:这种盒模型设置`width`的时候的值是内容区的宽度,如果再设置`padding`和`margin`,`border`的话盒子的实际宽度会增大；\n* 怪异盒模型:这种盒子的`width`设置的值为盒子实际的宽度,`border`和`padding`的设置不会影响盒子的实际宽度和高度\n\n## CSS新特性\n```\ntransition //过渡\ntransform //旋转、缩放、移动或者倾斜\nanimation //动画\ngradient //渐变\nshadow //阴影\nborder-radius //圆角\n```\n\n<!-- more -->\n\n## 显示省略号样式\n```\ndisplay: -webkit-box; /*值必须为-webkit-box或者-webkit-inline-box*/\n-webkit-box-orient: vertical; /*值必须为vertical*/\n-webkit-line-clamp: 2; /*值为数字，表示一共显示几行*/\noverflow: hidden;\n```\n## link 和 @import 的区别\n* link属于HTML标签，而@import是CSS提供的。\n* 页面加载的时候，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载。\n* import只在IE5以上才能识别，而link是HTML标签，无兼容问题。\n* link样式的权重高于@import样式的权重。\n\n## 介绍一下标准的CSS的盒子模型？与低版本IE的盒子模型有什么不同的？\n\n标准盒子模型：宽度=内容的宽度`（content）+ border + padding + margin`\n低版本IE盒子模型：宽度=内容宽度`（content+border+padding）+ margin`\n\n## box-sizing属性？\n\n用来控制元素的盒子模型的解析模式，默认为content-box\ncontext-box：W3C的标准盒子模型，设置元素的 height/width 属性指的是content部分的高/宽\nborder-box：IE传统盒子模型。设置元素的height/width属性指的是border + padding + content部分的高/宽\n\n## CSS选择器有哪些？哪些属性可以继承？\n\nCSS选择符：id选择器(#myid)、类选择器(.myclassname)、标签选择器(div, h1, p)、相邻选择器(h1 + p)、子选择器（ul > li）、后代选择器（li a）、通配符选择器（*）、属性选择器（a[rel=”external”]）、伪类选择器（a:hover, li:nth-child）\n\n可继承的属性：`font-size, font-family, color`\n\n不可继承的样式：`border, padding, margin, width, height`\n\n优先级（就近原则）：!important > [ id > class > tag ]\n> !important 比内联优先级高\n\n## CSS优先级算法如何计算？\n\n* 元素选择符： 1\n* class选择符： 10\n* id选择符：100\n* 元素标签：1000\n\n!important声明的样式优先级最高，如果冲突再进行计算。\n如果优先级相同，则选择最后出现的样式。\n继承得到的样式的优先级最低。\n\n## CSS3新增伪类有那些?\n* p:first-of-type 选择属于其父元素的首个元素\n* p:last-of-type 选择属于其父元素的最后元素\n* p:only-of-type 选择属于其父元素唯一的元素\n* p:only-child 选择属于其父元素的唯一子元素\n* p:nth-child(2) 选择属于其父元素的第二个子元素\n* :enabled :disabled 表单控件的禁用状态。\n* :checked 单选框或复选框被选中。\n\n## display有哪些值？说明他们的作用?\n* inline（默认）–内联\n* none–隐藏\n* block–块显示\n* table–表格显示\n* list-item–项目列表\n* inline-block\n\n## position的值\n* static（默认）：按照正常文档流进行排列；\n* relative（相对定位）：不脱离文档流，参考自身静态位置通过 top, bottom, left, right 定* 位；\n* absolute(绝对定位)：参考距其最近一个不为static的父级元素通过top, bottom, left, right * 定位；\n* fixed(固定定位)：所固定的参照对像是可视窗口。\n\n## CSS3有哪些新特性\n* RGBA和透明度\n* background-image background-origin(content-box/padding-box/border-box) * background-size background-repeat\n* word-wrap（对长的不可分割单词换行）word-wrap：break-word\n* 文字阴影：text-shadow： 5px 5px 5px #FF0000;（水平阴影，垂直阴影，模糊距离，阴影颜色）\n* font-face属性：定义自己的字体\n* 圆角（边框半径）：border-radius 属性用于创建圆角\n* 边框图片：border-image: url(border.png) 30 30 round\n* 盒阴影：box-shadow: 10px 10px 5px #888888\n* 媒体查询：定义两套css，当浏览器的尺寸变化时会采用不同的属性\n\n## 用纯CSS创建一个三角形的原理是什么\n首先，需要把元素的宽度、高度设为0。然后设置边框样式。\n\n## CSS里的visibility属性有个collapse属性值？在不同浏览器下以后什么区别？\n当一个元素的`visibility`属性被设置成`collapse`值后，对于一般的元素，它的表现跟hidden是一样的。\n\nchrome中，使用`collapse`值和使用`hidden`没有区别。\nfirefox，opera和IE，使用`collapse`值和使用`display：none`没有什么区别。\n\n## display:none与visibility：hidden的区别？\n`display：none` 不显示对应的元素，在文档布局中不再分配空间（回流+重绘）\n`visibility：hidden` 隐藏对应元素，在文档布局中仍保留原来的空间（重绘）\n\n## position跟display、overflow、float这些特性相互叠加后会怎么样\n`display`属性规定元素应该生成的框的类型；`position`属性规定元素的定位类型；`float`属性是一种布局方式，定义元素在哪个方向浮动。\n类似于优先级机制：`position：absolute/fixed`优先级最高，有他们在时，`float`不起作用，`display`值需要调整。`float` 或者`absolute`定位的元素，只能是块元素或表格。\n\n## 对BFC规范(块级格式化上下文：block formatting context)的理解？\nBFC规定了内部的Block Box如何布局。\n定位方案：\n* 内部的Box会在垂直方向上一个接一个放置。\n* Box垂直方向的距离由margin决定，属于同一个BFC的两个相邻Box的margin会发生重叠。\n* 每个元素的margin box 的左边，与包含块border box的左边相接触。\n* BFC的区域不会与float box重叠。\n* BFC是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。\n* 计算BFC的高度时，浮动元素也会参与计算。\n满足下列条件之一就可触发BFC\n* 根元素，即html\n* float的值不为none（默认）\n* overflow的值不为visible（默认）\n* display的值为inline-block、table-cell、table-caption\n* position的值为absolute或fixed\n\n## 浏览器是怎样解析CSS选择器的？\n\nCSS选择器的解析是从右向左解析的。若从左向右的匹配，发现不符合规则，需要进行回溯，会损失很多性能。若从右向左匹配，先找到所有的最右节点，对于每一个节点，向上寻找其父节点直到找到根元素或满足条件的匹配规则，则结束这个分支的遍历。两种匹配规则的性能差别很大，是因为从右向左的匹配在第一步就筛选掉了大量的不符合条件的最右节点（叶子节点），而从左向右的匹配规则的性能都浪费在了失败的查找上面。  \n而在 CSS 解析完毕后，需要将解析的结果与 DOM Tree 的内容一起进行分析建立一棵 Render Tree，最终用来进行绘图。在建立 Render Tree 时（WebKit 中的「Attachment」过程），浏览器就要为每个 DOM Tree 中的元素根据 CSS 的解析结果（Style Rules）来确定生成怎样的 Render Tree。\n### [参考](https://luckyship.gitee.io/2021/01/16/2021-01-16-css-match-principle/)\n\n## 元素竖向的百分比设定是相对于容器的高度吗？\n\n当按百分比设定一个元素的宽度时，它是相对于父容器的宽度计算的，但是，对于一些表示竖向距离的属性，例如 padding-top , padding-bottom , margin-top , margin-bottom 等，当按百分比设定它们时，依据的也是父容器的宽度，而不是高度。\n### [参考](https://luckyship.gitee.io/2019/10/22/2019-10-22-percentage-of-css/)\n\n## 全屏滚动的原理是什么？用到了CSS的哪些属性？\n\n原理：有点类似于轮播，整体的元素一直排列下去，假设有5个需要展示的全屏页面，那么高度是500%，只是展示100%，剩下的可以通过transform进行y轴定位，也可以通过margin-top实现\noverflow：hidden；transition：all 1000ms ease；\n\n## 什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？\n响应式网站设计(Responsive Web design)是一个网站能够兼容多个终端，而不是为每一个终端做一个特定的版本。  \n基本原理是通过媒体查询检测不同的设备屏幕尺寸做处理。\n页面头部必须有meta声明的viewport。\n\n## ::before 和 :after中双冒号和单冒号有什么区别？解释一下这2个伪元素的作用\n单冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素。  \n`::`before就是以一个子元素的存在，定义在元素主体内容之前的一个伪元素。并不存在于dom之中，只存在在页面之中。\n\n## 你对line-height是如何理解的？\n\n行高是指一行文字的高度，具体说是两行文字间基线的距离。CSS中起高度作用的是height和`line-height`，没有定义height属性，最终其表现作用一定是`line-height`。\n单行文本垂直居中：把`line-height`值设置为height一样大小的值可以实现单行文字的垂直居中，其实也可以把height删除。\n多行文本垂直居中：需要设置display属性为`inline-block`。\n\n## 怎么让Chrome支持小于12px 的文字\n```\n\tfont-size: 12px;\n\ttransform: 0.8; // 缩小比例\n```\n\n## 如果需要手动写动画，你认为最小时间间隔是多久，为什么？\n多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms\n\n## li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？\n\n行框的排列会受到中间空白（回车空格）等的影响，因为空格也属于字符,这些空白也会被应用样式，占据空间，所以会有间隔，把字符大小设为0，就没有空格了。\n解决方法：\n\n* 可以将`<li>`代码全部写在一排\n* 浮动li中float：left\n* 在ul中用font-size：0（谷歌不支持）；可以使用letter-space：-3px\n\n## display:inline-block 什么时候会显示间隙？\n* 有空格时候会有间隙 解决：移除空格\n* margin正值的时候 解决：margin使用负值\n* 使用font-size时候 解决：font-size:0、letter-spacing、word-spacing\n\n## 有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度?\n\n外层div使用position：relative；高度要求自适应的div使用position: absolute; top: 100px; bottom: 0; left: 0\n\n## style标签写在body后与body前有什么区别？\n页面加载自上而下 当然是先加载样式。\n写在body标签后由于浏览器以逐行方式对HTML文档进行解析，当解析到写在尾部的样式表（外联或写在style标签）会导致浏览器停止之前的渲染，等待加载且解析样式表完成之后重新渲染，在windows的IE下可能会出现FOUC现象（即样式失效导致的页面闪烁问题）\n\n\n","source":"_posts/2021-05-06-css-interview.md","raw":"---\nlayout: post\ntitle: css常用知识\ntags: [css, web]\ncomments: true\ndate: 2021-05-06 10:35:44\n---\n\n## 什么是盒子模型\n盒模型分为标准盒模型和怪异盒模型（IE）\n```\nbox-sizing : content-box //标准盒模型\nbox-sizing : border-box  //怪异盒模型\n```\n* 标准盒模型:这种盒模型设置`width`的时候的值是内容区的宽度,如果再设置`padding`和`margin`,`border`的话盒子的实际宽度会增大；\n* 怪异盒模型:这种盒子的`width`设置的值为盒子实际的宽度,`border`和`padding`的设置不会影响盒子的实际宽度和高度\n\n## CSS新特性\n```\ntransition //过渡\ntransform //旋转、缩放、移动或者倾斜\nanimation //动画\ngradient //渐变\nshadow //阴影\nborder-radius //圆角\n```\n\n<!-- more -->\n\n## 显示省略号样式\n```\ndisplay: -webkit-box; /*值必须为-webkit-box或者-webkit-inline-box*/\n-webkit-box-orient: vertical; /*值必须为vertical*/\n-webkit-line-clamp: 2; /*值为数字，表示一共显示几行*/\noverflow: hidden;\n```\n## link 和 @import 的区别\n* link属于HTML标签，而@import是CSS提供的。\n* 页面加载的时候，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载。\n* import只在IE5以上才能识别，而link是HTML标签，无兼容问题。\n* link样式的权重高于@import样式的权重。\n\n## 介绍一下标准的CSS的盒子模型？与低版本IE的盒子模型有什么不同的？\n\n标准盒子模型：宽度=内容的宽度`（content）+ border + padding + margin`\n低版本IE盒子模型：宽度=内容宽度`（content+border+padding）+ margin`\n\n## box-sizing属性？\n\n用来控制元素的盒子模型的解析模式，默认为content-box\ncontext-box：W3C的标准盒子模型，设置元素的 height/width 属性指的是content部分的高/宽\nborder-box：IE传统盒子模型。设置元素的height/width属性指的是border + padding + content部分的高/宽\n\n## CSS选择器有哪些？哪些属性可以继承？\n\nCSS选择符：id选择器(#myid)、类选择器(.myclassname)、标签选择器(div, h1, p)、相邻选择器(h1 + p)、子选择器（ul > li）、后代选择器（li a）、通配符选择器（*）、属性选择器（a[rel=”external”]）、伪类选择器（a:hover, li:nth-child）\n\n可继承的属性：`font-size, font-family, color`\n\n不可继承的样式：`border, padding, margin, width, height`\n\n优先级（就近原则）：!important > [ id > class > tag ]\n> !important 比内联优先级高\n\n## CSS优先级算法如何计算？\n\n* 元素选择符： 1\n* class选择符： 10\n* id选择符：100\n* 元素标签：1000\n\n!important声明的样式优先级最高，如果冲突再进行计算。\n如果优先级相同，则选择最后出现的样式。\n继承得到的样式的优先级最低。\n\n## CSS3新增伪类有那些?\n* p:first-of-type 选择属于其父元素的首个元素\n* p:last-of-type 选择属于其父元素的最后元素\n* p:only-of-type 选择属于其父元素唯一的元素\n* p:only-child 选择属于其父元素的唯一子元素\n* p:nth-child(2) 选择属于其父元素的第二个子元素\n* :enabled :disabled 表单控件的禁用状态。\n* :checked 单选框或复选框被选中。\n\n## display有哪些值？说明他们的作用?\n* inline（默认）–内联\n* none–隐藏\n* block–块显示\n* table–表格显示\n* list-item–项目列表\n* inline-block\n\n## position的值\n* static（默认）：按照正常文档流进行排列；\n* relative（相对定位）：不脱离文档流，参考自身静态位置通过 top, bottom, left, right 定* 位；\n* absolute(绝对定位)：参考距其最近一个不为static的父级元素通过top, bottom, left, right * 定位；\n* fixed(固定定位)：所固定的参照对像是可视窗口。\n\n## CSS3有哪些新特性\n* RGBA和透明度\n* background-image background-origin(content-box/padding-box/border-box) * background-size background-repeat\n* word-wrap（对长的不可分割单词换行）word-wrap：break-word\n* 文字阴影：text-shadow： 5px 5px 5px #FF0000;（水平阴影，垂直阴影，模糊距离，阴影颜色）\n* font-face属性：定义自己的字体\n* 圆角（边框半径）：border-radius 属性用于创建圆角\n* 边框图片：border-image: url(border.png) 30 30 round\n* 盒阴影：box-shadow: 10px 10px 5px #888888\n* 媒体查询：定义两套css，当浏览器的尺寸变化时会采用不同的属性\n\n## 用纯CSS创建一个三角形的原理是什么\n首先，需要把元素的宽度、高度设为0。然后设置边框样式。\n\n## CSS里的visibility属性有个collapse属性值？在不同浏览器下以后什么区别？\n当一个元素的`visibility`属性被设置成`collapse`值后，对于一般的元素，它的表现跟hidden是一样的。\n\nchrome中，使用`collapse`值和使用`hidden`没有区别。\nfirefox，opera和IE，使用`collapse`值和使用`display：none`没有什么区别。\n\n## display:none与visibility：hidden的区别？\n`display：none` 不显示对应的元素，在文档布局中不再分配空间（回流+重绘）\n`visibility：hidden` 隐藏对应元素，在文档布局中仍保留原来的空间（重绘）\n\n## position跟display、overflow、float这些特性相互叠加后会怎么样\n`display`属性规定元素应该生成的框的类型；`position`属性规定元素的定位类型；`float`属性是一种布局方式，定义元素在哪个方向浮动。\n类似于优先级机制：`position：absolute/fixed`优先级最高，有他们在时，`float`不起作用，`display`值需要调整。`float` 或者`absolute`定位的元素，只能是块元素或表格。\n\n## 对BFC规范(块级格式化上下文：block formatting context)的理解？\nBFC规定了内部的Block Box如何布局。\n定位方案：\n* 内部的Box会在垂直方向上一个接一个放置。\n* Box垂直方向的距离由margin决定，属于同一个BFC的两个相邻Box的margin会发生重叠。\n* 每个元素的margin box 的左边，与包含块border box的左边相接触。\n* BFC的区域不会与float box重叠。\n* BFC是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。\n* 计算BFC的高度时，浮动元素也会参与计算。\n满足下列条件之一就可触发BFC\n* 根元素，即html\n* float的值不为none（默认）\n* overflow的值不为visible（默认）\n* display的值为inline-block、table-cell、table-caption\n* position的值为absolute或fixed\n\n## 浏览器是怎样解析CSS选择器的？\n\nCSS选择器的解析是从右向左解析的。若从左向右的匹配，发现不符合规则，需要进行回溯，会损失很多性能。若从右向左匹配，先找到所有的最右节点，对于每一个节点，向上寻找其父节点直到找到根元素或满足条件的匹配规则，则结束这个分支的遍历。两种匹配规则的性能差别很大，是因为从右向左的匹配在第一步就筛选掉了大量的不符合条件的最右节点（叶子节点），而从左向右的匹配规则的性能都浪费在了失败的查找上面。  \n而在 CSS 解析完毕后，需要将解析的结果与 DOM Tree 的内容一起进行分析建立一棵 Render Tree，最终用来进行绘图。在建立 Render Tree 时（WebKit 中的「Attachment」过程），浏览器就要为每个 DOM Tree 中的元素根据 CSS 的解析结果（Style Rules）来确定生成怎样的 Render Tree。\n### [参考](https://luckyship.gitee.io/2021/01/16/2021-01-16-css-match-principle/)\n\n## 元素竖向的百分比设定是相对于容器的高度吗？\n\n当按百分比设定一个元素的宽度时，它是相对于父容器的宽度计算的，但是，对于一些表示竖向距离的属性，例如 padding-top , padding-bottom , margin-top , margin-bottom 等，当按百分比设定它们时，依据的也是父容器的宽度，而不是高度。\n### [参考](https://luckyship.gitee.io/2019/10/22/2019-10-22-percentage-of-css/)\n\n## 全屏滚动的原理是什么？用到了CSS的哪些属性？\n\n原理：有点类似于轮播，整体的元素一直排列下去，假设有5个需要展示的全屏页面，那么高度是500%，只是展示100%，剩下的可以通过transform进行y轴定位，也可以通过margin-top实现\noverflow：hidden；transition：all 1000ms ease；\n\n## 什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？\n响应式网站设计(Responsive Web design)是一个网站能够兼容多个终端，而不是为每一个终端做一个特定的版本。  \n基本原理是通过媒体查询检测不同的设备屏幕尺寸做处理。\n页面头部必须有meta声明的viewport。\n\n## ::before 和 :after中双冒号和单冒号有什么区别？解释一下这2个伪元素的作用\n单冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素。  \n`::`before就是以一个子元素的存在，定义在元素主体内容之前的一个伪元素。并不存在于dom之中，只存在在页面之中。\n\n## 你对line-height是如何理解的？\n\n行高是指一行文字的高度，具体说是两行文字间基线的距离。CSS中起高度作用的是height和`line-height`，没有定义height属性，最终其表现作用一定是`line-height`。\n单行文本垂直居中：把`line-height`值设置为height一样大小的值可以实现单行文字的垂直居中，其实也可以把height删除。\n多行文本垂直居中：需要设置display属性为`inline-block`。\n\n## 怎么让Chrome支持小于12px 的文字\n```\n\tfont-size: 12px;\n\ttransform: 0.8; // 缩小比例\n```\n\n## 如果需要手动写动画，你认为最小时间间隔是多久，为什么？\n多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms\n\n## li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？\n\n行框的排列会受到中间空白（回车空格）等的影响，因为空格也属于字符,这些空白也会被应用样式，占据空间，所以会有间隔，把字符大小设为0，就没有空格了。\n解决方法：\n\n* 可以将`<li>`代码全部写在一排\n* 浮动li中float：left\n* 在ul中用font-size：0（谷歌不支持）；可以使用letter-space：-3px\n\n## display:inline-block 什么时候会显示间隙？\n* 有空格时候会有间隙 解决：移除空格\n* margin正值的时候 解决：margin使用负值\n* 使用font-size时候 解决：font-size:0、letter-spacing、word-spacing\n\n## 有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度?\n\n外层div使用position：relative；高度要求自适应的div使用position: absolute; top: 100px; bottom: 0; left: 0\n\n## style标签写在body后与body前有什么区别？\n页面加载自上而下 当然是先加载样式。\n写在body标签后由于浏览器以逐行方式对HTML文档进行解析，当解析到写在尾部的样式表（外联或写在style标签）会导致浏览器停止之前的渲染，等待加载且解析样式表完成之后重新渲染，在windows的IE下可能会出现FOUC现象（即样式失效导致的页面闪烁问题）\n\n\n","slug":"2021-05-06-css-interview","published":1,"updated":"2021-05-07T11:55:40.983Z","photos":[],"link":"","_id":"ckoe9igx4003i8cpn8csufwkk","content":"<h2 id=\"什么是盒子模型\"><a href=\"#什么是盒子模型\" class=\"headerlink\" title=\"什么是盒子模型\"></a>什么是盒子模型</h2><p>盒模型分为标准盒模型和怪异盒模型（IE）</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">box</span>-sizing : content-<span class=\"built_in\">box</span> <span class=\"comment\">//标准盒模型</span></span><br><span class=\"line\"><span class=\"built_in\">box</span>-sizing : border-<span class=\"built_in\">box</span>  <span class=\"comment\">//怪异盒模型</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>标准盒模型:这种盒模型设置<code>width</code>的时候的值是内容区的宽度,如果再设置<code>padding</code>和<code>margin</code>,<code>border</code>的话盒子的实际宽度会增大；</li>\n<li>怪异盒模型:这种盒子的<code>width</code>设置的值为盒子实际的宽度,<code>border</code>和<code>padding</code>的设置不会影响盒子的实际宽度和高度</li>\n</ul>\n<h2 id=\"CSS新特性\"><a href=\"#CSS新特性\" class=\"headerlink\" title=\"CSS新特性\"></a>CSS新特性</h2><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">transition <span class=\"regexp\">//</span>过渡</span><br><span class=\"line\">transform <span class=\"regexp\">//</span>旋转、缩放、移动或者倾斜</span><br><span class=\"line\">animation <span class=\"regexp\">//</span>动画</span><br><span class=\"line\">gradient <span class=\"regexp\">//</span>渐变</span><br><span class=\"line\">shadow <span class=\"regexp\">//</span>阴影</span><br><span class=\"line\">border-radius <span class=\"regexp\">//</span>圆角</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h2 id=\"显示省略号样式\"><a href=\"#显示省略号样式\" class=\"headerlink\" title=\"显示省略号样式\"></a>显示省略号样式</h2><figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">display</span>: -webkit-box; <span class=\"comment\">/*值必须为-webkit-box或者-webkit-inline-box*/</span></span><br><span class=\"line\">-webkit-box-orient: vertical; <span class=\"comment\">/*值必须为vertical*/</span></span><br><span class=\"line\">-webkit-line-clamp: <span class=\"number\">2</span>; <span class=\"comment\">/*值为数字，表示一共显示几行*/</span></span><br><span class=\"line\"><span class=\"attribute\">overflow</span>: hidden;</span><br></pre></td></tr></table></figure>\n<h2 id=\"link-和-import-的区别\"><a href=\"#link-和-import-的区别\" class=\"headerlink\" title=\"link 和 @import 的区别\"></a>link 和 @import 的区别</h2><ul>\n<li>link属于HTML标签，而@import是CSS提供的。</li>\n<li>页面加载的时候，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载。</li>\n<li>import只在IE5以上才能识别，而link是HTML标签，无兼容问题。</li>\n<li>link样式的权重高于@import样式的权重。</li>\n</ul>\n<h2 id=\"介绍一下标准的CSS的盒子模型？与低版本IE的盒子模型有什么不同的？\"><a href=\"#介绍一下标准的CSS的盒子模型？与低版本IE的盒子模型有什么不同的？\" class=\"headerlink\" title=\"介绍一下标准的CSS的盒子模型？与低版本IE的盒子模型有什么不同的？\"></a>介绍一下标准的CSS的盒子模型？与低版本IE的盒子模型有什么不同的？</h2><p>标准盒子模型：宽度=内容的宽度<code>（content）+ border + padding + margin</code><br>低版本IE盒子模型：宽度=内容宽度<code>（content+border+padding）+ margin</code></p>\n<h2 id=\"box-sizing属性？\"><a href=\"#box-sizing属性？\" class=\"headerlink\" title=\"box-sizing属性？\"></a>box-sizing属性？</h2><p>用来控制元素的盒子模型的解析模式，默认为content-box<br>context-box：W3C的标准盒子模型，设置元素的 height/width 属性指的是content部分的高/宽<br>border-box：IE传统盒子模型。设置元素的height/width属性指的是border + padding + content部分的高/宽</p>\n<h2 id=\"CSS选择器有哪些？哪些属性可以继承？\"><a href=\"#CSS选择器有哪些？哪些属性可以继承？\" class=\"headerlink\" title=\"CSS选择器有哪些？哪些属性可以继承？\"></a>CSS选择器有哪些？哪些属性可以继承？</h2><p>CSS选择符：id选择器(#myid)、类选择器(.myclassname)、标签选择器(div, h1, p)、相邻选择器(h1 + p)、子选择器（ul &gt; li）、后代选择器（li a）、通配符选择器（*）、属性选择器（a[rel=”external”]）、伪类选择器（a:hover, li:nth-child）</p>\n<p>可继承的属性：<code>font-size, font-family, color</code></p>\n<p>不可继承的样式：<code>border, padding, margin, width, height</code></p>\n<p>优先级（就近原则）：!important &gt; [ id &gt; class &gt; tag ]</p>\n<blockquote>\n<p>!important 比内联优先级高</p>\n</blockquote>\n<h2 id=\"CSS优先级算法如何计算？\"><a href=\"#CSS优先级算法如何计算？\" class=\"headerlink\" title=\"CSS优先级算法如何计算？\"></a>CSS优先级算法如何计算？</h2><ul>\n<li>元素选择符： 1</li>\n<li>class选择符： 10</li>\n<li>id选择符：100</li>\n<li>元素标签：1000</li>\n</ul>\n<p>!important声明的样式优先级最高，如果冲突再进行计算。<br>如果优先级相同，则选择最后出现的样式。<br>继承得到的样式的优先级最低。</p>\n<h2 id=\"CSS3新增伪类有那些\"><a href=\"#CSS3新增伪类有那些\" class=\"headerlink\" title=\"CSS3新增伪类有那些?\"></a>CSS3新增伪类有那些?</h2><ul>\n<li>p:first-of-type 选择属于其父元素的首个元素</li>\n<li>p:last-of-type 选择属于其父元素的最后元素</li>\n<li>p:only-of-type 选择属于其父元素唯一的元素</li>\n<li>p:only-child 选择属于其父元素的唯一子元素</li>\n<li>p:nth-child(2) 选择属于其父元素的第二个子元素</li>\n<li>:enabled :disabled 表单控件的禁用状态。</li>\n<li>:checked 单选框或复选框被选中。</li>\n</ul>\n<h2 id=\"display有哪些值？说明他们的作用\"><a href=\"#display有哪些值？说明他们的作用\" class=\"headerlink\" title=\"display有哪些值？说明他们的作用?\"></a>display有哪些值？说明他们的作用?</h2><ul>\n<li>inline（默认）–内联</li>\n<li>none–隐藏</li>\n<li>block–块显示</li>\n<li>table–表格显示</li>\n<li>list-item–项目列表</li>\n<li>inline-block</li>\n</ul>\n<h2 id=\"position的值\"><a href=\"#position的值\" class=\"headerlink\" title=\"position的值\"></a>position的值</h2><ul>\n<li>static（默认）：按照正常文档流进行排列；</li>\n<li>relative（相对定位）：不脱离文档流，参考自身静态位置通过 top, bottom, left, right 定* 位；</li>\n<li>absolute(绝对定位)：参考距其最近一个不为static的父级元素通过top, bottom, left, right * 定位；</li>\n<li>fixed(固定定位)：所固定的参照对像是可视窗口。</li>\n</ul>\n<h2 id=\"CSS3有哪些新特性\"><a href=\"#CSS3有哪些新特性\" class=\"headerlink\" title=\"CSS3有哪些新特性\"></a>CSS3有哪些新特性</h2><ul>\n<li>RGBA和透明度</li>\n<li>background-image background-origin(content-box/padding-box/border-box) * background-size background-repeat</li>\n<li>word-wrap（对长的不可分割单词换行）word-wrap：break-word</li>\n<li>文字阴影：text-shadow： 5px 5px 5px #FF0000;（水平阴影，垂直阴影，模糊距离，阴影颜色）</li>\n<li>font-face属性：定义自己的字体</li>\n<li>圆角（边框半径）：border-radius 属性用于创建圆角</li>\n<li>边框图片：border-image: url(border.png) 30 30 round</li>\n<li>盒阴影：box-shadow: 10px 10px 5px #888888</li>\n<li>媒体查询：定义两套css，当浏览器的尺寸变化时会采用不同的属性</li>\n</ul>\n<h2 id=\"用纯CSS创建一个三角形的原理是什么\"><a href=\"#用纯CSS创建一个三角形的原理是什么\" class=\"headerlink\" title=\"用纯CSS创建一个三角形的原理是什么\"></a>用纯CSS创建一个三角形的原理是什么</h2><p>首先，需要把元素的宽度、高度设为0。然后设置边框样式。</p>\n<h2 id=\"CSS里的visibility属性有个collapse属性值？在不同浏览器下以后什么区别？\"><a href=\"#CSS里的visibility属性有个collapse属性值？在不同浏览器下以后什么区别？\" class=\"headerlink\" title=\"CSS里的visibility属性有个collapse属性值？在不同浏览器下以后什么区别？\"></a>CSS里的visibility属性有个collapse属性值？在不同浏览器下以后什么区别？</h2><p>当一个元素的<code>visibility</code>属性被设置成<code>collapse</code>值后，对于一般的元素，它的表现跟hidden是一样的。</p>\n<p>chrome中，使用<code>collapse</code>值和使用<code>hidden</code>没有区别。<br>firefox，opera和IE，使用<code>collapse</code>值和使用<code>display：none</code>没有什么区别。</p>\n<h2 id=\"display-none与visibility：hidden的区别？\"><a href=\"#display-none与visibility：hidden的区别？\" class=\"headerlink\" title=\"display:none与visibility：hidden的区别？\"></a>display:none与visibility：hidden的区别？</h2><p><code>display：none</code> 不显示对应的元素，在文档布局中不再分配空间（回流+重绘）<br><code>visibility：hidden</code> 隐藏对应元素，在文档布局中仍保留原来的空间（重绘）</p>\n<h2 id=\"position跟display、overflow、float这些特性相互叠加后会怎么样\"><a href=\"#position跟display、overflow、float这些特性相互叠加后会怎么样\" class=\"headerlink\" title=\"position跟display、overflow、float这些特性相互叠加后会怎么样\"></a>position跟display、overflow、float这些特性相互叠加后会怎么样</h2><p><code>display</code>属性规定元素应该生成的框的类型；<code>position</code>属性规定元素的定位类型；<code>float</code>属性是一种布局方式，定义元素在哪个方向浮动。<br>类似于优先级机制：<code>position：absolute/fixed</code>优先级最高，有他们在时，<code>float</code>不起作用，<code>display</code>值需要调整。<code>float</code> 或者<code>absolute</code>定位的元素，只能是块元素或表格。</p>\n<h2 id=\"对BFC规范-块级格式化上下文：block-formatting-context-的理解？\"><a href=\"#对BFC规范-块级格式化上下文：block-formatting-context-的理解？\" class=\"headerlink\" title=\"对BFC规范(块级格式化上下文：block formatting context)的理解？\"></a>对BFC规范(块级格式化上下文：block formatting context)的理解？</h2><p>BFC规定了内部的Block Box如何布局。<br>定位方案：</p>\n<ul>\n<li>内部的Box会在垂直方向上一个接一个放置。</li>\n<li>Box垂直方向的距离由margin决定，属于同一个BFC的两个相邻Box的margin会发生重叠。</li>\n<li>每个元素的margin box 的左边，与包含块border box的左边相接触。</li>\n<li>BFC的区域不会与float box重叠。</li>\n<li>BFC是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。</li>\n<li>计算BFC的高度时，浮动元素也会参与计算。<br>满足下列条件之一就可触发BFC</li>\n<li>根元素，即html</li>\n<li>float的值不为none（默认）</li>\n<li>overflow的值不为visible（默认）</li>\n<li>display的值为inline-block、table-cell、table-caption</li>\n<li>position的值为absolute或fixed</li>\n</ul>\n<h2 id=\"浏览器是怎样解析CSS选择器的？\"><a href=\"#浏览器是怎样解析CSS选择器的？\" class=\"headerlink\" title=\"浏览器是怎样解析CSS选择器的？\"></a>浏览器是怎样解析CSS选择器的？</h2><p>CSS选择器的解析是从右向左解析的。若从左向右的匹配，发现不符合规则，需要进行回溯，会损失很多性能。若从右向左匹配，先找到所有的最右节点，对于每一个节点，向上寻找其父节点直到找到根元素或满足条件的匹配规则，则结束这个分支的遍历。两种匹配规则的性能差别很大，是因为从右向左的匹配在第一步就筛选掉了大量的不符合条件的最右节点（叶子节点），而从左向右的匹配规则的性能都浪费在了失败的查找上面。<br>而在 CSS 解析完毕后，需要将解析的结果与 DOM Tree 的内容一起进行分析建立一棵 Render Tree，最终用来进行绘图。在建立 Render Tree 时（WebKit 中的「Attachment」过程），浏览器就要为每个 DOM Tree 中的元素根据 CSS 的解析结果（Style Rules）来确定生成怎样的 Render Tree。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a><a href=\"https://luckyship.gitee.io/2021/01/16/2021-01-16-css-match-principle/\">参考</a></h3><h2 id=\"元素竖向的百分比设定是相对于容器的高度吗？\"><a href=\"#元素竖向的百分比设定是相对于容器的高度吗？\" class=\"headerlink\" title=\"元素竖向的百分比设定是相对于容器的高度吗？\"></a>元素竖向的百分比设定是相对于容器的高度吗？</h2><p>当按百分比设定一个元素的宽度时，它是相对于父容器的宽度计算的，但是，对于一些表示竖向距离的属性，例如 padding-top , padding-bottom , margin-top , margin-bottom 等，当按百分比设定它们时，依据的也是父容器的宽度，而不是高度。</p>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a><a href=\"https://luckyship.gitee.io/2019/10/22/2019-10-22-percentage-of-css/\">参考</a></h3><h2 id=\"全屏滚动的原理是什么？用到了CSS的哪些属性？\"><a href=\"#全屏滚动的原理是什么？用到了CSS的哪些属性？\" class=\"headerlink\" title=\"全屏滚动的原理是什么？用到了CSS的哪些属性？\"></a>全屏滚动的原理是什么？用到了CSS的哪些属性？</h2><p>原理：有点类似于轮播，整体的元素一直排列下去，假设有5个需要展示的全屏页面，那么高度是500%，只是展示100%，剩下的可以通过transform进行y轴定位，也可以通过margin-top实现<br>overflow：hidden；transition：all 1000ms ease；</p>\n<h2 id=\"什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？\"><a href=\"#什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？\" class=\"headerlink\" title=\"什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？\"></a>什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？</h2><p>响应式网站设计(Responsive Web design)是一个网站能够兼容多个终端，而不是为每一个终端做一个特定的版本。<br>基本原理是通过媒体查询检测不同的设备屏幕尺寸做处理。<br>页面头部必须有meta声明的viewport。</p>\n<h2 id=\"before-和-after中双冒号和单冒号有什么区别？解释一下这2个伪元素的作用\"><a href=\"#before-和-after中双冒号和单冒号有什么区别？解释一下这2个伪元素的作用\" class=\"headerlink\" title=\"::before 和 :after中双冒号和单冒号有什么区别？解释一下这2个伪元素的作用\"></a>::before 和 :after中双冒号和单冒号有什么区别？解释一下这2个伪元素的作用</h2><p>单冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素。<br><code>::</code>before就是以一个子元素的存在，定义在元素主体内容之前的一个伪元素。并不存在于dom之中，只存在在页面之中。</p>\n<h2 id=\"你对line-height是如何理解的？\"><a href=\"#你对line-height是如何理解的？\" class=\"headerlink\" title=\"你对line-height是如何理解的？\"></a>你对line-height是如何理解的？</h2><p>行高是指一行文字的高度，具体说是两行文字间基线的距离。CSS中起高度作用的是height和<code>line-height</code>，没有定义height属性，最终其表现作用一定是<code>line-height</code>。<br>单行文本垂直居中：把<code>line-height</code>值设置为height一样大小的值可以实现单行文字的垂直居中，其实也可以把height删除。<br>多行文本垂直居中：需要设置display属性为<code>inline-block</code>。</p>\n<h2 id=\"怎么让Chrome支持小于12px-的文字\"><a href=\"#怎么让Chrome支持小于12px-的文字\" class=\"headerlink\" title=\"怎么让Chrome支持小于12px 的文字\"></a>怎么让Chrome支持小于12px 的文字</h2><figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\"><span class=\"attribute\">transform</span>: <span class=\"number\">0.8</span>; <span class=\"comment\">// 缩小比例</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如果需要手动写动画，你认为最小时间间隔是多久，为什么？\"><a href=\"#如果需要手动写动画，你认为最小时间间隔是多久，为什么？\" class=\"headerlink\" title=\"如果需要手动写动画，你认为最小时间间隔是多久，为什么？\"></a>如果需要手动写动画，你认为最小时间间隔是多久，为什么？</h2><p>多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms</p>\n<h2 id=\"li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？\"><a href=\"#li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？\" class=\"headerlink\" title=\"li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？\"></a>li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？</h2><p>行框的排列会受到中间空白（回车空格）等的影响，因为空格也属于字符,这些空白也会被应用样式，占据空间，所以会有间隔，把字符大小设为0，就没有空格了。<br>解决方法：</p>\n<ul>\n<li>可以将<code>&lt;li&gt;</code>代码全部写在一排</li>\n<li>浮动li中float：left</li>\n<li>在ul中用font-size：0（谷歌不支持）；可以使用letter-space：-3px</li>\n</ul>\n<h2 id=\"display-inline-block-什么时候会显示间隙？\"><a href=\"#display-inline-block-什么时候会显示间隙？\" class=\"headerlink\" title=\"display:inline-block 什么时候会显示间隙？\"></a>display:inline-block 什么时候会显示间隙？</h2><ul>\n<li>有空格时候会有间隙 解决：移除空格</li>\n<li>margin正值的时候 解决：margin使用负值</li>\n<li>使用font-size时候 解决：font-size:0、letter-spacing、word-spacing</li>\n</ul>\n<h2 id=\"有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度\"><a href=\"#有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度\" class=\"headerlink\" title=\"有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度?\"></a>有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度?</h2><p>外层div使用position：relative；高度要求自适应的div使用position: absolute; top: 100px; bottom: 0; left: 0</p>\n<h2 id=\"style标签写在body后与body前有什么区别？\"><a href=\"#style标签写在body后与body前有什么区别？\" class=\"headerlink\" title=\"style标签写在body后与body前有什么区别？\"></a>style标签写在body后与body前有什么区别？</h2><p>页面加载自上而下 当然是先加载样式。<br>写在body标签后由于浏览器以逐行方式对HTML文档进行解析，当解析到写在尾部的样式表（外联或写在style标签）会导致浏览器停止之前的渲染，等待加载且解析样式表完成之后重新渲染，在windows的IE下可能会出现FOUC现象（即样式失效导致的页面闪烁问题）</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是盒子模型\"><a href=\"#什么是盒子模型\" class=\"headerlink\" title=\"什么是盒子模型\"></a>什么是盒子模型</h2><p>盒模型分为标准盒模型和怪异盒模型（IE）</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">box</span>-sizing : content-<span class=\"built_in\">box</span> <span class=\"comment\">//标准盒模型</span></span><br><span class=\"line\"><span class=\"built_in\">box</span>-sizing : border-<span class=\"built_in\">box</span>  <span class=\"comment\">//怪异盒模型</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>标准盒模型:这种盒模型设置<code>width</code>的时候的值是内容区的宽度,如果再设置<code>padding</code>和<code>margin</code>,<code>border</code>的话盒子的实际宽度会增大；</li>\n<li>怪异盒模型:这种盒子的<code>width</code>设置的值为盒子实际的宽度,<code>border</code>和<code>padding</code>的设置不会影响盒子的实际宽度和高度</li>\n</ul>\n<h2 id=\"CSS新特性\"><a href=\"#CSS新特性\" class=\"headerlink\" title=\"CSS新特性\"></a>CSS新特性</h2><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">transition <span class=\"regexp\">//</span>过渡</span><br><span class=\"line\">transform <span class=\"regexp\">//</span>旋转、缩放、移动或者倾斜</span><br><span class=\"line\">animation <span class=\"regexp\">//</span>动画</span><br><span class=\"line\">gradient <span class=\"regexp\">//</span>渐变</span><br><span class=\"line\">shadow <span class=\"regexp\">//</span>阴影</span><br><span class=\"line\">border-radius <span class=\"regexp\">//</span>圆角</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"显示省略号样式\"><a href=\"#显示省略号样式\" class=\"headerlink\" title=\"显示省略号样式\"></a>显示省略号样式</h2><figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">display</span>: -webkit-box; <span class=\"comment\">/*值必须为-webkit-box或者-webkit-inline-box*/</span></span><br><span class=\"line\">-webkit-box-orient: vertical; <span class=\"comment\">/*值必须为vertical*/</span></span><br><span class=\"line\">-webkit-line-clamp: <span class=\"number\">2</span>; <span class=\"comment\">/*值为数字，表示一共显示几行*/</span></span><br><span class=\"line\"><span class=\"attribute\">overflow</span>: hidden;</span><br></pre></td></tr></table></figure>\n<h2 id=\"link-和-import-的区别\"><a href=\"#link-和-import-的区别\" class=\"headerlink\" title=\"link 和 @import 的区别\"></a>link 和 @import 的区别</h2><ul>\n<li>link属于HTML标签，而@import是CSS提供的。</li>\n<li>页面加载的时候，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载。</li>\n<li>import只在IE5以上才能识别，而link是HTML标签，无兼容问题。</li>\n<li>link样式的权重高于@import样式的权重。</li>\n</ul>\n<h2 id=\"介绍一下标准的CSS的盒子模型？与低版本IE的盒子模型有什么不同的？\"><a href=\"#介绍一下标准的CSS的盒子模型？与低版本IE的盒子模型有什么不同的？\" class=\"headerlink\" title=\"介绍一下标准的CSS的盒子模型？与低版本IE的盒子模型有什么不同的？\"></a>介绍一下标准的CSS的盒子模型？与低版本IE的盒子模型有什么不同的？</h2><p>标准盒子模型：宽度=内容的宽度<code>（content）+ border + padding + margin</code><br>低版本IE盒子模型：宽度=内容宽度<code>（content+border+padding）+ margin</code></p>\n<h2 id=\"box-sizing属性？\"><a href=\"#box-sizing属性？\" class=\"headerlink\" title=\"box-sizing属性？\"></a>box-sizing属性？</h2><p>用来控制元素的盒子模型的解析模式，默认为content-box<br>context-box：W3C的标准盒子模型，设置元素的 height/width 属性指的是content部分的高/宽<br>border-box：IE传统盒子模型。设置元素的height/width属性指的是border + padding + content部分的高/宽</p>\n<h2 id=\"CSS选择器有哪些？哪些属性可以继承？\"><a href=\"#CSS选择器有哪些？哪些属性可以继承？\" class=\"headerlink\" title=\"CSS选择器有哪些？哪些属性可以继承？\"></a>CSS选择器有哪些？哪些属性可以继承？</h2><p>CSS选择符：id选择器(#myid)、类选择器(.myclassname)、标签选择器(div, h1, p)、相邻选择器(h1 + p)、子选择器（ul &gt; li）、后代选择器（li a）、通配符选择器（*）、属性选择器（a[rel=”external”]）、伪类选择器（a:hover, li:nth-child）</p>\n<p>可继承的属性：<code>font-size, font-family, color</code></p>\n<p>不可继承的样式：<code>border, padding, margin, width, height</code></p>\n<p>优先级（就近原则）：!important &gt; [ id &gt; class &gt; tag ]</p>\n<blockquote>\n<p>!important 比内联优先级高</p>\n</blockquote>\n<h2 id=\"CSS优先级算法如何计算？\"><a href=\"#CSS优先级算法如何计算？\" class=\"headerlink\" title=\"CSS优先级算法如何计算？\"></a>CSS优先级算法如何计算？</h2><ul>\n<li>元素选择符： 1</li>\n<li>class选择符： 10</li>\n<li>id选择符：100</li>\n<li>元素标签：1000</li>\n</ul>\n<p>!important声明的样式优先级最高，如果冲突再进行计算。<br>如果优先级相同，则选择最后出现的样式。<br>继承得到的样式的优先级最低。</p>\n<h2 id=\"CSS3新增伪类有那些\"><a href=\"#CSS3新增伪类有那些\" class=\"headerlink\" title=\"CSS3新增伪类有那些?\"></a>CSS3新增伪类有那些?</h2><ul>\n<li>p:first-of-type 选择属于其父元素的首个元素</li>\n<li>p:last-of-type 选择属于其父元素的最后元素</li>\n<li>p:only-of-type 选择属于其父元素唯一的元素</li>\n<li>p:only-child 选择属于其父元素的唯一子元素</li>\n<li>p:nth-child(2) 选择属于其父元素的第二个子元素</li>\n<li>:enabled :disabled 表单控件的禁用状态。</li>\n<li>:checked 单选框或复选框被选中。</li>\n</ul>\n<h2 id=\"display有哪些值？说明他们的作用\"><a href=\"#display有哪些值？说明他们的作用\" class=\"headerlink\" title=\"display有哪些值？说明他们的作用?\"></a>display有哪些值？说明他们的作用?</h2><ul>\n<li>inline（默认）–内联</li>\n<li>none–隐藏</li>\n<li>block–块显示</li>\n<li>table–表格显示</li>\n<li>list-item–项目列表</li>\n<li>inline-block</li>\n</ul>\n<h2 id=\"position的值\"><a href=\"#position的值\" class=\"headerlink\" title=\"position的值\"></a>position的值</h2><ul>\n<li>static（默认）：按照正常文档流进行排列；</li>\n<li>relative（相对定位）：不脱离文档流，参考自身静态位置通过 top, bottom, left, right 定* 位；</li>\n<li>absolute(绝对定位)：参考距其最近一个不为static的父级元素通过top, bottom, left, right * 定位；</li>\n<li>fixed(固定定位)：所固定的参照对像是可视窗口。</li>\n</ul>\n<h2 id=\"CSS3有哪些新特性\"><a href=\"#CSS3有哪些新特性\" class=\"headerlink\" title=\"CSS3有哪些新特性\"></a>CSS3有哪些新特性</h2><ul>\n<li>RGBA和透明度</li>\n<li>background-image background-origin(content-box/padding-box/border-box) * background-size background-repeat</li>\n<li>word-wrap（对长的不可分割单词换行）word-wrap：break-word</li>\n<li>文字阴影：text-shadow： 5px 5px 5px #FF0000;（水平阴影，垂直阴影，模糊距离，阴影颜色）</li>\n<li>font-face属性：定义自己的字体</li>\n<li>圆角（边框半径）：border-radius 属性用于创建圆角</li>\n<li>边框图片：border-image: url(border.png) 30 30 round</li>\n<li>盒阴影：box-shadow: 10px 10px 5px #888888</li>\n<li>媒体查询：定义两套css，当浏览器的尺寸变化时会采用不同的属性</li>\n</ul>\n<h2 id=\"用纯CSS创建一个三角形的原理是什么\"><a href=\"#用纯CSS创建一个三角形的原理是什么\" class=\"headerlink\" title=\"用纯CSS创建一个三角形的原理是什么\"></a>用纯CSS创建一个三角形的原理是什么</h2><p>首先，需要把元素的宽度、高度设为0。然后设置边框样式。</p>\n<h2 id=\"CSS里的visibility属性有个collapse属性值？在不同浏览器下以后什么区别？\"><a href=\"#CSS里的visibility属性有个collapse属性值？在不同浏览器下以后什么区别？\" class=\"headerlink\" title=\"CSS里的visibility属性有个collapse属性值？在不同浏览器下以后什么区别？\"></a>CSS里的visibility属性有个collapse属性值？在不同浏览器下以后什么区别？</h2><p>当一个元素的<code>visibility</code>属性被设置成<code>collapse</code>值后，对于一般的元素，它的表现跟hidden是一样的。</p>\n<p>chrome中，使用<code>collapse</code>值和使用<code>hidden</code>没有区别。<br>firefox，opera和IE，使用<code>collapse</code>值和使用<code>display：none</code>没有什么区别。</p>\n<h2 id=\"display-none与visibility：hidden的区别？\"><a href=\"#display-none与visibility：hidden的区别？\" class=\"headerlink\" title=\"display:none与visibility：hidden的区别？\"></a>display:none与visibility：hidden的区别？</h2><p><code>display：none</code> 不显示对应的元素，在文档布局中不再分配空间（回流+重绘）<br><code>visibility：hidden</code> 隐藏对应元素，在文档布局中仍保留原来的空间（重绘）</p>\n<h2 id=\"position跟display、overflow、float这些特性相互叠加后会怎么样\"><a href=\"#position跟display、overflow、float这些特性相互叠加后会怎么样\" class=\"headerlink\" title=\"position跟display、overflow、float这些特性相互叠加后会怎么样\"></a>position跟display、overflow、float这些特性相互叠加后会怎么样</h2><p><code>display</code>属性规定元素应该生成的框的类型；<code>position</code>属性规定元素的定位类型；<code>float</code>属性是一种布局方式，定义元素在哪个方向浮动。<br>类似于优先级机制：<code>position：absolute/fixed</code>优先级最高，有他们在时，<code>float</code>不起作用，<code>display</code>值需要调整。<code>float</code> 或者<code>absolute</code>定位的元素，只能是块元素或表格。</p>\n<h2 id=\"对BFC规范-块级格式化上下文：block-formatting-context-的理解？\"><a href=\"#对BFC规范-块级格式化上下文：block-formatting-context-的理解？\" class=\"headerlink\" title=\"对BFC规范(块级格式化上下文：block formatting context)的理解？\"></a>对BFC规范(块级格式化上下文：block formatting context)的理解？</h2><p>BFC规定了内部的Block Box如何布局。<br>定位方案：</p>\n<ul>\n<li>内部的Box会在垂直方向上一个接一个放置。</li>\n<li>Box垂直方向的距离由margin决定，属于同一个BFC的两个相邻Box的margin会发生重叠。</li>\n<li>每个元素的margin box 的左边，与包含块border box的左边相接触。</li>\n<li>BFC的区域不会与float box重叠。</li>\n<li>BFC是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。</li>\n<li>计算BFC的高度时，浮动元素也会参与计算。<br>满足下列条件之一就可触发BFC</li>\n<li>根元素，即html</li>\n<li>float的值不为none（默认）</li>\n<li>overflow的值不为visible（默认）</li>\n<li>display的值为inline-block、table-cell、table-caption</li>\n<li>position的值为absolute或fixed</li>\n</ul>\n<h2 id=\"浏览器是怎样解析CSS选择器的？\"><a href=\"#浏览器是怎样解析CSS选择器的？\" class=\"headerlink\" title=\"浏览器是怎样解析CSS选择器的？\"></a>浏览器是怎样解析CSS选择器的？</h2><p>CSS选择器的解析是从右向左解析的。若从左向右的匹配，发现不符合规则，需要进行回溯，会损失很多性能。若从右向左匹配，先找到所有的最右节点，对于每一个节点，向上寻找其父节点直到找到根元素或满足条件的匹配规则，则结束这个分支的遍历。两种匹配规则的性能差别很大，是因为从右向左的匹配在第一步就筛选掉了大量的不符合条件的最右节点（叶子节点），而从左向右的匹配规则的性能都浪费在了失败的查找上面。<br>而在 CSS 解析完毕后，需要将解析的结果与 DOM Tree 的内容一起进行分析建立一棵 Render Tree，最终用来进行绘图。在建立 Render Tree 时（WebKit 中的「Attachment」过程），浏览器就要为每个 DOM Tree 中的元素根据 CSS 的解析结果（Style Rules）来确定生成怎样的 Render Tree。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a><a href=\"https://luckyship.gitee.io/2021/01/16/2021-01-16-css-match-principle/\">参考</a></h3><h2 id=\"元素竖向的百分比设定是相对于容器的高度吗？\"><a href=\"#元素竖向的百分比设定是相对于容器的高度吗？\" class=\"headerlink\" title=\"元素竖向的百分比设定是相对于容器的高度吗？\"></a>元素竖向的百分比设定是相对于容器的高度吗？</h2><p>当按百分比设定一个元素的宽度时，它是相对于父容器的宽度计算的，但是，对于一些表示竖向距离的属性，例如 padding-top , padding-bottom , margin-top , margin-bottom 等，当按百分比设定它们时，依据的也是父容器的宽度，而不是高度。</p>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a><a href=\"https://luckyship.gitee.io/2019/10/22/2019-10-22-percentage-of-css/\">参考</a></h3><h2 id=\"全屏滚动的原理是什么？用到了CSS的哪些属性？\"><a href=\"#全屏滚动的原理是什么？用到了CSS的哪些属性？\" class=\"headerlink\" title=\"全屏滚动的原理是什么？用到了CSS的哪些属性？\"></a>全屏滚动的原理是什么？用到了CSS的哪些属性？</h2><p>原理：有点类似于轮播，整体的元素一直排列下去，假设有5个需要展示的全屏页面，那么高度是500%，只是展示100%，剩下的可以通过transform进行y轴定位，也可以通过margin-top实现<br>overflow：hidden；transition：all 1000ms ease；</p>\n<h2 id=\"什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？\"><a href=\"#什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？\" class=\"headerlink\" title=\"什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？\"></a>什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？</h2><p>响应式网站设计(Responsive Web design)是一个网站能够兼容多个终端，而不是为每一个终端做一个特定的版本。<br>基本原理是通过媒体查询检测不同的设备屏幕尺寸做处理。<br>页面头部必须有meta声明的viewport。</p>\n<h2 id=\"before-和-after中双冒号和单冒号有什么区别？解释一下这2个伪元素的作用\"><a href=\"#before-和-after中双冒号和单冒号有什么区别？解释一下这2个伪元素的作用\" class=\"headerlink\" title=\"::before 和 :after中双冒号和单冒号有什么区别？解释一下这2个伪元素的作用\"></a>::before 和 :after中双冒号和单冒号有什么区别？解释一下这2个伪元素的作用</h2><p>单冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素。<br><code>::</code>before就是以一个子元素的存在，定义在元素主体内容之前的一个伪元素。并不存在于dom之中，只存在在页面之中。</p>\n<h2 id=\"你对line-height是如何理解的？\"><a href=\"#你对line-height是如何理解的？\" class=\"headerlink\" title=\"你对line-height是如何理解的？\"></a>你对line-height是如何理解的？</h2><p>行高是指一行文字的高度，具体说是两行文字间基线的距离。CSS中起高度作用的是height和<code>line-height</code>，没有定义height属性，最终其表现作用一定是<code>line-height</code>。<br>单行文本垂直居中：把<code>line-height</code>值设置为height一样大小的值可以实现单行文字的垂直居中，其实也可以把height删除。<br>多行文本垂直居中：需要设置display属性为<code>inline-block</code>。</p>\n<h2 id=\"怎么让Chrome支持小于12px-的文字\"><a href=\"#怎么让Chrome支持小于12px-的文字\" class=\"headerlink\" title=\"怎么让Chrome支持小于12px 的文字\"></a>怎么让Chrome支持小于12px 的文字</h2><figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\"><span class=\"attribute\">transform</span>: <span class=\"number\">0.8</span>; <span class=\"comment\">// 缩小比例</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如果需要手动写动画，你认为最小时间间隔是多久，为什么？\"><a href=\"#如果需要手动写动画，你认为最小时间间隔是多久，为什么？\" class=\"headerlink\" title=\"如果需要手动写动画，你认为最小时间间隔是多久，为什么？\"></a>如果需要手动写动画，你认为最小时间间隔是多久，为什么？</h2><p>多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms</p>\n<h2 id=\"li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？\"><a href=\"#li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？\" class=\"headerlink\" title=\"li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？\"></a>li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？</h2><p>行框的排列会受到中间空白（回车空格）等的影响，因为空格也属于字符,这些空白也会被应用样式，占据空间，所以会有间隔，把字符大小设为0，就没有空格了。<br>解决方法：</p>\n<ul>\n<li>可以将<code>&lt;li&gt;</code>代码全部写在一排</li>\n<li>浮动li中float：left</li>\n<li>在ul中用font-size：0（谷歌不支持）；可以使用letter-space：-3px</li>\n</ul>\n<h2 id=\"display-inline-block-什么时候会显示间隙？\"><a href=\"#display-inline-block-什么时候会显示间隙？\" class=\"headerlink\" title=\"display:inline-block 什么时候会显示间隙？\"></a>display:inline-block 什么时候会显示间隙？</h2><ul>\n<li>有空格时候会有间隙 解决：移除空格</li>\n<li>margin正值的时候 解决：margin使用负值</li>\n<li>使用font-size时候 解决：font-size:0、letter-spacing、word-spacing</li>\n</ul>\n<h2 id=\"有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度\"><a href=\"#有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度\" class=\"headerlink\" title=\"有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度?\"></a>有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度?</h2><p>外层div使用position：relative；高度要求自适应的div使用position: absolute; top: 100px; bottom: 0; left: 0</p>\n<h2 id=\"style标签写在body后与body前有什么区别？\"><a href=\"#style标签写在body后与body前有什么区别？\" class=\"headerlink\" title=\"style标签写在body后与body前有什么区别？\"></a>style标签写在body后与body前有什么区别？</h2><p>页面加载自上而下 当然是先加载样式。<br>写在body标签后由于浏览器以逐行方式对HTML文档进行解析，当解析到写在尾部的样式表（外联或写在style标签）会导致浏览器停止之前的渲染，等待加载且解析样式表完成之后重新渲染，在windows的IE下可能会出现FOUC现象（即样式失效导致的页面闪烁问题）</p>"},{"layout":"post","title":"angular生命周期函数","comments":1,"date":"2021-04-20T03:04:16.000Z","_content":"\n\n## 加载所有生命周期函数\n```\nexport class LifecircleComponent {\n\n    constructor() {\n\n        console.log('00构造函数执行了---除了使用简单的值对局部变量进行初始化之外，什么都不应该做')\n    }\n\n    ngOnChanges() {\n\n        console.log('01ngOnChages执行了---当被绑定的输入属性的值发生变化时调用(父子组件传值的时候会触发)'); \n    }\n\n    ngOnInit() {\n        console.log('02ngOnInit执行了--- 请求数据一般放在这个里面');\n    }\n    ngDoCheck() {\n        console.log('03ngDoCheck执行了---检测，并在发生 Angular 无法或不愿意自己检测的变化时作出反应');\n    }\n    ngAfterContentInit() {\n        console.log('04ngAfterContentInit执行了---当把内容投影进组件之后调用');\n    }\n    ngAfterContentChecked() {\n        console.log('05ngAfterContentChecked执行了---每次完成被投影组件内容的变更检测之后调用');\n    }\n    ngAfterViewInit() : void {\n        console.log('06 ngAfterViewInit执行了----初始化完组件视图及其子视图之后调用（dom操作放在这个里面）');\n    }\n    ngAfterViewChecked() {\n        console.log('07ngAfterViewChecked执行了----每次做完组件视图和子视图的变更检测之后调用');\n    }\n\n    ngOnDestroy() {\n        console.log('08ngOnDestroy执行了····');\n    }\n\n    //自定义方法\n    changeMsg() {\n\n        this.msg = \"数据改变了\";\n    }\n}\n```\n<!-- more -->\n\n## 生命周期钩子详解\n### constructor\n`constructor`，来初始化类。`Angular`中的组件就是基于`class`类实现的，在`Angular`中，`constructor`用于注入依赖。组件的构造函数会在所有的生命周期钩子之前被调用，它主要用于依赖注入或执行简单的数据初始化操作。\n\n### ngOnChanges()\n`@input`属性(输入属性)发生变化时，会调用。非此属性，不会调用。`当输入属性为对象时，当对象的属性值发生变化时，不会调用，当对象的引用变化时会触发`。首次调用一 定会发生在 ngOnInit()之前。\n\n### ngOnInit()\n在 `Angular` 第一次显示数据绑定和设置指令/组件的输入属性之后，初始化指令/组件。在第一轮 `ngOnChanges`() 完成之后调用，只调用一次。可以请求数据\n\n使用 `ngOnInit()` 有两个原因:\n\n在构造函数之后马上执行复杂的初始化逻辑\n在 `Angular` 设置完输入属性之后，对该组件进行准备。有经验的开发者会认同组件的构建应该很便宜和安全\n\n### ngDoCheck()\n检测，并在发生 Angular 无法或不愿意自己检测的变 化时作出反应。在每个 Angular 变更检测周期中调用， ngOnChanges() 和 ngOnInit()之后。\n### ngAfterContentInit()\n当把内容投影进组件之后调用。第一次 ngDoCheck() 之后调用，只调用一次\n### ngAfterContentChecked()\n每次完成被投影组件内容的变更检测之后调用。 ngAfterContentInit() 和每次 ngDoCheck() 之后调\n### ngAfterViewInit()--掌握\n初始化完组件视图及其子视图之后调用。第一 次 ngAfterContentChecked() 之后调用，只调用一次。在这里可以操作DOM\n### ngAfterViewChecked()\n每次做完组件视图和子视图的变更检测之后调用。 ngAfterViewInit()和每次 ngAfterContentChecked() 之后 调用。\n### ngOnDestroy()--掌握\n当 Angular 每次销毁指令/组件之前调用并清扫。在这儿反订阅可观察对象和分离事件处理器，以防内存泄 漏。在 Angular 销毁指令/组件之前调用。比如：移除事件监听、清除定时器、退订 Observable 等。\n","source":"_posts/2021-04-20-angular-lifecycle.md","raw":"---\nlayout: post\ntitle: angular生命周期函数\ntags: [angualr, javascript]\ncomments: true\ndate: 2021-04-20 11:04:16\n---\n\n\n## 加载所有生命周期函数\n```\nexport class LifecircleComponent {\n\n    constructor() {\n\n        console.log('00构造函数执行了---除了使用简单的值对局部变量进行初始化之外，什么都不应该做')\n    }\n\n    ngOnChanges() {\n\n        console.log('01ngOnChages执行了---当被绑定的输入属性的值发生变化时调用(父子组件传值的时候会触发)'); \n    }\n\n    ngOnInit() {\n        console.log('02ngOnInit执行了--- 请求数据一般放在这个里面');\n    }\n    ngDoCheck() {\n        console.log('03ngDoCheck执行了---检测，并在发生 Angular 无法或不愿意自己检测的变化时作出反应');\n    }\n    ngAfterContentInit() {\n        console.log('04ngAfterContentInit执行了---当把内容投影进组件之后调用');\n    }\n    ngAfterContentChecked() {\n        console.log('05ngAfterContentChecked执行了---每次完成被投影组件内容的变更检测之后调用');\n    }\n    ngAfterViewInit() : void {\n        console.log('06 ngAfterViewInit执行了----初始化完组件视图及其子视图之后调用（dom操作放在这个里面）');\n    }\n    ngAfterViewChecked() {\n        console.log('07ngAfterViewChecked执行了----每次做完组件视图和子视图的变更检测之后调用');\n    }\n\n    ngOnDestroy() {\n        console.log('08ngOnDestroy执行了····');\n    }\n\n    //自定义方法\n    changeMsg() {\n\n        this.msg = \"数据改变了\";\n    }\n}\n```\n<!-- more -->\n\n## 生命周期钩子详解\n### constructor\n`constructor`，来初始化类。`Angular`中的组件就是基于`class`类实现的，在`Angular`中，`constructor`用于注入依赖。组件的构造函数会在所有的生命周期钩子之前被调用，它主要用于依赖注入或执行简单的数据初始化操作。\n\n### ngOnChanges()\n`@input`属性(输入属性)发生变化时，会调用。非此属性，不会调用。`当输入属性为对象时，当对象的属性值发生变化时，不会调用，当对象的引用变化时会触发`。首次调用一 定会发生在 ngOnInit()之前。\n\n### ngOnInit()\n在 `Angular` 第一次显示数据绑定和设置指令/组件的输入属性之后，初始化指令/组件。在第一轮 `ngOnChanges`() 完成之后调用，只调用一次。可以请求数据\n\n使用 `ngOnInit()` 有两个原因:\n\n在构造函数之后马上执行复杂的初始化逻辑\n在 `Angular` 设置完输入属性之后，对该组件进行准备。有经验的开发者会认同组件的构建应该很便宜和安全\n\n### ngDoCheck()\n检测，并在发生 Angular 无法或不愿意自己检测的变 化时作出反应。在每个 Angular 变更检测周期中调用， ngOnChanges() 和 ngOnInit()之后。\n### ngAfterContentInit()\n当把内容投影进组件之后调用。第一次 ngDoCheck() 之后调用，只调用一次\n### ngAfterContentChecked()\n每次完成被投影组件内容的变更检测之后调用。 ngAfterContentInit() 和每次 ngDoCheck() 之后调\n### ngAfterViewInit()--掌握\n初始化完组件视图及其子视图之后调用。第一 次 ngAfterContentChecked() 之后调用，只调用一次。在这里可以操作DOM\n### ngAfterViewChecked()\n每次做完组件视图和子视图的变更检测之后调用。 ngAfterViewInit()和每次 ngAfterContentChecked() 之后 调用。\n### ngOnDestroy()--掌握\n当 Angular 每次销毁指令/组件之前调用并清扫。在这儿反订阅可观察对象和分离事件处理器，以防内存泄 漏。在 Angular 销毁指令/组件之前调用。比如：移除事件监听、清除定时器、退订 Observable 等。\n","slug":"2021-04-20-angular-lifecycle","published":1,"updated":"2021-05-07T11:55:40.980Z","photos":[],"link":"","_id":"ckoe9igx6003k8cpnem6s9kii","content":"<h2 id=\"加载所有生命周期函数\"><a href=\"#加载所有生命周期函数\" class=\"headerlink\" title=\"加载所有生命周期函数\"></a>加载所有生命周期函数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecircleComponent</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;00构造函数执行了---除了使用简单的值对局部变量进行初始化之外，什么都不应该做&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ngOnChanges() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;01ngOnChages执行了---当被绑定的输入属性的值发生变化时调用(父子组件传值的时候会触发)&#x27;</span>); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ngOnInit() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;02ngOnInit执行了--- 请求数据一般放在这个里面&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ngDoCheck() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;03ngDoCheck执行了---检测，并在发生 Angular 无法或不愿意自己检测的变化时作出反应&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ngAfterContentInit() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;04ngAfterContentInit执行了---当把内容投影进组件之后调用&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ngAfterContentChecked() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;05ngAfterContentChecked执行了---每次完成被投影组件内容的变更检测之后调用&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ngAfterViewInit() : <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;06 ngAfterViewInit执行了----初始化完组件视图及其子视图之后调用（dom操作放在这个里面）&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ngAfterViewChecked() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;07ngAfterViewChecked执行了----每次做完组件视图和子视图的变更检测之后调用&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ngOnDestroy() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;08ngOnDestroy执行了····&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//自定义方法</span></span><br><span class=\"line\">    changeMsg() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.msg = <span class=\"string\">&quot;数据改变了&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n\n<h2 id=\"生命周期钩子详解\"><a href=\"#生命周期钩子详解\" class=\"headerlink\" title=\"生命周期钩子详解\"></a>生命周期钩子详解</h2><h3 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h3><p><code>constructor</code>，来初始化类。<code>Angular</code>中的组件就是基于<code>class</code>类实现的，在<code>Angular</code>中，<code>constructor</code>用于注入依赖。组件的构造函数会在所有的生命周期钩子之前被调用，它主要用于依赖注入或执行简单的数据初始化操作。</p>\n<h3 id=\"ngOnChanges\"><a href=\"#ngOnChanges\" class=\"headerlink\" title=\"ngOnChanges()\"></a>ngOnChanges()</h3><p><code>@input</code>属性(输入属性)发生变化时，会调用。非此属性，不会调用。<code>当输入属性为对象时，当对象的属性值发生变化时，不会调用，当对象的引用变化时会触发</code>。首次调用一 定会发生在 ngOnInit()之前。</p>\n<h3 id=\"ngOnInit\"><a href=\"#ngOnInit\" class=\"headerlink\" title=\"ngOnInit()\"></a>ngOnInit()</h3><p>在 <code>Angular</code> 第一次显示数据绑定和设置指令/组件的输入属性之后，初始化指令/组件。在第一轮 <code>ngOnChanges</code>() 完成之后调用，只调用一次。可以请求数据</p>\n<p>使用 <code>ngOnInit()</code> 有两个原因:</p>\n<p>在构造函数之后马上执行复杂的初始化逻辑<br>在 <code>Angular</code> 设置完输入属性之后，对该组件进行准备。有经验的开发者会认同组件的构建应该很便宜和安全</p>\n<h3 id=\"ngDoCheck\"><a href=\"#ngDoCheck\" class=\"headerlink\" title=\"ngDoCheck()\"></a>ngDoCheck()</h3><p>检测，并在发生 Angular 无法或不愿意自己检测的变 化时作出反应。在每个 Angular 变更检测周期中调用， ngOnChanges() 和 ngOnInit()之后。</p>\n<h3 id=\"ngAfterContentInit\"><a href=\"#ngAfterContentInit\" class=\"headerlink\" title=\"ngAfterContentInit()\"></a>ngAfterContentInit()</h3><p>当把内容投影进组件之后调用。第一次 ngDoCheck() 之后调用，只调用一次</p>\n<h3 id=\"ngAfterContentChecked\"><a href=\"#ngAfterContentChecked\" class=\"headerlink\" title=\"ngAfterContentChecked()\"></a>ngAfterContentChecked()</h3><p>每次完成被投影组件内容的变更检测之后调用。 ngAfterContentInit() 和每次 ngDoCheck() 之后调</p>\n<h3 id=\"ngAfterViewInit-–掌握\"><a href=\"#ngAfterViewInit-–掌握\" class=\"headerlink\" title=\"ngAfterViewInit()–掌握\"></a>ngAfterViewInit()–掌握</h3><p>初始化完组件视图及其子视图之后调用。第一 次 ngAfterContentChecked() 之后调用，只调用一次。在这里可以操作DOM</p>\n<h3 id=\"ngAfterViewChecked\"><a href=\"#ngAfterViewChecked\" class=\"headerlink\" title=\"ngAfterViewChecked()\"></a>ngAfterViewChecked()</h3><p>每次做完组件视图和子视图的变更检测之后调用。 ngAfterViewInit()和每次 ngAfterContentChecked() 之后 调用。</p>\n<h3 id=\"ngOnDestroy-–掌握\"><a href=\"#ngOnDestroy-–掌握\" class=\"headerlink\" title=\"ngOnDestroy()–掌握\"></a>ngOnDestroy()–掌握</h3><p>当 Angular 每次销毁指令/组件之前调用并清扫。在这儿反订阅可观察对象和分离事件处理器，以防内存泄 漏。在 Angular 销毁指令/组件之前调用。比如：移除事件监听、清除定时器、退订 Observable 等。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"加载所有生命周期函数\"><a href=\"#加载所有生命周期函数\" class=\"headerlink\" title=\"加载所有生命周期函数\"></a>加载所有生命周期函数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecircleComponent</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;00构造函数执行了---除了使用简单的值对局部变量进行初始化之外，什么都不应该做&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ngOnChanges() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;01ngOnChages执行了---当被绑定的输入属性的值发生变化时调用(父子组件传值的时候会触发)&#x27;</span>); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ngOnInit() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;02ngOnInit执行了--- 请求数据一般放在这个里面&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ngDoCheck() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;03ngDoCheck执行了---检测，并在发生 Angular 无法或不愿意自己检测的变化时作出反应&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ngAfterContentInit() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;04ngAfterContentInit执行了---当把内容投影进组件之后调用&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ngAfterContentChecked() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;05ngAfterContentChecked执行了---每次完成被投影组件内容的变更检测之后调用&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ngAfterViewInit() : <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;06 ngAfterViewInit执行了----初始化完组件视图及其子视图之后调用（dom操作放在这个里面）&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ngAfterViewChecked() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;07ngAfterViewChecked执行了----每次做完组件视图和子视图的变更检测之后调用&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ngOnDestroy() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;08ngOnDestroy执行了····&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//自定义方法</span></span><br><span class=\"line\">    changeMsg() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.msg = <span class=\"string\">&quot;数据改变了&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"生命周期钩子详解\"><a href=\"#生命周期钩子详解\" class=\"headerlink\" title=\"生命周期钩子详解\"></a>生命周期钩子详解</h2><h3 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h3><p><code>constructor</code>，来初始化类。<code>Angular</code>中的组件就是基于<code>class</code>类实现的，在<code>Angular</code>中，<code>constructor</code>用于注入依赖。组件的构造函数会在所有的生命周期钩子之前被调用，它主要用于依赖注入或执行简单的数据初始化操作。</p>\n<h3 id=\"ngOnChanges\"><a href=\"#ngOnChanges\" class=\"headerlink\" title=\"ngOnChanges()\"></a>ngOnChanges()</h3><p><code>@input</code>属性(输入属性)发生变化时，会调用。非此属性，不会调用。<code>当输入属性为对象时，当对象的属性值发生变化时，不会调用，当对象的引用变化时会触发</code>。首次调用一 定会发生在 ngOnInit()之前。</p>\n<h3 id=\"ngOnInit\"><a href=\"#ngOnInit\" class=\"headerlink\" title=\"ngOnInit()\"></a>ngOnInit()</h3><p>在 <code>Angular</code> 第一次显示数据绑定和设置指令/组件的输入属性之后，初始化指令/组件。在第一轮 <code>ngOnChanges</code>() 完成之后调用，只调用一次。可以请求数据</p>\n<p>使用 <code>ngOnInit()</code> 有两个原因:</p>\n<p>在构造函数之后马上执行复杂的初始化逻辑<br>在 <code>Angular</code> 设置完输入属性之后，对该组件进行准备。有经验的开发者会认同组件的构建应该很便宜和安全</p>\n<h3 id=\"ngDoCheck\"><a href=\"#ngDoCheck\" class=\"headerlink\" title=\"ngDoCheck()\"></a>ngDoCheck()</h3><p>检测，并在发生 Angular 无法或不愿意自己检测的变 化时作出反应。在每个 Angular 变更检测周期中调用， ngOnChanges() 和 ngOnInit()之后。</p>\n<h3 id=\"ngAfterContentInit\"><a href=\"#ngAfterContentInit\" class=\"headerlink\" title=\"ngAfterContentInit()\"></a>ngAfterContentInit()</h3><p>当把内容投影进组件之后调用。第一次 ngDoCheck() 之后调用，只调用一次</p>\n<h3 id=\"ngAfterContentChecked\"><a href=\"#ngAfterContentChecked\" class=\"headerlink\" title=\"ngAfterContentChecked()\"></a>ngAfterContentChecked()</h3><p>每次完成被投影组件内容的变更检测之后调用。 ngAfterContentInit() 和每次 ngDoCheck() 之后调</p>\n<h3 id=\"ngAfterViewInit-–掌握\"><a href=\"#ngAfterViewInit-–掌握\" class=\"headerlink\" title=\"ngAfterViewInit()–掌握\"></a>ngAfterViewInit()–掌握</h3><p>初始化完组件视图及其子视图之后调用。第一 次 ngAfterContentChecked() 之后调用，只调用一次。在这里可以操作DOM</p>\n<h3 id=\"ngAfterViewChecked\"><a href=\"#ngAfterViewChecked\" class=\"headerlink\" title=\"ngAfterViewChecked()\"></a>ngAfterViewChecked()</h3><p>每次做完组件视图和子视图的变更检测之后调用。 ngAfterViewInit()和每次 ngAfterContentChecked() 之后 调用。</p>\n<h3 id=\"ngOnDestroy-–掌握\"><a href=\"#ngOnDestroy-–掌握\" class=\"headerlink\" title=\"ngOnDestroy()–掌握\"></a>ngOnDestroy()–掌握</h3><p>当 Angular 每次销毁指令/组件之前调用并清扫。在这儿反订阅可观察对象和分离事件处理器，以防内存泄 漏。在 Angular 销毁指令/组件之前调用。比如：移除事件监听、清除定时器、退订 Observable 等。</p>"},{"layout":"post","title":"nginx安装配置","excerpt":"nginx功能非常强大，可以转发http请求，很多用它来解决各种跨域问题","comments":1,"date":"2020-12-16T09:42:39.000Z","_content":"\n\n## 安装编译\n### 下载nginx安装包\n```\nwget http://nginx.org/download/nginx-1.8.0.tar.gz\n```\n### 解压\n```\ntar -zxvf nginx-1.8.0.tar.gz\n```\n### 安装依赖\n```\nyum install -y pcre pcre-devel openssl openssl-devel gcc gcc gcc-c++ ncurses-devel perl \n```\n### 编译前准备\n#将这句注释掉 取消Debug编译模式，在179行\n\n```\nvim auto/cc/gcc\n#CFLAGS=\"$CFLAGS -g\"\n```\n### 配置\n```\n$ cd nginx\n\n$ ./configure --prefix=/usr/local/nginx --user=www --group=www --with-http_stub_status_module --with-http_ssl_module\n```\n### 编译、安装\n```\n$ make\n$ make install\n```\n### 创建软连接\n```\nln -s /usr/local/nginx/sbin/nginx /usr/local/sbin/\n```\n\n## nginx配置\n### 简单配置\n```\nserver {\n    listen 3333;\n    server_name xx.xxx.xxx.xxx;\n    location / {\n        proxy_pass xxx.xxx.xx.xxx;\n    }\n    location ^~ /asd {              # 正则字符串\n        proxy_pass xxx.xxx.xx.xxx;\n    }\n}\n```\n### 目录解析\n> conf : 存放配置文件  \n> html: 网页文件  \n> logs：存放日志  \n> sbin：shell启动，停止脚本  \n\n### conf/nginx.config文件组成\n```\nmain                                # 全局配置\n\nevents {                            # nginx工作模式配置\n    ....\n}\n\nhttp {                                # http设置\n    ....\n\n    server {                        # 服务器主机配置\n        ....\n        location {                    # 路由配置\n            ....\n        }\n            upstream name {                    # 负载均衡配置\n        ....\n    }\n}\n```\n如上述配置文件所示，主要由6个部分组成：\n> main：用于进行nginx全局信息的配置  \n> events：用于nginx工作模式的配置  \n> http：用于进行http协议信息的一些配置  \n> server：用于进行服务器访问信息的配置  \n> location：用于进行访问路由的配置  \n> upstream：用于进行负载均衡的配置  \n\n### server模块\nsrever模块配置是http模块中的一个子模块，用来定义一个虚拟访问主机，也就是一个虚拟服务器的配置信息\n\n```\nserver {\n    listen        80;\n    server_name localhost    192.168.1.100;\n    root        /var/www/html;\n    index        index.php index.html index.html;\n    charset        utf-8;\n    access_log    logs/access.log;\n    error_log    logs/error.log;\n    ......\n}\n```\n核心配置信息如下：\n>server：一个虚拟主机的配置，一个http中可以配置多个server  \n>server_name：用力啊指定ip地址或者域名，多个配置之间用空格分隔  \n>root：表示整个server虚拟主机内的根目录，所有当前主机中web项目的根目录  \n>index：用户访问web网站时的全局首页  \n>charset：用于设置www/路径中配置的网页的默认编码格式  \n>access_log：用于指定该虚拟主机服务器中的访问记录日志存放路径  \n>error_log：用于指定该虚拟主机服务器中访问错误日志的存放路径  \n### location模块\n\n`location`模块是`nginx`配置中出现最多的一个配置，主要用于配置路由访问信息  \n在路由访问信息配置中关联到反向代理、负载均衡等等各项功能，所以`location`模块也是一个非常重要的配置模块  \n基本配置  \n```\nlocation / {\n    root    /nginx/www;\n    index    index.php index.html index.htm;\n}\n```\n\n\n\n## nginx启动\n### 启动\n```\n# 默认为nginx.conf\n$ ./nginx\n\n# 以其他的config来执行nginx，\n$ /usr/local/nginx/sbin/nginx -c conf/nginx.conf\n```\n### 刷新配置\n```\n$ ./nginx -s reload\n```\n### 重启配置\n```\n$ /usr/local/nginx/sbin/nginx -s reopen\n```\n### 停止\n```\n$ ./nginx -s stop\n$ ./nginx -s quit\n\n# 杀死nginx的进程\n$ kill -s 9 \n```\n## 参考\n[Nginx安装及配置详细教程\n](https://blog.51cto.com/13363488/2349546)","source":"_posts/2020-12-16-nginx-config.md","raw":"---\nlayout: post\ntitle: nginx安装配置\nexcerpt: 'nginx功能非常强大，可以转发http请求，很多用它来解决各种跨域问题'\ntags: [nginx]\ncomments: true\ndate: 2020-12-16 17:42:39\n---\n\n\n## 安装编译\n### 下载nginx安装包\n```\nwget http://nginx.org/download/nginx-1.8.0.tar.gz\n```\n### 解压\n```\ntar -zxvf nginx-1.8.0.tar.gz\n```\n### 安装依赖\n```\nyum install -y pcre pcre-devel openssl openssl-devel gcc gcc gcc-c++ ncurses-devel perl \n```\n### 编译前准备\n#将这句注释掉 取消Debug编译模式，在179行\n\n```\nvim auto/cc/gcc\n#CFLAGS=\"$CFLAGS -g\"\n```\n### 配置\n```\n$ cd nginx\n\n$ ./configure --prefix=/usr/local/nginx --user=www --group=www --with-http_stub_status_module --with-http_ssl_module\n```\n### 编译、安装\n```\n$ make\n$ make install\n```\n### 创建软连接\n```\nln -s /usr/local/nginx/sbin/nginx /usr/local/sbin/\n```\n\n## nginx配置\n### 简单配置\n```\nserver {\n    listen 3333;\n    server_name xx.xxx.xxx.xxx;\n    location / {\n        proxy_pass xxx.xxx.xx.xxx;\n    }\n    location ^~ /asd {              # 正则字符串\n        proxy_pass xxx.xxx.xx.xxx;\n    }\n}\n```\n### 目录解析\n> conf : 存放配置文件  \n> html: 网页文件  \n> logs：存放日志  \n> sbin：shell启动，停止脚本  \n\n### conf/nginx.config文件组成\n```\nmain                                # 全局配置\n\nevents {                            # nginx工作模式配置\n    ....\n}\n\nhttp {                                # http设置\n    ....\n\n    server {                        # 服务器主机配置\n        ....\n        location {                    # 路由配置\n            ....\n        }\n            upstream name {                    # 负载均衡配置\n        ....\n    }\n}\n```\n如上述配置文件所示，主要由6个部分组成：\n> main：用于进行nginx全局信息的配置  \n> events：用于nginx工作模式的配置  \n> http：用于进行http协议信息的一些配置  \n> server：用于进行服务器访问信息的配置  \n> location：用于进行访问路由的配置  \n> upstream：用于进行负载均衡的配置  \n\n### server模块\nsrever模块配置是http模块中的一个子模块，用来定义一个虚拟访问主机，也就是一个虚拟服务器的配置信息\n\n```\nserver {\n    listen        80;\n    server_name localhost    192.168.1.100;\n    root        /var/www/html;\n    index        index.php index.html index.html;\n    charset        utf-8;\n    access_log    logs/access.log;\n    error_log    logs/error.log;\n    ......\n}\n```\n核心配置信息如下：\n>server：一个虚拟主机的配置，一个http中可以配置多个server  \n>server_name：用力啊指定ip地址或者域名，多个配置之间用空格分隔  \n>root：表示整个server虚拟主机内的根目录，所有当前主机中web项目的根目录  \n>index：用户访问web网站时的全局首页  \n>charset：用于设置www/路径中配置的网页的默认编码格式  \n>access_log：用于指定该虚拟主机服务器中的访问记录日志存放路径  \n>error_log：用于指定该虚拟主机服务器中访问错误日志的存放路径  \n### location模块\n\n`location`模块是`nginx`配置中出现最多的一个配置，主要用于配置路由访问信息  \n在路由访问信息配置中关联到反向代理、负载均衡等等各项功能，所以`location`模块也是一个非常重要的配置模块  \n基本配置  \n```\nlocation / {\n    root    /nginx/www;\n    index    index.php index.html index.htm;\n}\n```\n\n\n\n## nginx启动\n### 启动\n```\n# 默认为nginx.conf\n$ ./nginx\n\n# 以其他的config来执行nginx，\n$ /usr/local/nginx/sbin/nginx -c conf/nginx.conf\n```\n### 刷新配置\n```\n$ ./nginx -s reload\n```\n### 重启配置\n```\n$ /usr/local/nginx/sbin/nginx -s reopen\n```\n### 停止\n```\n$ ./nginx -s stop\n$ ./nginx -s quit\n\n# 杀死nginx的进程\n$ kill -s 9 \n```\n## 参考\n[Nginx安装及配置详细教程\n](https://blog.51cto.com/13363488/2349546)","slug":"2020-12-16-nginx-config","published":1,"updated":"2020-12-29T06:37:54.999Z","photos":[],"link":"","_id":"ckoe9igx7003n8cpn31xscw8v","content":"<h2 id=\"安装编译\"><a href=\"#安装编译\" class=\"headerlink\" title=\"安装编译\"></a>安装编译</h2><h3 id=\"下载nginx安装包\"><a href=\"#下载nginx安装包\" class=\"headerlink\" title=\"下载nginx安装包\"></a>下载nginx安装包</h3><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget http:<span class=\"regexp\">//</span>nginx.org<span class=\"regexp\">/download/</span>nginx-<span class=\"number\">1.8</span>.<span class=\"number\">0</span>.tar.gz</span><br></pre></td></tr></table></figure>\n<h3 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h3><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">tar</span> <span class=\"selector-tag\">-zxvf</span> <span class=\"selector-tag\">nginx-1</span><span class=\"selector-class\">.8</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.gz</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight brainfuck\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">yum</span> <span class=\"comment\">install</span> <span class=\"literal\">-</span><span class=\"comment\">y</span> <span class=\"comment\">pcre</span> <span class=\"comment\">pcre</span><span class=\"literal\">-</span><span class=\"comment\">devel</span> <span class=\"comment\">openssl</span> <span class=\"comment\">openssl</span><span class=\"literal\">-</span><span class=\"comment\">devel</span> <span class=\"comment\">gcc</span> <span class=\"comment\">gcc</span> <span class=\"comment\">gcc</span><span class=\"literal\">-</span><span class=\"comment\">c</span>++ <span class=\"comment\">ncurses</span><span class=\"literal\">-</span><span class=\"comment\">devel</span> <span class=\"comment\">perl</span> </span><br></pre></td></tr></table></figure>\n<h3 id=\"编译前准备\"><a href=\"#编译前准备\" class=\"headerlink\" title=\"编译前准备\"></a>编译前准备</h3><p>#将这句注释掉 取消Debug编译模式，在179行</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim auto<span class=\"regexp\">/cc/g</span>cc</span><br><span class=\"line\"><span class=\"comment\">#CFLAGS=&quot;$CFLAGS -g&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><figure class=\"highlight jboss-cli\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">cd</span> nginx</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"string\">./configure</span> <span class=\"params\">--prefix=/usr/local/nginx</span> <span class=\"params\">--user=www</span> <span class=\"params\">--group=www</span> <span class=\"params\">--with-http_stub_status_module</span> <span class=\"params\">--with-http_ssl_module</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"编译、安装\"><a href=\"#编译、安装\" class=\"headerlink\" title=\"编译、安装\"></a>编译、安装</h3><figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>make</span><br><span class=\"line\"><span class=\"variable\">$ </span>make install</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建软连接\"><a href=\"#创建软连接\" class=\"headerlink\" title=\"创建软连接\"></a>创建软连接</h3><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">ln -s <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin<span class=\"regexp\">/nginx /u</span>sr<span class=\"regexp\">/local/</span>sbin/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h2><h3 id=\"简单配置\"><a href=\"#简单配置\" class=\"headerlink\" title=\"简单配置\"></a>简单配置</h3><figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">3333</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> xx.xxx.xxx.xxx;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> xxx.xxx.xx.xxx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attribute\">location</span><span class=\"regexp\"> ^~</span> /asd &#123;              <span class=\"comment\"># 正则字符串</span></span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> xxx.xxx.xx.xxx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"目录解析\"><a href=\"#目录解析\" class=\"headerlink\" title=\"目录解析\"></a>目录解析</h3><blockquote>\n<p>conf : 存放配置文件<br>html: 网页文件<br>logs：存放日志<br>sbin：shell启动，停止脚本  </p>\n</blockquote>\n<h3 id=\"conf-nginx-config文件组成\"><a href=\"#conf-nginx-config文件组成\" class=\"headerlink\" title=\"conf/nginx.config文件组成\"></a>conf/nginx.config文件组成</h3><figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">main                                # 全局配置</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;                            # nginx工作模式配置</span><br><span class=\"line\">    <span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;                                # http设置</span><br><span class=\"line\">    <span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\"> server </span>&#123;                        # 服务器主机配置</span><br><span class=\"line\">        <span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\">        location &#123;                    # 路由配置</span><br><span class=\"line\">            <span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">            upstream name &#123;                    # 负载均衡配置</span><br><span class=\"line\">        <span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如上述配置文件所示，主要由6个部分组成：</p>\n<blockquote>\n<p>main：用于进行nginx全局信息的配置<br>events：用于nginx工作模式的配置<br>http：用于进行http协议信息的一些配置<br>server：用于进行服务器访问信息的配置<br>location：用于进行访问路由的配置<br>upstream：用于进行负载均衡的配置  </p>\n</blockquote>\n<h3 id=\"server模块\"><a href=\"#server模块\" class=\"headerlink\" title=\"server模块\"></a>server模块</h3><p>srever模块配置是http模块中的一个子模块，用来定义一个虚拟访问主机，也就是一个虚拟服务器的配置信息</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">listen</span>        <span class=\"string\">80;</span></span><br><span class=\"line\">    <span class=\"attr\">server_name</span> <span class=\"string\">localhost    192.168.1.100;</span></span><br><span class=\"line\">    <span class=\"attr\">root</span>        <span class=\"string\">/var/www/html;</span></span><br><span class=\"line\">    <span class=\"attr\">index</span>        <span class=\"string\">index.php index.html index.html;</span></span><br><span class=\"line\">    <span class=\"attr\">charset</span>        <span class=\"string\">utf-8;</span></span><br><span class=\"line\">    <span class=\"attr\">access_log</span>    <span class=\"string\">logs/access.log;</span></span><br><span class=\"line\">    <span class=\"attr\">error_log</span>    <span class=\"string\">logs/error.log;</span></span><br><span class=\"line\">    <span class=\"attr\">......</span></span><br><span class=\"line\"><span class=\"attr\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>核心配置信息如下：</p>\n<blockquote>\n<p>server：一个虚拟主机的配置，一个http中可以配置多个server<br>server_name：用力啊指定ip地址或者域名，多个配置之间用空格分隔<br>root：表示整个server虚拟主机内的根目录，所有当前主机中web项目的根目录<br>index：用户访问web网站时的全局首页<br>charset：用于设置www/路径中配置的网页的默认编码格式<br>access_log：用于指定该虚拟主机服务器中的访问记录日志存放路径<br>error_log：用于指定该虚拟主机服务器中访问错误日志的存放路径  </p>\n</blockquote>\n<h3 id=\"location模块\"><a href=\"#location模块\" class=\"headerlink\" title=\"location模块\"></a>location模块</h3><p><code>location</code>模块是<code>nginx</code>配置中出现最多的一个配置，主要用于配置路由访问信息<br>在路由访问信息配置中关联到反向代理、负载均衡等等各项功能，所以<code>location</code>模块也是一个非常重要的配置模块<br>基本配置  </p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">location</span> / &#123;</span><br><span class=\"line\">    root    /nginx/www;</span><br><span class=\"line\">    <span class=\"keyword\">index</span>    <span class=\"keyword\">index</span>.php <span class=\"keyword\">index</span>.html <span class=\"keyword\">index</span>.htm;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"nginx启动\"><a href=\"#nginx启动\" class=\"headerlink\" title=\"nginx启动\"></a>nginx启动</h2><h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认为nginx.conf</span></span><br><span class=\"line\">$ ./nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以其他的config来执行nginx，</span></span><br><span class=\"line\">$ <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin<span class=\"regexp\">/nginx -c conf/</span>nginx.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"刷新配置\"><a href=\"#刷新配置\" class=\"headerlink\" title=\"刷新配置\"></a>刷新配置</h3><figure class=\"highlight jboss-cli\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"string\">./nginx</span> -s <span class=\"keyword\">reload</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"重启配置\"><a href=\"#重启配置\" class=\"headerlink\" title=\"重启配置\"></a>重启配置</h3><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin/nginx -s reopen</span><br></pre></td></tr></table></figure>\n<h3 id=\"停止\"><a href=\"#停止\" class=\"headerlink\" title=\"停止\"></a>停止</h3><figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$</span> ./nginx <span class=\"literal\">-s</span> stop</span><br><span class=\"line\"><span class=\"variable\">$</span> ./nginx <span class=\"literal\">-s</span> quit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 杀死nginx的进程</span></span><br><span class=\"line\"><span class=\"variable\">$</span> <span class=\"built_in\">kill</span> <span class=\"literal\">-s</span> <span class=\"number\">9</span> </span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://blog.51cto.com/13363488/2349546\">Nginx安装及配置详细教程\n</a></p>\n","site":{"data":{}},"more":"<h2 id=\"安装编译\"><a href=\"#安装编译\" class=\"headerlink\" title=\"安装编译\"></a>安装编译</h2><h3 id=\"下载nginx安装包\"><a href=\"#下载nginx安装包\" class=\"headerlink\" title=\"下载nginx安装包\"></a>下载nginx安装包</h3><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget http:<span class=\"regexp\">//</span>nginx.org<span class=\"regexp\">/download/</span>nginx-<span class=\"number\">1.8</span>.<span class=\"number\">0</span>.tar.gz</span><br></pre></td></tr></table></figure>\n<h3 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h3><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">tar</span> <span class=\"selector-tag\">-zxvf</span> <span class=\"selector-tag\">nginx-1</span><span class=\"selector-class\">.8</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.gz</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight brainfuck\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">yum</span> <span class=\"comment\">install</span> <span class=\"literal\">-</span><span class=\"comment\">y</span> <span class=\"comment\">pcre</span> <span class=\"comment\">pcre</span><span class=\"literal\">-</span><span class=\"comment\">devel</span> <span class=\"comment\">openssl</span> <span class=\"comment\">openssl</span><span class=\"literal\">-</span><span class=\"comment\">devel</span> <span class=\"comment\">gcc</span> <span class=\"comment\">gcc</span> <span class=\"comment\">gcc</span><span class=\"literal\">-</span><span class=\"comment\">c</span>++ <span class=\"comment\">ncurses</span><span class=\"literal\">-</span><span class=\"comment\">devel</span> <span class=\"comment\">perl</span> </span><br></pre></td></tr></table></figure>\n<h3 id=\"编译前准备\"><a href=\"#编译前准备\" class=\"headerlink\" title=\"编译前准备\"></a>编译前准备</h3><p>#将这句注释掉 取消Debug编译模式，在179行</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim auto<span class=\"regexp\">/cc/g</span>cc</span><br><span class=\"line\"><span class=\"comment\">#CFLAGS=&quot;$CFLAGS -g&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><figure class=\"highlight jboss-cli\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">cd</span> nginx</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"string\">./configure</span> <span class=\"params\">--prefix=/usr/local/nginx</span> <span class=\"params\">--user=www</span> <span class=\"params\">--group=www</span> <span class=\"params\">--with-http_stub_status_module</span> <span class=\"params\">--with-http_ssl_module</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"编译、安装\"><a href=\"#编译、安装\" class=\"headerlink\" title=\"编译、安装\"></a>编译、安装</h3><figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>make</span><br><span class=\"line\"><span class=\"variable\">$ </span>make install</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建软连接\"><a href=\"#创建软连接\" class=\"headerlink\" title=\"创建软连接\"></a>创建软连接</h3><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">ln -s <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin<span class=\"regexp\">/nginx /u</span>sr<span class=\"regexp\">/local/</span>sbin/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h2><h3 id=\"简单配置\"><a href=\"#简单配置\" class=\"headerlink\" title=\"简单配置\"></a>简单配置</h3><figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">3333</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> xx.xxx.xxx.xxx;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> xxx.xxx.xx.xxx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attribute\">location</span><span class=\"regexp\"> ^~</span> /asd &#123;              <span class=\"comment\"># 正则字符串</span></span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> xxx.xxx.xx.xxx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"目录解析\"><a href=\"#目录解析\" class=\"headerlink\" title=\"目录解析\"></a>目录解析</h3><blockquote>\n<p>conf : 存放配置文件<br>html: 网页文件<br>logs：存放日志<br>sbin：shell启动，停止脚本  </p>\n</blockquote>\n<h3 id=\"conf-nginx-config文件组成\"><a href=\"#conf-nginx-config文件组成\" class=\"headerlink\" title=\"conf/nginx.config文件组成\"></a>conf/nginx.config文件组成</h3><figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">main                                # 全局配置</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;                            # nginx工作模式配置</span><br><span class=\"line\">    <span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;                                # http设置</span><br><span class=\"line\">    <span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\"> server </span>&#123;                        # 服务器主机配置</span><br><span class=\"line\">        <span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\">        location &#123;                    # 路由配置</span><br><span class=\"line\">            <span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">            upstream name &#123;                    # 负载均衡配置</span><br><span class=\"line\">        <span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如上述配置文件所示，主要由6个部分组成：</p>\n<blockquote>\n<p>main：用于进行nginx全局信息的配置<br>events：用于nginx工作模式的配置<br>http：用于进行http协议信息的一些配置<br>server：用于进行服务器访问信息的配置<br>location：用于进行访问路由的配置<br>upstream：用于进行负载均衡的配置  </p>\n</blockquote>\n<h3 id=\"server模块\"><a href=\"#server模块\" class=\"headerlink\" title=\"server模块\"></a>server模块</h3><p>srever模块配置是http模块中的一个子模块，用来定义一个虚拟访问主机，也就是一个虚拟服务器的配置信息</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">listen</span>        <span class=\"string\">80;</span></span><br><span class=\"line\">    <span class=\"attr\">server_name</span> <span class=\"string\">localhost    192.168.1.100;</span></span><br><span class=\"line\">    <span class=\"attr\">root</span>        <span class=\"string\">/var/www/html;</span></span><br><span class=\"line\">    <span class=\"attr\">index</span>        <span class=\"string\">index.php index.html index.html;</span></span><br><span class=\"line\">    <span class=\"attr\">charset</span>        <span class=\"string\">utf-8;</span></span><br><span class=\"line\">    <span class=\"attr\">access_log</span>    <span class=\"string\">logs/access.log;</span></span><br><span class=\"line\">    <span class=\"attr\">error_log</span>    <span class=\"string\">logs/error.log;</span></span><br><span class=\"line\">    <span class=\"attr\">......</span></span><br><span class=\"line\"><span class=\"attr\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>核心配置信息如下：</p>\n<blockquote>\n<p>server：一个虚拟主机的配置，一个http中可以配置多个server<br>server_name：用力啊指定ip地址或者域名，多个配置之间用空格分隔<br>root：表示整个server虚拟主机内的根目录，所有当前主机中web项目的根目录<br>index：用户访问web网站时的全局首页<br>charset：用于设置www/路径中配置的网页的默认编码格式<br>access_log：用于指定该虚拟主机服务器中的访问记录日志存放路径<br>error_log：用于指定该虚拟主机服务器中访问错误日志的存放路径  </p>\n</blockquote>\n<h3 id=\"location模块\"><a href=\"#location模块\" class=\"headerlink\" title=\"location模块\"></a>location模块</h3><p><code>location</code>模块是<code>nginx</code>配置中出现最多的一个配置，主要用于配置路由访问信息<br>在路由访问信息配置中关联到反向代理、负载均衡等等各项功能，所以<code>location</code>模块也是一个非常重要的配置模块<br>基本配置  </p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">location</span> / &#123;</span><br><span class=\"line\">    root    /nginx/www;</span><br><span class=\"line\">    <span class=\"keyword\">index</span>    <span class=\"keyword\">index</span>.php <span class=\"keyword\">index</span>.html <span class=\"keyword\">index</span>.htm;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"nginx启动\"><a href=\"#nginx启动\" class=\"headerlink\" title=\"nginx启动\"></a>nginx启动</h2><h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认为nginx.conf</span></span><br><span class=\"line\">$ ./nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以其他的config来执行nginx，</span></span><br><span class=\"line\">$ <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin<span class=\"regexp\">/nginx -c conf/</span>nginx.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"刷新配置\"><a href=\"#刷新配置\" class=\"headerlink\" title=\"刷新配置\"></a>刷新配置</h3><figure class=\"highlight jboss-cli\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"string\">./nginx</span> -s <span class=\"keyword\">reload</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"重启配置\"><a href=\"#重启配置\" class=\"headerlink\" title=\"重启配置\"></a>重启配置</h3><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin/nginx -s reopen</span><br></pre></td></tr></table></figure>\n<h3 id=\"停止\"><a href=\"#停止\" class=\"headerlink\" title=\"停止\"></a>停止</h3><figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$</span> ./nginx <span class=\"literal\">-s</span> stop</span><br><span class=\"line\"><span class=\"variable\">$</span> ./nginx <span class=\"literal\">-s</span> quit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 杀死nginx的进程</span></span><br><span class=\"line\"><span class=\"variable\">$</span> <span class=\"built_in\">kill</span> <span class=\"literal\">-s</span> <span class=\"number\">9</span> </span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://blog.51cto.com/13363488/2349546\">Nginx安装及配置详细教程\n</a></p>\n"},{"layout":"post","title":"linux终端快捷键","comments":1,"date":"2021-02-10T06:01:24.000Z","_content":"\nlinux终端下有很多快捷键，这些快捷键能大大提高我们的效率，例如：  \nctrl+shift+c是复制命令，ctrl+shift+v是粘贴\n\n<!-- more -->\n\n我想提一下一些快捷键可能依赖于你使用的 Shell。 Bash 是最受欢迎的 shell，所以列出的快捷键集中在 Bash。 如果你愿意，你也可以称其为 Bash 快捷键列表。\n\n注意我在键盘快捷键中使用了大写字母，但这并不意味着你在使用快捷键时必须按下 shift 键。\n\n## 常用\n### Tab\n这是你不能没有的 Linux 快捷键。它将节省你 Linux 命令行中的大量时间。  \n只需要输入一个命令，文件名，目录名甚至是命令选项的开头，并敲击 tab 键。它将自动完成你输入的内容，或为你显示全部可能的结果。  \n如果你只记一个快捷键，这将是必选的一个。  \n\n### Ctrl + C\n这些是为了在终端上中断命令或进程该按的键。它将立刻终止运行的程序。  \n如果你想要停止使用一个正在后台运行的程序，只需按下这对组合键。\n\n### Ctrl + Z\n该快捷键将正在运行的程序送到后台。 通常，你可以在使用 & 选项运行程序前之完成该操作， 但是如果你忘记使用选项运行程序，就使用这对组合键。\n\n### Ctrl + D\n这对键盘快捷键将使你退出当前终端。如果你使用 SSH 连接，它将会关闭。 如果你直接使用一个终端，该应用将会立刻关闭。  \n把它当成\"退出\"命令。\n\n### Ctrl + L\n你怎么清空你的终端屏幕？我猜是用 clear 命令。  \n你可以使用 Ctrl+L 清空终端，代替输入 C-L-E-A-R。得心应手，不是吗？\n\n### Ctrl + A\n\n该快捷键将移动光标到所在行首。  \n假设你在终端输入了一个很长的命令或路径，并且你想要回到它的开头， 使用方向键移动光标将花费大量时间。注意你无法使用鼠标移动光标到行首。  \n这是 Ctrl+A 节省时间的地方。\n\n### Ctrl + E\n这对快捷键与 Ctrl+A 相反。 Ctrl+A 送光标到行首，反之 Ctrl+E 移动光标到行尾。\n\n### Ctrl + U\n输入了错误的命令？ 代替用退格键来丢弃当前命令，使用 Linux 终端中的 Ctrl+U 快捷键。 该快捷键会擦除从当前光标位置到行首的全部内容。\n\n### Ctrl + K\n这对和 Ctrl+U 快捷键有点像。 唯一的不同在于不是行首，它擦除的是从当前光标位置到行尾的全部内容。\n\n### Ctrl + W\n你刚才了解了擦除到行首和行尾的文本。 但如果你只需要删除一个单词呢？使用 Ctrl+W 快捷键。  \n使用 Ctrl+W 快捷键，你可以擦除光标位置前的单词。 如果光标在一个单词本身上，它将擦除从光标位置到词首的全部字母。  \n最好的方法是用它移动光标到要删除单词后的一个空格上， 然后使用 Ctrl+W 键盘快捷键。  \n\n### Ctrl + Y\n这将粘贴使用 Ctrl+W，Ctrl+U 和 Ctrl+K 快捷键擦除的文本。 如果你删除了错误的文本或需要在某处使用已擦除的文本，这将派上用场。\n\n### Ctrl + P\n你可以使用该快捷键来查看上一个命令。 你可以反复按该键来返回到历史命令。 在很多终端里，使用 PgUp 键来实现相同的功能。\n\n### Ctrl + N\n你可以结合 Ctrl+P 使用该快捷键。Ctrl+N 显示下一个命令。 如果使用 Ctrl+P 查看上一条命令，你可以使用 Ctrl+N 来回导航。 许多终端都把此快捷键映射到 PgDn 键。\n\n### Ctrl + R\n你可以使用该快捷键来搜索历史命令。\n\n### Ctrl+左右键\n\n在单词之间跳转\n\n## 其他\nAlt – d ：由光标位置开始，往右删除单词。往行尾删\n\n说明\n\nCtrl – k: 先按住 Ctrl 键，然后再按 k 键；\n\nAlt – k: 先按住 Alt 键，然后再按 k 键；\n\nM – k：先单击 Esc 键，然后再按 k 键。\n\n移动光标\n\nCtrl – a ：移到行首\n\nCtrl – e ：移到行尾\n\nCtrl – b ：往回(左)移动一个字符\n\nCtrl – f ：往后(右)移动一个字符\n\nAlt – b ：往回(左)移动一个单词\n\nAlt – f ：往后(右)移动一个单词\n\nCtrl – xx ：在命令行尾和光标之间移动\n\nM-b ：往回(左)移动一个单词\n\nM-f ：往后(右)移动一个单词\n\n编辑命令\n\nCtrl – h ：删除光标左方位置的字符\n\nCtrl – d ：删除光标右方位置的字符（注意：当前命令行没有任何字符时，会销系统或结束终端）\n\nCtrl – w ：由光标位置开始，往左删除单词。往行首删\n\nAlt – d ：由光标位置开始，往右删除单词。往行尾删\n\nM – d ：由光标位置开始，删除单词，直到该单词结束。\n\nCtrl – k ：由光标所在位置开始，删除右方所有的字符，直到该行结束。\n\nCtrl – u ：由光标所在位置开始，删除左方所有的字符，直到该行开始。\n\nCtrl – y ：粘贴之前删除的内容到光标后。\n\nctrl – t ：交换光标处和之前两个字符的位置。\n\nAlt + . ：使用上一条命令的最后一个参数。\n\nCtrl – _ ：回复之前的状态。撤销操作。\n\nCtrl -a + Ctrl -k 或 Ctrl -e + Ctrl -u 或 Ctrl -k + Ctrl -u 组合可删除整行。\n\nBang(!)命令\n\n!! ：执行上一条命令。\n\n^foo^bar ：把上一条命令里的foo替换为bar，并执行。\n\n!wget ：执行最近的以wget开头的命令。\n\n!wget:p ：仅打印最近的以wget开头的命令，不执行。\n\n!$ ：上一条命令的最后一个参数， 与 Alt - . 和 $_ 相同。\n\n!* ：上一条命令的所有参数\n\n!*:p ：打印上一条命令是所有参数，也即 !*的内容。\n\n^abc ：删除上一条命令中的abc。\n\n^foo^bar ：将上一条命令中的 foo 替换为 bar\n\n^foo^bar^ ：将上一条命令中的 foo 替换为 bar\n\n!-n ：执行前n条命令，执行上一条命令： !-1， 执行前5条命令的格式是： !-5\n\n查找历史命令\n\nCtrl – p ：显示当前命令的上一条历史命令\n\nCtrl – n ：显示当前命令的下一条历史命令\n\nCtrl – r ：搜索历史命令，随着输入会显示历史命令中的一条匹配命令，Enter键执行匹配命令；ESC键在命令行显示而不执行匹配命令。\n\nCtrl – g ：从历史搜索模式（Ctrl – r）退出。\n\n控制命令\n\nCtrl – l ：清除屏幕，然后，在最上面重新显示目前光标所在的这一行的内容。\n\nCtrl – o ：执行当前命令，并选择上一条命令。\n\nCtrl – s ：阻止屏幕输出\n\nCtrl – q ：允许屏幕输出\n\nCtrl – c ：终止命令\n\nCtrl – z ：挂起命令\n\n重复执行操作动作\n\nM – 操作次数 操作动作 ： 指定操作次数，重复执行指定的操作。\n\n总结：\n\n在 Linux 下使用命令操作的时候，光标的移动令人头痛。命令输入完了，执行之后发现缺少权限，然后不得不移动光标到行首，而命令又极长……以上是一些每个 Linux 用户必须使用的键盘快捷键。使用命令行时，这些 Linux 快捷键将提升你的工作效率和效率。\n\n## 参考\n[Linux 用户必知：一分钟掌握14个常用Linux命令行快捷键](http://blog.itpub.net/31407649/viewspace-2217964/)","source":"_posts/2021-02-10-linux-terminal-keyboard-shortcut.md","raw":"---\nlayout: post\ntitle: linux终端快捷键\ntags: [linux]\ncomments: true\ndate: 2021-02-10 14:01:24\n---\n\nlinux终端下有很多快捷键，这些快捷键能大大提高我们的效率，例如：  \nctrl+shift+c是复制命令，ctrl+shift+v是粘贴\n\n<!-- more -->\n\n我想提一下一些快捷键可能依赖于你使用的 Shell。 Bash 是最受欢迎的 shell，所以列出的快捷键集中在 Bash。 如果你愿意，你也可以称其为 Bash 快捷键列表。\n\n注意我在键盘快捷键中使用了大写字母，但这并不意味着你在使用快捷键时必须按下 shift 键。\n\n## 常用\n### Tab\n这是你不能没有的 Linux 快捷键。它将节省你 Linux 命令行中的大量时间。  \n只需要输入一个命令，文件名，目录名甚至是命令选项的开头，并敲击 tab 键。它将自动完成你输入的内容，或为你显示全部可能的结果。  \n如果你只记一个快捷键，这将是必选的一个。  \n\n### Ctrl + C\n这些是为了在终端上中断命令或进程该按的键。它将立刻终止运行的程序。  \n如果你想要停止使用一个正在后台运行的程序，只需按下这对组合键。\n\n### Ctrl + Z\n该快捷键将正在运行的程序送到后台。 通常，你可以在使用 & 选项运行程序前之完成该操作， 但是如果你忘记使用选项运行程序，就使用这对组合键。\n\n### Ctrl + D\n这对键盘快捷键将使你退出当前终端。如果你使用 SSH 连接，它将会关闭。 如果你直接使用一个终端，该应用将会立刻关闭。  \n把它当成\"退出\"命令。\n\n### Ctrl + L\n你怎么清空你的终端屏幕？我猜是用 clear 命令。  \n你可以使用 Ctrl+L 清空终端，代替输入 C-L-E-A-R。得心应手，不是吗？\n\n### Ctrl + A\n\n该快捷键将移动光标到所在行首。  \n假设你在终端输入了一个很长的命令或路径，并且你想要回到它的开头， 使用方向键移动光标将花费大量时间。注意你无法使用鼠标移动光标到行首。  \n这是 Ctrl+A 节省时间的地方。\n\n### Ctrl + E\n这对快捷键与 Ctrl+A 相反。 Ctrl+A 送光标到行首，反之 Ctrl+E 移动光标到行尾。\n\n### Ctrl + U\n输入了错误的命令？ 代替用退格键来丢弃当前命令，使用 Linux 终端中的 Ctrl+U 快捷键。 该快捷键会擦除从当前光标位置到行首的全部内容。\n\n### Ctrl + K\n这对和 Ctrl+U 快捷键有点像。 唯一的不同在于不是行首，它擦除的是从当前光标位置到行尾的全部内容。\n\n### Ctrl + W\n你刚才了解了擦除到行首和行尾的文本。 但如果你只需要删除一个单词呢？使用 Ctrl+W 快捷键。  \n使用 Ctrl+W 快捷键，你可以擦除光标位置前的单词。 如果光标在一个单词本身上，它将擦除从光标位置到词首的全部字母。  \n最好的方法是用它移动光标到要删除单词后的一个空格上， 然后使用 Ctrl+W 键盘快捷键。  \n\n### Ctrl + Y\n这将粘贴使用 Ctrl+W，Ctrl+U 和 Ctrl+K 快捷键擦除的文本。 如果你删除了错误的文本或需要在某处使用已擦除的文本，这将派上用场。\n\n### Ctrl + P\n你可以使用该快捷键来查看上一个命令。 你可以反复按该键来返回到历史命令。 在很多终端里，使用 PgUp 键来实现相同的功能。\n\n### Ctrl + N\n你可以结合 Ctrl+P 使用该快捷键。Ctrl+N 显示下一个命令。 如果使用 Ctrl+P 查看上一条命令，你可以使用 Ctrl+N 来回导航。 许多终端都把此快捷键映射到 PgDn 键。\n\n### Ctrl + R\n你可以使用该快捷键来搜索历史命令。\n\n### Ctrl+左右键\n\n在单词之间跳转\n\n## 其他\nAlt – d ：由光标位置开始，往右删除单词。往行尾删\n\n说明\n\nCtrl – k: 先按住 Ctrl 键，然后再按 k 键；\n\nAlt – k: 先按住 Alt 键，然后再按 k 键；\n\nM – k：先单击 Esc 键，然后再按 k 键。\n\n移动光标\n\nCtrl – a ：移到行首\n\nCtrl – e ：移到行尾\n\nCtrl – b ：往回(左)移动一个字符\n\nCtrl – f ：往后(右)移动一个字符\n\nAlt – b ：往回(左)移动一个单词\n\nAlt – f ：往后(右)移动一个单词\n\nCtrl – xx ：在命令行尾和光标之间移动\n\nM-b ：往回(左)移动一个单词\n\nM-f ：往后(右)移动一个单词\n\n编辑命令\n\nCtrl – h ：删除光标左方位置的字符\n\nCtrl – d ：删除光标右方位置的字符（注意：当前命令行没有任何字符时，会销系统或结束终端）\n\nCtrl – w ：由光标位置开始，往左删除单词。往行首删\n\nAlt – d ：由光标位置开始，往右删除单词。往行尾删\n\nM – d ：由光标位置开始，删除单词，直到该单词结束。\n\nCtrl – k ：由光标所在位置开始，删除右方所有的字符，直到该行结束。\n\nCtrl – u ：由光标所在位置开始，删除左方所有的字符，直到该行开始。\n\nCtrl – y ：粘贴之前删除的内容到光标后。\n\nctrl – t ：交换光标处和之前两个字符的位置。\n\nAlt + . ：使用上一条命令的最后一个参数。\n\nCtrl – _ ：回复之前的状态。撤销操作。\n\nCtrl -a + Ctrl -k 或 Ctrl -e + Ctrl -u 或 Ctrl -k + Ctrl -u 组合可删除整行。\n\nBang(!)命令\n\n!! ：执行上一条命令。\n\n^foo^bar ：把上一条命令里的foo替换为bar，并执行。\n\n!wget ：执行最近的以wget开头的命令。\n\n!wget:p ：仅打印最近的以wget开头的命令，不执行。\n\n!$ ：上一条命令的最后一个参数， 与 Alt - . 和 $_ 相同。\n\n!* ：上一条命令的所有参数\n\n!*:p ：打印上一条命令是所有参数，也即 !*的内容。\n\n^abc ：删除上一条命令中的abc。\n\n^foo^bar ：将上一条命令中的 foo 替换为 bar\n\n^foo^bar^ ：将上一条命令中的 foo 替换为 bar\n\n!-n ：执行前n条命令，执行上一条命令： !-1， 执行前5条命令的格式是： !-5\n\n查找历史命令\n\nCtrl – p ：显示当前命令的上一条历史命令\n\nCtrl – n ：显示当前命令的下一条历史命令\n\nCtrl – r ：搜索历史命令，随着输入会显示历史命令中的一条匹配命令，Enter键执行匹配命令；ESC键在命令行显示而不执行匹配命令。\n\nCtrl – g ：从历史搜索模式（Ctrl – r）退出。\n\n控制命令\n\nCtrl – l ：清除屏幕，然后，在最上面重新显示目前光标所在的这一行的内容。\n\nCtrl – o ：执行当前命令，并选择上一条命令。\n\nCtrl – s ：阻止屏幕输出\n\nCtrl – q ：允许屏幕输出\n\nCtrl – c ：终止命令\n\nCtrl – z ：挂起命令\n\n重复执行操作动作\n\nM – 操作次数 操作动作 ： 指定操作次数，重复执行指定的操作。\n\n总结：\n\n在 Linux 下使用命令操作的时候，光标的移动令人头痛。命令输入完了，执行之后发现缺少权限，然后不得不移动光标到行首，而命令又极长……以上是一些每个 Linux 用户必须使用的键盘快捷键。使用命令行时，这些 Linux 快捷键将提升你的工作效率和效率。\n\n## 参考\n[Linux 用户必知：一分钟掌握14个常用Linux命令行快捷键](http://blog.itpub.net/31407649/viewspace-2217964/)","slug":"2021-02-10-linux-terminal-keyboard-shortcut","published":1,"updated":"2021-03-02T02:13:04.646Z","photos":[],"link":"","_id":"ckoe9igx8003p8cpnc0oxcoel","content":"<p>linux终端下有很多快捷键，这些快捷键能大大提高我们的效率，例如：<br>ctrl+shift+c是复制命令，ctrl+shift+v是粘贴</p>\n<a id=\"more\"></a>\n\n<p>我想提一下一些快捷键可能依赖于你使用的 Shell。 Bash 是最受欢迎的 shell，所以列出的快捷键集中在 Bash。 如果你愿意，你也可以称其为 Bash 快捷键列表。</p>\n<p>注意我在键盘快捷键中使用了大写字母，但这并不意味着你在使用快捷键时必须按下 shift 键。</p>\n<h2 id=\"常用\"><a href=\"#常用\" class=\"headerlink\" title=\"常用\"></a>常用</h2><h3 id=\"Tab\"><a href=\"#Tab\" class=\"headerlink\" title=\"Tab\"></a>Tab</h3><p>这是你不能没有的 Linux 快捷键。它将节省你 Linux 命令行中的大量时间。<br>只需要输入一个命令，文件名，目录名甚至是命令选项的开头，并敲击 tab 键。它将自动完成你输入的内容，或为你显示全部可能的结果。<br>如果你只记一个快捷键，这将是必选的一个。  </p>\n<h3 id=\"Ctrl-C\"><a href=\"#Ctrl-C\" class=\"headerlink\" title=\"Ctrl + C\"></a>Ctrl + C</h3><p>这些是为了在终端上中断命令或进程该按的键。它将立刻终止运行的程序。<br>如果你想要停止使用一个正在后台运行的程序，只需按下这对组合键。</p>\n<h3 id=\"Ctrl-Z\"><a href=\"#Ctrl-Z\" class=\"headerlink\" title=\"Ctrl + Z\"></a>Ctrl + Z</h3><p>该快捷键将正在运行的程序送到后台。 通常，你可以在使用 &amp; 选项运行程序前之完成该操作， 但是如果你忘记使用选项运行程序，就使用这对组合键。</p>\n<h3 id=\"Ctrl-D\"><a href=\"#Ctrl-D\" class=\"headerlink\" title=\"Ctrl + D\"></a>Ctrl + D</h3><p>这对键盘快捷键将使你退出当前终端。如果你使用 SSH 连接，它将会关闭。 如果你直接使用一个终端，该应用将会立刻关闭。<br>把它当成”退出”命令。</p>\n<h3 id=\"Ctrl-L\"><a href=\"#Ctrl-L\" class=\"headerlink\" title=\"Ctrl + L\"></a>Ctrl + L</h3><p>你怎么清空你的终端屏幕？我猜是用 clear 命令。<br>你可以使用 Ctrl+L 清空终端，代替输入 C-L-E-A-R。得心应手，不是吗？</p>\n<h3 id=\"Ctrl-A\"><a href=\"#Ctrl-A\" class=\"headerlink\" title=\"Ctrl + A\"></a>Ctrl + A</h3><p>该快捷键将移动光标到所在行首。<br>假设你在终端输入了一个很长的命令或路径，并且你想要回到它的开头， 使用方向键移动光标将花费大量时间。注意你无法使用鼠标移动光标到行首。<br>这是 Ctrl+A 节省时间的地方。</p>\n<h3 id=\"Ctrl-E\"><a href=\"#Ctrl-E\" class=\"headerlink\" title=\"Ctrl + E\"></a>Ctrl + E</h3><p>这对快捷键与 Ctrl+A 相反。 Ctrl+A 送光标到行首，反之 Ctrl+E 移动光标到行尾。</p>\n<h3 id=\"Ctrl-U\"><a href=\"#Ctrl-U\" class=\"headerlink\" title=\"Ctrl + U\"></a>Ctrl + U</h3><p>输入了错误的命令？ 代替用退格键来丢弃当前命令，使用 Linux 终端中的 Ctrl+U 快捷键。 该快捷键会擦除从当前光标位置到行首的全部内容。</p>\n<h3 id=\"Ctrl-K\"><a href=\"#Ctrl-K\" class=\"headerlink\" title=\"Ctrl + K\"></a>Ctrl + K</h3><p>这对和 Ctrl+U 快捷键有点像。 唯一的不同在于不是行首，它擦除的是从当前光标位置到行尾的全部内容。</p>\n<h3 id=\"Ctrl-W\"><a href=\"#Ctrl-W\" class=\"headerlink\" title=\"Ctrl + W\"></a>Ctrl + W</h3><p>你刚才了解了擦除到行首和行尾的文本。 但如果你只需要删除一个单词呢？使用 Ctrl+W 快捷键。<br>使用 Ctrl+W 快捷键，你可以擦除光标位置前的单词。 如果光标在一个单词本身上，它将擦除从光标位置到词首的全部字母。<br>最好的方法是用它移动光标到要删除单词后的一个空格上， 然后使用 Ctrl+W 键盘快捷键。  </p>\n<h3 id=\"Ctrl-Y\"><a href=\"#Ctrl-Y\" class=\"headerlink\" title=\"Ctrl + Y\"></a>Ctrl + Y</h3><p>这将粘贴使用 Ctrl+W，Ctrl+U 和 Ctrl+K 快捷键擦除的文本。 如果你删除了错误的文本或需要在某处使用已擦除的文本，这将派上用场。</p>\n<h3 id=\"Ctrl-P\"><a href=\"#Ctrl-P\" class=\"headerlink\" title=\"Ctrl + P\"></a>Ctrl + P</h3><p>你可以使用该快捷键来查看上一个命令。 你可以反复按该键来返回到历史命令。 在很多终端里，使用 PgUp 键来实现相同的功能。</p>\n<h3 id=\"Ctrl-N\"><a href=\"#Ctrl-N\" class=\"headerlink\" title=\"Ctrl + N\"></a>Ctrl + N</h3><p>你可以结合 Ctrl+P 使用该快捷键。Ctrl+N 显示下一个命令。 如果使用 Ctrl+P 查看上一条命令，你可以使用 Ctrl+N 来回导航。 许多终端都把此快捷键映射到 PgDn 键。</p>\n<h3 id=\"Ctrl-R\"><a href=\"#Ctrl-R\" class=\"headerlink\" title=\"Ctrl + R\"></a>Ctrl + R</h3><p>你可以使用该快捷键来搜索历史命令。</p>\n<h3 id=\"Ctrl-左右键\"><a href=\"#Ctrl-左右键\" class=\"headerlink\" title=\"Ctrl+左右键\"></a>Ctrl+左右键</h3><p>在单词之间跳转</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>Alt – d ：由光标位置开始，往右删除单词。往行尾删</p>\n<p>说明</p>\n<p>Ctrl – k: 先按住 Ctrl 键，然后再按 k 键；</p>\n<p>Alt – k: 先按住 Alt 键，然后再按 k 键；</p>\n<p>M – k：先单击 Esc 键，然后再按 k 键。</p>\n<p>移动光标</p>\n<p>Ctrl – a ：移到行首</p>\n<p>Ctrl – e ：移到行尾</p>\n<p>Ctrl – b ：往回(左)移动一个字符</p>\n<p>Ctrl – f ：往后(右)移动一个字符</p>\n<p>Alt – b ：往回(左)移动一个单词</p>\n<p>Alt – f ：往后(右)移动一个单词</p>\n<p>Ctrl – xx ：在命令行尾和光标之间移动</p>\n<p>M-b ：往回(左)移动一个单词</p>\n<p>M-f ：往后(右)移动一个单词</p>\n<p>编辑命令</p>\n<p>Ctrl – h ：删除光标左方位置的字符</p>\n<p>Ctrl – d ：删除光标右方位置的字符（注意：当前命令行没有任何字符时，会销系统或结束终端）</p>\n<p>Ctrl – w ：由光标位置开始，往左删除单词。往行首删</p>\n<p>Alt – d ：由光标位置开始，往右删除单词。往行尾删</p>\n<p>M – d ：由光标位置开始，删除单词，直到该单词结束。</p>\n<p>Ctrl – k ：由光标所在位置开始，删除右方所有的字符，直到该行结束。</p>\n<p>Ctrl – u ：由光标所在位置开始，删除左方所有的字符，直到该行开始。</p>\n<p>Ctrl – y ：粘贴之前删除的内容到光标后。</p>\n<p>ctrl – t ：交换光标处和之前两个字符的位置。</p>\n<p>Alt + . ：使用上一条命令的最后一个参数。</p>\n<p>Ctrl – _ ：回复之前的状态。撤销操作。</p>\n<p>Ctrl -a + Ctrl -k 或 Ctrl -e + Ctrl -u 或 Ctrl -k + Ctrl -u 组合可删除整行。</p>\n<p>Bang(!)命令</p>\n<p>!! ：执行上一条命令。</p>\n<p>^foo^bar ：把上一条命令里的foo替换为bar，并执行。</p>\n<p>!wget ：执行最近的以wget开头的命令。</p>\n<p>!wget:p ：仅打印最近的以wget开头的命令，不执行。</p>\n<p>!$ ：上一条命令的最后一个参数， 与 Alt - . 和 $_ 相同。</p>\n<p>!* ：上一条命令的所有参数</p>\n<p>!*:p ：打印上一条命令是所有参数，也即 !*的内容。</p>\n<p>^abc ：删除上一条命令中的abc。</p>\n<p>^foo^bar ：将上一条命令中的 foo 替换为 bar</p>\n<p>^foo^bar^ ：将上一条命令中的 foo 替换为 bar</p>\n<p>!-n ：执行前n条命令，执行上一条命令： !-1， 执行前5条命令的格式是： !-5</p>\n<p>查找历史命令</p>\n<p>Ctrl – p ：显示当前命令的上一条历史命令</p>\n<p>Ctrl – n ：显示当前命令的下一条历史命令</p>\n<p>Ctrl – r ：搜索历史命令，随着输入会显示历史命令中的一条匹配命令，Enter键执行匹配命令；ESC键在命令行显示而不执行匹配命令。</p>\n<p>Ctrl – g ：从历史搜索模式（Ctrl – r）退出。</p>\n<p>控制命令</p>\n<p>Ctrl – l ：清除屏幕，然后，在最上面重新显示目前光标所在的这一行的内容。</p>\n<p>Ctrl – o ：执行当前命令，并选择上一条命令。</p>\n<p>Ctrl – s ：阻止屏幕输出</p>\n<p>Ctrl – q ：允许屏幕输出</p>\n<p>Ctrl – c ：终止命令</p>\n<p>Ctrl – z ：挂起命令</p>\n<p>重复执行操作动作</p>\n<p>M – 操作次数 操作动作 ： 指定操作次数，重复执行指定的操作。</p>\n<p>总结：</p>\n<p>在 Linux 下使用命令操作的时候，光标的移动令人头痛。命令输入完了，执行之后发现缺少权限，然后不得不移动光标到行首，而命令又极长……以上是一些每个 Linux 用户必须使用的键盘快捷键。使用命令行时，这些 Linux 快捷键将提升你的工作效率和效率。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://blog.itpub.net/31407649/viewspace-2217964/\">Linux 用户必知：一分钟掌握14个常用Linux命令行快捷键</a></p>\n","site":{"data":{}},"excerpt":"<p>linux终端下有很多快捷键，这些快捷键能大大提高我们的效率，例如：<br>ctrl+shift+c是复制命令，ctrl+shift+v是粘贴</p>","more":"<p>我想提一下一些快捷键可能依赖于你使用的 Shell。 Bash 是最受欢迎的 shell，所以列出的快捷键集中在 Bash。 如果你愿意，你也可以称其为 Bash 快捷键列表。</p>\n<p>注意我在键盘快捷键中使用了大写字母，但这并不意味着你在使用快捷键时必须按下 shift 键。</p>\n<h2 id=\"常用\"><a href=\"#常用\" class=\"headerlink\" title=\"常用\"></a>常用</h2><h3 id=\"Tab\"><a href=\"#Tab\" class=\"headerlink\" title=\"Tab\"></a>Tab</h3><p>这是你不能没有的 Linux 快捷键。它将节省你 Linux 命令行中的大量时间。<br>只需要输入一个命令，文件名，目录名甚至是命令选项的开头，并敲击 tab 键。它将自动完成你输入的内容，或为你显示全部可能的结果。<br>如果你只记一个快捷键，这将是必选的一个。  </p>\n<h3 id=\"Ctrl-C\"><a href=\"#Ctrl-C\" class=\"headerlink\" title=\"Ctrl + C\"></a>Ctrl + C</h3><p>这些是为了在终端上中断命令或进程该按的键。它将立刻终止运行的程序。<br>如果你想要停止使用一个正在后台运行的程序，只需按下这对组合键。</p>\n<h3 id=\"Ctrl-Z\"><a href=\"#Ctrl-Z\" class=\"headerlink\" title=\"Ctrl + Z\"></a>Ctrl + Z</h3><p>该快捷键将正在运行的程序送到后台。 通常，你可以在使用 &amp; 选项运行程序前之完成该操作， 但是如果你忘记使用选项运行程序，就使用这对组合键。</p>\n<h3 id=\"Ctrl-D\"><a href=\"#Ctrl-D\" class=\"headerlink\" title=\"Ctrl + D\"></a>Ctrl + D</h3><p>这对键盘快捷键将使你退出当前终端。如果你使用 SSH 连接，它将会关闭。 如果你直接使用一个终端，该应用将会立刻关闭。<br>把它当成”退出”命令。</p>\n<h3 id=\"Ctrl-L\"><a href=\"#Ctrl-L\" class=\"headerlink\" title=\"Ctrl + L\"></a>Ctrl + L</h3><p>你怎么清空你的终端屏幕？我猜是用 clear 命令。<br>你可以使用 Ctrl+L 清空终端，代替输入 C-L-E-A-R。得心应手，不是吗？</p>\n<h3 id=\"Ctrl-A\"><a href=\"#Ctrl-A\" class=\"headerlink\" title=\"Ctrl + A\"></a>Ctrl + A</h3><p>该快捷键将移动光标到所在行首。<br>假设你在终端输入了一个很长的命令或路径，并且你想要回到它的开头， 使用方向键移动光标将花费大量时间。注意你无法使用鼠标移动光标到行首。<br>这是 Ctrl+A 节省时间的地方。</p>\n<h3 id=\"Ctrl-E\"><a href=\"#Ctrl-E\" class=\"headerlink\" title=\"Ctrl + E\"></a>Ctrl + E</h3><p>这对快捷键与 Ctrl+A 相反。 Ctrl+A 送光标到行首，反之 Ctrl+E 移动光标到行尾。</p>\n<h3 id=\"Ctrl-U\"><a href=\"#Ctrl-U\" class=\"headerlink\" title=\"Ctrl + U\"></a>Ctrl + U</h3><p>输入了错误的命令？ 代替用退格键来丢弃当前命令，使用 Linux 终端中的 Ctrl+U 快捷键。 该快捷键会擦除从当前光标位置到行首的全部内容。</p>\n<h3 id=\"Ctrl-K\"><a href=\"#Ctrl-K\" class=\"headerlink\" title=\"Ctrl + K\"></a>Ctrl + K</h3><p>这对和 Ctrl+U 快捷键有点像。 唯一的不同在于不是行首，它擦除的是从当前光标位置到行尾的全部内容。</p>\n<h3 id=\"Ctrl-W\"><a href=\"#Ctrl-W\" class=\"headerlink\" title=\"Ctrl + W\"></a>Ctrl + W</h3><p>你刚才了解了擦除到行首和行尾的文本。 但如果你只需要删除一个单词呢？使用 Ctrl+W 快捷键。<br>使用 Ctrl+W 快捷键，你可以擦除光标位置前的单词。 如果光标在一个单词本身上，它将擦除从光标位置到词首的全部字母。<br>最好的方法是用它移动光标到要删除单词后的一个空格上， 然后使用 Ctrl+W 键盘快捷键。  </p>\n<h3 id=\"Ctrl-Y\"><a href=\"#Ctrl-Y\" class=\"headerlink\" title=\"Ctrl + Y\"></a>Ctrl + Y</h3><p>这将粘贴使用 Ctrl+W，Ctrl+U 和 Ctrl+K 快捷键擦除的文本。 如果你删除了错误的文本或需要在某处使用已擦除的文本，这将派上用场。</p>\n<h3 id=\"Ctrl-P\"><a href=\"#Ctrl-P\" class=\"headerlink\" title=\"Ctrl + P\"></a>Ctrl + P</h3><p>你可以使用该快捷键来查看上一个命令。 你可以反复按该键来返回到历史命令。 在很多终端里，使用 PgUp 键来实现相同的功能。</p>\n<h3 id=\"Ctrl-N\"><a href=\"#Ctrl-N\" class=\"headerlink\" title=\"Ctrl + N\"></a>Ctrl + N</h3><p>你可以结合 Ctrl+P 使用该快捷键。Ctrl+N 显示下一个命令。 如果使用 Ctrl+P 查看上一条命令，你可以使用 Ctrl+N 来回导航。 许多终端都把此快捷键映射到 PgDn 键。</p>\n<h3 id=\"Ctrl-R\"><a href=\"#Ctrl-R\" class=\"headerlink\" title=\"Ctrl + R\"></a>Ctrl + R</h3><p>你可以使用该快捷键来搜索历史命令。</p>\n<h3 id=\"Ctrl-左右键\"><a href=\"#Ctrl-左右键\" class=\"headerlink\" title=\"Ctrl+左右键\"></a>Ctrl+左右键</h3><p>在单词之间跳转</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>Alt – d ：由光标位置开始，往右删除单词。往行尾删</p>\n<p>说明</p>\n<p>Ctrl – k: 先按住 Ctrl 键，然后再按 k 键；</p>\n<p>Alt – k: 先按住 Alt 键，然后再按 k 键；</p>\n<p>M – k：先单击 Esc 键，然后再按 k 键。</p>\n<p>移动光标</p>\n<p>Ctrl – a ：移到行首</p>\n<p>Ctrl – e ：移到行尾</p>\n<p>Ctrl – b ：往回(左)移动一个字符</p>\n<p>Ctrl – f ：往后(右)移动一个字符</p>\n<p>Alt – b ：往回(左)移动一个单词</p>\n<p>Alt – f ：往后(右)移动一个单词</p>\n<p>Ctrl – xx ：在命令行尾和光标之间移动</p>\n<p>M-b ：往回(左)移动一个单词</p>\n<p>M-f ：往后(右)移动一个单词</p>\n<p>编辑命令</p>\n<p>Ctrl – h ：删除光标左方位置的字符</p>\n<p>Ctrl – d ：删除光标右方位置的字符（注意：当前命令行没有任何字符时，会销系统或结束终端）</p>\n<p>Ctrl – w ：由光标位置开始，往左删除单词。往行首删</p>\n<p>Alt – d ：由光标位置开始，往右删除单词。往行尾删</p>\n<p>M – d ：由光标位置开始，删除单词，直到该单词结束。</p>\n<p>Ctrl – k ：由光标所在位置开始，删除右方所有的字符，直到该行结束。</p>\n<p>Ctrl – u ：由光标所在位置开始，删除左方所有的字符，直到该行开始。</p>\n<p>Ctrl – y ：粘贴之前删除的内容到光标后。</p>\n<p>ctrl – t ：交换光标处和之前两个字符的位置。</p>\n<p>Alt + . ：使用上一条命令的最后一个参数。</p>\n<p>Ctrl – _ ：回复之前的状态。撤销操作。</p>\n<p>Ctrl -a + Ctrl -k 或 Ctrl -e + Ctrl -u 或 Ctrl -k + Ctrl -u 组合可删除整行。</p>\n<p>Bang(!)命令</p>\n<p>!! ：执行上一条命令。</p>\n<p>^foo^bar ：把上一条命令里的foo替换为bar，并执行。</p>\n<p>!wget ：执行最近的以wget开头的命令。</p>\n<p>!wget:p ：仅打印最近的以wget开头的命令，不执行。</p>\n<p>!$ ：上一条命令的最后一个参数， 与 Alt - . 和 $_ 相同。</p>\n<p>!* ：上一条命令的所有参数</p>\n<p>!*:p ：打印上一条命令是所有参数，也即 !*的内容。</p>\n<p>^abc ：删除上一条命令中的abc。</p>\n<p>^foo^bar ：将上一条命令中的 foo 替换为 bar</p>\n<p>^foo^bar^ ：将上一条命令中的 foo 替换为 bar</p>\n<p>!-n ：执行前n条命令，执行上一条命令： !-1， 执行前5条命令的格式是： !-5</p>\n<p>查找历史命令</p>\n<p>Ctrl – p ：显示当前命令的上一条历史命令</p>\n<p>Ctrl – n ：显示当前命令的下一条历史命令</p>\n<p>Ctrl – r ：搜索历史命令，随着输入会显示历史命令中的一条匹配命令，Enter键执行匹配命令；ESC键在命令行显示而不执行匹配命令。</p>\n<p>Ctrl – g ：从历史搜索模式（Ctrl – r）退出。</p>\n<p>控制命令</p>\n<p>Ctrl – l ：清除屏幕，然后，在最上面重新显示目前光标所在的这一行的内容。</p>\n<p>Ctrl – o ：执行当前命令，并选择上一条命令。</p>\n<p>Ctrl – s ：阻止屏幕输出</p>\n<p>Ctrl – q ：允许屏幕输出</p>\n<p>Ctrl – c ：终止命令</p>\n<p>Ctrl – z ：挂起命令</p>\n<p>重复执行操作动作</p>\n<p>M – 操作次数 操作动作 ： 指定操作次数，重复执行指定的操作。</p>\n<p>总结：</p>\n<p>在 Linux 下使用命令操作的时候，光标的移动令人头痛。命令输入完了，执行之后发现缺少权限，然后不得不移动光标到行首，而命令又极长……以上是一些每个 Linux 用户必须使用的键盘快捷键。使用命令行时，这些 Linux 快捷键将提升你的工作效率和效率。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://blog.itpub.net/31407649/viewspace-2217964/\">Linux 用户必知：一分钟掌握14个常用Linux命令行快捷键</a></p>"},{"layout":"post","title":"在centos7上使用kubeadm搭建 v1.16.9版本Kubernetes集群","date":"2020-09-03T16:00:00.000Z","excerpt":"在centos上使用一键安装工具kubeadm安装kubernete环境，摆脱繁琐的k8s配置","comments":1,"_content":"\n# 环境准备\n## 实验环境\n|角色|IP地址|主机名|docker版本|硬件配置|系统|内核|\n|:----:|:----:|:----:|:----:|:----:|:----:|:----:|\n|master|192.168.9.10|k8s-master|18.09.9|2c4g|CentOS7.7|3.10.0-1062.el7.x86_64|\nnode1|192.168.9.13|k8s-node1|18.09.9|2c6g|CentOS7.7|3.10.0-1062.el7.x86_64\nnode2|192.168.9.14|k8s-node2|18.09.9|2c6g|CentOS7.7|3.10.0-1062.el7.x86_64\n## 每个节点配置host信息\n```\ncat >> /etc/hosts <<EOF\n192.168.9.10 k8s-master\n192.168.9.13 k8s-node1\n192.168.9.14 k8s-node2\nEOF\n```\n## 禁用防火墙和selinux\n```\n//禁用防火墙\nsystemctl stop firewalld && systemctl disable firewalld\n\n//禁用selinux\n#临时修改\nsetenforce 0\n\n#永久修改，重启服务器后生效\nsed -i '7s/enforcing/disabled/' /etc/selinux/config\n```\n## 创建```/etc/sysctl.d/k8s.conf```文件，添加如下内容\n```\n//向文件中写入以下内容\ncat >/etc/sysctl.d/k8s.conf <<EOF\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nnet.ipv4.ip_forward = 1\nEOF\n\n//执行以下命令生效\nmodprobe br_netfilter && sysctl -p /etc/sysctl.d/k8s.conf\n```\n## 安装ipvs\n脚本创建了的```/etc/sysconfig/modules/ipvs.modules```文件，保证在节点重启后能自动加载所需模块。使用```lsmod | grep -e ip_vs -e nf_conntrack_ipv4```命令查看是否已经正确加载所需的内核模块\n```\n//向文件中写入以下内容\ncat > /etc/sysconfig/modules/ipvs.modules <<EOF\n#!/bin/bash\nmodprobe -- ip_vs\nmodprobe -- ip_vs_rr\nmodprobe -- ip_vs_wrr\nmodprobe -- ip_vs_sh\nmodprobe -- nf_conntrack_ipv4\nEOF\n\n//修改权限以及查看是否已经正确加载所需的内核模块\nchmod 755 /etc/sysconfig/modules/ipvs.modules && bash /etc/sysconfig/modules/ipvs.modules && lsmod | grep -e ip_vs -e nf_conntrack_ipv4\n\nnf_conntrack_ipv4      15053  0 \nnf_defrag_ipv4         12729  1 nf_conntrack_ipv4\nip_vs_sh               12688  0 \nip_vs_wrr              12697  0 \nip_vs_rr               12600  0 \nip_vs                 145497  6 ip_vs_rr,ip_vs_sh,ip_vs_wrr\nnf_conntrack          133095  2 ip_vs,nf_conntrack_ipv4\nlibcrc32c              12644  3 xfs,ip_vs,nf_conntrack\n```\n安装ipset和ipvsadm(便于查看 ipvs 的代理规则)\n```\nyum -y install ipset ipvsadm\n```\n## 关闭swap分区\n修改```/etc/fstab```文件，注释掉 SWAP 的自动挂载，使用```free -m```确认 swap 已经关闭\n```\n//手动关闭swap\nswapoff -a\n\n//修改fstab文件，注释swap自动挂载\nsed -i '/^\\/dev\\/mapper\\/centos-swap/c#/dev/mapper/centos-swap swap                    swap    defaults        0 0' /etc/fstab\n\n//查看swap是否关闭\nfree -m\n\ntotal        used        free      shared  buff/cache   available\nMem:           1994         682         612           9         699        1086\nSwap:             0           0           0\n```\nswappiness 参数调整，修改```/etc/sysctl.d/k8s.conf```添加下面一行\n```\ncat >>/etc/sysctl.d/k8s.conf <<EOF\nvm.swappiness=0\nEOF\n\n//使配置生效\nsysctl -p /etc/sysctl.d/k8s.conf\n\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nnet.ipv4.ip_forward = 1\nvm.swappiness = 0\n```\n## 安装docker18.09.9\n1.添加阿里云yum源\n```\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n```\n2.查看可用版本\n```\nyum list docker-ce --showduplicates | sort -r\n\n已加载插件：fastestmirror, langpacks\n可安装的软件包\n * updates: mirrors.aliyun.com\nLoading mirror speeds from cached hostfile\n * extras: mirrors.aliyun.com\ndocker-ce.x86_64            3:19.03.5-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:19.03.4-3.el7                     docker-ce-stable\n。。。。。。\ndocker-ce.x86_64            3:18.09.9-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:18.09.8-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:18.09.7-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:18.09.6-3.el7                     docker-ce-stable\n。。。。。。\n```\n    \n3.安装docker18.09.9\n```\nyum -y install docker-ce-18.09.9-3.el7 docker-ce-cli-18.09.9\n```\n4.启动docker并设置开机自启\n```\nsystemctl enable docker && systemctl start docker\n```\n5.配置阿里云docker镜像加速\n```\ncat > /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://gqk8w9va.mirror.aliyuncs.com\"]\n}\nEOF\n```\n6.配置完后重启docker\n```\nsystemctl restart docker\n```\n7.查看加速\n```\ndocker info\n\n找到Registry Mirrors一行\nRegistry Mirrors:\n https://gqk8w9va.mirror.aliyuncs.com/\n```\n\n8.查看docker版本\ndocker version\n```\nClient:\n Version:           18.09.9\n API version:       1.39\n Go version:        go1.11.13\n Git commit:        039a7df9ba\n Built:             Wed Sep  4 16:51:21 2019\n OS/Arch:           linux/amd64\n Experimental:      false\n\nServer: Docker Engine - Community\n Engine:\n  Version:          18.09.9\n  API version:      1.39 (minimum version 1.12)\n  Go version:       go1.11.13\n  Git commit:       039a7df\n  Built:            Wed Sep  4 16:22:32 2019\n  OS/Arch:          linux/amd64\n  Experimental:     false\n```\n* 若有需要网络代理的，请在docker中配置网络代理，否则docker无法下载镜像\n## 修改docker Cgroup Driver为systemd\n```\n#修改docker Cgroup Driver为systemd\n将/usr/lib/systemd/system/docker.service文件中的这一行 ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock\n\n修改为 ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --exec-opt native.cgroupdriver=systemd\n\n如果不修改，在添加 worker 节点时可能会碰到如下错误\n[WARNING IsDockerSystemdCheck]: detected \"cgroupfs\" as the Docker cgroup driver. The recommended driver is \"systemd\". \nPlease follow the guide at https://kubernetes.io/docs/setup/cri/\n\n\n//使用如下命令修改  \nsed -i.bak \"s#^ExecStart=/usr/bin/dockerd.*#ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --exec-opt native.cgroupdriver=systemd#g\" /usr/lib/systemd/system/docker.service\n\n//重启docker\nsystemctl daemon-reload && systemctl restart docker\n```\n## 安装Kubeadm\n需要科学上网\n```\ncat >/etc/yum.repos.d/kubernetes.repo<<EOF\n[kubernetes]\nname=Kubernetes\nbaseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg\n        https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg\nEOF\n```\n使用阿里云yum源\n```\ncat >/etc/yum.repos.d/kubernetes.repo <<EOF\n[kubernetes]\nname=Kubernetes\nbaseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=0\nrepo_gpgcheck=0\ngpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg\n        http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n```\n安装 kubeadm、kubelet、kubectl(阿里云yum源会随官方更新最新版，因此指定版本)\n```\n//安装1.16.9版本\nyum -y install kubelet-1.16.9 kubeadm-1.16.9 kubectl-1.16.9\n\n//查看版本\nkubeadm version\n\nkubeadm version: &version.Info{Major:\"1\", Minor:\"16\", GitVersion:\"v1.16.9\", GitCommit:\"a17149e1a189050796ced469dbd78d380f2ed5ef\", GitTreeState:\"clean\", BuildDate:\"2020-04-16T11:42:30Z\", GoVersion:\"go1.13.9\", Compiler:\"gc\", Platform:\"linux/amd64\"}\n```\n设置kubelet开机自启\n```\nsystemctl enable kubelet\n```\n设置k8s命令自动补全\n```\nyum -y install bash-completion\nsource /usr/share/bash-completion/bash_completion\nsource <(kubectl completion bash)\necho \"source <(kubectl completion bash)\" >> ~/.bashrc\n```\n# 初始化集群\n## master节点操作，配置 kubeadm 初始化文件\n```\ncat <<EOF > ./kubeadm-config.yaml\napiVersion: kubeadm.k8s.io/v1beta2\nkind: ClusterConfiguration\nkubernetesVersion: v1.16.9\t\nimageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers\n\n#master地址\ncontrolPlaneEndpoint: \"192.168.9.10:6443\"\t\nnetworking:\n  serviceSubnet: \"10.96.0.0/16\"\t\n\n  #k8s容器组所在的网段\n  podSubnet: \"10.20.0.1/16\"\t\n  dnsDomain: \"cluster.local\"\nEOF\n```\n初始化master\n```\n#kubeadm init --config=kubeadm-config.yaml --upload-certs\n完整输出结果\nkubeadm init --config=kubeadm-config.yaml\n[init] Using Kubernetes version: v1.16.9\n[preflight] Running pre-flight checks\n[preflight] Pulling images required for setting up a Kubernetes cluster\n[preflight] This might take a minute or two, depending on the speed of your internet connection\n[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'\n[kubelet-start] Writing kubelet environment file with flags to file \"/var/lib/kubelet/kubeadm-flags.env\"\n[kubelet-start] Writing kubelet configuration to file \"/var/lib/kubelet/config.yaml\"\n[kubelet-start] Activating the kubelet service\n[certs] Using certificateDir folder \"/etc/kubernetes/pki\"\n[certs] Generating \"ca\" certificate and key\n[certs] Generating \"apiserver\" certificate and key\n[certs] apiserver serving cert is signed for DNS names [k8s-master kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.9.10 192.168.9.10]\n[certs] Generating \"apiserver-kubelet-client\" certificate and key\n[certs] Generating \"front-proxy-ca\" certificate and key\n[certs] Generating \"front-proxy-client\" certificate and key\n[certs] Generating \"etcd/ca\" certificate and key\n[certs] Generating \"etcd/server\" certificate and key\n[certs] etcd/server serving cert is signed for DNS names [k8s-master localhost] and IPs [192.168.9.10 127.0.0.1 ::1]\n[certs] Generating \"etcd/peer\" certificate and key\n[certs] etcd/peer serving cert is signed for DNS names [k8s-master localhost] and IPs [192.168.9.10 127.0.0.1 ::1]\n[certs] Generating \"etcd/healthcheck-client\" certificate and key\n[certs] Generating \"apiserver-etcd-client\" certificate and key\n[certs] Generating \"sa\" key and public key\n[kubeconfig] Using kubeconfig folder \"/etc/kubernetes\"\n[kubeconfig] Writing \"admin.conf\" kubeconfig file\n[kubeconfig] Writing \"kubelet.conf\" kubeconfig file\n[kubeconfig] Writing \"controller-manager.conf\" kubeconfig file\n[kubeconfig] Writing \"scheduler.conf\" kubeconfig file\n[control-plane] Using manifest folder \"/etc/kubernetes/manifests\"\n[control-plane] Creating static Pod manifest for \"kube-apiserver\"\n[control-plane] Creating static Pod manifest for \"kube-controller-manager\"\n[control-plane] Creating static Pod manifest for \"kube-scheduler\"\n[etcd] Creating static Pod manifest for local etcd in \"/etc/kubernetes/manifests\"\n[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory \"/etc/kubernetes/manifests\". This can take up to 4m0s\n[apiclient] All control plane components are healthy after 16.501777 seconds\n[upload-config] Storing the configuration used in ConfigMap \"kubeadm-config\" in the \"kube-system\" Namespace\n[kubelet] Creating a ConfigMap \"kubelet-config-1.16\" in namespace kube-system with the configuration for the kubelets in the cluster\n[upload-certs] Skipping phase. Please see --upload-certs\n[mark-control-plane] Marking the node k8s-master as control-plane by adding the label \"node-role.kubernetes.io/master=''\"\n[mark-control-plane] Marking the node k8s-master as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]\n[bootstrap-token] Using token: px979r.mphk9ee5ya8fgy44\n[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles\n[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials\n[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token\n[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster\n[bootstrap-token] Creating the \"cluster-info\" ConfigMap in the \"kube-public\" namespace\n[addons] Applied essential addon: CoreDNS\n[addons] Applied essential addon: kube-proxy\n\nYour Kubernetes control-plane has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  mkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n\nYou should now deploy a pod network to the cluster.\nRun \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nYou can now join any number of control-plane nodes by copying certificate authorities \nand service account keys on each node and then running the following as root:\n\n  kubeadm join 192.168.9.10:6443 --token px979r.mphk9ee5ya8fgy44 \\\n    --discovery-token-ca-cert-hash sha256:5e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51 \\\n    --control-plane \t  \n\nThen you can join any number of worker nodes by running the following on each as root:\n\nkubeadm join 192.168.9.10:6443 --token px979r.mphk9ee5ya8fgy44 \\\n    --discovery-token-ca-cert-hash sha256:5e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51 \n```\n拷贝 kubeconfig 文件\n```\n//这里的路径为/root\nmkdir -p $HOME/.kube\ncp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nchown $(id -u):$(id -g) $HOME/.kube/config\n```\n## master添加节点\nnode1和node2相同操作  \n将master节点上的$HOME/.kube/config 文件拷贝到node节点对应的文件中\n```\n1.创建目录，这里的路径为/root\nmkdir -p $HOME/.kube \n\n2.把master节点上的config文件拷贝到node1和node2的$HOME/.kube\nscp k8s-master1:~/.kube/config $HOME/.kube\n\n3.修改权限\nchown $(id -u):$(id -g) $HOME/.kube/config\n```\n将node1和node2加入到集群中  \n这里需要用到2.2中初始化master最后生成的token和sha256值\n```\n#kubeadm join 192.168.9.10:6443 --token px979r.mphk9ee5ya8fgy44     --discovery-token-ca-cert-hash sha256:5e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51 \n  \n输出结果  \n[preflight] Running pre-flight checks\n\t[WARNING IsDockerSystemdCheck]: detected \"cgroupfs\" as the Docker cgroup driver. The recommended driver is \"systemd\". Please follow the guide at https://kubernetes.io/docs/setup/cri/\n[preflight] Reading configuration from the cluster...\n[preflight] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -oyaml'\n[kubelet-start] Downloading configuration for the kubelet from the \"kubelet-config-1.16\" ConfigMap in the kube-system namespace\n[kubelet-start] Writing kubelet configuration to file \"/var/lib/kubelet/config.yaml\"\n[kubelet-start] Writing kubelet environment file with flags to file \"/var/lib/kubelet/kubeadm-flags.env\"\n[kubelet-start] Activating the kubelet service\n[kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap...\n\nThis node has joined the cluster:\n* Certificate signing request was sent to apiserver and a response was received.\n* The Kubelet was informed of the new secure connection details.\n\nRun 'kubectl get nodes' on the control-plane to see this node join the cluster.\n```\n如果忘记了token和sha256值，可以在master节点使用如下命令查看\n```\n//查看token\n#kubeadm token list\nTOKEN                     TTL       EXPIRES                     USAGES                   DESCRIPTION   EXTRA GROUPS\npx979r.mphk9ee5ya8fgy44   20h       2020-03-18T13:49:48+08:00   authentication,signing   <none>        system:bootstrappers:kubeadm:default-node-token\n            \n            \n//查看sha256\n#openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'\n5e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51\n\n//同时查看token和sha256\n#kubeadm token create --print-join-command\nkubeadm join 192.168.9.10:6443 --token 9b28zg.oyt0kvvpmtrem4bg     --discovery-token-ca-cert-hash sha256:5e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51\n```\nmaster节点查看node，发现状态都是NotReady，因为还没有安装网络插件，这里我们安装calio官方插件文档\n```\nkubectl get nodes\nNAME         STATUS     ROLES    AGE     VERSION\nk8s-master   NotReady   master   19m     v1.16.9\nk8s-node1    NotReady   <none>   4m10s   v1.16.9\nk8s-node2    NotReady   <none>   4m3s    v1.16.9\n```\n## master节点安装网络插件calio\n```\n//下载文件\nwget https://docs.projectcalico.org/v3.8/manifests/calico.yaml\n  \n将文件中的620行改为如下，因为在上边kubeadm-config.yaml配置文件中指定了容器组IP  620行\nvalue: \"10.20.0.1/16\"\n  \n\n//修改完成后安装calico网络插件\nkubectl apply -f calico.yaml\n\n//安装完成后稍等一会查看pods状态\nkubectl get pods -n kube-system\n\nNAME                                      READY   STATUS    RESTARTS   AGE\ncalico-kube-controllers-dc6cb64cb-8sh59   1/1     Running   0          6m22s\ncalico-node-89s9k                         1/1     Running   0          6m22s\ncalico-node-dkt7w                         1/1     Running   0          6m22s\ncalico-node-tgg2h                         1/1     Running   0          6m22s\ncoredns-667f964f9b-7hrj9                  1/1     Running   0          33m\ncoredns-667f964f9b-8q7sh                  1/1     Running   0          33m\netcd-k8s-master                           1/1     Running   0          33m\nkube-apiserver-k8s-master                 1/1     Running   0          32m\nkube-controller-manager-k8s-master        1/1     Running   0          33m\nkube-proxy-b2r5d                          1/1     Running   0          12m\nkube-proxy-nd982                          1/1     Running   0          11m\nkube-proxy-zh6cz                          1/1     Running   0          33m\nkube-scheduler-k8s-master                 1/1     Running   0          32m\n\n\n//查看node状态\n[root@k8s-master ~]# kubectl get nodes \nNAME         STATUS   ROLES    AGE     VERSION\nk8s-master   Ready    master   31m     v1.16.9\nk8s-node1    Ready    <none>   9m46s   v1.16.9\nk8s-node2    Ready    <none>   9m22s   v1.16.9\n```\n## 安装Dashboard(可选)\n下载文件及修改内容\n\n[这里查看dashboard对应的k8s版本](https://github.com/kubernetes/dashboard/releases)\n```\n//下载文件  v2.0.0-rc3是中文版本，beta8是英文版本\nwget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/recommended.yaml\n\nwget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-rc3/aio/deploy/recommended.yaml  \n  \n//修改Service为NodePort类型\n42行下增加一行\nnodePort: 30001\n  \n44行下增加一行\ntype: NodePort\n  \n\n//原先内容\nspec:\n  ports:\n    - port: 443\n      targetPort: 8443\n  selector:\n    k8s-app: kubernetes-dashboard\n\n\n//修改后内容\nspec:\n  ports:\n    - port: 443\n      targetPort: 8443\n      nodePort: 30001   #增加，指定nodeport端口\n  selector:\n    k8s-app: kubernetes-dashboard\n  type: NodePort\t\t#增加，修改类型为nodeport\n```\n部署dashboard\n```\nkubectl apply -f recommended.yaml\n```\n查看dashboard的运行状态及外网访问端口\n```\n//查看dashboard运行状态\n#kubectl get pods -n kubernetes-dashboard -l k8s-app=kubernetes-dashboard\nNAME                                    READY   STATUS    RESTARTS   AGE\nkubernetes-dashboard-5996555fd8-2ppc5   1/1     Running   0          8m16s\n\n//查看dashboard外网访问端口，命名空间为kubernetes-dashboard\n#kubectl get svc -n kubernetes-dashboard -l k8s-app=kubernetes-dashboard\nkubectl get svc -n kubernetes-dashboard -l k8s-app=kubernetes-dashboard\nNAME                   TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)         AGE\nkubernetes-dashboard   NodePort   10.96.142.172   <none>        443:30001/TCP   8m37s\n```\n通过上边的30001端口访问dashboard，注意是https\n> k8s1.16.9这个版本中，使用的dashboard版本是2.0.0-beta8，只有火狐浏览器可以访问，其余浏览器都不能访问，会报错\n```\n您的连接不是私密连接\n```\n> 使用火狐浏览器访问，由于 dashboard 默认是自建的 https 证书，该证书是不受浏览器信任的，所以我们需要强制跳转就可以了\n\n然后创建一个具有全局所有权限的用户来登录Dashboard\n```\n//编辑admin.yaml文件\ncat > admin.yaml <<EOF\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1beta1\nmetadata:\n  name: admin\n  annotations:\n    rbac.authorization.kubernetes.io/autoupdate: \"true\"\nroleRef:\n  kind: ClusterRole\n  name: cluster-admin\n  apiGroup: rbac.authorization.k8s.io\nsubjects:\n- kind: ServiceAccount\n  name: admin\n  namespace: kube-system\n\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: admin\n  namespace: kube-system\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nEOF\n\n//直接创建\nkubectl apply -f admin.yaml\n\n//查看token\nkubectl get secret -n kube-system|grep admin-token\n\nadmin-token-j7sfh                                kubernetes.io/service-account-token   3      23s\n\n\n//获取base64解码后的字符串，注意需要用到上边命令查看到的token，会生成很长的一串字符串\nkubectl get secret admin-token-j7sfh -o jsonpath={.data.token} -n kube-system |base64 -d\n\n#直接用这条命令搞定\nkubectl get secret `kubectl get secret -n kube-system|grep admin-token|awk '{print $1}'` -o jsonpath={.data.token} -n kube-system |base64 -d && echo\n```\n\n到此，使用kubeadm安装k8s 1.16.9完成！！！\n\n# 参考\n[在 Kubernetes集群中 安装 KubeSphere2.1](https://kubesphere.com.cn/forum/d/1272-kubeadm-k8s-kubesphere-2-1-1)","source":"_posts/2020-09-04-centos-install-k8s.md","raw":"---\nlayout: post\ntitle: \"在centos7上使用kubeadm搭建 v1.16.9版本Kubernetes集群\"\ndate: 2020-09-04\nexcerpt: \"在centos上使用一键安装工具kubeadm安装kubernete环境，摆脱繁琐的k8s配置\"\ntags: [linux, kubernetes, centos]\ncomments: true\n---\n\n# 环境准备\n## 实验环境\n|角色|IP地址|主机名|docker版本|硬件配置|系统|内核|\n|:----:|:----:|:----:|:----:|:----:|:----:|:----:|\n|master|192.168.9.10|k8s-master|18.09.9|2c4g|CentOS7.7|3.10.0-1062.el7.x86_64|\nnode1|192.168.9.13|k8s-node1|18.09.9|2c6g|CentOS7.7|3.10.0-1062.el7.x86_64\nnode2|192.168.9.14|k8s-node2|18.09.9|2c6g|CentOS7.7|3.10.0-1062.el7.x86_64\n## 每个节点配置host信息\n```\ncat >> /etc/hosts <<EOF\n192.168.9.10 k8s-master\n192.168.9.13 k8s-node1\n192.168.9.14 k8s-node2\nEOF\n```\n## 禁用防火墙和selinux\n```\n//禁用防火墙\nsystemctl stop firewalld && systemctl disable firewalld\n\n//禁用selinux\n#临时修改\nsetenforce 0\n\n#永久修改，重启服务器后生效\nsed -i '7s/enforcing/disabled/' /etc/selinux/config\n```\n## 创建```/etc/sysctl.d/k8s.conf```文件，添加如下内容\n```\n//向文件中写入以下内容\ncat >/etc/sysctl.d/k8s.conf <<EOF\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nnet.ipv4.ip_forward = 1\nEOF\n\n//执行以下命令生效\nmodprobe br_netfilter && sysctl -p /etc/sysctl.d/k8s.conf\n```\n## 安装ipvs\n脚本创建了的```/etc/sysconfig/modules/ipvs.modules```文件，保证在节点重启后能自动加载所需模块。使用```lsmod | grep -e ip_vs -e nf_conntrack_ipv4```命令查看是否已经正确加载所需的内核模块\n```\n//向文件中写入以下内容\ncat > /etc/sysconfig/modules/ipvs.modules <<EOF\n#!/bin/bash\nmodprobe -- ip_vs\nmodprobe -- ip_vs_rr\nmodprobe -- ip_vs_wrr\nmodprobe -- ip_vs_sh\nmodprobe -- nf_conntrack_ipv4\nEOF\n\n//修改权限以及查看是否已经正确加载所需的内核模块\nchmod 755 /etc/sysconfig/modules/ipvs.modules && bash /etc/sysconfig/modules/ipvs.modules && lsmod | grep -e ip_vs -e nf_conntrack_ipv4\n\nnf_conntrack_ipv4      15053  0 \nnf_defrag_ipv4         12729  1 nf_conntrack_ipv4\nip_vs_sh               12688  0 \nip_vs_wrr              12697  0 \nip_vs_rr               12600  0 \nip_vs                 145497  6 ip_vs_rr,ip_vs_sh,ip_vs_wrr\nnf_conntrack          133095  2 ip_vs,nf_conntrack_ipv4\nlibcrc32c              12644  3 xfs,ip_vs,nf_conntrack\n```\n安装ipset和ipvsadm(便于查看 ipvs 的代理规则)\n```\nyum -y install ipset ipvsadm\n```\n## 关闭swap分区\n修改```/etc/fstab```文件，注释掉 SWAP 的自动挂载，使用```free -m```确认 swap 已经关闭\n```\n//手动关闭swap\nswapoff -a\n\n//修改fstab文件，注释swap自动挂载\nsed -i '/^\\/dev\\/mapper\\/centos-swap/c#/dev/mapper/centos-swap swap                    swap    defaults        0 0' /etc/fstab\n\n//查看swap是否关闭\nfree -m\n\ntotal        used        free      shared  buff/cache   available\nMem:           1994         682         612           9         699        1086\nSwap:             0           0           0\n```\nswappiness 参数调整，修改```/etc/sysctl.d/k8s.conf```添加下面一行\n```\ncat >>/etc/sysctl.d/k8s.conf <<EOF\nvm.swappiness=0\nEOF\n\n//使配置生效\nsysctl -p /etc/sysctl.d/k8s.conf\n\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nnet.ipv4.ip_forward = 1\nvm.swappiness = 0\n```\n## 安装docker18.09.9\n1.添加阿里云yum源\n```\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n```\n2.查看可用版本\n```\nyum list docker-ce --showduplicates | sort -r\n\n已加载插件：fastestmirror, langpacks\n可安装的软件包\n * updates: mirrors.aliyun.com\nLoading mirror speeds from cached hostfile\n * extras: mirrors.aliyun.com\ndocker-ce.x86_64            3:19.03.5-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:19.03.4-3.el7                     docker-ce-stable\n。。。。。。\ndocker-ce.x86_64            3:18.09.9-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:18.09.8-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:18.09.7-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:18.09.6-3.el7                     docker-ce-stable\n。。。。。。\n```\n    \n3.安装docker18.09.9\n```\nyum -y install docker-ce-18.09.9-3.el7 docker-ce-cli-18.09.9\n```\n4.启动docker并设置开机自启\n```\nsystemctl enable docker && systemctl start docker\n```\n5.配置阿里云docker镜像加速\n```\ncat > /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://gqk8w9va.mirror.aliyuncs.com\"]\n}\nEOF\n```\n6.配置完后重启docker\n```\nsystemctl restart docker\n```\n7.查看加速\n```\ndocker info\n\n找到Registry Mirrors一行\nRegistry Mirrors:\n https://gqk8w9va.mirror.aliyuncs.com/\n```\n\n8.查看docker版本\ndocker version\n```\nClient:\n Version:           18.09.9\n API version:       1.39\n Go version:        go1.11.13\n Git commit:        039a7df9ba\n Built:             Wed Sep  4 16:51:21 2019\n OS/Arch:           linux/amd64\n Experimental:      false\n\nServer: Docker Engine - Community\n Engine:\n  Version:          18.09.9\n  API version:      1.39 (minimum version 1.12)\n  Go version:       go1.11.13\n  Git commit:       039a7df\n  Built:            Wed Sep  4 16:22:32 2019\n  OS/Arch:          linux/amd64\n  Experimental:     false\n```\n* 若有需要网络代理的，请在docker中配置网络代理，否则docker无法下载镜像\n## 修改docker Cgroup Driver为systemd\n```\n#修改docker Cgroup Driver为systemd\n将/usr/lib/systemd/system/docker.service文件中的这一行 ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock\n\n修改为 ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --exec-opt native.cgroupdriver=systemd\n\n如果不修改，在添加 worker 节点时可能会碰到如下错误\n[WARNING IsDockerSystemdCheck]: detected \"cgroupfs\" as the Docker cgroup driver. The recommended driver is \"systemd\". \nPlease follow the guide at https://kubernetes.io/docs/setup/cri/\n\n\n//使用如下命令修改  \nsed -i.bak \"s#^ExecStart=/usr/bin/dockerd.*#ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --exec-opt native.cgroupdriver=systemd#g\" /usr/lib/systemd/system/docker.service\n\n//重启docker\nsystemctl daemon-reload && systemctl restart docker\n```\n## 安装Kubeadm\n需要科学上网\n```\ncat >/etc/yum.repos.d/kubernetes.repo<<EOF\n[kubernetes]\nname=Kubernetes\nbaseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg\n        https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg\nEOF\n```\n使用阿里云yum源\n```\ncat >/etc/yum.repos.d/kubernetes.repo <<EOF\n[kubernetes]\nname=Kubernetes\nbaseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=0\nrepo_gpgcheck=0\ngpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg\n        http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n```\n安装 kubeadm、kubelet、kubectl(阿里云yum源会随官方更新最新版，因此指定版本)\n```\n//安装1.16.9版本\nyum -y install kubelet-1.16.9 kubeadm-1.16.9 kubectl-1.16.9\n\n//查看版本\nkubeadm version\n\nkubeadm version: &version.Info{Major:\"1\", Minor:\"16\", GitVersion:\"v1.16.9\", GitCommit:\"a17149e1a189050796ced469dbd78d380f2ed5ef\", GitTreeState:\"clean\", BuildDate:\"2020-04-16T11:42:30Z\", GoVersion:\"go1.13.9\", Compiler:\"gc\", Platform:\"linux/amd64\"}\n```\n设置kubelet开机自启\n```\nsystemctl enable kubelet\n```\n设置k8s命令自动补全\n```\nyum -y install bash-completion\nsource /usr/share/bash-completion/bash_completion\nsource <(kubectl completion bash)\necho \"source <(kubectl completion bash)\" >> ~/.bashrc\n```\n# 初始化集群\n## master节点操作，配置 kubeadm 初始化文件\n```\ncat <<EOF > ./kubeadm-config.yaml\napiVersion: kubeadm.k8s.io/v1beta2\nkind: ClusterConfiguration\nkubernetesVersion: v1.16.9\t\nimageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers\n\n#master地址\ncontrolPlaneEndpoint: \"192.168.9.10:6443\"\t\nnetworking:\n  serviceSubnet: \"10.96.0.0/16\"\t\n\n  #k8s容器组所在的网段\n  podSubnet: \"10.20.0.1/16\"\t\n  dnsDomain: \"cluster.local\"\nEOF\n```\n初始化master\n```\n#kubeadm init --config=kubeadm-config.yaml --upload-certs\n完整输出结果\nkubeadm init --config=kubeadm-config.yaml\n[init] Using Kubernetes version: v1.16.9\n[preflight] Running pre-flight checks\n[preflight] Pulling images required for setting up a Kubernetes cluster\n[preflight] This might take a minute or two, depending on the speed of your internet connection\n[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'\n[kubelet-start] Writing kubelet environment file with flags to file \"/var/lib/kubelet/kubeadm-flags.env\"\n[kubelet-start] Writing kubelet configuration to file \"/var/lib/kubelet/config.yaml\"\n[kubelet-start] Activating the kubelet service\n[certs] Using certificateDir folder \"/etc/kubernetes/pki\"\n[certs] Generating \"ca\" certificate and key\n[certs] Generating \"apiserver\" certificate and key\n[certs] apiserver serving cert is signed for DNS names [k8s-master kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.9.10 192.168.9.10]\n[certs] Generating \"apiserver-kubelet-client\" certificate and key\n[certs] Generating \"front-proxy-ca\" certificate and key\n[certs] Generating \"front-proxy-client\" certificate and key\n[certs] Generating \"etcd/ca\" certificate and key\n[certs] Generating \"etcd/server\" certificate and key\n[certs] etcd/server serving cert is signed for DNS names [k8s-master localhost] and IPs [192.168.9.10 127.0.0.1 ::1]\n[certs] Generating \"etcd/peer\" certificate and key\n[certs] etcd/peer serving cert is signed for DNS names [k8s-master localhost] and IPs [192.168.9.10 127.0.0.1 ::1]\n[certs] Generating \"etcd/healthcheck-client\" certificate and key\n[certs] Generating \"apiserver-etcd-client\" certificate and key\n[certs] Generating \"sa\" key and public key\n[kubeconfig] Using kubeconfig folder \"/etc/kubernetes\"\n[kubeconfig] Writing \"admin.conf\" kubeconfig file\n[kubeconfig] Writing \"kubelet.conf\" kubeconfig file\n[kubeconfig] Writing \"controller-manager.conf\" kubeconfig file\n[kubeconfig] Writing \"scheduler.conf\" kubeconfig file\n[control-plane] Using manifest folder \"/etc/kubernetes/manifests\"\n[control-plane] Creating static Pod manifest for \"kube-apiserver\"\n[control-plane] Creating static Pod manifest for \"kube-controller-manager\"\n[control-plane] Creating static Pod manifest for \"kube-scheduler\"\n[etcd] Creating static Pod manifest for local etcd in \"/etc/kubernetes/manifests\"\n[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory \"/etc/kubernetes/manifests\". This can take up to 4m0s\n[apiclient] All control plane components are healthy after 16.501777 seconds\n[upload-config] Storing the configuration used in ConfigMap \"kubeadm-config\" in the \"kube-system\" Namespace\n[kubelet] Creating a ConfigMap \"kubelet-config-1.16\" in namespace kube-system with the configuration for the kubelets in the cluster\n[upload-certs] Skipping phase. Please see --upload-certs\n[mark-control-plane] Marking the node k8s-master as control-plane by adding the label \"node-role.kubernetes.io/master=''\"\n[mark-control-plane] Marking the node k8s-master as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]\n[bootstrap-token] Using token: px979r.mphk9ee5ya8fgy44\n[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles\n[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials\n[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token\n[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster\n[bootstrap-token] Creating the \"cluster-info\" ConfigMap in the \"kube-public\" namespace\n[addons] Applied essential addon: CoreDNS\n[addons] Applied essential addon: kube-proxy\n\nYour Kubernetes control-plane has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  mkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n\nYou should now deploy a pod network to the cluster.\nRun \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nYou can now join any number of control-plane nodes by copying certificate authorities \nand service account keys on each node and then running the following as root:\n\n  kubeadm join 192.168.9.10:6443 --token px979r.mphk9ee5ya8fgy44 \\\n    --discovery-token-ca-cert-hash sha256:5e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51 \\\n    --control-plane \t  \n\nThen you can join any number of worker nodes by running the following on each as root:\n\nkubeadm join 192.168.9.10:6443 --token px979r.mphk9ee5ya8fgy44 \\\n    --discovery-token-ca-cert-hash sha256:5e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51 \n```\n拷贝 kubeconfig 文件\n```\n//这里的路径为/root\nmkdir -p $HOME/.kube\ncp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nchown $(id -u):$(id -g) $HOME/.kube/config\n```\n## master添加节点\nnode1和node2相同操作  \n将master节点上的$HOME/.kube/config 文件拷贝到node节点对应的文件中\n```\n1.创建目录，这里的路径为/root\nmkdir -p $HOME/.kube \n\n2.把master节点上的config文件拷贝到node1和node2的$HOME/.kube\nscp k8s-master1:~/.kube/config $HOME/.kube\n\n3.修改权限\nchown $(id -u):$(id -g) $HOME/.kube/config\n```\n将node1和node2加入到集群中  \n这里需要用到2.2中初始化master最后生成的token和sha256值\n```\n#kubeadm join 192.168.9.10:6443 --token px979r.mphk9ee5ya8fgy44     --discovery-token-ca-cert-hash sha256:5e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51 \n  \n输出结果  \n[preflight] Running pre-flight checks\n\t[WARNING IsDockerSystemdCheck]: detected \"cgroupfs\" as the Docker cgroup driver. The recommended driver is \"systemd\". Please follow the guide at https://kubernetes.io/docs/setup/cri/\n[preflight] Reading configuration from the cluster...\n[preflight] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -oyaml'\n[kubelet-start] Downloading configuration for the kubelet from the \"kubelet-config-1.16\" ConfigMap in the kube-system namespace\n[kubelet-start] Writing kubelet configuration to file \"/var/lib/kubelet/config.yaml\"\n[kubelet-start] Writing kubelet environment file with flags to file \"/var/lib/kubelet/kubeadm-flags.env\"\n[kubelet-start] Activating the kubelet service\n[kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap...\n\nThis node has joined the cluster:\n* Certificate signing request was sent to apiserver and a response was received.\n* The Kubelet was informed of the new secure connection details.\n\nRun 'kubectl get nodes' on the control-plane to see this node join the cluster.\n```\n如果忘记了token和sha256值，可以在master节点使用如下命令查看\n```\n//查看token\n#kubeadm token list\nTOKEN                     TTL       EXPIRES                     USAGES                   DESCRIPTION   EXTRA GROUPS\npx979r.mphk9ee5ya8fgy44   20h       2020-03-18T13:49:48+08:00   authentication,signing   <none>        system:bootstrappers:kubeadm:default-node-token\n            \n            \n//查看sha256\n#openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'\n5e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51\n\n//同时查看token和sha256\n#kubeadm token create --print-join-command\nkubeadm join 192.168.9.10:6443 --token 9b28zg.oyt0kvvpmtrem4bg     --discovery-token-ca-cert-hash sha256:5e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51\n```\nmaster节点查看node，发现状态都是NotReady，因为还没有安装网络插件，这里我们安装calio官方插件文档\n```\nkubectl get nodes\nNAME         STATUS     ROLES    AGE     VERSION\nk8s-master   NotReady   master   19m     v1.16.9\nk8s-node1    NotReady   <none>   4m10s   v1.16.9\nk8s-node2    NotReady   <none>   4m3s    v1.16.9\n```\n## master节点安装网络插件calio\n```\n//下载文件\nwget https://docs.projectcalico.org/v3.8/manifests/calico.yaml\n  \n将文件中的620行改为如下，因为在上边kubeadm-config.yaml配置文件中指定了容器组IP  620行\nvalue: \"10.20.0.1/16\"\n  \n\n//修改完成后安装calico网络插件\nkubectl apply -f calico.yaml\n\n//安装完成后稍等一会查看pods状态\nkubectl get pods -n kube-system\n\nNAME                                      READY   STATUS    RESTARTS   AGE\ncalico-kube-controllers-dc6cb64cb-8sh59   1/1     Running   0          6m22s\ncalico-node-89s9k                         1/1     Running   0          6m22s\ncalico-node-dkt7w                         1/1     Running   0          6m22s\ncalico-node-tgg2h                         1/1     Running   0          6m22s\ncoredns-667f964f9b-7hrj9                  1/1     Running   0          33m\ncoredns-667f964f9b-8q7sh                  1/1     Running   0          33m\netcd-k8s-master                           1/1     Running   0          33m\nkube-apiserver-k8s-master                 1/1     Running   0          32m\nkube-controller-manager-k8s-master        1/1     Running   0          33m\nkube-proxy-b2r5d                          1/1     Running   0          12m\nkube-proxy-nd982                          1/1     Running   0          11m\nkube-proxy-zh6cz                          1/1     Running   0          33m\nkube-scheduler-k8s-master                 1/1     Running   0          32m\n\n\n//查看node状态\n[root@k8s-master ~]# kubectl get nodes \nNAME         STATUS   ROLES    AGE     VERSION\nk8s-master   Ready    master   31m     v1.16.9\nk8s-node1    Ready    <none>   9m46s   v1.16.9\nk8s-node2    Ready    <none>   9m22s   v1.16.9\n```\n## 安装Dashboard(可选)\n下载文件及修改内容\n\n[这里查看dashboard对应的k8s版本](https://github.com/kubernetes/dashboard/releases)\n```\n//下载文件  v2.0.0-rc3是中文版本，beta8是英文版本\nwget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/recommended.yaml\n\nwget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-rc3/aio/deploy/recommended.yaml  \n  \n//修改Service为NodePort类型\n42行下增加一行\nnodePort: 30001\n  \n44行下增加一行\ntype: NodePort\n  \n\n//原先内容\nspec:\n  ports:\n    - port: 443\n      targetPort: 8443\n  selector:\n    k8s-app: kubernetes-dashboard\n\n\n//修改后内容\nspec:\n  ports:\n    - port: 443\n      targetPort: 8443\n      nodePort: 30001   #增加，指定nodeport端口\n  selector:\n    k8s-app: kubernetes-dashboard\n  type: NodePort\t\t#增加，修改类型为nodeport\n```\n部署dashboard\n```\nkubectl apply -f recommended.yaml\n```\n查看dashboard的运行状态及外网访问端口\n```\n//查看dashboard运行状态\n#kubectl get pods -n kubernetes-dashboard -l k8s-app=kubernetes-dashboard\nNAME                                    READY   STATUS    RESTARTS   AGE\nkubernetes-dashboard-5996555fd8-2ppc5   1/1     Running   0          8m16s\n\n//查看dashboard外网访问端口，命名空间为kubernetes-dashboard\n#kubectl get svc -n kubernetes-dashboard -l k8s-app=kubernetes-dashboard\nkubectl get svc -n kubernetes-dashboard -l k8s-app=kubernetes-dashboard\nNAME                   TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)         AGE\nkubernetes-dashboard   NodePort   10.96.142.172   <none>        443:30001/TCP   8m37s\n```\n通过上边的30001端口访问dashboard，注意是https\n> k8s1.16.9这个版本中，使用的dashboard版本是2.0.0-beta8，只有火狐浏览器可以访问，其余浏览器都不能访问，会报错\n```\n您的连接不是私密连接\n```\n> 使用火狐浏览器访问，由于 dashboard 默认是自建的 https 证书，该证书是不受浏览器信任的，所以我们需要强制跳转就可以了\n\n然后创建一个具有全局所有权限的用户来登录Dashboard\n```\n//编辑admin.yaml文件\ncat > admin.yaml <<EOF\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1beta1\nmetadata:\n  name: admin\n  annotations:\n    rbac.authorization.kubernetes.io/autoupdate: \"true\"\nroleRef:\n  kind: ClusterRole\n  name: cluster-admin\n  apiGroup: rbac.authorization.k8s.io\nsubjects:\n- kind: ServiceAccount\n  name: admin\n  namespace: kube-system\n\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: admin\n  namespace: kube-system\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nEOF\n\n//直接创建\nkubectl apply -f admin.yaml\n\n//查看token\nkubectl get secret -n kube-system|grep admin-token\n\nadmin-token-j7sfh                                kubernetes.io/service-account-token   3      23s\n\n\n//获取base64解码后的字符串，注意需要用到上边命令查看到的token，会生成很长的一串字符串\nkubectl get secret admin-token-j7sfh -o jsonpath={.data.token} -n kube-system |base64 -d\n\n#直接用这条命令搞定\nkubectl get secret `kubectl get secret -n kube-system|grep admin-token|awk '{print $1}'` -o jsonpath={.data.token} -n kube-system |base64 -d && echo\n```\n\n到此，使用kubeadm安装k8s 1.16.9完成！！！\n\n# 参考\n[在 Kubernetes集群中 安装 KubeSphere2.1](https://kubesphere.com.cn/forum/d/1272-kubeadm-k8s-kubesphere-2-1-1)","slug":"2020-09-04-centos-install-k8s","published":1,"updated":"2020-11-24T07:53:04.749Z","photos":[],"link":"","_id":"ckoe9igyf006d8cpn1vqo22hf","content":"<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><h2 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h2><table>\n<thead>\n<tr>\n<th align=\"center\">角色</th>\n<th align=\"center\">IP地址</th>\n<th align=\"center\">主机名</th>\n<th align=\"center\">docker版本</th>\n<th align=\"center\">硬件配置</th>\n<th align=\"center\">系统</th>\n<th align=\"center\">内核</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">master</td>\n<td align=\"center\">192.168.9.10</td>\n<td align=\"center\">k8s-master</td>\n<td align=\"center\">18.09.9</td>\n<td align=\"center\">2c4g</td>\n<td align=\"center\">CentOS7.7</td>\n<td align=\"center\">3.10.0-1062.el7.x86_64</td>\n</tr>\n<tr>\n<td align=\"center\">node1</td>\n<td align=\"center\">192.168.9.13</td>\n<td align=\"center\">k8s-node1</td>\n<td align=\"center\">18.09.9</td>\n<td align=\"center\">2c6g</td>\n<td align=\"center\">CentOS7.7</td>\n<td align=\"center\">3.10.0-1062.el7.x86_64</td>\n</tr>\n<tr>\n<td align=\"center\">node2</td>\n<td align=\"center\">192.168.9.14</td>\n<td align=\"center\">k8s-node2</td>\n<td align=\"center\">18.09.9</td>\n<td align=\"center\">2c6g</td>\n<td align=\"center\">CentOS7.7</td>\n<td align=\"center\">3.10.0-1062.el7.x86_64</td>\n</tr>\n</tbody></table>\n<h2 id=\"每个节点配置host信息\"><a href=\"#每个节点配置host信息\" class=\"headerlink\" title=\"每个节点配置host信息\"></a>每个节点配置host信息</h2><figure class=\"highlight accesslog\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &gt;&gt; /etc/hosts &lt;&lt;EOF</span><br><span class=\"line\"><span class=\"number\">192.168.9.10</span> k8s-master</span><br><span class=\"line\"><span class=\"number\">192.168.9.13</span> k8s-node1</span><br><span class=\"line\"><span class=\"number\">192.168.9.14</span> k8s-node2</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<h2 id=\"禁用防火墙和selinux\"><a href=\"#禁用防火墙和selinux\" class=\"headerlink\" title=\"禁用防火墙和selinux\"></a>禁用防火墙和selinux</h2><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>禁用防火墙</span><br><span class=\"line\">systemctl stop firewalld &amp;&amp; systemctl disable firewalld</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span>禁用selinux</span><br><span class=\"line\"><span class=\"comment\">#临时修改</span></span><br><span class=\"line\">setenforce <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#永久修改，重启服务器后生效</span></span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;7s/enforcing/disabled/&#x27;</span> <span class=\"regexp\">/etc/</span>selinux/config</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建-etc-sysctl-d-k8s-conf文件，添加如下内容\"><a href=\"#创建-etc-sysctl-d-k8s-conf文件，添加如下内容\" class=\"headerlink\" title=\"创建/etc/sysctl.d/k8s.conf文件，添加如下内容\"></a>创建<code>/etc/sysctl.d/k8s.conf</code>文件，添加如下内容</h2><figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//向文件中写入以下内容</span></span><br><span class=\"line\">cat &gt;/etc/sysctl.d/k8s<span class=\"selector-class\">.conf</span> &lt;&lt;EOF</span><br><span class=\"line\">net<span class=\"selector-class\">.bridge</span><span class=\"selector-class\">.bridge-nf-call-ip6tables</span> = <span class=\"number\">1</span></span><br><span class=\"line\">net<span class=\"selector-class\">.bridge</span><span class=\"selector-class\">.bridge-nf-call-iptables</span> = <span class=\"number\">1</span></span><br><span class=\"line\">net<span class=\"selector-class\">.ipv4</span><span class=\"selector-class\">.ip_forward</span> = <span class=\"number\">1</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//执行以下命令生效</span></span><br><span class=\"line\">modprobe br_netfilter &amp;&amp; sysctl -<span class=\"selector-tag\">p</span> /etc/sysctl.d/k8s.conf</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装ipvs\"><a href=\"#安装ipvs\" class=\"headerlink\" title=\"安装ipvs\"></a>安装ipvs</h2><p>脚本创建了的<code>/etc/sysconfig/modules/ipvs.modules</code>文件，保证在节点重启后能自动加载所需模块。使用<code>lsmod | grep -e ip_vs -e nf_conntrack_ipv4</code>命令查看是否已经正确加载所需的内核模块</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//向文件中写入以下内容</span></span><br><span class=\"line\">cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;EOF</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">modprobe -- ip_vs</span><br><span class=\"line\">modprobe -- ip_vs_rr</span><br><span class=\"line\">modprobe -- ip_vs_wrr</span><br><span class=\"line\">modprobe -- ip_vs_sh</span><br><span class=\"line\">modprobe -- nf_conntrack_ipv4</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//修改权限以及查看是否已经正确加载所需的内核模块</span></span><br><span class=\"line\">chmod <span class=\"number\">755</span> /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span><br><span class=\"line\"></span><br><span class=\"line\">nf_conntrack_ipv4      <span class=\"number\">15053</span>  <span class=\"number\">0</span> </span><br><span class=\"line\">nf_defrag_ipv4         <span class=\"number\">12729</span>  <span class=\"number\">1</span> nf_conntrack_ipv4</span><br><span class=\"line\">ip_vs_sh               <span class=\"number\">12688</span>  <span class=\"number\">0</span> </span><br><span class=\"line\">ip_vs_wrr              <span class=\"number\">12697</span>  <span class=\"number\">0</span> </span><br><span class=\"line\">ip_vs_rr               <span class=\"number\">12600</span>  <span class=\"number\">0</span> </span><br><span class=\"line\">ip_vs                 <span class=\"number\">145497</span>  <span class=\"number\">6</span> ip_vs_rr,ip_vs_sh,ip_vs_wrr</span><br><span class=\"line\">nf_conntrack          <span class=\"number\">133095</span>  <span class=\"number\">2</span> ip_vs,nf_conntrack_ipv4</span><br><span class=\"line\">libcrc32c              <span class=\"number\">12644</span>  <span class=\"number\">3</span> xfs,ip_vs,nf_conntrack</span><br></pre></td></tr></table></figure>\n<p>安装ipset和ipvsadm(便于查看 ipvs 的代理规则)</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y <span class=\"keyword\">install</span> ipset ipvsadm</span><br></pre></td></tr></table></figure>\n<h2 id=\"关闭swap分区\"><a href=\"#关闭swap分区\" class=\"headerlink\" title=\"关闭swap分区\"></a>关闭swap分区</h2><p>修改<code>/etc/fstab</code>文件，注释掉 SWAP 的自动挂载，使用<code>free -m</code>确认 swap 已经关闭</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//手动关闭swap</span></span><br><span class=\"line\">swapoff -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//修改fstab文件，注释swap自动挂载</span></span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;/^\\/dev\\/mapper\\/centos-swap/c#/dev/mapper/centos-swap swap                    swap    defaults        0 0&#x27;</span> /etc/fstab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查看swap是否关闭</span></span><br><span class=\"line\">free -m</span><br><span class=\"line\"></span><br><span class=\"line\">total        used        free      <span class=\"keyword\">shared</span>  buff/cache   available</span><br><span class=\"line\">Mem:           <span class=\"number\">1994</span>         <span class=\"number\">682</span>         <span class=\"number\">612</span>           <span class=\"number\">9</span>         <span class=\"number\">699</span>        <span class=\"number\">1086</span></span><br><span class=\"line\">Swap:             <span class=\"number\">0</span>           <span class=\"number\">0</span>           <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>swappiness 参数调整，修改<code>/etc/sysctl.d/k8s.conf</code>添加下面一行</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &gt;&gt;/etc/sysctl.d/k8s<span class=\"selector-class\">.conf</span> &lt;&lt;EOF</span><br><span class=\"line\">vm.swappiness=<span class=\"number\">0</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使配置生效</span></span><br><span class=\"line\">sysctl -<span class=\"selector-tag\">p</span> /etc/sysctl.d/k8s.conf</span><br><span class=\"line\"></span><br><span class=\"line\">net<span class=\"selector-class\">.bridge</span><span class=\"selector-class\">.bridge-nf-call-ip6tables</span> = <span class=\"number\">1</span></span><br><span class=\"line\">net<span class=\"selector-class\">.bridge</span><span class=\"selector-class\">.bridge-nf-call-iptables</span> = <span class=\"number\">1</span></span><br><span class=\"line\">net<span class=\"selector-class\">.ipv4</span><span class=\"selector-class\">.ip_forward</span> = <span class=\"number\">1</span></span><br><span class=\"line\">vm<span class=\"selector-class\">.swappiness</span> = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"安装docker18-09-9\"><a href=\"#安装docker18-09-9\" class=\"headerlink\" title=\"安装docker18.09.9\"></a>安装docker18.09.9</h2><p>1.添加阿里云yum源</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum-config-manager --add-repo http:<span class=\"regexp\">//mi</span>rrors.aliyun.com<span class=\"regexp\">/docker-ce/</span>linux<span class=\"regexp\">/centos/</span>docker-ce.repo</span><br></pre></td></tr></table></figure>\n<p>2.查看可用版本</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum list docker-ce --showduplicates | sort -r</span><br><span class=\"line\"></span><br><span class=\"line\">已加载插件：fastestmirror, langpacks</span><br><span class=\"line\">可安装的软件包</span><br><span class=\"line\"> * updates: mirrors.aliyun.com</span><br><span class=\"line\">Loading mirror speeds <span class=\"keyword\">from</span> cached hostfile</span><br><span class=\"line\"> * extras: mirrors.aliyun.com</span><br><span class=\"line\">docker-ce.x86_64            <span class=\"number\">3</span>:<span class=\"number\">19.03</span><span class=\"number\">.5</span><span class=\"number\">-3.</span>el7                     docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64            <span class=\"number\">3</span>:<span class=\"number\">19.03</span><span class=\"number\">.4</span><span class=\"number\">-3.</span>el7                     docker-ce-stable</span><br><span class=\"line\">。。。。。。</span><br><span class=\"line\">docker-ce.x86_64            <span class=\"number\">3</span>:<span class=\"number\">18.09</span><span class=\"number\">.9</span><span class=\"number\">-3.</span>el7                     docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64            <span class=\"number\">3</span>:<span class=\"number\">18.09</span><span class=\"number\">.8</span><span class=\"number\">-3.</span>el7                     docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64            <span class=\"number\">3</span>:<span class=\"number\">18.09</span><span class=\"number\">.7</span><span class=\"number\">-3.</span>el7                     docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64            <span class=\"number\">3</span>:<span class=\"number\">18.09</span><span class=\"number\">.6</span><span class=\"number\">-3.</span>el7                     docker-ce-stable</span><br><span class=\"line\">。。。。。。</span><br></pre></td></tr></table></figure>\n\n<p>3.安装docker18.09.9</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">yum</span> -y install docker-ce-<span class=\"number\">18</span>.<span class=\"number\">09</span>.<span class=\"number\">9</span>-<span class=\"number\">3</span>.el<span class=\"number\">7</span> docker-ce-cli-<span class=\"number\">18</span>.<span class=\"number\">09</span>.<span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n<p>4.启动docker并设置开机自启</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"keyword\">enable</span> docker &amp;&amp; systemctl <span class=\"keyword\">start</span> docker</span><br></pre></td></tr></table></figure>\n<p>5.配置阿里云docker镜像加速</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &gt; <span class=\"regexp\">/etc/</span>docker/daemon.json &lt;&lt;-<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;registry-mirrors&quot;</span>: [<span class=\"string\">&quot;https://gqk8w9va.mirror.aliyuncs.com&quot;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<p>6.配置完后重启docker</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">systemctl restart docker</span></span><br></pre></td></tr></table></figure>\n<p>7.查看加速</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">docker</span> <span class=\"string\">info</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">找到Registry</span> <span class=\"string\">Mirrors一行</span></span><br><span class=\"line\"><span class=\"attr\">Registry</span> <span class=\"string\">Mirrors:</span></span><br><span class=\"line\"> <span class=\"attr\">https</span>:<span class=\"string\">//gqk8w9va.mirror.aliyuncs.com/</span></span><br></pre></td></tr></table></figure>\n\n<p>8.查看docker版本<br>docker version</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Client</span>:</span><br><span class=\"line\"> <span class=\"attribute\">Version</span>:           <span class=\"number\">18</span>.<span class=\"number\">09</span>.<span class=\"number\">9</span></span><br><span class=\"line\"> <span class=\"attribute\">API</span> version:       <span class=\"number\">1</span>.<span class=\"number\">39</span></span><br><span class=\"line\"> <span class=\"attribute\">Go</span> version:        go<span class=\"number\">1</span>.<span class=\"number\">11</span>.<span class=\"number\">13</span></span><br><span class=\"line\"> <span class=\"attribute\">Git</span> commit:        <span class=\"number\">039</span>a<span class=\"number\">7</span>df<span class=\"number\">9</span>ba</span><br><span class=\"line\"> <span class=\"attribute\">Built</span>:             Wed Sep  <span class=\"number\">4</span> <span class=\"number\">16</span>:<span class=\"number\">51</span>:<span class=\"number\">21</span> <span class=\"number\">2019</span></span><br><span class=\"line\"> <span class=\"attribute\">OS</span>/Arch:           linux/amd<span class=\"number\">64</span></span><br><span class=\"line\"> <span class=\"attribute\">Experimental</span>:      false</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">Server</span>: Docker Engine - Community</span><br><span class=\"line\"> <span class=\"attribute\">Engine</span>:</span><br><span class=\"line\">  <span class=\"attribute\">Version</span>:          <span class=\"number\">18</span>.<span class=\"number\">09</span>.<span class=\"number\">9</span></span><br><span class=\"line\">  <span class=\"attribute\">API</span> version:      <span class=\"number\">1</span>.<span class=\"number\">39</span> (minimum version <span class=\"number\">1</span>.<span class=\"number\">12</span>)</span><br><span class=\"line\">  <span class=\"attribute\">Go</span> version:       go<span class=\"number\">1</span>.<span class=\"number\">11</span>.<span class=\"number\">13</span></span><br><span class=\"line\">  <span class=\"attribute\">Git</span> commit:       <span class=\"number\">039</span>a<span class=\"number\">7</span>df</span><br><span class=\"line\">  <span class=\"attribute\">Built</span>:            Wed Sep  <span class=\"number\">4</span> <span class=\"number\">16</span>:<span class=\"number\">22</span>:<span class=\"number\">32</span> <span class=\"number\">2019</span></span><br><span class=\"line\">  <span class=\"attribute\">OS</span>/Arch:          linux/amd<span class=\"number\">64</span></span><br><span class=\"line\">  <span class=\"attribute\">Experimental</span>:     false</span><br></pre></td></tr></table></figure>\n<ul>\n<li>若有需要网络代理的，请在docker中配置网络代理，否则docker无法下载镜像<h2 id=\"修改docker-Cgroup-Driver为systemd\"><a href=\"#修改docker-Cgroup-Driver为systemd\" class=\"headerlink\" title=\"修改docker Cgroup Driver为systemd\"></a>修改docker Cgroup Driver为systemd</h2><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#修改docker Cgroup Driver为systemd</span></span><br><span class=\"line\">将<span class=\"regexp\">/usr/</span>lib<span class=\"regexp\">/systemd/</span>system<span class=\"regexp\">/docker.service文件中的这一行 ExecStart=/u</span>sr<span class=\"regexp\">/bin/</span>dockerd -H fd:<span class=\"regexp\">//</span> --containerd=<span class=\"regexp\">/run/</span>containerd/containerd.sock</span><br><span class=\"line\"></span><br><span class=\"line\">修改为 ExecStart=<span class=\"regexp\">/usr/</span>bin<span class=\"regexp\">/dockerd -H fd:/</span><span class=\"regexp\">/ --containerd=/</span>run<span class=\"regexp\">/containerd/</span>containerd.sock --exec-opt native.cgroupdriver=systemd</span><br><span class=\"line\"></span><br><span class=\"line\">如果不修改，在添加 worker 节点时可能会碰到如下错误</span><br><span class=\"line\">[WARNING IsDockerSystemdCheck]: detected <span class=\"string\">&quot;cgroupfs&quot;</span> as the Docker cgroup driver. The recommended driver is <span class=\"string\">&quot;systemd&quot;</span>. </span><br><span class=\"line\">Please follow the guide at https:<span class=\"regexp\">//</span>kubernetes.io<span class=\"regexp\">/docs/</span>setup<span class=\"regexp\">/cri/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span>使用如下命令修改  </span><br><span class=\"line\">sed -i.bak <span class=\"string\">&quot;s#^ExecStart=/usr/bin/dockerd.*#ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --exec-opt native.cgroupdriver=systemd#g&quot;</span> <span class=\"regexp\">/usr/</span>lib<span class=\"regexp\">/systemd/</span>system/docker.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span>重启docker</span><br><span class=\"line\">systemctl daemon-reload &amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装Kubeadm\"><a href=\"#安装Kubeadm\" class=\"headerlink\" title=\"安装Kubeadm\"></a>安装Kubeadm</h2>需要科学上网<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &gt;<span class=\"regexp\">/etc/yum</span>.repos.d/kubernetes.repo&lt;&lt;EOF</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=https:<span class=\"regexp\">//</span>packages.cloud.google.com<span class=\"regexp\">/yum/</span>repos/kubernetes-el7-x86_64</span><br><span class=\"line\">enabled=<span class=\"number\">1</span></span><br><span class=\"line\">gpgcheck=<span class=\"number\">1</span></span><br><span class=\"line\">repo_gpgcheck=<span class=\"number\">1</span></span><br><span class=\"line\">gpgkey=https:<span class=\"regexp\">//</span>packages.cloud.google.com<span class=\"regexp\">/yum/</span>doc/yum-key.gpg</span><br><span class=\"line\">        https:<span class=\"regexp\">//</span>packages.cloud.google.com<span class=\"regexp\">/yum/</span>doc/rpm-package-key.gpg</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n使用阿里云yum源<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &gt;<span class=\"regexp\">/etc/yum</span>.repos.d/kubernetes.repo &lt;&lt;EOF</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=http:<span class=\"regexp\">//mi</span>rrors.aliyun.com<span class=\"regexp\">/kubernetes/yum</span><span class=\"regexp\">/repos/</span>kubernetes-el7-x86_64</span><br><span class=\"line\">enabled=<span class=\"number\">1</span></span><br><span class=\"line\">gpgcheck=<span class=\"number\">0</span></span><br><span class=\"line\">repo_gpgcheck=<span class=\"number\">0</span></span><br><span class=\"line\">gpgkey=http:<span class=\"regexp\">//mi</span>rrors.aliyun.com<span class=\"regexp\">/kubernetes/yum</span><span class=\"regexp\">/doc/yum</span>-key.gpg</span><br><span class=\"line\">        http:<span class=\"regexp\">//mi</span>rrors.aliyun.com<span class=\"regexp\">/kubernetes/yum</span><span class=\"regexp\">/doc/</span>rpm-package-key.gpg</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n安装 kubeadm、kubelet、kubectl(阿里云yum源会随官方更新最新版，因此指定版本)<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//安装1.16.9版本</span></span><br><span class=\"line\">yum -y install kubelet<span class=\"number\">-1.16</span><span class=\"number\">.9</span> kubeadm<span class=\"number\">-1.16</span><span class=\"number\">.9</span> kubectl<span class=\"number\">-1.16</span><span class=\"number\">.9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查看版本</span></span><br><span class=\"line\">kubeadm version</span><br><span class=\"line\"></span><br><span class=\"line\">kubeadm <span class=\"attr\">version:</span> &amp;version.Info&#123;<span class=\"attr\">Major:</span><span class=\"string\">&quot;1&quot;</span>, <span class=\"attr\">Minor:</span><span class=\"string\">&quot;16&quot;</span>, <span class=\"attr\">GitVersion:</span><span class=\"string\">&quot;v1.16.9&quot;</span>, <span class=\"attr\">GitCommit:</span><span class=\"string\">&quot;a17149e1a189050796ced469dbd78d380f2ed5ef&quot;</span>, <span class=\"attr\">GitTreeState:</span><span class=\"string\">&quot;clean&quot;</span>, <span class=\"attr\">BuildDate:</span><span class=\"string\">&quot;2020-04-16T11:42:30Z&quot;</span>, <span class=\"attr\">GoVersion:</span><span class=\"string\">&quot;go1.13.9&quot;</span>, <span class=\"attr\">Compiler:</span><span class=\"string\">&quot;gc&quot;</span>, <span class=\"attr\">Platform:</span><span class=\"string\">&quot;linux/amd64&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n设置kubelet开机自启<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"builtin-name\">enable</span> kubelet</span><br></pre></td></tr></table></figure>\n设置k8s命令自动补全<figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install bash-completion</span><br><span class=\"line\"><span class=\"keyword\">source</span> <span class=\"regexp\">/usr/</span>share<span class=\"regexp\">/bash-completion/</span>bash_completion</span><br><span class=\"line\"><span class=\"keyword\">source</span> &lt;(kubectl completion bash)</span><br><span class=\"line\">echo <span class=\"string\">&quot;source &lt;(kubectl completion bash)&quot;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>\n<h1 id=\"初始化集群\"><a href=\"#初始化集群\" class=\"headerlink\" title=\"初始化集群\"></a>初始化集群</h1><h2 id=\"master节点操作，配置-kubeadm-初始化文件\"><a href=\"#master节点操作，配置-kubeadm-初始化文件\" class=\"headerlink\" title=\"master节点操作，配置 kubeadm 初始化文件\"></a>master节点操作，配置 kubeadm 初始化文件</h2><figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat <span class=\"params\">&lt;&lt;EOF &gt;</span> ./kubeadm-config.yaml</span><br><span class=\"line\"><span class=\"symbol\">apiVersion:</span> kubeadm.k8s.io/v1beta2</span><br><span class=\"line\"><span class=\"symbol\">kind:</span> ClusterConfiguration</span><br><span class=\"line\"><span class=\"symbol\">kubernetesVersion:</span> v1<span class=\"number\">.16</span><span class=\"number\">.9</span>\t</span><br><span class=\"line\"><span class=\"symbol\">imageRepository:</span> registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#master地址</span></span><br><span class=\"line\"><span class=\"symbol\">controlPlaneEndpoint:</span> <span class=\"string\">&quot;192.168.9.10:6443&quot;</span>\t</span><br><span class=\"line\"><span class=\"symbol\">networking:</span></span><br><span class=\"line\"><span class=\"symbol\">  serviceSubnet:</span> <span class=\"string\">&quot;10.96.0.0/16&quot;</span>\t</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">#k8s容器组所在的网段</span></span><br><span class=\"line\"><span class=\"symbol\">  podSubnet:</span> <span class=\"string\">&quot;10.20.0.1/16&quot;</span>\t</span><br><span class=\"line\"><span class=\"symbol\">  dnsDomain:</span> <span class=\"string\">&quot;cluster.local&quot;</span></span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n初始化master<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#kubeadm init --config=kubeadm-config.yaml --upload-certs</span></span><br><span class=\"line\">完整输出结果</span><br><span class=\"line\">kubeadm init <span class=\"comment\">--config=kubeadm-config.yaml</span></span><br><span class=\"line\">[init] Using Kubernetes version: v1.16.9</span><br><span class=\"line\">[preflight] Running pre-flight checks</span><br><span class=\"line\">[preflight] Pulling images required for setting up a Kubernetes cluster</span><br><span class=\"line\">[preflight] This might take a minute or two, depending on the speed of your internet connection</span><br><span class=\"line\">[preflight] You can also perform this action in beforehand using &#x27;kubeadm config images pull&#x27;</span><br><span class=\"line\">[kubelet-<span class=\"keyword\">start</span>] Writing kubelet environment <span class=\"keyword\">file</span> <span class=\"keyword\">with</span> flags <span class=\"keyword\">to</span> <span class=\"keyword\">file</span> <span class=\"string\">&quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span></span><br><span class=\"line\">[kubelet-<span class=\"keyword\">start</span>] Writing kubelet configuration <span class=\"keyword\">to</span> <span class=\"keyword\">file</span> <span class=\"string\">&quot;/var/lib/kubelet/config.yaml&quot;</span></span><br><span class=\"line\">[kubelet-<span class=\"keyword\">start</span>] Activating the kubelet service</span><br><span class=\"line\">[certs] <span class=\"keyword\">Using</span> certificateDir folder <span class=\"string\">&quot;/etc/kubernetes/pki&quot;</span></span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;ca&quot;</span> certificate <span class=\"keyword\">and</span> <span class=\"keyword\">key</span></span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;apiserver&quot;</span> certificate <span class=\"keyword\">and</span> <span class=\"keyword\">key</span></span><br><span class=\"line\">[certs] apiserver serving cert <span class=\"keyword\">is</span> signed <span class=\"keyword\">for</span> DNS <span class=\"keyword\">names</span> [k8s-<span class=\"keyword\">master</span> kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] <span class=\"keyword\">and</span> IPs [<span class=\"number\">10.96</span><span class=\"number\">.0</span><span class=\"number\">.1</span> <span class=\"number\">192.168</span><span class=\"number\">.9</span><span class=\"number\">.10</span> <span class=\"number\">192.168</span><span class=\"number\">.9</span><span class=\"number\">.10</span>]</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;apiserver-kubelet-client&quot;</span> certificate <span class=\"keyword\">and</span> <span class=\"keyword\">key</span></span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;front-proxy-ca&quot;</span> certificate <span class=\"keyword\">and</span> <span class=\"keyword\">key</span></span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;front-proxy-client&quot;</span> certificate <span class=\"keyword\">and</span> <span class=\"keyword\">key</span></span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;etcd/ca&quot;</span> certificate <span class=\"keyword\">and</span> <span class=\"keyword\">key</span></span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;etcd/server&quot;</span> certificate <span class=\"keyword\">and</span> <span class=\"keyword\">key</span></span><br><span class=\"line\">[certs] etcd/<span class=\"keyword\">server</span> serving cert <span class=\"keyword\">is</span> signed <span class=\"keyword\">for</span> DNS <span class=\"keyword\">names</span> [k8s-<span class=\"keyword\">master</span> localhost] <span class=\"keyword\">and</span> IPs [<span class=\"number\">192.168</span><span class=\"number\">.9</span><span class=\"number\">.10</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> ::<span class=\"number\">1</span>]</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;etcd/peer&quot;</span> certificate <span class=\"keyword\">and</span> <span class=\"keyword\">key</span></span><br><span class=\"line\">[certs] etcd/peer serving cert <span class=\"keyword\">is</span> signed <span class=\"keyword\">for</span> DNS <span class=\"keyword\">names</span> [k8s-<span class=\"keyword\">master</span> localhost] <span class=\"keyword\">and</span> IPs [<span class=\"number\">192.168</span><span class=\"number\">.9</span><span class=\"number\">.10</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> ::<span class=\"number\">1</span>]</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;etcd/healthcheck-client&quot;</span> certificate <span class=\"keyword\">and</span> <span class=\"keyword\">key</span></span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;apiserver-etcd-client&quot;</span> certificate <span class=\"keyword\">and</span> <span class=\"keyword\">key</span></span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;sa&quot;</span> <span class=\"keyword\">key</span> <span class=\"keyword\">and</span> <span class=\"keyword\">public</span> <span class=\"keyword\">key</span></span><br><span class=\"line\">[kubeconfig] <span class=\"keyword\">Using</span> kubeconfig folder <span class=\"string\">&quot;/etc/kubernetes&quot;</span></span><br><span class=\"line\">[kubeconfig] Writing <span class=\"string\">&quot;admin.conf&quot;</span> kubeconfig <span class=\"keyword\">file</span></span><br><span class=\"line\">[kubeconfig] Writing <span class=\"string\">&quot;kubelet.conf&quot;</span> kubeconfig <span class=\"keyword\">file</span></span><br><span class=\"line\">[kubeconfig] Writing <span class=\"string\">&quot;controller-manager.conf&quot;</span> kubeconfig <span class=\"keyword\">file</span></span><br><span class=\"line\">[kubeconfig] Writing <span class=\"string\">&quot;scheduler.conf&quot;</span> kubeconfig <span class=\"keyword\">file</span></span><br><span class=\"line\">[control-plane] <span class=\"keyword\">Using</span> manifest folder <span class=\"string\">&quot;/etc/kubernetes/manifests&quot;</span></span><br><span class=\"line\">[control-plane] Creating <span class=\"keyword\">static</span> Pod manifest <span class=\"keyword\">for</span> <span class=\"string\">&quot;kube-apiserver&quot;</span></span><br><span class=\"line\">[control-plane] Creating <span class=\"keyword\">static</span> Pod manifest <span class=\"keyword\">for</span> <span class=\"string\">&quot;kube-controller-manager&quot;</span></span><br><span class=\"line\">[control-plane] Creating <span class=\"keyword\">static</span> Pod manifest <span class=\"keyword\">for</span> <span class=\"string\">&quot;kube-scheduler&quot;</span></span><br><span class=\"line\">[etcd] Creating <span class=\"keyword\">static</span> Pod manifest <span class=\"keyword\">for</span> <span class=\"keyword\">local</span> etcd <span class=\"keyword\">in</span> <span class=\"string\">&quot;/etc/kubernetes/manifests&quot;</span></span><br><span class=\"line\">[<span class=\"keyword\">wait</span>-control-plane] Waiting <span class=\"keyword\">for</span> the kubelet <span class=\"keyword\">to</span> boot up the control plane <span class=\"keyword\">as</span> <span class=\"keyword\">static</span> Pods <span class=\"keyword\">from</span> <span class=\"keyword\">directory</span> <span class=\"string\">&quot;/etc/kubernetes/manifests&quot;</span>. This can take up <span class=\"keyword\">to</span> <span class=\"number\">4</span>m0s</span><br><span class=\"line\">[apiclient] <span class=\"keyword\">All</span> control plane components <span class=\"keyword\">are</span> healthy <span class=\"keyword\">after</span> <span class=\"number\">16.501777</span> <span class=\"keyword\">seconds</span></span><br><span class=\"line\">[upload-config] Storing the configuration used <span class=\"keyword\">in</span> ConfigMap <span class=\"string\">&quot;kubeadm-config&quot;</span> <span class=\"keyword\">in</span> the <span class=\"string\">&quot;kube-system&quot;</span> Namespace</span><br><span class=\"line\">[kubelet] Creating a ConfigMap <span class=\"string\">&quot;kubelet-config-1.16&quot;</span> <span class=\"keyword\">in</span> namespace kube-<span class=\"keyword\">system</span> <span class=\"keyword\">with</span> the configuration <span class=\"keyword\">for</span> the kubelets <span class=\"keyword\">in</span> the cluster</span><br><span class=\"line\">[upload-certs] Skipping phase. Please see <span class=\"comment\">--upload-certs</span></span><br><span class=\"line\">[mark-control-plane] Marking the node k8s-<span class=\"keyword\">master</span> <span class=\"keyword\">as</span> control-plane <span class=\"keyword\">by</span> adding the label <span class=\"string\">&quot;node-role.kubernetes.io/master=&#x27;&#x27;&quot;</span></span><br><span class=\"line\">[mark-control-plane] Marking the node k8s-<span class=\"keyword\">master</span> <span class=\"keyword\">as</span> control-plane <span class=\"keyword\">by</span> adding the taints [node-role.kubernetes.io/<span class=\"keyword\">master</span>:NoSchedule]</span><br><span class=\"line\">[bootstrap-token] <span class=\"keyword\">Using</span> token: px979r.mphk9ee5ya8fgy44</span><br><span class=\"line\">[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC <span class=\"keyword\">Roles</span></span><br><span class=\"line\">[bootstrap-token] configured RBAC <span class=\"keyword\">rules</span> <span class=\"keyword\">to</span> <span class=\"keyword\">allow</span> Node Bootstrap tokens <span class=\"keyword\">to</span> post CSRs <span class=\"keyword\">in</span> <span class=\"keyword\">order</span> <span class=\"keyword\">for</span> nodes <span class=\"keyword\">to</span> <span class=\"keyword\">get</span> <span class=\"keyword\">long</span> term certificate credentials</span><br><span class=\"line\">[bootstrap-token] configured RBAC <span class=\"keyword\">rules</span> <span class=\"keyword\">to</span> <span class=\"keyword\">allow</span> the csrapprover controller automatically approve CSRs <span class=\"keyword\">from</span> a Node Bootstrap Token</span><br><span class=\"line\">[bootstrap-token] configured RBAC <span class=\"keyword\">rules</span> <span class=\"keyword\">to</span> <span class=\"keyword\">allow</span> certificate rotation <span class=\"keyword\">for</span> <span class=\"keyword\">all</span> node <span class=\"keyword\">client</span> certificates <span class=\"keyword\">in</span> the cluster</span><br><span class=\"line\">[bootstrap-token] Creating the <span class=\"string\">&quot;cluster-info&quot;</span> ConfigMap <span class=\"keyword\">in</span> the <span class=\"string\">&quot;kube-public&quot;</span> namespace</span><br><span class=\"line\">[addons] Applied essential addon: CoreDNS</span><br><span class=\"line\">[addons] Applied essential addon: kube-proxy</span><br><span class=\"line\"></span><br><span class=\"line\">Your Kubernetes control-plane has <span class=\"keyword\">initialized</span> successfully!</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">To</span> <span class=\"keyword\">start</span> <span class=\"keyword\">using</span> your cluster, you need <span class=\"keyword\">to</span> run the <span class=\"keyword\">following</span> <span class=\"keyword\">as</span> a regular <span class=\"keyword\">user</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">  mkdir -p $HOME/.kube</span><br><span class=\"line\">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class=\"line\">  sudo chown $(<span class=\"keyword\">id</span> -u):$(<span class=\"keyword\">id</span> -g) $HOME/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\">You should <span class=\"keyword\">now</span> deploy a pod network <span class=\"keyword\">to</span> the cluster.</span><br><span class=\"line\">Run <span class=\"string\">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> <span class=\"keyword\">with</span> one <span class=\"keyword\">of</span> the options listed <span class=\"keyword\">at</span>:</span><br><span class=\"line\">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class=\"line\"></span><br><span class=\"line\">You can <span class=\"keyword\">now</span> <span class=\"keyword\">join</span> <span class=\"keyword\">any</span> <span class=\"built_in\">number</span> <span class=\"keyword\">of</span> control-plane nodes <span class=\"keyword\">by</span> copying certificate authorities </span><br><span class=\"line\"><span class=\"keyword\">and</span> service <span class=\"keyword\">account</span> <span class=\"keyword\">keys</span> <span class=\"keyword\">on</span> <span class=\"keyword\">each</span> node <span class=\"keyword\">and</span> <span class=\"keyword\">then</span> running the <span class=\"keyword\">following</span> <span class=\"keyword\">as</span> root:</span><br><span class=\"line\"></span><br><span class=\"line\">  kubeadm <span class=\"keyword\">join</span> <span class=\"number\">192.168</span><span class=\"number\">.9</span><span class=\"number\">.10</span>:<span class=\"number\">6443</span> <span class=\"comment\">--token px979r.mphk9ee5ya8fgy44 \\</span></span><br><span class=\"line\">    <span class=\"comment\">--discovery-token-ca-cert-hash sha256:5e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51 \\</span></span><br><span class=\"line\">    <span class=\"comment\">--control-plane \t  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Then</span> you can <span class=\"keyword\">join</span> <span class=\"keyword\">any</span> <span class=\"built_in\">number</span> <span class=\"keyword\">of</span> worker nodes <span class=\"keyword\">by</span> running the <span class=\"keyword\">following</span> <span class=\"keyword\">on</span> <span class=\"keyword\">each</span> <span class=\"keyword\">as</span> root:</span><br><span class=\"line\"></span><br><span class=\"line\">kubeadm <span class=\"keyword\">join</span> <span class=\"number\">192.168</span><span class=\"number\">.9</span><span class=\"number\">.10</span>:<span class=\"number\">6443</span> <span class=\"comment\">--token px979r.mphk9ee5ya8fgy44 \\</span></span><br><span class=\"line\">    <span class=\"comment\">--discovery-token-ca-cert-hash sha256:5e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51 </span></span><br></pre></td></tr></table></figure>\n拷贝 kubeconfig 文件<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>这里的路径为/root</span><br><span class=\"line\">mkdir -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">cp -i <span class=\"regexp\">/etc/</span>kubernetes<span class=\"regexp\">/admin.conf $HOME/</span>.kube/config</span><br><span class=\"line\">chown $(id -u):$(id -g) <span class=\"variable\">$HOME</span><span class=\"regexp\">/.kube/</span>config</span><br></pre></td></tr></table></figure>\n<h2 id=\"master添加节点\"><a href=\"#master添加节点\" class=\"headerlink\" title=\"master添加节点\"></a>master添加节点</h2>node1和node2相同操作<br>将master节点上的$HOME/.kube/config 文件拷贝到node节点对应的文件中<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.创建目录，这里的路径为/root</span><br><span class=\"line\">mkdir -p <span class=\"variable\">$HOME</span>/.kube </span><br><span class=\"line\"></span><br><span class=\"line\">2.把master节点上的config文件拷贝到node1和node2的<span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">scp k8s-master1:~/.kube<span class=\"built_in\">/config </span><span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\"></span><br><span class=\"line\">3.修改权限</span><br><span class=\"line\">chown $(id -u):$(id -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>\n将node1和node2加入到集群中<br>这里需要用到2.2中初始化master最后生成的token和sha256值<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">#kubeadm <span class=\"keyword\">join</span> <span class=\"number\">192.168</span>.<span class=\"number\">9.10</span>:<span class=\"number\">6443</span> --token px979r.mphk9ee5ya8fgy44     --discovery-token-<span class=\"keyword\">ca</span>-cert-hash <span class=\"built_in\">sha256</span>:<span class=\"number\">5</span>e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51 </span><br><span class=\"line\">  </span><br><span class=\"line\">输出结果  </span><br><span class=\"line\">[preflight] Running <span class=\"keyword\">pre</span>-flight checks</span><br><span class=\"line\">\t[WARNING IsDockerSystemdCheck]: detected <span class=\"string\">&quot;cgroupfs&quot;</span> <span class=\"keyword\">as</span> the Docker cgroup driver. The recommended driver <span class=\"keyword\">is</span> <span class=\"string\">&quot;systemd&quot;</span>. Please follow the guide at http<span class=\"variable\">s:</span>//kubernetes.io/docs/setup/cri/</span><br><span class=\"line\">[preflight] Reading configuration from the cluster...</span><br><span class=\"line\">[preflight] FYI: You can look at this config <span class=\"keyword\">file</span> with <span class=\"string\">&#x27;kubectl -n kube-system get cm kubeadm-config -oyaml&#x27;</span></span><br><span class=\"line\">[kubelet-start] Downloading configuration <span class=\"keyword\">for</span> the kubelet from the <span class=\"string\">&quot;kubelet-config-1.16&quot;</span> ConfigMap in the kube-<span class=\"built_in\">system</span> namespace</span><br><span class=\"line\">[kubelet-start] Writing kubelet configuration <span class=\"keyword\">to</span> <span class=\"keyword\">file</span> <span class=\"string\">&quot;/var/lib/kubelet/config.yaml&quot;</span></span><br><span class=\"line\">[kubelet-start] Writing kubelet environment <span class=\"keyword\">file</span> with flags <span class=\"keyword\">to</span> <span class=\"keyword\">file</span> <span class=\"string\">&quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span></span><br><span class=\"line\">[kubelet-start] Activating the kubelet service</span><br><span class=\"line\">[kubelet-start] Waiting <span class=\"keyword\">for</span> the kubelet <span class=\"keyword\">to</span> perform the TLS Bootstrap...</span><br><span class=\"line\"></span><br><span class=\"line\">This node <span class=\"built_in\">has</span> joined the cluster:</span><br><span class=\"line\">* Certificate signing request was sent <span class=\"keyword\">to</span> apiserver <span class=\"built_in\">and</span> <span class=\"keyword\">a</span> response was received.</span><br><span class=\"line\">* The Kubelet was informed of the <span class=\"keyword\">new</span> secure connection details.</span><br><span class=\"line\"></span><br><span class=\"line\">Run <span class=\"string\">&#x27;kubectl get nodes&#x27;</span> <span class=\"keyword\">on</span> the control-plane <span class=\"keyword\">to</span> see this node <span class=\"keyword\">join</span> the cluster.</span><br></pre></td></tr></table></figure>\n如果忘记了token和sha256值，可以在master节点使用如下命令查看<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//查看token</span></span><br><span class=\"line\">#kubeadm token list</span><br><span class=\"line\">TOKEN                     TTL       EXPIRES                     USAGES                   DESCRIPTION   EXTRA GROUPS</span><br><span class=\"line\">px979r.mphk9ee5ya8fgy44   <span class=\"number\">20</span>h       <span class=\"number\">2020</span><span class=\"number\">-03</span><span class=\"number\">-18</span>T13:<span class=\"number\">49</span>:<span class=\"number\">48</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>   authentication,signing   &lt;none&gt;        system:bootstrappers:kubeadm:<span class=\"keyword\">default</span>-node-token</span><br><span class=\"line\">            </span><br><span class=\"line\">            </span><br><span class=\"line\"><span class=\"comment\">//查看sha256</span></span><br><span class=\"line\">#openssl x509 -pubkey -<span class=\"keyword\">in</span> /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der <span class=\"number\">2</span>&gt;/dev/<span class=\"literal\">null</span> | openssl dgst -sha256 -hex | sed <span class=\"string\">&#x27;s/^.* //&#x27;</span></span><br><span class=\"line\"><span class=\"number\">5e7</span>c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//同时查看token和sha256</span></span><br><span class=\"line\">#kubeadm token create --print-join-command</span><br><span class=\"line\">kubeadm join <span class=\"number\">192.168</span><span class=\"number\">.9</span><span class=\"number\">.10</span>:<span class=\"number\">6443</span> --token <span class=\"number\">9</span>b28zg.oyt0kvvpmtrem4bg     --discovery-token-ca-cert-hash sha256:<span class=\"number\">5e7</span>c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51</span><br></pre></td></tr></table></figure>\nmaster节点查看node，发现状态都是NotReady，因为还没有安装网络插件，这里我们安装calio官方插件文档<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">kubectl</span> get nodes</span><br><span class=\"line\"><span class=\"attribute\">NAME</span>         STATUS     ROLES    AGE     VERSION</span><br><span class=\"line\"><span class=\"attribute\">k8s</span>-master   NotReady   master   <span class=\"number\">19</span>m     v<span class=\"number\">1</span>.<span class=\"number\">16</span>.<span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"attribute\">k8s</span>-node<span class=\"number\">1</span>    NotReady   &lt;none&gt;   <span class=\"number\">4</span>m<span class=\"number\">10</span>s   v<span class=\"number\">1</span>.<span class=\"number\">16</span>.<span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"attribute\">k8s</span>-node<span class=\"number\">2</span>    NotReady   &lt;none&gt;   <span class=\"number\">4</span>m<span class=\"number\">3</span>s    v<span class=\"number\">1</span>.<span class=\"number\">16</span>.<span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"master节点安装网络插件calio\"><a href=\"#master节点安装网络插件calio\" class=\"headerlink\" title=\"master节点安装网络插件calio\"></a>master节点安装网络插件calio</h2><figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//下载文件</span></span><br><span class=\"line\">wget https:<span class=\"comment\">//docs.projectcalico.org/v3.8/manifests/calico.yaml</span></span><br><span class=\"line\">  </span><br><span class=\"line\">将文件中的<span class=\"number\">620</span>行改为如下，因为在上边kubeadm-config.yaml配置文件中指定了容器组IP  <span class=\"number\">620</span>行</span><br><span class=\"line\">value: <span class=\"string\">&quot;10.20.0.1/16&quot;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//修改完成后安装calico网络插件</span></span><br><span class=\"line\">kubectl apply -f calico.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//安装完成后稍等一会查看pods状态</span></span><br><span class=\"line\">kubectl <span class=\"keyword\">get</span> pods -n kube-system</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                      READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">calico-kube-controllers-dc6cb64cb<span class=\"number\">-8</span>sh59   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">6</span>m22s</span><br><span class=\"line\">calico-node<span class=\"number\">-89</span>s9k                         <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">6</span>m22s</span><br><span class=\"line\">calico-node-dkt7w                         <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">6</span>m22s</span><br><span class=\"line\">calico-node-tgg2h                         <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">6</span>m22s</span><br><span class=\"line\">coredns<span class=\"number\">-667f</span>964f9b<span class=\"number\">-7</span>hrj9                  <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">33</span>m</span><br><span class=\"line\">coredns<span class=\"number\">-667f</span>964f9b<span class=\"number\">-8</span>q7sh                  <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">33</span>m</span><br><span class=\"line\">etcd-k8s-master                           <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">33</span>m</span><br><span class=\"line\">kube-apiserver-k8s-master                 <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">32</span>m</span><br><span class=\"line\">kube-controller-manager-k8s-master        <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">33</span>m</span><br><span class=\"line\">kube-proxy-b2r5d                          <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">12</span>m</span><br><span class=\"line\">kube-proxy-nd982                          <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">11</span>m</span><br><span class=\"line\">kube-proxy-zh6cz                          <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">33</span>m</span><br><span class=\"line\">kube-scheduler-k8s-master                 <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">32</span>m</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查看node状态</span></span><br><span class=\"line\">[<span class=\"symbol\">root@</span>k8s-master ~]# kubectl <span class=\"keyword\">get</span> nodes </span><br><span class=\"line\">NAME         STATUS   ROLES    AGE     VERSION</span><br><span class=\"line\">k8s-master   Ready    master   <span class=\"number\">31</span>m     v1<span class=\"number\">.16</span><span class=\"number\">.9</span></span><br><span class=\"line\">k8s-node1    Ready    &lt;none&gt;   <span class=\"number\">9</span>m46s   v1<span class=\"number\">.16</span><span class=\"number\">.9</span></span><br><span class=\"line\">k8s-node2    Ready    &lt;none&gt;   <span class=\"number\">9</span>m22s   v1<span class=\"number\">.16</span><span class=\"number\">.9</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"安装Dashboard-可选\"><a href=\"#安装Dashboard-可选\" class=\"headerlink\" title=\"安装Dashboard(可选)\"></a>安装Dashboard(可选)</h2>下载文件及修改内容</li>\n</ul>\n<p><a href=\"https://github.com/kubernetes/dashboard/releases\">这里查看dashboard对应的k8s版本</a></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>下载文件  v2.<span class=\"number\">0.0</span>-rc3是中文版本，beta8是英文版本</span><br><span class=\"line\">wget https:<span class=\"regexp\">//</span>raw.githubusercontent.com<span class=\"regexp\">/kubernetes/</span>dashboard<span class=\"regexp\">/v2.0.0-beta8/</span>aio<span class=\"regexp\">/deploy/</span>recommended.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">wget https:<span class=\"regexp\">//</span>raw.githubusercontent.com<span class=\"regexp\">/kubernetes/</span>dashboard<span class=\"regexp\">/v2.0.0-rc3/</span>aio<span class=\"regexp\">/deploy/</span>recommended.yaml  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"regexp\">//</span>修改Service为NodePort类型</span><br><span class=\"line\"><span class=\"number\">42</span>行下增加一行</span><br><span class=\"line\">nodePort: <span class=\"number\">30001</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"number\">44</span>行下增加一行</span><br><span class=\"line\">type: NodePort</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span>原先内容</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - port: <span class=\"number\">443</span></span><br><span class=\"line\">      targetPort: <span class=\"number\">8443</span></span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    k8s-app: kubernetes-dashboard</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span>修改后内容</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - port: <span class=\"number\">443</span></span><br><span class=\"line\">      targetPort: <span class=\"number\">8443</span></span><br><span class=\"line\">      nodePort: <span class=\"number\">30001</span>   <span class=\"comment\">#增加，指定nodeport端口</span></span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    k8s-app: kubernetes-dashboard</span><br><span class=\"line\">  type: NodePort\t\t<span class=\"comment\">#增加，修改类型为nodeport</span></span><br></pre></td></tr></table></figure>\n<p>部署dashboard</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl <span class=\"built_in\">apply</span> -f recommended.yaml</span><br></pre></td></tr></table></figure>\n<p>查看dashboard的运行状态及外网访问端口</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//查看dashboard运行状态</span></span><br><span class=\"line\">#kubectl <span class=\"keyword\">get</span> pods -n kubernetes-dashboard -l k8s-app=kubernetes-dashboard</span><br><span class=\"line\">NAME                                    READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">kubernetes-dashboard<span class=\"number\">-5996555f</span>d8<span class=\"number\">-2</span>ppc5   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">8</span>m16s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查看dashboard外网访问端口，命名空间为kubernetes-dashboard</span></span><br><span class=\"line\">#kubectl <span class=\"keyword\">get</span> svc -n kubernetes-dashboard -l k8s-app=kubernetes-dashboard</span><br><span class=\"line\">kubectl <span class=\"keyword\">get</span> svc -n kubernetes-dashboard -l k8s-app=kubernetes-dashboard</span><br><span class=\"line\">NAME                   TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)         AGE</span><br><span class=\"line\">kubernetes-dashboard   NodePort   <span class=\"number\">10.96</span><span class=\"number\">.142</span><span class=\"number\">.172</span>   &lt;none&gt;        <span class=\"number\">443</span>:<span class=\"number\">30001</span>/TCP   <span class=\"number\">8</span>m37s</span><br></pre></td></tr></table></figure>\n<p>通过上边的30001端口访问dashboard，注意是https</p>\n<blockquote>\n<p>k8s1.16.9这个版本中，使用的dashboard版本是2.0.0-beta8，只有火狐浏览器可以访问，其余浏览器都不能访问，会报错</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">您的连接不是私密连接</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用火狐浏览器访问，由于 dashboard 默认是自建的 https 证书，该证书是不受浏览器信任的，所以我们需要强制跳转就可以了</p>\n</blockquote>\n<p>然后创建一个具有全局所有权限的用户来登录Dashboard</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">//编辑admin.yaml文件</span></span><br><span class=\"line\"><span class=\"string\">cat</span> <span class=\"string\">&gt;</span> <span class=\"string\">admin.yaml</span> <span class=\"string\">&lt;&lt;EOF</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">admin</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">rbac.authorization.kubernetes.io/autoupdate:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">cluster-admin</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">admin</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">admin</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//直接创建</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">apply</span> <span class=\"string\">-f</span> <span class=\"string\">admin.yaml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//查看token</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">get</span> <span class=\"string\">secret</span> <span class=\"string\">-n</span> <span class=\"string\">kube-system|grep</span> <span class=\"string\">admin-token</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">admin-token-j7sfh</span>                                <span class=\"string\">kubernetes.io/service-account-token</span>   <span class=\"number\">3</span>      <span class=\"string\">23s</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//获取base64解码后的字符串，注意需要用到上边命令查看到的token，会生成很长的一串字符串</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">get</span> <span class=\"string\">secret</span> <span class=\"string\">admin-token-j7sfh</span> <span class=\"string\">-o</span> <span class=\"string\">jsonpath=&#123;.data.token&#125;</span> <span class=\"string\">-n</span> <span class=\"string\">kube-system</span> <span class=\"string\">|base64</span> <span class=\"string\">-d</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#直接用这条命令搞定</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">get</span> <span class=\"string\">secret</span> <span class=\"string\">`kubectl</span> <span class=\"string\">get</span> <span class=\"string\">secret</span> <span class=\"string\">-n</span> <span class=\"string\">kube-system|grep</span> <span class=\"string\">admin-token|awk</span> <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span><span class=\"string\">`</span> <span class=\"string\">-o</span> <span class=\"string\">jsonpath=&#123;.data.token&#125;</span> <span class=\"string\">-n</span> <span class=\"string\">kube-system</span> <span class=\"string\">|base64</span> <span class=\"string\">-d</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">echo</span></span><br></pre></td></tr></table></figure>\n\n<p>到此，使用kubeadm安装k8s 1.16.9完成！！！</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://kubesphere.com.cn/forum/d/1272-kubeadm-k8s-kubesphere-2-1-1\">在 Kubernetes集群中 安装 KubeSphere2.1</a></p>\n","site":{"data":{}},"more":"<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><h2 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h2><table>\n<thead>\n<tr>\n<th align=\"center\">角色</th>\n<th align=\"center\">IP地址</th>\n<th align=\"center\">主机名</th>\n<th align=\"center\">docker版本</th>\n<th align=\"center\">硬件配置</th>\n<th align=\"center\">系统</th>\n<th align=\"center\">内核</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">master</td>\n<td align=\"center\">192.168.9.10</td>\n<td align=\"center\">k8s-master</td>\n<td align=\"center\">18.09.9</td>\n<td align=\"center\">2c4g</td>\n<td align=\"center\">CentOS7.7</td>\n<td align=\"center\">3.10.0-1062.el7.x86_64</td>\n</tr>\n<tr>\n<td align=\"center\">node1</td>\n<td align=\"center\">192.168.9.13</td>\n<td align=\"center\">k8s-node1</td>\n<td align=\"center\">18.09.9</td>\n<td align=\"center\">2c6g</td>\n<td align=\"center\">CentOS7.7</td>\n<td align=\"center\">3.10.0-1062.el7.x86_64</td>\n</tr>\n<tr>\n<td align=\"center\">node2</td>\n<td align=\"center\">192.168.9.14</td>\n<td align=\"center\">k8s-node2</td>\n<td align=\"center\">18.09.9</td>\n<td align=\"center\">2c6g</td>\n<td align=\"center\">CentOS7.7</td>\n<td align=\"center\">3.10.0-1062.el7.x86_64</td>\n</tr>\n</tbody></table>\n<h2 id=\"每个节点配置host信息\"><a href=\"#每个节点配置host信息\" class=\"headerlink\" title=\"每个节点配置host信息\"></a>每个节点配置host信息</h2><figure class=\"highlight accesslog\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &gt;&gt; /etc/hosts &lt;&lt;EOF</span><br><span class=\"line\"><span class=\"number\">192.168.9.10</span> k8s-master</span><br><span class=\"line\"><span class=\"number\">192.168.9.13</span> k8s-node1</span><br><span class=\"line\"><span class=\"number\">192.168.9.14</span> k8s-node2</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<h2 id=\"禁用防火墙和selinux\"><a href=\"#禁用防火墙和selinux\" class=\"headerlink\" title=\"禁用防火墙和selinux\"></a>禁用防火墙和selinux</h2><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>禁用防火墙</span><br><span class=\"line\">systemctl stop firewalld &amp;&amp; systemctl disable firewalld</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span>禁用selinux</span><br><span class=\"line\"><span class=\"comment\">#临时修改</span></span><br><span class=\"line\">setenforce <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#永久修改，重启服务器后生效</span></span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;7s/enforcing/disabled/&#x27;</span> <span class=\"regexp\">/etc/</span>selinux/config</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建-etc-sysctl-d-k8s-conf文件，添加如下内容\"><a href=\"#创建-etc-sysctl-d-k8s-conf文件，添加如下内容\" class=\"headerlink\" title=\"创建/etc/sysctl.d/k8s.conf文件，添加如下内容\"></a>创建<code>/etc/sysctl.d/k8s.conf</code>文件，添加如下内容</h2><figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//向文件中写入以下内容</span></span><br><span class=\"line\">cat &gt;/etc/sysctl.d/k8s<span class=\"selector-class\">.conf</span> &lt;&lt;EOF</span><br><span class=\"line\">net<span class=\"selector-class\">.bridge</span><span class=\"selector-class\">.bridge-nf-call-ip6tables</span> = <span class=\"number\">1</span></span><br><span class=\"line\">net<span class=\"selector-class\">.bridge</span><span class=\"selector-class\">.bridge-nf-call-iptables</span> = <span class=\"number\">1</span></span><br><span class=\"line\">net<span class=\"selector-class\">.ipv4</span><span class=\"selector-class\">.ip_forward</span> = <span class=\"number\">1</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//执行以下命令生效</span></span><br><span class=\"line\">modprobe br_netfilter &amp;&amp; sysctl -<span class=\"selector-tag\">p</span> /etc/sysctl.d/k8s.conf</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装ipvs\"><a href=\"#安装ipvs\" class=\"headerlink\" title=\"安装ipvs\"></a>安装ipvs</h2><p>脚本创建了的<code>/etc/sysconfig/modules/ipvs.modules</code>文件，保证在节点重启后能自动加载所需模块。使用<code>lsmod | grep -e ip_vs -e nf_conntrack_ipv4</code>命令查看是否已经正确加载所需的内核模块</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//向文件中写入以下内容</span></span><br><span class=\"line\">cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;EOF</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">modprobe -- ip_vs</span><br><span class=\"line\">modprobe -- ip_vs_rr</span><br><span class=\"line\">modprobe -- ip_vs_wrr</span><br><span class=\"line\">modprobe -- ip_vs_sh</span><br><span class=\"line\">modprobe -- nf_conntrack_ipv4</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//修改权限以及查看是否已经正确加载所需的内核模块</span></span><br><span class=\"line\">chmod <span class=\"number\">755</span> /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span><br><span class=\"line\"></span><br><span class=\"line\">nf_conntrack_ipv4      <span class=\"number\">15053</span>  <span class=\"number\">0</span> </span><br><span class=\"line\">nf_defrag_ipv4         <span class=\"number\">12729</span>  <span class=\"number\">1</span> nf_conntrack_ipv4</span><br><span class=\"line\">ip_vs_sh               <span class=\"number\">12688</span>  <span class=\"number\">0</span> </span><br><span class=\"line\">ip_vs_wrr              <span class=\"number\">12697</span>  <span class=\"number\">0</span> </span><br><span class=\"line\">ip_vs_rr               <span class=\"number\">12600</span>  <span class=\"number\">0</span> </span><br><span class=\"line\">ip_vs                 <span class=\"number\">145497</span>  <span class=\"number\">6</span> ip_vs_rr,ip_vs_sh,ip_vs_wrr</span><br><span class=\"line\">nf_conntrack          <span class=\"number\">133095</span>  <span class=\"number\">2</span> ip_vs,nf_conntrack_ipv4</span><br><span class=\"line\">libcrc32c              <span class=\"number\">12644</span>  <span class=\"number\">3</span> xfs,ip_vs,nf_conntrack</span><br></pre></td></tr></table></figure>\n<p>安装ipset和ipvsadm(便于查看 ipvs 的代理规则)</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y <span class=\"keyword\">install</span> ipset ipvsadm</span><br></pre></td></tr></table></figure>\n<h2 id=\"关闭swap分区\"><a href=\"#关闭swap分区\" class=\"headerlink\" title=\"关闭swap分区\"></a>关闭swap分区</h2><p>修改<code>/etc/fstab</code>文件，注释掉 SWAP 的自动挂载，使用<code>free -m</code>确认 swap 已经关闭</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//手动关闭swap</span></span><br><span class=\"line\">swapoff -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//修改fstab文件，注释swap自动挂载</span></span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;/^\\/dev\\/mapper\\/centos-swap/c#/dev/mapper/centos-swap swap                    swap    defaults        0 0&#x27;</span> /etc/fstab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查看swap是否关闭</span></span><br><span class=\"line\">free -m</span><br><span class=\"line\"></span><br><span class=\"line\">total        used        free      <span class=\"keyword\">shared</span>  buff/cache   available</span><br><span class=\"line\">Mem:           <span class=\"number\">1994</span>         <span class=\"number\">682</span>         <span class=\"number\">612</span>           <span class=\"number\">9</span>         <span class=\"number\">699</span>        <span class=\"number\">1086</span></span><br><span class=\"line\">Swap:             <span class=\"number\">0</span>           <span class=\"number\">0</span>           <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>swappiness 参数调整，修改<code>/etc/sysctl.d/k8s.conf</code>添加下面一行</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &gt;&gt;/etc/sysctl.d/k8s<span class=\"selector-class\">.conf</span> &lt;&lt;EOF</span><br><span class=\"line\">vm.swappiness=<span class=\"number\">0</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使配置生效</span></span><br><span class=\"line\">sysctl -<span class=\"selector-tag\">p</span> /etc/sysctl.d/k8s.conf</span><br><span class=\"line\"></span><br><span class=\"line\">net<span class=\"selector-class\">.bridge</span><span class=\"selector-class\">.bridge-nf-call-ip6tables</span> = <span class=\"number\">1</span></span><br><span class=\"line\">net<span class=\"selector-class\">.bridge</span><span class=\"selector-class\">.bridge-nf-call-iptables</span> = <span class=\"number\">1</span></span><br><span class=\"line\">net<span class=\"selector-class\">.ipv4</span><span class=\"selector-class\">.ip_forward</span> = <span class=\"number\">1</span></span><br><span class=\"line\">vm<span class=\"selector-class\">.swappiness</span> = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"安装docker18-09-9\"><a href=\"#安装docker18-09-9\" class=\"headerlink\" title=\"安装docker18.09.9\"></a>安装docker18.09.9</h2><p>1.添加阿里云yum源</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum-config-manager --add-repo http:<span class=\"regexp\">//mi</span>rrors.aliyun.com<span class=\"regexp\">/docker-ce/</span>linux<span class=\"regexp\">/centos/</span>docker-ce.repo</span><br></pre></td></tr></table></figure>\n<p>2.查看可用版本</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum list docker-ce --showduplicates | sort -r</span><br><span class=\"line\"></span><br><span class=\"line\">已加载插件：fastestmirror, langpacks</span><br><span class=\"line\">可安装的软件包</span><br><span class=\"line\"> * updates: mirrors.aliyun.com</span><br><span class=\"line\">Loading mirror speeds <span class=\"keyword\">from</span> cached hostfile</span><br><span class=\"line\"> * extras: mirrors.aliyun.com</span><br><span class=\"line\">docker-ce.x86_64            <span class=\"number\">3</span>:<span class=\"number\">19.03</span><span class=\"number\">.5</span><span class=\"number\">-3.</span>el7                     docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64            <span class=\"number\">3</span>:<span class=\"number\">19.03</span><span class=\"number\">.4</span><span class=\"number\">-3.</span>el7                     docker-ce-stable</span><br><span class=\"line\">。。。。。。</span><br><span class=\"line\">docker-ce.x86_64            <span class=\"number\">3</span>:<span class=\"number\">18.09</span><span class=\"number\">.9</span><span class=\"number\">-3.</span>el7                     docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64            <span class=\"number\">3</span>:<span class=\"number\">18.09</span><span class=\"number\">.8</span><span class=\"number\">-3.</span>el7                     docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64            <span class=\"number\">3</span>:<span class=\"number\">18.09</span><span class=\"number\">.7</span><span class=\"number\">-3.</span>el7                     docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64            <span class=\"number\">3</span>:<span class=\"number\">18.09</span><span class=\"number\">.6</span><span class=\"number\">-3.</span>el7                     docker-ce-stable</span><br><span class=\"line\">。。。。。。</span><br></pre></td></tr></table></figure>\n\n<p>3.安装docker18.09.9</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">yum</span> -y install docker-ce-<span class=\"number\">18</span>.<span class=\"number\">09</span>.<span class=\"number\">9</span>-<span class=\"number\">3</span>.el<span class=\"number\">7</span> docker-ce-cli-<span class=\"number\">18</span>.<span class=\"number\">09</span>.<span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n<p>4.启动docker并设置开机自启</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"keyword\">enable</span> docker &amp;&amp; systemctl <span class=\"keyword\">start</span> docker</span><br></pre></td></tr></table></figure>\n<p>5.配置阿里云docker镜像加速</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &gt; <span class=\"regexp\">/etc/</span>docker/daemon.json &lt;&lt;-<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;registry-mirrors&quot;</span>: [<span class=\"string\">&quot;https://gqk8w9va.mirror.aliyuncs.com&quot;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<p>6.配置完后重启docker</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">systemctl restart docker</span></span><br></pre></td></tr></table></figure>\n<p>7.查看加速</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">docker</span> <span class=\"string\">info</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">找到Registry</span> <span class=\"string\">Mirrors一行</span></span><br><span class=\"line\"><span class=\"attr\">Registry</span> <span class=\"string\">Mirrors:</span></span><br><span class=\"line\"> <span class=\"attr\">https</span>:<span class=\"string\">//gqk8w9va.mirror.aliyuncs.com/</span></span><br></pre></td></tr></table></figure>\n\n<p>8.查看docker版本<br>docker version</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Client</span>:</span><br><span class=\"line\"> <span class=\"attribute\">Version</span>:           <span class=\"number\">18</span>.<span class=\"number\">09</span>.<span class=\"number\">9</span></span><br><span class=\"line\"> <span class=\"attribute\">API</span> version:       <span class=\"number\">1</span>.<span class=\"number\">39</span></span><br><span class=\"line\"> <span class=\"attribute\">Go</span> version:        go<span class=\"number\">1</span>.<span class=\"number\">11</span>.<span class=\"number\">13</span></span><br><span class=\"line\"> <span class=\"attribute\">Git</span> commit:        <span class=\"number\">039</span>a<span class=\"number\">7</span>df<span class=\"number\">9</span>ba</span><br><span class=\"line\"> <span class=\"attribute\">Built</span>:             Wed Sep  <span class=\"number\">4</span> <span class=\"number\">16</span>:<span class=\"number\">51</span>:<span class=\"number\">21</span> <span class=\"number\">2019</span></span><br><span class=\"line\"> <span class=\"attribute\">OS</span>/Arch:           linux/amd<span class=\"number\">64</span></span><br><span class=\"line\"> <span class=\"attribute\">Experimental</span>:      false</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">Server</span>: Docker Engine - Community</span><br><span class=\"line\"> <span class=\"attribute\">Engine</span>:</span><br><span class=\"line\">  <span class=\"attribute\">Version</span>:          <span class=\"number\">18</span>.<span class=\"number\">09</span>.<span class=\"number\">9</span></span><br><span class=\"line\">  <span class=\"attribute\">API</span> version:      <span class=\"number\">1</span>.<span class=\"number\">39</span> (minimum version <span class=\"number\">1</span>.<span class=\"number\">12</span>)</span><br><span class=\"line\">  <span class=\"attribute\">Go</span> version:       go<span class=\"number\">1</span>.<span class=\"number\">11</span>.<span class=\"number\">13</span></span><br><span class=\"line\">  <span class=\"attribute\">Git</span> commit:       <span class=\"number\">039</span>a<span class=\"number\">7</span>df</span><br><span class=\"line\">  <span class=\"attribute\">Built</span>:            Wed Sep  <span class=\"number\">4</span> <span class=\"number\">16</span>:<span class=\"number\">22</span>:<span class=\"number\">32</span> <span class=\"number\">2019</span></span><br><span class=\"line\">  <span class=\"attribute\">OS</span>/Arch:          linux/amd<span class=\"number\">64</span></span><br><span class=\"line\">  <span class=\"attribute\">Experimental</span>:     false</span><br></pre></td></tr></table></figure>\n<ul>\n<li>若有需要网络代理的，请在docker中配置网络代理，否则docker无法下载镜像<h2 id=\"修改docker-Cgroup-Driver为systemd\"><a href=\"#修改docker-Cgroup-Driver为systemd\" class=\"headerlink\" title=\"修改docker Cgroup Driver为systemd\"></a>修改docker Cgroup Driver为systemd</h2><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#修改docker Cgroup Driver为systemd</span></span><br><span class=\"line\">将<span class=\"regexp\">/usr/</span>lib<span class=\"regexp\">/systemd/</span>system<span class=\"regexp\">/docker.service文件中的这一行 ExecStart=/u</span>sr<span class=\"regexp\">/bin/</span>dockerd -H fd:<span class=\"regexp\">//</span> --containerd=<span class=\"regexp\">/run/</span>containerd/containerd.sock</span><br><span class=\"line\"></span><br><span class=\"line\">修改为 ExecStart=<span class=\"regexp\">/usr/</span>bin<span class=\"regexp\">/dockerd -H fd:/</span><span class=\"regexp\">/ --containerd=/</span>run<span class=\"regexp\">/containerd/</span>containerd.sock --exec-opt native.cgroupdriver=systemd</span><br><span class=\"line\"></span><br><span class=\"line\">如果不修改，在添加 worker 节点时可能会碰到如下错误</span><br><span class=\"line\">[WARNING IsDockerSystemdCheck]: detected <span class=\"string\">&quot;cgroupfs&quot;</span> as the Docker cgroup driver. The recommended driver is <span class=\"string\">&quot;systemd&quot;</span>. </span><br><span class=\"line\">Please follow the guide at https:<span class=\"regexp\">//</span>kubernetes.io<span class=\"regexp\">/docs/</span>setup<span class=\"regexp\">/cri/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span>使用如下命令修改  </span><br><span class=\"line\">sed -i.bak <span class=\"string\">&quot;s#^ExecStart=/usr/bin/dockerd.*#ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --exec-opt native.cgroupdriver=systemd#g&quot;</span> <span class=\"regexp\">/usr/</span>lib<span class=\"regexp\">/systemd/</span>system/docker.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span>重启docker</span><br><span class=\"line\">systemctl daemon-reload &amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装Kubeadm\"><a href=\"#安装Kubeadm\" class=\"headerlink\" title=\"安装Kubeadm\"></a>安装Kubeadm</h2>需要科学上网<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &gt;<span class=\"regexp\">/etc/yum</span>.repos.d/kubernetes.repo&lt;&lt;EOF</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=https:<span class=\"regexp\">//</span>packages.cloud.google.com<span class=\"regexp\">/yum/</span>repos/kubernetes-el7-x86_64</span><br><span class=\"line\">enabled=<span class=\"number\">1</span></span><br><span class=\"line\">gpgcheck=<span class=\"number\">1</span></span><br><span class=\"line\">repo_gpgcheck=<span class=\"number\">1</span></span><br><span class=\"line\">gpgkey=https:<span class=\"regexp\">//</span>packages.cloud.google.com<span class=\"regexp\">/yum/</span>doc/yum-key.gpg</span><br><span class=\"line\">        https:<span class=\"regexp\">//</span>packages.cloud.google.com<span class=\"regexp\">/yum/</span>doc/rpm-package-key.gpg</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n使用阿里云yum源<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &gt;<span class=\"regexp\">/etc/yum</span>.repos.d/kubernetes.repo &lt;&lt;EOF</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=http:<span class=\"regexp\">//mi</span>rrors.aliyun.com<span class=\"regexp\">/kubernetes/yum</span><span class=\"regexp\">/repos/</span>kubernetes-el7-x86_64</span><br><span class=\"line\">enabled=<span class=\"number\">1</span></span><br><span class=\"line\">gpgcheck=<span class=\"number\">0</span></span><br><span class=\"line\">repo_gpgcheck=<span class=\"number\">0</span></span><br><span class=\"line\">gpgkey=http:<span class=\"regexp\">//mi</span>rrors.aliyun.com<span class=\"regexp\">/kubernetes/yum</span><span class=\"regexp\">/doc/yum</span>-key.gpg</span><br><span class=\"line\">        http:<span class=\"regexp\">//mi</span>rrors.aliyun.com<span class=\"regexp\">/kubernetes/yum</span><span class=\"regexp\">/doc/</span>rpm-package-key.gpg</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n安装 kubeadm、kubelet、kubectl(阿里云yum源会随官方更新最新版，因此指定版本)<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//安装1.16.9版本</span></span><br><span class=\"line\">yum -y install kubelet<span class=\"number\">-1.16</span><span class=\"number\">.9</span> kubeadm<span class=\"number\">-1.16</span><span class=\"number\">.9</span> kubectl<span class=\"number\">-1.16</span><span class=\"number\">.9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查看版本</span></span><br><span class=\"line\">kubeadm version</span><br><span class=\"line\"></span><br><span class=\"line\">kubeadm <span class=\"attr\">version:</span> &amp;version.Info&#123;<span class=\"attr\">Major:</span><span class=\"string\">&quot;1&quot;</span>, <span class=\"attr\">Minor:</span><span class=\"string\">&quot;16&quot;</span>, <span class=\"attr\">GitVersion:</span><span class=\"string\">&quot;v1.16.9&quot;</span>, <span class=\"attr\">GitCommit:</span><span class=\"string\">&quot;a17149e1a189050796ced469dbd78d380f2ed5ef&quot;</span>, <span class=\"attr\">GitTreeState:</span><span class=\"string\">&quot;clean&quot;</span>, <span class=\"attr\">BuildDate:</span><span class=\"string\">&quot;2020-04-16T11:42:30Z&quot;</span>, <span class=\"attr\">GoVersion:</span><span class=\"string\">&quot;go1.13.9&quot;</span>, <span class=\"attr\">Compiler:</span><span class=\"string\">&quot;gc&quot;</span>, <span class=\"attr\">Platform:</span><span class=\"string\">&quot;linux/amd64&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n设置kubelet开机自启<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"builtin-name\">enable</span> kubelet</span><br></pre></td></tr></table></figure>\n设置k8s命令自动补全<figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install bash-completion</span><br><span class=\"line\"><span class=\"keyword\">source</span> <span class=\"regexp\">/usr/</span>share<span class=\"regexp\">/bash-completion/</span>bash_completion</span><br><span class=\"line\"><span class=\"keyword\">source</span> &lt;(kubectl completion bash)</span><br><span class=\"line\">echo <span class=\"string\">&quot;source &lt;(kubectl completion bash)&quot;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>\n<h1 id=\"初始化集群\"><a href=\"#初始化集群\" class=\"headerlink\" title=\"初始化集群\"></a>初始化集群</h1><h2 id=\"master节点操作，配置-kubeadm-初始化文件\"><a href=\"#master节点操作，配置-kubeadm-初始化文件\" class=\"headerlink\" title=\"master节点操作，配置 kubeadm 初始化文件\"></a>master节点操作，配置 kubeadm 初始化文件</h2><figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat <span class=\"params\">&lt;&lt;EOF &gt;</span> ./kubeadm-config.yaml</span><br><span class=\"line\"><span class=\"symbol\">apiVersion:</span> kubeadm.k8s.io/v1beta2</span><br><span class=\"line\"><span class=\"symbol\">kind:</span> ClusterConfiguration</span><br><span class=\"line\"><span class=\"symbol\">kubernetesVersion:</span> v1<span class=\"number\">.16</span><span class=\"number\">.9</span>\t</span><br><span class=\"line\"><span class=\"symbol\">imageRepository:</span> registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#master地址</span></span><br><span class=\"line\"><span class=\"symbol\">controlPlaneEndpoint:</span> <span class=\"string\">&quot;192.168.9.10:6443&quot;</span>\t</span><br><span class=\"line\"><span class=\"symbol\">networking:</span></span><br><span class=\"line\"><span class=\"symbol\">  serviceSubnet:</span> <span class=\"string\">&quot;10.96.0.0/16&quot;</span>\t</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">#k8s容器组所在的网段</span></span><br><span class=\"line\"><span class=\"symbol\">  podSubnet:</span> <span class=\"string\">&quot;10.20.0.1/16&quot;</span>\t</span><br><span class=\"line\"><span class=\"symbol\">  dnsDomain:</span> <span class=\"string\">&quot;cluster.local&quot;</span></span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n初始化master<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#kubeadm init --config=kubeadm-config.yaml --upload-certs</span></span><br><span class=\"line\">完整输出结果</span><br><span class=\"line\">kubeadm init <span class=\"comment\">--config=kubeadm-config.yaml</span></span><br><span class=\"line\">[init] Using Kubernetes version: v1.16.9</span><br><span class=\"line\">[preflight] Running pre-flight checks</span><br><span class=\"line\">[preflight] Pulling images required for setting up a Kubernetes cluster</span><br><span class=\"line\">[preflight] This might take a minute or two, depending on the speed of your internet connection</span><br><span class=\"line\">[preflight] You can also perform this action in beforehand using &#x27;kubeadm config images pull&#x27;</span><br><span class=\"line\">[kubelet-<span class=\"keyword\">start</span>] Writing kubelet environment <span class=\"keyword\">file</span> <span class=\"keyword\">with</span> flags <span class=\"keyword\">to</span> <span class=\"keyword\">file</span> <span class=\"string\">&quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span></span><br><span class=\"line\">[kubelet-<span class=\"keyword\">start</span>] Writing kubelet configuration <span class=\"keyword\">to</span> <span class=\"keyword\">file</span> <span class=\"string\">&quot;/var/lib/kubelet/config.yaml&quot;</span></span><br><span class=\"line\">[kubelet-<span class=\"keyword\">start</span>] Activating the kubelet service</span><br><span class=\"line\">[certs] <span class=\"keyword\">Using</span> certificateDir folder <span class=\"string\">&quot;/etc/kubernetes/pki&quot;</span></span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;ca&quot;</span> certificate <span class=\"keyword\">and</span> <span class=\"keyword\">key</span></span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;apiserver&quot;</span> certificate <span class=\"keyword\">and</span> <span class=\"keyword\">key</span></span><br><span class=\"line\">[certs] apiserver serving cert <span class=\"keyword\">is</span> signed <span class=\"keyword\">for</span> DNS <span class=\"keyword\">names</span> [k8s-<span class=\"keyword\">master</span> kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] <span class=\"keyword\">and</span> IPs [<span class=\"number\">10.96</span><span class=\"number\">.0</span><span class=\"number\">.1</span> <span class=\"number\">192.168</span><span class=\"number\">.9</span><span class=\"number\">.10</span> <span class=\"number\">192.168</span><span class=\"number\">.9</span><span class=\"number\">.10</span>]</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;apiserver-kubelet-client&quot;</span> certificate <span class=\"keyword\">and</span> <span class=\"keyword\">key</span></span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;front-proxy-ca&quot;</span> certificate <span class=\"keyword\">and</span> <span class=\"keyword\">key</span></span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;front-proxy-client&quot;</span> certificate <span class=\"keyword\">and</span> <span class=\"keyword\">key</span></span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;etcd/ca&quot;</span> certificate <span class=\"keyword\">and</span> <span class=\"keyword\">key</span></span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;etcd/server&quot;</span> certificate <span class=\"keyword\">and</span> <span class=\"keyword\">key</span></span><br><span class=\"line\">[certs] etcd/<span class=\"keyword\">server</span> serving cert <span class=\"keyword\">is</span> signed <span class=\"keyword\">for</span> DNS <span class=\"keyword\">names</span> [k8s-<span class=\"keyword\">master</span> localhost] <span class=\"keyword\">and</span> IPs [<span class=\"number\">192.168</span><span class=\"number\">.9</span><span class=\"number\">.10</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> ::<span class=\"number\">1</span>]</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;etcd/peer&quot;</span> certificate <span class=\"keyword\">and</span> <span class=\"keyword\">key</span></span><br><span class=\"line\">[certs] etcd/peer serving cert <span class=\"keyword\">is</span> signed <span class=\"keyword\">for</span> DNS <span class=\"keyword\">names</span> [k8s-<span class=\"keyword\">master</span> localhost] <span class=\"keyword\">and</span> IPs [<span class=\"number\">192.168</span><span class=\"number\">.9</span><span class=\"number\">.10</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> ::<span class=\"number\">1</span>]</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;etcd/healthcheck-client&quot;</span> certificate <span class=\"keyword\">and</span> <span class=\"keyword\">key</span></span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;apiserver-etcd-client&quot;</span> certificate <span class=\"keyword\">and</span> <span class=\"keyword\">key</span></span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;sa&quot;</span> <span class=\"keyword\">key</span> <span class=\"keyword\">and</span> <span class=\"keyword\">public</span> <span class=\"keyword\">key</span></span><br><span class=\"line\">[kubeconfig] <span class=\"keyword\">Using</span> kubeconfig folder <span class=\"string\">&quot;/etc/kubernetes&quot;</span></span><br><span class=\"line\">[kubeconfig] Writing <span class=\"string\">&quot;admin.conf&quot;</span> kubeconfig <span class=\"keyword\">file</span></span><br><span class=\"line\">[kubeconfig] Writing <span class=\"string\">&quot;kubelet.conf&quot;</span> kubeconfig <span class=\"keyword\">file</span></span><br><span class=\"line\">[kubeconfig] Writing <span class=\"string\">&quot;controller-manager.conf&quot;</span> kubeconfig <span class=\"keyword\">file</span></span><br><span class=\"line\">[kubeconfig] Writing <span class=\"string\">&quot;scheduler.conf&quot;</span> kubeconfig <span class=\"keyword\">file</span></span><br><span class=\"line\">[control-plane] <span class=\"keyword\">Using</span> manifest folder <span class=\"string\">&quot;/etc/kubernetes/manifests&quot;</span></span><br><span class=\"line\">[control-plane] Creating <span class=\"keyword\">static</span> Pod manifest <span class=\"keyword\">for</span> <span class=\"string\">&quot;kube-apiserver&quot;</span></span><br><span class=\"line\">[control-plane] Creating <span class=\"keyword\">static</span> Pod manifest <span class=\"keyword\">for</span> <span class=\"string\">&quot;kube-controller-manager&quot;</span></span><br><span class=\"line\">[control-plane] Creating <span class=\"keyword\">static</span> Pod manifest <span class=\"keyword\">for</span> <span class=\"string\">&quot;kube-scheduler&quot;</span></span><br><span class=\"line\">[etcd] Creating <span class=\"keyword\">static</span> Pod manifest <span class=\"keyword\">for</span> <span class=\"keyword\">local</span> etcd <span class=\"keyword\">in</span> <span class=\"string\">&quot;/etc/kubernetes/manifests&quot;</span></span><br><span class=\"line\">[<span class=\"keyword\">wait</span>-control-plane] Waiting <span class=\"keyword\">for</span> the kubelet <span class=\"keyword\">to</span> boot up the control plane <span class=\"keyword\">as</span> <span class=\"keyword\">static</span> Pods <span class=\"keyword\">from</span> <span class=\"keyword\">directory</span> <span class=\"string\">&quot;/etc/kubernetes/manifests&quot;</span>. This can take up <span class=\"keyword\">to</span> <span class=\"number\">4</span>m0s</span><br><span class=\"line\">[apiclient] <span class=\"keyword\">All</span> control plane components <span class=\"keyword\">are</span> healthy <span class=\"keyword\">after</span> <span class=\"number\">16.501777</span> <span class=\"keyword\">seconds</span></span><br><span class=\"line\">[upload-config] Storing the configuration used <span class=\"keyword\">in</span> ConfigMap <span class=\"string\">&quot;kubeadm-config&quot;</span> <span class=\"keyword\">in</span> the <span class=\"string\">&quot;kube-system&quot;</span> Namespace</span><br><span class=\"line\">[kubelet] Creating a ConfigMap <span class=\"string\">&quot;kubelet-config-1.16&quot;</span> <span class=\"keyword\">in</span> namespace kube-<span class=\"keyword\">system</span> <span class=\"keyword\">with</span> the configuration <span class=\"keyword\">for</span> the kubelets <span class=\"keyword\">in</span> the cluster</span><br><span class=\"line\">[upload-certs] Skipping phase. Please see <span class=\"comment\">--upload-certs</span></span><br><span class=\"line\">[mark-control-plane] Marking the node k8s-<span class=\"keyword\">master</span> <span class=\"keyword\">as</span> control-plane <span class=\"keyword\">by</span> adding the label <span class=\"string\">&quot;node-role.kubernetes.io/master=&#x27;&#x27;&quot;</span></span><br><span class=\"line\">[mark-control-plane] Marking the node k8s-<span class=\"keyword\">master</span> <span class=\"keyword\">as</span> control-plane <span class=\"keyword\">by</span> adding the taints [node-role.kubernetes.io/<span class=\"keyword\">master</span>:NoSchedule]</span><br><span class=\"line\">[bootstrap-token] <span class=\"keyword\">Using</span> token: px979r.mphk9ee5ya8fgy44</span><br><span class=\"line\">[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC <span class=\"keyword\">Roles</span></span><br><span class=\"line\">[bootstrap-token] configured RBAC <span class=\"keyword\">rules</span> <span class=\"keyword\">to</span> <span class=\"keyword\">allow</span> Node Bootstrap tokens <span class=\"keyword\">to</span> post CSRs <span class=\"keyword\">in</span> <span class=\"keyword\">order</span> <span class=\"keyword\">for</span> nodes <span class=\"keyword\">to</span> <span class=\"keyword\">get</span> <span class=\"keyword\">long</span> term certificate credentials</span><br><span class=\"line\">[bootstrap-token] configured RBAC <span class=\"keyword\">rules</span> <span class=\"keyword\">to</span> <span class=\"keyword\">allow</span> the csrapprover controller automatically approve CSRs <span class=\"keyword\">from</span> a Node Bootstrap Token</span><br><span class=\"line\">[bootstrap-token] configured RBAC <span class=\"keyword\">rules</span> <span class=\"keyword\">to</span> <span class=\"keyword\">allow</span> certificate rotation <span class=\"keyword\">for</span> <span class=\"keyword\">all</span> node <span class=\"keyword\">client</span> certificates <span class=\"keyword\">in</span> the cluster</span><br><span class=\"line\">[bootstrap-token] Creating the <span class=\"string\">&quot;cluster-info&quot;</span> ConfigMap <span class=\"keyword\">in</span> the <span class=\"string\">&quot;kube-public&quot;</span> namespace</span><br><span class=\"line\">[addons] Applied essential addon: CoreDNS</span><br><span class=\"line\">[addons] Applied essential addon: kube-proxy</span><br><span class=\"line\"></span><br><span class=\"line\">Your Kubernetes control-plane has <span class=\"keyword\">initialized</span> successfully!</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">To</span> <span class=\"keyword\">start</span> <span class=\"keyword\">using</span> your cluster, you need <span class=\"keyword\">to</span> run the <span class=\"keyword\">following</span> <span class=\"keyword\">as</span> a regular <span class=\"keyword\">user</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">  mkdir -p $HOME/.kube</span><br><span class=\"line\">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class=\"line\">  sudo chown $(<span class=\"keyword\">id</span> -u):$(<span class=\"keyword\">id</span> -g) $HOME/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\">You should <span class=\"keyword\">now</span> deploy a pod network <span class=\"keyword\">to</span> the cluster.</span><br><span class=\"line\">Run <span class=\"string\">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> <span class=\"keyword\">with</span> one <span class=\"keyword\">of</span> the options listed <span class=\"keyword\">at</span>:</span><br><span class=\"line\">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class=\"line\"></span><br><span class=\"line\">You can <span class=\"keyword\">now</span> <span class=\"keyword\">join</span> <span class=\"keyword\">any</span> <span class=\"built_in\">number</span> <span class=\"keyword\">of</span> control-plane nodes <span class=\"keyword\">by</span> copying certificate authorities </span><br><span class=\"line\"><span class=\"keyword\">and</span> service <span class=\"keyword\">account</span> <span class=\"keyword\">keys</span> <span class=\"keyword\">on</span> <span class=\"keyword\">each</span> node <span class=\"keyword\">and</span> <span class=\"keyword\">then</span> running the <span class=\"keyword\">following</span> <span class=\"keyword\">as</span> root:</span><br><span class=\"line\"></span><br><span class=\"line\">  kubeadm <span class=\"keyword\">join</span> <span class=\"number\">192.168</span><span class=\"number\">.9</span><span class=\"number\">.10</span>:<span class=\"number\">6443</span> <span class=\"comment\">--token px979r.mphk9ee5ya8fgy44 \\</span></span><br><span class=\"line\">    <span class=\"comment\">--discovery-token-ca-cert-hash sha256:5e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51 \\</span></span><br><span class=\"line\">    <span class=\"comment\">--control-plane \t  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Then</span> you can <span class=\"keyword\">join</span> <span class=\"keyword\">any</span> <span class=\"built_in\">number</span> <span class=\"keyword\">of</span> worker nodes <span class=\"keyword\">by</span> running the <span class=\"keyword\">following</span> <span class=\"keyword\">on</span> <span class=\"keyword\">each</span> <span class=\"keyword\">as</span> root:</span><br><span class=\"line\"></span><br><span class=\"line\">kubeadm <span class=\"keyword\">join</span> <span class=\"number\">192.168</span><span class=\"number\">.9</span><span class=\"number\">.10</span>:<span class=\"number\">6443</span> <span class=\"comment\">--token px979r.mphk9ee5ya8fgy44 \\</span></span><br><span class=\"line\">    <span class=\"comment\">--discovery-token-ca-cert-hash sha256:5e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51 </span></span><br></pre></td></tr></table></figure>\n拷贝 kubeconfig 文件<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>这里的路径为/root</span><br><span class=\"line\">mkdir -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">cp -i <span class=\"regexp\">/etc/</span>kubernetes<span class=\"regexp\">/admin.conf $HOME/</span>.kube/config</span><br><span class=\"line\">chown $(id -u):$(id -g) <span class=\"variable\">$HOME</span><span class=\"regexp\">/.kube/</span>config</span><br></pre></td></tr></table></figure>\n<h2 id=\"master添加节点\"><a href=\"#master添加节点\" class=\"headerlink\" title=\"master添加节点\"></a>master添加节点</h2>node1和node2相同操作<br>将master节点上的$HOME/.kube/config 文件拷贝到node节点对应的文件中<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.创建目录，这里的路径为/root</span><br><span class=\"line\">mkdir -p <span class=\"variable\">$HOME</span>/.kube </span><br><span class=\"line\"></span><br><span class=\"line\">2.把master节点上的config文件拷贝到node1和node2的<span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">scp k8s-master1:~/.kube<span class=\"built_in\">/config </span><span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\"></span><br><span class=\"line\">3.修改权限</span><br><span class=\"line\">chown $(id -u):$(id -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>\n将node1和node2加入到集群中<br>这里需要用到2.2中初始化master最后生成的token和sha256值<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">#kubeadm <span class=\"keyword\">join</span> <span class=\"number\">192.168</span>.<span class=\"number\">9.10</span>:<span class=\"number\">6443</span> --token px979r.mphk9ee5ya8fgy44     --discovery-token-<span class=\"keyword\">ca</span>-cert-hash <span class=\"built_in\">sha256</span>:<span class=\"number\">5</span>e7c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51 </span><br><span class=\"line\">  </span><br><span class=\"line\">输出结果  </span><br><span class=\"line\">[preflight] Running <span class=\"keyword\">pre</span>-flight checks</span><br><span class=\"line\">\t[WARNING IsDockerSystemdCheck]: detected <span class=\"string\">&quot;cgroupfs&quot;</span> <span class=\"keyword\">as</span> the Docker cgroup driver. The recommended driver <span class=\"keyword\">is</span> <span class=\"string\">&quot;systemd&quot;</span>. Please follow the guide at http<span class=\"variable\">s:</span>//kubernetes.io/docs/setup/cri/</span><br><span class=\"line\">[preflight] Reading configuration from the cluster...</span><br><span class=\"line\">[preflight] FYI: You can look at this config <span class=\"keyword\">file</span> with <span class=\"string\">&#x27;kubectl -n kube-system get cm kubeadm-config -oyaml&#x27;</span></span><br><span class=\"line\">[kubelet-start] Downloading configuration <span class=\"keyword\">for</span> the kubelet from the <span class=\"string\">&quot;kubelet-config-1.16&quot;</span> ConfigMap in the kube-<span class=\"built_in\">system</span> namespace</span><br><span class=\"line\">[kubelet-start] Writing kubelet configuration <span class=\"keyword\">to</span> <span class=\"keyword\">file</span> <span class=\"string\">&quot;/var/lib/kubelet/config.yaml&quot;</span></span><br><span class=\"line\">[kubelet-start] Writing kubelet environment <span class=\"keyword\">file</span> with flags <span class=\"keyword\">to</span> <span class=\"keyword\">file</span> <span class=\"string\">&quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span></span><br><span class=\"line\">[kubelet-start] Activating the kubelet service</span><br><span class=\"line\">[kubelet-start] Waiting <span class=\"keyword\">for</span> the kubelet <span class=\"keyword\">to</span> perform the TLS Bootstrap...</span><br><span class=\"line\"></span><br><span class=\"line\">This node <span class=\"built_in\">has</span> joined the cluster:</span><br><span class=\"line\">* Certificate signing request was sent <span class=\"keyword\">to</span> apiserver <span class=\"built_in\">and</span> <span class=\"keyword\">a</span> response was received.</span><br><span class=\"line\">* The Kubelet was informed of the <span class=\"keyword\">new</span> secure connection details.</span><br><span class=\"line\"></span><br><span class=\"line\">Run <span class=\"string\">&#x27;kubectl get nodes&#x27;</span> <span class=\"keyword\">on</span> the control-plane <span class=\"keyword\">to</span> see this node <span class=\"keyword\">join</span> the cluster.</span><br></pre></td></tr></table></figure>\n如果忘记了token和sha256值，可以在master节点使用如下命令查看<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//查看token</span></span><br><span class=\"line\">#kubeadm token list</span><br><span class=\"line\">TOKEN                     TTL       EXPIRES                     USAGES                   DESCRIPTION   EXTRA GROUPS</span><br><span class=\"line\">px979r.mphk9ee5ya8fgy44   <span class=\"number\">20</span>h       <span class=\"number\">2020</span><span class=\"number\">-03</span><span class=\"number\">-18</span>T13:<span class=\"number\">49</span>:<span class=\"number\">48</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>   authentication,signing   &lt;none&gt;        system:bootstrappers:kubeadm:<span class=\"keyword\">default</span>-node-token</span><br><span class=\"line\">            </span><br><span class=\"line\">            </span><br><span class=\"line\"><span class=\"comment\">//查看sha256</span></span><br><span class=\"line\">#openssl x509 -pubkey -<span class=\"keyword\">in</span> /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der <span class=\"number\">2</span>&gt;/dev/<span class=\"literal\">null</span> | openssl dgst -sha256 -hex | sed <span class=\"string\">&#x27;s/^.* //&#x27;</span></span><br><span class=\"line\"><span class=\"number\">5e7</span>c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//同时查看token和sha256</span></span><br><span class=\"line\">#kubeadm token create --print-join-command</span><br><span class=\"line\">kubeadm join <span class=\"number\">192.168</span><span class=\"number\">.9</span><span class=\"number\">.10</span>:<span class=\"number\">6443</span> --token <span class=\"number\">9</span>b28zg.oyt0kvvpmtrem4bg     --discovery-token-ca-cert-hash sha256:<span class=\"number\">5e7</span>c7cd1cc1f86c0761e54b9380de22968b6b221cb98939c14ab2942223f6f51</span><br></pre></td></tr></table></figure>\nmaster节点查看node，发现状态都是NotReady，因为还没有安装网络插件，这里我们安装calio官方插件文档<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">kubectl</span> get nodes</span><br><span class=\"line\"><span class=\"attribute\">NAME</span>         STATUS     ROLES    AGE     VERSION</span><br><span class=\"line\"><span class=\"attribute\">k8s</span>-master   NotReady   master   <span class=\"number\">19</span>m     v<span class=\"number\">1</span>.<span class=\"number\">16</span>.<span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"attribute\">k8s</span>-node<span class=\"number\">1</span>    NotReady   &lt;none&gt;   <span class=\"number\">4</span>m<span class=\"number\">10</span>s   v<span class=\"number\">1</span>.<span class=\"number\">16</span>.<span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"attribute\">k8s</span>-node<span class=\"number\">2</span>    NotReady   &lt;none&gt;   <span class=\"number\">4</span>m<span class=\"number\">3</span>s    v<span class=\"number\">1</span>.<span class=\"number\">16</span>.<span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"master节点安装网络插件calio\"><a href=\"#master节点安装网络插件calio\" class=\"headerlink\" title=\"master节点安装网络插件calio\"></a>master节点安装网络插件calio</h2><figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//下载文件</span></span><br><span class=\"line\">wget https:<span class=\"comment\">//docs.projectcalico.org/v3.8/manifests/calico.yaml</span></span><br><span class=\"line\">  </span><br><span class=\"line\">将文件中的<span class=\"number\">620</span>行改为如下，因为在上边kubeadm-config.yaml配置文件中指定了容器组IP  <span class=\"number\">620</span>行</span><br><span class=\"line\">value: <span class=\"string\">&quot;10.20.0.1/16&quot;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//修改完成后安装calico网络插件</span></span><br><span class=\"line\">kubectl apply -f calico.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//安装完成后稍等一会查看pods状态</span></span><br><span class=\"line\">kubectl <span class=\"keyword\">get</span> pods -n kube-system</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                      READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">calico-kube-controllers-dc6cb64cb<span class=\"number\">-8</span>sh59   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">6</span>m22s</span><br><span class=\"line\">calico-node<span class=\"number\">-89</span>s9k                         <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">6</span>m22s</span><br><span class=\"line\">calico-node-dkt7w                         <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">6</span>m22s</span><br><span class=\"line\">calico-node-tgg2h                         <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">6</span>m22s</span><br><span class=\"line\">coredns<span class=\"number\">-667f</span>964f9b<span class=\"number\">-7</span>hrj9                  <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">33</span>m</span><br><span class=\"line\">coredns<span class=\"number\">-667f</span>964f9b<span class=\"number\">-8</span>q7sh                  <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">33</span>m</span><br><span class=\"line\">etcd-k8s-master                           <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">33</span>m</span><br><span class=\"line\">kube-apiserver-k8s-master                 <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">32</span>m</span><br><span class=\"line\">kube-controller-manager-k8s-master        <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">33</span>m</span><br><span class=\"line\">kube-proxy-b2r5d                          <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">12</span>m</span><br><span class=\"line\">kube-proxy-nd982                          <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">11</span>m</span><br><span class=\"line\">kube-proxy-zh6cz                          <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">33</span>m</span><br><span class=\"line\">kube-scheduler-k8s-master                 <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">32</span>m</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查看node状态</span></span><br><span class=\"line\">[<span class=\"symbol\">root@</span>k8s-master ~]# kubectl <span class=\"keyword\">get</span> nodes </span><br><span class=\"line\">NAME         STATUS   ROLES    AGE     VERSION</span><br><span class=\"line\">k8s-master   Ready    master   <span class=\"number\">31</span>m     v1<span class=\"number\">.16</span><span class=\"number\">.9</span></span><br><span class=\"line\">k8s-node1    Ready    &lt;none&gt;   <span class=\"number\">9</span>m46s   v1<span class=\"number\">.16</span><span class=\"number\">.9</span></span><br><span class=\"line\">k8s-node2    Ready    &lt;none&gt;   <span class=\"number\">9</span>m22s   v1<span class=\"number\">.16</span><span class=\"number\">.9</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"安装Dashboard-可选\"><a href=\"#安装Dashboard-可选\" class=\"headerlink\" title=\"安装Dashboard(可选)\"></a>安装Dashboard(可选)</h2>下载文件及修改内容</li>\n</ul>\n<p><a href=\"https://github.com/kubernetes/dashboard/releases\">这里查看dashboard对应的k8s版本</a></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>下载文件  v2.<span class=\"number\">0.0</span>-rc3是中文版本，beta8是英文版本</span><br><span class=\"line\">wget https:<span class=\"regexp\">//</span>raw.githubusercontent.com<span class=\"regexp\">/kubernetes/</span>dashboard<span class=\"regexp\">/v2.0.0-beta8/</span>aio<span class=\"regexp\">/deploy/</span>recommended.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">wget https:<span class=\"regexp\">//</span>raw.githubusercontent.com<span class=\"regexp\">/kubernetes/</span>dashboard<span class=\"regexp\">/v2.0.0-rc3/</span>aio<span class=\"regexp\">/deploy/</span>recommended.yaml  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"regexp\">//</span>修改Service为NodePort类型</span><br><span class=\"line\"><span class=\"number\">42</span>行下增加一行</span><br><span class=\"line\">nodePort: <span class=\"number\">30001</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"number\">44</span>行下增加一行</span><br><span class=\"line\">type: NodePort</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span>原先内容</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - port: <span class=\"number\">443</span></span><br><span class=\"line\">      targetPort: <span class=\"number\">8443</span></span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    k8s-app: kubernetes-dashboard</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span>修改后内容</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - port: <span class=\"number\">443</span></span><br><span class=\"line\">      targetPort: <span class=\"number\">8443</span></span><br><span class=\"line\">      nodePort: <span class=\"number\">30001</span>   <span class=\"comment\">#增加，指定nodeport端口</span></span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    k8s-app: kubernetes-dashboard</span><br><span class=\"line\">  type: NodePort\t\t<span class=\"comment\">#增加，修改类型为nodeport</span></span><br></pre></td></tr></table></figure>\n<p>部署dashboard</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl <span class=\"built_in\">apply</span> -f recommended.yaml</span><br></pre></td></tr></table></figure>\n<p>查看dashboard的运行状态及外网访问端口</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//查看dashboard运行状态</span></span><br><span class=\"line\">#kubectl <span class=\"keyword\">get</span> pods -n kubernetes-dashboard -l k8s-app=kubernetes-dashboard</span><br><span class=\"line\">NAME                                    READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">kubernetes-dashboard<span class=\"number\">-5996555f</span>d8<span class=\"number\">-2</span>ppc5   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">8</span>m16s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查看dashboard外网访问端口，命名空间为kubernetes-dashboard</span></span><br><span class=\"line\">#kubectl <span class=\"keyword\">get</span> svc -n kubernetes-dashboard -l k8s-app=kubernetes-dashboard</span><br><span class=\"line\">kubectl <span class=\"keyword\">get</span> svc -n kubernetes-dashboard -l k8s-app=kubernetes-dashboard</span><br><span class=\"line\">NAME                   TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)         AGE</span><br><span class=\"line\">kubernetes-dashboard   NodePort   <span class=\"number\">10.96</span><span class=\"number\">.142</span><span class=\"number\">.172</span>   &lt;none&gt;        <span class=\"number\">443</span>:<span class=\"number\">30001</span>/TCP   <span class=\"number\">8</span>m37s</span><br></pre></td></tr></table></figure>\n<p>通过上边的30001端口访问dashboard，注意是https</p>\n<blockquote>\n<p>k8s1.16.9这个版本中，使用的dashboard版本是2.0.0-beta8，只有火狐浏览器可以访问，其余浏览器都不能访问，会报错</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">您的连接不是私密连接</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用火狐浏览器访问，由于 dashboard 默认是自建的 https 证书，该证书是不受浏览器信任的，所以我们需要强制跳转就可以了</p>\n</blockquote>\n<p>然后创建一个具有全局所有权限的用户来登录Dashboard</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">//编辑admin.yaml文件</span></span><br><span class=\"line\"><span class=\"string\">cat</span> <span class=\"string\">&gt;</span> <span class=\"string\">admin.yaml</span> <span class=\"string\">&lt;&lt;EOF</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">admin</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">rbac.authorization.kubernetes.io/autoupdate:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">cluster-admin</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">admin</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">admin</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//直接创建</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">apply</span> <span class=\"string\">-f</span> <span class=\"string\">admin.yaml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//查看token</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">get</span> <span class=\"string\">secret</span> <span class=\"string\">-n</span> <span class=\"string\">kube-system|grep</span> <span class=\"string\">admin-token</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">admin-token-j7sfh</span>                                <span class=\"string\">kubernetes.io/service-account-token</span>   <span class=\"number\">3</span>      <span class=\"string\">23s</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//获取base64解码后的字符串，注意需要用到上边命令查看到的token，会生成很长的一串字符串</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">get</span> <span class=\"string\">secret</span> <span class=\"string\">admin-token-j7sfh</span> <span class=\"string\">-o</span> <span class=\"string\">jsonpath=&#123;.data.token&#125;</span> <span class=\"string\">-n</span> <span class=\"string\">kube-system</span> <span class=\"string\">|base64</span> <span class=\"string\">-d</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#直接用这条命令搞定</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">get</span> <span class=\"string\">secret</span> <span class=\"string\">`kubectl</span> <span class=\"string\">get</span> <span class=\"string\">secret</span> <span class=\"string\">-n</span> <span class=\"string\">kube-system|grep</span> <span class=\"string\">admin-token|awk</span> <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span><span class=\"string\">`</span> <span class=\"string\">-o</span> <span class=\"string\">jsonpath=&#123;.data.token&#125;</span> <span class=\"string\">-n</span> <span class=\"string\">kube-system</span> <span class=\"string\">|base64</span> <span class=\"string\">-d</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">echo</span></span><br></pre></td></tr></table></figure>\n\n<p>到此，使用kubeadm安装k8s 1.16.9完成！！！</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://kubesphere.com.cn/forum/d/1272-kubeadm-k8s-kubesphere-2-1-1\">在 Kubernetes集群中 安装 KubeSphere2.1</a></p>\n"},{"title":"(转)vue面试题记录","copyright":true,"comments":1,"date":"2020-12-22T16:00:00.000Z","photos":[],"_content":"\n### vue 双向绑定的原理\n采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调，实现视图刷新。\n<!-- more -->\n\n具体流程：\nVue中先遍历data选项中所有的属性（发布者）用Object.defineProperty劫持这些属性将其转为getter/setter。读取数据时候会触发getter。修改数据时会触发setter。\n\n然后给每个属性对应new Dep()，Dep是专门收集依赖、删除依赖、向依赖发送消息的。先让每个依赖设置在Dep.target上，在Dep中创建一个依赖数组，先判断Dep.target是否已经在依赖中存在，不存在的话添加到依赖数组中完成依赖收集，随后将Dep.target置为上一个依赖。\n\n组件在挂载过程中都会new一个Watcher实例。这个实例就是依赖（订阅者）。Watcher第二参数是一个函数，此函数作用是更新且渲染节点。在首次渲染过程，会自动调用Dep方法来收集依赖，收集完成后组件中每个数据都绑定上该依赖。当数据变化时就会在setter中通知对应的依赖进行更新。在更新过程中要先读取数据，就会触发Wacther的第二个函数参数。一触发就再次自动调用Dep方法收集依赖，同时在此函数中运行patch（diff运算)来更新对应的DOM节点，完成了双向绑定。\n\n- 每一个组件默认都会创建一个 Watcher，自定义的 watch 和 computed 方法也会创建 Watcher \n\n### Object.defineProperty()实现双向绑定的缺点\n1. 只能监听某个属性，不能监听整个对象\n2. 需要使用for in遍历对象属性绑定监听\n3. 不能监听数组，需要重写数组方法进行特异性操作\n4. 会污染原对象\n\n\n### v-show和v-if有什么区别\n\n- v-if（初始化不会渲染）\nv-if 是真正的条件渲染，因为它会确保在切换过程中条件块内的事件监听和子组件适当地被销毁和重建，也是惰性的，如果在初始渲染条件为假时，则什么也不做——直到条件第一次变为真时才开始渲染条件块，能用在`<template>`上。\n\n- v-show（初始化会渲染）\nv-show就简单得多，不管初始条件是什么，元素总是会被渲染，并且只是简单地基于css的display进行切换。\n\n所以，v-if适用于切换不频繁的场景，v-show适用于切换频繁的场景，不能用在`<template>`上。\n\n### class和style如何动态绑定\n\nclass可以通过对象语法和数组语法进行动态绑定：\n- 对象语法\n```js\n<div v-bind:class=\"{active: isActive, 'text-danger': hasError }\"></div>\ndata: {\n    isActive: true,\n    hasError: false\n}\n```\n\n- 数组语法\n```js\n<div v-bind:class=\"[isActive ? activeClass : '', errorClass]\"></div>\ndata: {\n    activeClass: 'active',\n    errorClass: 'text-danger'\n}\n```\nstyle也可以通过对象语法和数组语法进行动态绑定\n\n### 理解vue里的单向数据流\n所有的prop都使得其父子prop之间形成一个单向下行绑定：父级prop的更新会向下流动到子组件中，但是反过来不行，这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流难以解释.\n\n额外地，每次父级组件发生更新时，子组件中的所有prop都会刷新为最新的值，这意味着你不应该在一个子组件内部改变prop，如果你这样做了，vue会在浏览器的控制台发出警告，子组件想修改时，只能通过$emit派发一个自定义事件，父组件接收到后，由父组件修改.\n\n> 双向数据流是指数据从父级向子级传递数据，子级可以通过一些手段改变父级向子级传递的数据。\n\n### computed和watch的区别和运用场景\n- computed：是计算属性，依赖其他属性值，并且computed的值有缓存，只有它依赖的属性值发生改变时下一次获取computed的值时候才会重新计算computed的值。避免在模板中放入太多的逻辑，导致模板过重且难以维护。当未发生改变时，则会返回上一次的数据。\n\n- watch：更多的是观察作用，类似于某些数据的监听回调，每当监听的数据发生变化时都会执行回调进行后续操作。\n\n- methods: 每次渲染时都需要重新执行。\n\n简单的说：\n* 1.methods里面定义的是函数，你显然需要像\"fuc()\"这样去调用它（假设函数为fuc）。\n\n* 2.computed是计算属性，事实上和和data对象里的数据属性是同一类的（使用上）。\n\n* 3.watch:类似于监听机制+事件机制。\n\nwatch和computed的对比\n\n首先它们都是以Vue的依赖追踪机制为基础的，它们的共同点是：都是希望在依赖数据发生改变的时候，被依赖的数据根据预先定义好的函数，发生“自动”的变化。我们当然可以自己写代码完成这一切，但却很可能造成写法混乱，代码冗余的情况。\n\n但watch和computed也有明显不同的地方：\n\nwatch和computed各自处理的数据关系场景不同\n\n* 1.watch擅长处理的场景：一个数据影响多个数据\n\n* 2.computed擅长处理的场景：一个数据受多个数据影响\n\n相比于watch/computed，methods不处理数据逻辑关系，只提供可调用的函数\n\n运用场景：\n\n- 当我们需要进行数值计算，并依赖于其他数据时，应该使用computed，因为可以利用computed的缓存特性，避免每次获取值时都要重新计算。\n\n- 但我们需要在数据变化时执行异步或开销较大的操作时应该使用watch，使用watch选项允许我们执行异步操作，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态，这些都是计算属性无法做到的。\n\n### 直接给一个数组项赋值，vue能检测到吗\n- 由于js的限制(引用类型)，vue不能检测到以下数组的变动(对象属性的添加和删除)：\n\n- 当你利用索引直接设置一个数组项时，例如vm.item[indexOfItem] = newValue\n- 当你修改数组的长度时，例如vm.items.length = newLength\n\n为了解决第一个问题，vue提供了以下操作方法：\n```js\nVue.set(vm.items, indexOfItem, newValue)\n\nVue.$set(vm.items, indexOfItem, newValue)\n\nVue.$set(this.data,”key”,value) // 动态添加单个属性\n\n// 动态添加多个属性 \nthis.obj = Object.assign({}, this.obj, {\n  age: 18,\n  name: 'Chocolate',\n})\n\nVue.items.splice(indexOfItem, 1, newValue)\n```\n\n为了解决第二个问题，vue提供了以下操作方法：\n```js\nvm.items.splice(newLength)\n```\n\n- Vue 是不能检测对象属性的添加或删除\n```js\ndata() {\n    return {\n        obj:{\n            name:'Vue'\n        }\n    };\n},\nmounted() {\n    this.name = 'zs' // 不是响应式的\n    this.$set(this.obj,'name','lisi') //响应式 解决添加\n    // 用Object.assign来解决第二种情况。解决对象的删除\n    // Vue.delete\n},\n```\n### delete和Vue.delete的区别\ndelete 只是被删除的元素变成了empty/undefined，其他元素的键值还是不变的。而Vue.delete直接删除了数组，改变了数组的键值。\n\n### vue生命周期的理解（10个）\n- 生命周期是什么(创建到销毁的过程)\nvue实例有一个完整的生命周期，也就是从开始创建，初始化数据，编译模板，挂载dom->渲染更新->渲染卸载等一些过程，我们称这是vue的生命周期\n\n- 各个生命周期的作用\n  - beforeCreate：组件被创建之初，组件的属性生效之前\n  - created：组件实例已经完全创建，属性也绑定，但是真实的dom还没有生成，$el还不能用(vue实例的数据对象data有了，el和数据对象data都为undefined，还\n  未初始化。)\n  - beforeMount：在挂载开始之前被调用，相关的render函数首次被调用\n  - mounted：el被新创建的vm.$el替换，并挂载到实例上去后调用该钩子\n  - beforeUpdate：组件数据更新之前调用，发生在虚拟dom打补丁之前 \n  - updated：组件数据更新之后\n  - activated：keep-alive专属，组件被激活时调用\n  - deactivated：keep-alive专属，组件被销毁时调用\n  - beforeDestroy：组件被销毁前\n  - destroyed：组件被销毁后调用\n\n- _init_\n  - initLifecycle/Event，往vm上挂载各种属性\n  - callHook: beforeCreate: 实例刚创建\n  - initInjection/initState: 初始化注入和 data 响应性\n  - created: 创建完成，属性已经绑定， 但还未生成真实dom\n  - 进行元素的挂载： $el / vm.$mount()\n  - 是否有template: 解析成render function\n    - *.vue文件: vue-loader会将`<template>`编译成render function\n  - beforeMount: 模板编译/挂载之前\n  - 执行render function，生成真实的dom，并替换到dom tree中\n  - mounted: 组件已挂载\n\n- update:\n  - 执行diff算法，比对改变是否需要触发UI更新\n  - flushScheduleQueue\n    - watcher.before: 触发beforeUpdate钩子\t\t\n    - watcher.run(): 执行watcher中的 notify，通知所有依赖项更新UI\n  - 触发updated钩子: 组件已更新\n\n- actived / deactivated(keep-alive): 不销毁，缓存，组件激活与失活\n- destroy:\n  - beforeDestroy: 销毁开始\n  - 销毁自身且递归销毁子组件以及事件监听\n    - remove(): 删除节点\n    - watcher.teardown(): 清空依赖\n    - vm.$off(): 解绑监听\n  - destroyed: 完成后触发钩子\n\n```js\nnew Vue({})\n\n// 初始化Vue实例\nfunction _init() {\n\t // 挂载属性\n    initLifeCycle(vm) \n    // 初始化事件系统，钩子函数等\n    initEvent(vm) \n    // 编译slot、vnode\n    initRender(vm) \n    // 触发钩子\n    callHook(vm, 'beforeCreate')\n    // 添加inject功能\n    initInjection(vm)\n    // 完成数据响应性 props/data/watch/computed/methods\n    initState(vm)\n    // 添加 provide 功能\n    initProvide(vm)\n    // 触发钩子\n    callHook(vm, 'created')\n\t\t\n\t // 挂载节点\n    if (vm.$options.el) {\n        vm.$mount(vm.$options.el)\n    }\n}\n\n// 挂载节点实现\nfunction mountComponent(vm) {\n\t // 获取 render function\n    if (!this.options.render) {\n        // template to render\n        // Vue.compile = compileToFunctions\n        let { render } = compileToFunctions() \n        this.options.render = render\n    }\n    // 触发钩子\n    callHook('beforeMount')\n    // 初始化观察者\n    // render 渲染 vdom， \n    vdom = vm.render()\n    // update: 根据 diff 出的 patchs 挂载成真实的 dom \n    vm._update(vdom)\n    // 触发钩子  \n    callHook(vm, 'mounted')\n}\n\n// 更新节点实现\nfuntion queueWatcher(watcher) {\n\tnextTick(flushScheduleQueue)\n}\n\n// 清空队列\nfunction flushScheduleQueue() {\n\t // 遍历队列中所有修改\n    for(){\n\t    // beforeUpdate\n        watcher.before()\n         \n        // 依赖局部更新节点\n        watcher.update() \n        callHook('updated')\n    }\n}\n\n// 销毁实例实现\nVue.prototype.$destory = function() {\n\t // 触发钩子\n    callHook(vm, 'beforeDestory')\n    // 自身及子节点\n    remove() \n    // 删除依赖\n    watcher.teardown() \n    // 删除监听\n    vm.$off() \n    // 触发钩子\n    callHook(vm, 'destoryed')\n}\n```\n\n### vue父子组件生命周期钩子函数的执行顺序\n- 加载渲染过程\n父beforeCreate->父created->父beforeMount->子beforeCreate->子created->子beforeMount->子mounted->父mounted\n\n- 子组件更新过程\n父beforeUpdate->子beforeUpdate->子updated->父updated\n\n- 父组件更新过程\n父beforeUpdate->父updated\n\n- 销毁过程\n父beforeDestroy->子beforeDestroy->子destroyed->父destroy\n\n### 在哪个生命周期内调用异步请求\n可以在函数created，beforeMount，mounted中进行调用，因为在这三个钩子函数中data已经可以创建，可以将服务端返回的数据进行赋值，但是比较推荐在created钩子函数中调用异步请求，因为：\n\n- 能更快的获取到服务端数据，减少页面loading时间\n- ssr不支持beforeMount，mounted钩子函数，所以放在created中有助于一致性\n\n- mounted里能够操作dom\n\n### 在什么阶段才能访问操作DOM\n在钩子函数mounted被调用之前，vue已经把编译好的模板挂载到页面上，所以在mounted中可以访问操作dom，vue具体的生命周期。\n\n### 父组件可以监听到子组件的生命周期吗\n- 手动设置$emit来发布监听\n```js\n// parent\n<Child @mounted=\"fn\" />\n// child\nmounted() {\n    this.$emit(\"mounted\");\n}\n```\n\n- @hook\n```js\n// parent\n<Child @hook:mounted=\"fn\" />\nfn() {\n    console.log('get')\n}\n// child\nmounted() {\n    console.log('emit');\n```\n\n### 谈谈你对keep-alive的了解\nkeep-alive是vue内置的一个组件，可以使被包含的组件保留状态，避免重复渲染，其有以下特性：\n\n- 一般结合路由和动态组件使用，用于缓存组件\n- 提供include和exclude属性，两者都支持字符串或正则表达式，include表示只有名字匹配的组件会被缓存，exclude表示任何名称匹配的组件都不会被缓存，其中exclude的优先级比include高\n- 对应两个钩子函数actived和deactivated\n\n### 组件中的data为什么是个函数\n因为组件是拿来复用的，且js里的对象是引用关系，如果组件中的data是一个对象，那么这样作用域没有隔离，子组件中的data属性值会相互影响，如果组件中的data是一个函数，那么每个实例可以维护一份被返回对象的独立的拷贝，组件实例之间的data属性值不会互相影响，而new Vue的实例是不会被复用的，因此不存在引用对象的问题。\n\n### v-model的原理\n我们在vue项目中主要使用v-model指令在表单input，textarea，select等元素上创建双向绑定，我们知道v-model本质上不过是语法糖，v-model在内部为不同的输入元素使用不同的属性并抛出不同的事件：\n\n- text和textarea元素使用value属性和input事件\n- checkbox和radio使用checked和change\n- select字段将value作为prop并将change作为事件\n\n### vue组件间通信有哪几种方式（6种）\n- props和$emit\n适用父子组件通信\n\n- ref和$parent $children\nref：如果在普通dom上使用，引用指向的就是dom元素，如果用在子组件上，引用就指向组件实例 $parent/$children：访问父子实例\n\n- EventBus（$emit/$on）\n这种方法通过一个空的vue实例作为中央事件总线（事件中心），用它来触发事件和监听事件，从而实现任何组件间的通信，包括父子，隔代，兄弟组件\n\n- $attrs/$listeners\n$attrs：包含了父作用域里不被prop所识别（且获取）的特性绑定（class和style除外）。当一个组件没有声明任何prop时，这里会包含所有父作用域的绑定（class和style除外），并且可以通过v-bind=\"$attrs\"传入内部组件。通常配合inheritAttrs选项一起使用\n\n$listeners：包含了父作用域中的v-on事件监听器，它可以通过v-on=\"$listeners\"传入内部组件\n\n- provide、inject\n祖先组件通过provide来提供变量，然后在子孙组件中通过inject来注入变量，provide / inject API主要解决了跨级组件间的通信问题，不过他的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立一种主动提供和依赖注入的关系\n\n- vuex\nvuex是一个专为vue应用程序开发的状态管理模式，每一个vuex应用的核心就是store，store基本上就是一仓库，它包含着你的应用中大部分的状态\n\nvuex的状态存储是响应式的，当vue从store中读取状态时候，若store中的状态发生变化，那么相应的组件也会相应的得到高效更新\n\n改变store中的状态的唯一的途径就是显式地提交mutation，这样使我们可以方便地跟踪每一个状态的变化\n\n### 你使用过vuex吗\nvuex是一个专门为vue应用程序开发的状态管理模式，每一个vuex应用的核心是store，store基本上就是一个容器，它包含着你的应用中大部分的状态（state）\n\n主要包括以下几个模块：\n\n- state：定义了应用状态的数据结构，可以在这里设置默认的初始状态\n- Getters：允许组件从State中获取数据，mapGetters辅助函数仅仅是将store中的getter映射到局部计算属性\n- Mutations：是唯一更改store中状态的方法，且必须是同步函数\n- Actions：用于提交mutation，而不是直接更改状态，可以包含任意的异步操作\n- Modules：允许将单一的Store拆分成多个store且同时保存在单一的状态树里\n\n### vuex解决了什么问题\n1. 多个组件依赖同一状态，多层嵌套繁琐，兄弟组件没办法传值通信。\n\n2. 不同组件的行为需要修改同一状态\n\n### Vuex中状态是对象时，使用时要注意什么？\n因为对象是引用类型，复制后改变属性还是会影响原始数据，这样会改变state里面的状态，是不允许，所以先用深度克隆复制对象，再修改。\n\n### 组件中批量使用Vuex的state状态\n```js\nimport {mapState} from 'vuex'\nexport default{\n    computed:{\n        ...mapState(['price','number'])\n    }\n}\n```\n\n### Vuex中要从state派生一些状态出来，且多个组件使用它\n使用getter属性，相当Vue中的计算属性computed，只有原状态改变派生状态才会改变。\n```js\nconst store = new Vuex.Store({\n    state: {\n        price: 10,\n        number: 10,\n        discount: 0.7,\n    },\n    getters: {\n        total: state => {\n            return state.price * state.number\n        },\n        discountTotal: (state, getters) => {\n            return state.discount * getters.total\n        },\n        getTodoById: (state) => (id) =>{\n            return state.todos.find(todo => todo.id === id)\n        }\n    },\n});\n```\n```js\ncomputed: {\n    total() {\n        return this.$store.getters.total\n    },\n    discountTotal() {\n        return this.$store.getters.discountTotal\n    },\n    getTodoById() {\n        return this.$store.getters.getTodoById\n    },\n    ...mapGetters(['total','discountTotal']), // 批量使用getter属性\n    ...mapGetters({\n        myTotal:'total',\n        myDiscountTotal:'discountTotal',\n    }) // 取别名\n},\nmounted(){\n    console.log(this.getTodoById(2).done)//false\n}\n```\n- 在getter中可以通过第三个参数rootState访问到全局的state,可以通过第四个参数rootGetters访问到全局的getter。\n- 在mutation中不可以访问全局的state和getter，只能访问到局部的state。\n- 在action中第一个参数context中的context.rootState访问到全局的state，context.rootGetters访问到全局的getter。\n\n### 在组件中多次提交同一个mutation,action\n```js\nmethods:{\n    ...mapMutations({\n        setNumber:'SET_NUMBER',\n    }),\n    ...mapActions({\n        setNumber:'SET_NUMBER',\n    })\n}\n```\nthis.setNumber(10)相当调用this.$store.commit('SET_NUMBER',10)\n\n### Vuex中action和mutation有什么区别？\n1. action 提交的是 mutation，而不是直接变更状态。mutation可以直接变更状态。\n2. action 可以包含任意异步操作。mutation只能是同步操作。\n3. 提交方式不同，action 是用this.$store.dispatch('ACTION_NAME',data)来提交。mutation是用this.$store.commit('SET_NUMBER',10)来提交。\n4. 接收参数不同：\n```js\n{\n    state,      // 等同于 `store.state`，若在模块中则为局部状态\n    rootState,  // 等同于 `store.state`，只存在于模块中\n    commit,     // 等同于 `store.commit`\n    dispatch,   // 等同于 `store.dispatch`\n    getters,    // 等同于 `store.getters`\n    rootGetters // 等同于 `store.getters`，只存在于模块中\n}\n```\n多个actions，A结束后再执行其他操作\n```js\nactions:{\n    async actionA({commit}){\n        //...\n    },\n    async actionB({dispatch}){\n        await dispatch ('actionA')//等待actionA完成\n        // ... \n    }\n}\n```\n\n### 命名空间\n```js\nexport default{\n    namespaced: true,\n    state,\n    getters,\n    mutations,\n    actions\n}\n```\n- 怎么在带命名空间的模块内提交全局的mutation和action？\n```js\nthis.$store.dispatch('actionA', null, { root: true })\nthis.$store.commit('mutationA', null, { root: true })\n```\n\n### 在Vuex插件中怎么监听组件中提交mutation和action？\n```js\nexport default function createPlugin(param) {\n    return store => {\n        store.subscribe((mutation, state) => {\n            console.log(mutation.type)//是那个mutation\n            console.log(mutation.payload)\n            console.log(state)\n        })\n        // store.subscribeAction((action, state) => {\n        //     console.log(action.type)//是那个action\n        //     console.log(action.payload)//提交action的参数\n        // })\n        store.subscribeAction({\n            before: (action, state) => {//提交action之前\n                console.log(`before action ${action.type}`)\n            },\n            after: (action, state) => {//提交action之后\n                console.log(`after action ${action.type}`)\n            }\n        })\n    }\n}\n```\n\n### 在v-model上怎么用Vuex中state的值？\n```js\n<input v-model=\"message\">\n// ...\ncomputed: {\n    message: {\n        get () {\n            return this.$store.state.message\n        },\n        set (value) {\n            this.$store.commit('updateMessage', value)\n        }\n    }\n}\n```\n\n### vue router全局导航守卫\n三个参数\n- to：即将要进入的目标 路由对象。\n- from：当前导航正要离开的路由对象。\n- next：函数，必须调用，不然路由跳转不过去。\n\nnext()：进入下一个路由。\nnext(false)：中断当前的导航。\nnext('/')或next({ path: '/' }) : 跳转到其他路由，当前导航被中断，进行新的一个导航。\n\n- router.beforeEach：全局前置守卫。\n- router.beforeResolve：全局解析守卫。\n- router.afterEach：全局后置钩子。\n\n### 路由独享守卫\n```js\nconst router = new VueRouter({\n    routes: [\n        {\n            path: '/foo',\n            component: Foo,\n            beforeEnter: (to, from, next) => {\n            // ...\n            }\n        }\n    ]\n})\n```\n\n### 组件内导航守卫\n- beforeRouteLeave：在失活的组件里调用离开守卫。\n- beforeRouteUpdate：在重用的组件里调用,比如包含`<router-view />`的组件。\n- beforeRouteEnter：在进入对应路由的组件创建前调用。\n\n### router-link\n`<router-link>`是Vue-Router的内置组件，在具有路由功能的应用中作为声明式的导航使用。类似react的Link标签\n```html\n<router-link to=\"home\">Home</router-link>\n<router-link :to=\"'home'\">Home</router-link>\n<router-link :to=\"{ path: 'home' }\">Home</router-link>\n<router-link :to=\"{ name: 'user', params: { userId: 123 }}\">User</router-link>\n<router-link :to=\"{ path: 'user', query: { userId: 123 }}\">User</router-link>\n```\n注册在router-link上事件无效解决方法:\n使用@click.native。原因：router-link会阻止click事件，.native指直接监听一个原生事件\n\n在ie和firefox无效：\n1. 使用a标签不用Button\n2. 使用Button和Router.navigate方法\n\n\n### vue-router\n- mode\n  - hash\n  - history\n- 跳转\n  - this.$router.push()\n  - `<router-link to=\"\"></router-link>`\n- 占位\n  - `<router-view></router-view>`\n\n### Vue router 跳转和 location.href 有什么区别？\n`router` 是 `hash` 改变\n`location.href` 是页面跳转，刷新页面\n\n### Vue router 除了 router-link 怎么实现跳转?\n```\nrouter.go(1)\nrouter.push('/')\n```\n\n### params和query的区别\nquery需要path引入，params需要name引入\nthis.$route.query.name、this.$route.params.query\n> 注意点：query刷新不会丢失query数据，params刷新会丢失数据\n\n### 组件内监听路由的变化\n只能用在包含<router-view />的组件内\n1. \n```js\nwatch: {\n    '$route'(to, from) {\n        //这里监听\n    },\n}\n```\n\n2. \n```js\nbeforeRouteUpdate (to, from, next) {\n    //这里监听\n},\n```\n\n### 切换新路由的滚动条处理\n```js\nconst router = new Router({\n    mode: 'history',\n    base: process.env.BASE_URL,\n    routes,\n    scrollBehavior(to, from, savedPosition) {\n        if (savedPosition) {\n            return savedPosition;\n        } else {\n            return { x: 0, y: 0 };\n        }\n    }\n});\n```\n\n### 路由传参获取方式\n1. meta：路由元信息，写在routes配置文件中。\n```js\n{\n    path: '/home',\n    name: 'home',\n    component: load('home'),\n    meta: {\n        title: '首页'\n    },\n},\n```\n> this.$route.meta.title\n\n2. query\n```js\nthis.$router.push({\n    path:'/home',\n    query: {\n        userId:123\n    }\n})\n```\n> this.$route.query.userId\n\n3. params\n```js\n{\n    path: '/home/:userId',\n    name: 'home',\n    component: load('home'),\n},\n// 注意用params传参，只能用命名的路由（用name访问）\nconst userId = '123'\nthis.$router.push({ name: 'home', params: { userId } })\n// this.$route.params\n```\n\n### 实现动态加载路由\n- 使用Router的实例方法addRoutes来实现动态加载路由，一般用来实现菜单权限。\n\n- 使用时要注意，静态路由文件中不能有404路由，而要通过addRoutes一起动态添加进去。\n\n```js\nwebpack< 2.4 时\n{ \n    path:'/', \n    name:'home',\n    components:resolve=>require(['@/components/home'],resolve)\n} \nwebpack> 2.4 时\n{ \n    path:'/', \n    name:'home', \n    components:()=>import('@/components/home')\n}\n```\n\n### 路由之间跳转\n1. 声明式\n通过使用内置组件<router-link :to=\"/home\">来跳转 or router-link :to=\"{name:'index'}\">\n\n2. 编程式\n```js\nthis.$router.push({ path:'home' })\nthis.$router.replace({ path: '/home' })\nthis.$router.push({name:'组件名')};\n```\n$router和$route的区别\n> $route为当前router跳转对象，里面可以获取name、path、query、params等\n> $router为VueRouter实例，想要导航到不同URL，则使用router.push方法，返回上一个历史$router.to(-1)\n\n### 打开新窗口\n```js\nconst obj = {\n    path: xxx,//路由地址\n    query: {\n       mid: data.id//可以带参数\n    }\n};\nconst {href} = this.$router.resolve(obj);\nwindow.open(href, '_blank');\n```\n\n### 动态绑定Class和Style\n```html\n<!--第一种对象语法 -->\n<div class=\"test\" :class=\"{active:actived,'active-click': clicked&&actived}\"></div>\n<!-- 第二种数组语法 -->\n<div class=\"test\" :class=\"[actived?activeClass : '', clicked&&actived?activeClickClass : '']\"></div>\n<!-- 第三种对象和数组混合 -->\n<div :class=\"[testClass,{active:actived},{'active-click':clicked&&actived}]\"></div>\n<!-- 第四种对象和计算属性(推荐) -->\n<div :class=\"classObject\"></div>\n```\n\n### 过滤器(filter)\n```js\n<div><span>{{money | moneyFilter(0.15)}}</span>美元</div>\n<div><span>{{money | moneyFilter(0.12)}}</span>英镑</div>\nfilters: {\n    moneyFilter: function(val, ratio) {\n        return Number(val * ratio).toFixed(2);\n    }\n}\n```\n除了用在插值上还可以用在v-bind表达式上。\n\n### computed中的属性名和data中的属性名可以相同吗？也不能和method中属性同名\n不能同名，因为不管是computed属性名还是data数据名还是props数据名都会被挂载在vm实例上，因此这三个都不能同名。\n\n### watch的属性使用箭头函数定义可以吗？\n不可以。this会是undefind,因为箭头函数中的this指向的是定义时的this，而不是执行时的this，所以不会指向Vue实例的上下文。\n\n### watch怎么深度监听对象变化\n监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；\n```js\nwatch:{\n   a:{\n       handler:function(val,oldval){\n           \n       },\n       deep:true, // 一层层遍历给属性都加上监听器\n       immediate: true // 组件加载立即触发回调函数执行\n   },\n   'obj.a': {\n\n   }\n}\n```\n\n### 强制刷新组件\n- this.$forceUpdate()。\n- 组件上加上key，然后变化key的值。\n\n### 访问子组件实例或者子元素\n1. ref\n先用ref特性为子组件赋予一个ID引用<base-input ref=\"myInput\"></<base-input>\n\n比如子组件有个focus的方法，可以这样调用this.$refs.myInput.focus()；\n比如子组件有个value的数据，可以这样使用this.$refs.myInput.value。\n\n2. 子组件访问父组件\nthis.$parent\n\n### 组件什么时候下被销毁\n- 没有使用keep-alive切换\n- v-if=\"false\"\n- 执行vm.$destroy()\n\n### $event.target和$event.currentTarget有什么区别\n$event.currentTarget始终指向事件所绑定的元素，而$event.target指向事件发生时的元素。\n\n### 事件修饰符和表单修饰符\n\n- 事件修饰符\n\n.stop：阻止事件传递；\n.prevent： 阻止默认事件；\n.capture ：在捕获的过程监听，没有capture修饰符时都是默认冒泡过程监听；\n.self：当前绑定事件的元素才能触发；\n.once：事件只会触发一次；\n.passive：默认事件会立即触发，不要把.passive和.prevent一起使用，因为.prevent将不起作用。\n\n- 表单修饰符.number .lazy .trim\n\n```\n<comp :foo.sync=\"bar\"></comp>\n```\n相当于\n```\n<comp :foo=\"bar\" @update:foo=\"val => bar = val\"></comp>\n\n// this.$emit('update:foo', newValue)\n```\n\n要注意顺序很重要，用@click.prevent.self会阻止所有的点击，而@click.self.prevent只会阻止对元素自身的点击。\n\n### 说说你对Vue的表单修饰符.lazy的理解。\ninput标签v-model用lazy修饰之后，并不会立即监听input的value的改变，会在input失去焦点之后，才会监听input的value的改变。\n\n### 监听键盘事件\n使用按键修饰符 <input @keyup.enter=\"submit\">按下回车键时候触发submit事件。\n- .enter\n- .tab\n- .delete (捕获“删除”和“退格”键)\n- .esc\n- .space\n- .up\n- .down\n- .left\n- .right\n\n### v-on绑定多个方法\n```html\n<template>\n    <div v-on:{click:a,dblclick:b}></div>\n</template>\n<script>\n    methods:{\n        a(){\n            alert(1)\n        },\n        b(){\n            alert(2)\n        }\n    }\n</script>\n```\n\n### css样式当前组件有效\n```html\n<style lang=\"less\" scoped></style>\n```\n原理：vue通过在DOM结构以及css样式上加上唯一的标记`data-v-xxxxxx`，保证动态属性唯一，达到样式私有化，不污染全局的作用。\n\n编译后：\n```html\n<template>    \n    <span data-v-3e5b2a80 class=\"textScoped\">scoped测试</span>\n</template>\n<script>\n\n</script>\n<style scoped>    \n    .textScoped[data-v-3e5b2a80]{        \n        color: red;    \n    }\n</style>\n```\n\n### 渲染模板保留注释\n- 在组件中将comments选项设置为true\n- `<template comments> ... <template>`\n\n### 在created和mounted这两个生命周期中请求数据有什么区别呢？\n在created中，页面视图未出现，如果请求信息过多，页面会长时间处于白屏状态，DOM节点没出来，无法操作DOM节点。在mounted不会这样，比较好。\n\n### Vue组件里的定时器要怎么销毁？\n- 如果页面上有很多定时器，可以在data选项中创建一个对象timer，给每个定时器取个名字一一映射在对象timer中，\n在beforeDestroy构造函数中for(let k in this.timer){clearInterval(k)}；\n\n- 如果页面只有单个定时器，可以这么做。\n```js\nconst timer = setInterval(() =>{}, 500);\nthis.$once('hook:beforeDestroy', () => {\n   clearInterval(timer);\n})\n```\n\n### Vue中能监听到数组变化的方法有哪些？为什么这些方法能监听到呢？\n- push()、pop()、shift()、unshift()、splice()、sort()、reverse()，这些方法在Vue中被重新定义了，故可以监听到数组变化；\n- filter()、concat()、slice()，这些方法会返回一个新数组，也可以监听到数组的变化。\n\n### 定义全局方法\n1. 挂载在Vue的prototype上\n2. 利用全局混入mixin\n3. \n```js\nthis.$root.$on('demo',function(){\n    console.log('test');\n})\nthis.$root.$emit('demo')；\nthis.$root.$off('demo')；\n// Mustache的web模板引擎\n```\n\n### 捕获组件的错误信息\n- errorCaptured是组件内部钩子，当捕获一个来自子孙组件的错误时被调用，接收error、vm、info三个参数，return false后可以阻止错误继续向上抛出。\n\n- errorHandler为全局钩子，使用Vue.config.errorHandler配置，接收参数与errorCaptured一致，2.6后可捕捉v-on与promise链的错误，可用于统一错误\n处理与错误兜底。\n\n### vue SSR\nvue是构建客户端应用程序的框架，默认情况下，可以在浏览器中输出vue组件，进行生成dom和操作dom，然而，也可以将同一个组件渲染为服务端的html字符串，将他们直接发送到客户端，然后将这些静态标记激活为客户端上可以交互的应用程序。\n\n即ssr的意思就是vue在服务端完成将标签渲染成整个html片段的工作，然后将片段直接返回给客户端使用\n\n- ssr优点：\n\n  - 更好的seo：因为spa页面的内容是通过ajax获取，而搜索引擎爬取工具并不会等待ajax一步完成后再抓取页面内容，所以在spa中是抓取不到页面通过ajax获取到的内容；而ssr是直接由服务器返回已经渲染好的页面（数据已经包含在页面中），所以搜索引擎爬取工具可以抓取到渲染好的页面\n\n  - 更快的内容到达时间（首屏加载快）：spa会等待所有vue编译后的js文件都下载完成后，才开始进行也免得渲染，文件下载需要一定的时间等，所以首屏加载需要时间，而ssr直接由服务器渲染好页面返回显示，无需等待js文件再去渲染，所以ssr有更快的内容到达时间\n\n- ssr缺点：\n\n  - 更多的开发条件限制：例如服务端渲染只支持beforeCreate和created两个钩子函数，这会导致一些外部扩展库需要特殊处理，才能在服务端渲染程序中运行；并且与可以部署在任何静态文件服务器上的完全静态单页面应用程序spa不同，服务端渲染应用程序，需要处于nodejs server中才能运行\n\n  - 更多的服务器负载\n\n### nextTick\n在下次dom更新循环结束之后执行延迟回调，可用于获取更新后的dom状态。\n\n- 新版本中默认是microtasks, v-on中会使用macrotasks\n```js\n// 修改数据\nvm.msg = 'Hello'\n// DOM 还没有更新\nVue.nextTick(function () {\n  // DOM 更新了\n  ...   //DOM操作\n})\n\n// 作为一个 Promise 使用\nVue.nextTick()\n    .then(function () {\n    // DOM 更新了\n    })\n```\n\n```\nVue 在更新 DOM 时是异步执行的。只要侦听到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部对异步队列尝试使用原生的 Promise.then、MutationObserver 和 setImmediate，如果执行环境不支持，则会采用 setTimeout(fn, 0) 代替。\n例如，当你设置 vm.someData = 'new value'，该组件不会立即重新渲染。当刷新队列时，组件会在下一个事件循环“tick”中更新。多数情况我们不需要关心这个过程，但是如果你想基于更新后的 DOM 状态来做点什么，这就可能会有些棘手。虽然 Vue.js 通常鼓励开发人员使用“数据驱动”的方式思考，避免直接接触 DOM，但是有时我们必须要这么做。为了在数据变化之后等待 Vue 完成更新 DOM，可以在数据变化之后立即使用 Vue.nextTick(callback)。这样回调函数将在 DOM 更新完成后被调用。\n```\n> dom更新为什么是一个异步操作因为它提升了渲染效率。\n\n### 数据响应(数据劫持)\n数据响应的实现由两部分构成: 观察者( watcher ) 和 依赖收集器( Dep )，其核心是 defineProperty 这个方法，它可以重写属性的 get 与 set 方法，从而完成监听数据的改变。\n\n> 1. 对需要observe的数据对象进行递归遍历，包括子属性对象的属性，都加上setter和getter这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化\n\n> 2. compile解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图\n\n> 3. Watcher订阅者是Observer和Compile之间通信的桥梁，主要做的事情是:\n①在自身实例化时往属性订阅器(dep)里面添加自己\n②自身必须有一个update()方法\n③待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调\n\n> 4、MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -> 视图更新；视图交互变化(input) -> 数据model变更的双向绑定效果。\n\n```js\nlet data = {a: 1}\n// 数据响应性\nobserve(data)\n\n// 初始化观察者\nnew Watcher(data, 'name', updateComponent)\ndata.a = 2\n\n// 简单表示用于数据更新后的操作\nfunction updateComponent() {\n    vm._update() // patchs\n}\n\n// 监视对象\nfunction observe(obj) {\n\t// 遍历对象，使用 get/set 重新定义对象的每个属性值\n  Object.keys(obj).map(key => {\n      defineReactive(obj, key, obj[key])\n  })\n}\n\nfunction defineReactive(obj, k, v) {\n    // 递归子属性\n    if (type(v) == 'object') observe(v)\n    \n    // 新建依赖收集器\n    let dep = new Dep()\n    // 定义get/set\n    Object.defineProperty(obj, k, {\n        enumerable: true,\n        configurable: true,\n        get: function reactiveGetter() {\n        \t  // 当有获取该属性时，证明依赖于该对象，因此被添加进收集器中\n            if (Dep.target) {\n                dep.addSub(Dep.target)\n            }\n            return v\n        },\n        // 重新设置值时，触发收集器的通知机制\n        set: function reactiveSetter(nV) {\n            v = nV\n            dep.nofify()\n        },\n    })\n}\n\n// 依赖收集器\nclass Dep {\n    constructor() {\n        this.subs = []\n    }\n    addSub(sub) {\n        this.subs.push(sub)\n    }\n    notify() {\n        this.subs.map(sub => {\n            sub.update()\n        })\n    }\n}\n\nDep.target = null\n\n// 观察者\nclass Watcher {\n    constructor(obj, key, cb) {\n        Dep.target = this\n        this.cb = cb\n        this.obj = obj\n        this.key = key\n        this.value = obj[key]\n        Dep.target = null\n    }\n    addDep(Dep) {\n        Dep.addSub(this)\n    }\n    update() {\n        this.value = this.obj[this.key]\n        this.cb(this.value)\n    }\n    before() {\n        callHook('beforeUpdate')\n    }\n}\n```\n\n### 虚拟dom原理实现\n- 创建 dom 树\n\n- 树的diff，同层对比，输出patchs(listDiff/diffChildren/diffProps)\n  - 没有新的节点，返回\n  - 新的节点tagName与key不变， 对比props，继续递归遍历子树\n    - 对比属性(对比新旧属性列表):\n      - 旧属性是否存在与新属性列表中\n      - 都存在的是否有变化\n      - 是否出现旧列表中没有的新属性\n\n  - tagName和key值变化了，则直接替换成新节点\n\n- 渲染差异\n  - 遍历patchs， 把需要更改的节点取出来\n  - 局部更新dom\n\n\n- patch函数 oldvnode vnode\n  - 如果两个节点不一样，直接用新节点替换老节点；\n  - 如果两个节点一样，\n​\t  - 新老节点一样，直接返回；\n​     - 老节点有子节点，新节点没有：删除老节点的子节点；\n    ​ - 老节点没有子节点，新节点有子节点：新节点的子节点直接append到老节点；\n    ​ -\t都只有文本节点：直接用新节点的文本节点替换老的文本节点；\n    ​ -\t都有子节点：updateChildren\n\n```js\n// diff算法的实现\nfunction diff(oldTree, newTree) {\n\t // 差异收集\n    let pathchs = {}\n    dfs(oldTree, newTree, 0, pathchs)\n    return pathchs\n}\n\nfunction dfs(oldNode, newNode, index, pathchs) {\n    let curPathchs = []\n    if (newNode) {\n        // 当新旧节点的 tagName 和 key 值完全一致时\n        if (oldNode.tagName === newNode.tagName && oldNode.key === newNode.key) {\n        \t  // 继续比对属性差异\n            let props = diffProps(oldNode.props, newNode.props)\n            curPathchs.push({ type: 'changeProps', props })\n            // 递归进入下一层级的比较\n            diffChildrens(oldNode.children, newNode.children, index, pathchs)\n        } else {\n        \t  // 当 tagName 或者 key 修改了后，表示已经是全新节点，无需再比\n            curPathchs.push({ type: 'replaceNode', node: newNode })\n        }\n    }\n\n\t // 构建出整颗差异树\n    if (curPathchs.length) {\n    \t\tif(pathchs[index]){\n    \t\t\tpathchs[index] = pathchs[index].concat(curPathchs)\n    \t\t} else {\n    \t\t\tpathchs[index] = curPathchs\n    \t\t}\n    }\n}\n\n// 属性对比实现\nfunction diffProps(oldProps, newProps) {\n    let propsPathchs = []\n    // 遍历新旧属性列表\n    // 查找删除项\n    // 查找修改项\n    // 查找新增项\n    forin(olaProps, (k, v) => {\n        if (!newProps.hasOwnProperty(k)) {\n            propsPathchs.push({ type: 'remove', prop: k })\n        } else {\n            if (v !== newProps[k]) {\n                propsPathchs.push({ type: 'change', prop: k , value: newProps[k] })\n            }\n        }\n    })\n    forin(newProps, (k, v) => {\n        if (!oldProps.hasOwnProperty(k)) {\n            propsPathchs.push({ type: 'add', prop: k, value: v })\n        }\n    })\n    return propsPathchs\n}\n\n// 对比子级差异\nfunction diffChildrens(oldChild, newChild, index, pathchs) {\n\t\t// 标记子级的删除/新增/移动\n    let { change, list } = diffList(oldChild, newChild, index, pathchs)\n    if (change.length) {\n        if (pathchs[index]) {\n            pathchs[index] = pathchs[index].concat(change)\n        } else {\n            pathchs[index] = change\n        }\n    }\n\n\t // 根据 key 获取原本匹配的节点，进一步递归从头开始对比\n    oldChild.map((item, i) => {\n        let keyIndex = list.indexOf(item.key)\n        if (keyIndex) {\n            let node = newChild[keyIndex]\n            // 进一步递归对比\n            dfs(item, node, index, pathchs)\n        }\n    })\n}\n\n// 列表对比，主要也是根据 key 值查找匹配项\n// 对比出新旧列表的新增/删除/移动\nfunction diffList(oldList, newList, index, pathchs) {\n    let change = []\n    let list = []\n    const newKeys = getKey(newList)\n    oldList.map(v => {\n        if (newKeys.indexOf(v.key) > -1) {\n            list.push(v.key)\n        } else {\n            list.push(null)\n        }\n    })\n\n    // 标记删除\n    for (let i = list.length - 1; i>= 0; i--) {\n        if (!list[i]) {\n            list.splice(i, 1)\n            change.push({ type: 'remove', index: i })\n        }\n    }\n\n    // 标记新增和移动\n    newList.map((item, i) => {\n        const key = item.key\n        const index = list.indexOf(key)\n        if (index === -1 || key == null) {\n            // 新增\n            change.push({ type: 'add', node: item, index: i })\n            list.splice(i, 0, key)\n        } else {\n            // 移动\n            if (index !== i) {\n                change.push({\n                    type: 'move',\n                    form: index,\n                    to: i,\n                })\n                move(list, index, i)\n            }\n        }\n    })\n\n    return { change, list }\n}\n```\n\n### Proxy 相比于 defineProperty 的优势\n- 数组变化也能监听到\n- 不需要深度遍历监听(遍历每一个属性)\n\n```js\nlet data = { a: 1 }\nlet reactiveData = new Proxy(data, {\n\tget: function(target, name){\n\t\t// ...\n\t},\n\t// ...\n})\n```\n\n### 为什么在v-for中使用key？\n为了标识每个唯一的节点，方便比较，v-for中加key可以减少渲染次数，提升渲染性能。\n\n### Vuex页面刷新数据丢失怎么解决？\n使用 vuex-persist 插件，它就是为 Vuex 持久化存储而生的一个插件。不需要你手动存取 storage ，而是直接将状态保存至 cookie 或者 localStorage 中\n\n### vue项目的优化\n1. v-if和v-show区分场景使用\n\n2. computed 和 watch 区分场景使用\n\n3. v-for 遍历必须加key，key最好是id值，如果采用index当插入数据时索引会发生变化，且避免同时使用v-if(用计算属性过滤数据)\n\n4. 图片懒加载\n\n5. 路由懒加载\n\n6. 第三方插件按需引入\n\n7. 长列表(虚拟列表)\n> 无限列表加载到底部请求api，用v-for循环数据这样是欠妥当的。随着数据的加载，dom会越来越多，造成性能的开销大，对客户端造成压力。虚拟列表保证dom数量一定，渲染可视区的dom，通过替换数据来实现长列表的显示。\n\n8. 释放组件资源(beforeDestroy移除监听)\n\n9. 首屏优化 mixins抽离公共代码\n\n### vue父子组件实现双向绑定实例\n```\n<Child :name=\"name\" :change=\"changeName\"/>\n\nprops:{\n    name:{\n        type:String,\n        required: false\n    }\n},\ndata() {\n    newName:''\n},\nwatch:{\n    name(val){\n        this.newName = val\n    },\n    newName(val){\n        this.$emit('change', val)\n    }\n}\n```\n\n### 自定义v-model\n自定义 v-model，设置子组件 model 属性，设置 v-model 侦听的属性值，同时绑定属性变化时执行的事件，实现自定义 v-model，即双向绑定。\n```\n// v-model只是一个语法糖\n<input type=\"text\" v-model=\"price\"/>\n\n<input type=\"text\" :value=\"price\" @input=\"price=$event.target.value\" />\n```\n- Vue.extend方法创建一个组件\n```js\n// 注册组件\nVue.component(\"base-checkbox\", {\n    model:{\n        prop:'checked', // 绑定属性\n        event:'change', // 抛出事件\n    },\n    props:{\n        checked: boolean\n    },\n    templete:`<input type=\"checkbox\" v-bind:checked=\"checked\" v-on:change=\"$emit('change',$event.target.value)\"/>`\n})\n\n<base-checkbox v-model=\"value\"></base-checkbox>\n```\n\n### provide/inject有什么用？\n> 常用的父子组件通信方式都是父组件绑定要传递给子组件的数据，子组件通过`props`属性接收，一旦组件层级变多时，采用这种方式一级一级传递值非常麻烦，而且代码可读性不高，不便后期维护。\n\n> vue提供了`provide`和`inject`帮助我们解决多层次嵌套嵌套通信问题。在`provide`中指定要传递给子孙组件的数据，子孙组件通过`inject`注入祖父组件传递过来的数据。\n\n> `provide`和`inject`主要为高阶插件/组件库提供用例。并不推荐直接用于应用程序代码中。\n```js\nprovide() {\n    return {\n        elForm: this\n    }\n}\n\ninject: ['elForm']\n\n\nprovide: {\n    name: 'cosyer'\n}\n\ninject:{\n    newName: {\n        from: 'name',\n        default: ''\n    }\n}\n```\n\n### vue is的作用\n#### 简单来说就是扩展html标签的限制\n```html\n<ul>\n    <li></li>\n</ul>\n<!-- ul里面嵌套li是固定的写法 -->\n```\n当我们使用自定义的组件时会被当作无效内容↓\n```html\n<ul>\n    <my-li></my-li>\n</ul>\n```\n可以通过is来扩展\n```html\n<ul>\n    <li is=\"my-li\"></li>\n</ul>\n```\n\n#### 动态切换组件\n```\n<div :is=\"变量名称\"></div>\n```\n\n### assets和static的区别\n- assets中的文件在运行npm run build的时候会打包，简单来说就是会被压缩体积，代码格式化之类的。打包之后也会放到static中。\n\n- static中的文件则不会被打包。\n\n> 建议：将图片等未处理的文件放在assets中，打包减少体积。而对于第三方引入的一些资源文件如iconfont.css等可以放在static中，因为这些文件已经经过处理了。\n\n### slot插槽分发\n很多时候，我们封装了一个子组件之后，在父组件使用的时候，想添加一些dom元素，这个时候就可以使用slot插槽了，但是这些dom是否显示以及在哪里显示，则是看子组件\n中slot组件的位置了。\n\n### v-clock指令的作用\n- 解决页面闪烁问题(会显示插值表达式{{message}})\n如果网速慢，而该标签内容是变量没有请求响应回来的时候，页面上先不显示该标签（vue给该标\n签加了css样式），当响应回来的时候改标签默认将css样式去除。\n\n`此指令可以解决使用插值表达式页面闪烁问题`将该指令加在html标签中时，可以在该文件中加\nstyle属性为display：none\n```js\n<div class=\"#app\" v-cloak>\n    <p>{{name}}</p>\n</div>\n\n[v-cloak]{\n    display: none;\n}\n```\n\n### 封装vue组件的过程\n1. 建立组件模板、架子写写样式，考虑好组件的基本逻辑\n2. 准备好组件的数据输入，定好props里面的数据、类型\n3. 准备好组价的数据输出，定好暴露出来的方法\n\n### 常用组件库\n- [文本比对:vue-code-diff](https://github.com/ddchef/vue-code-diff)\n- [JSON代码编辑器:vue-codemirror](https://github.com/surmon-china/vue-codemirror)\n- [国际化:vue-i18n](https://github.com/kazupon/vue-i18n)\n- [富文本编辑器:wangEditor](https://github.com/wangeditor-team/wangEditor)\n- [富文本编辑器:tinymce](https://github.com/tinymce/tinymce)\n- [monaco编辑器:vue-monaco](https://github.com/egoist/vue-monaco)\n- [ace编辑器:vue2-ace-editor](https://github.com/chairuosen/vue2-ace-editor)\n- [剪切板:vue-clipboard2](https://github.com/Inndy/vue-clipboard2)\n- [操作cookie:vue-cookies](https://github.com/cmp-cc/vue-cookies)\n- [fragment元素:vue-fragment](https://github.com/Thunberg087/vue-fragment)\n- [代码高亮:vue-highlightjs](https://github.com/metachris/vue-highlightjs)\n- [command界面:xterm.js](https://github.com/xtermjs/xterm.js)\n- [command界面:hterm](https://github.com/chromium/hterm)\n- [处理yaml:yaml.js](https://github.com/jeremyfa/yaml.js)\n- [yaml:js-yaml](https://github.com/nodeca/js-yaml)\n- [vue的echarts封装:v-charts](https://github.com/ElemeFE/v-charts)\n- [mock:mockjs](https://github.com/nuysoft/Mock)\n- [判断是否是黑色:is-dark-color](https://github.com/gion/is-dark-color)\n- [XSS过滤:DOMPurify](https://github.com/cure53/DOMPurify)\n\n### 常用UI库\n#### 移动端\n- [mint-ui](http://mint-ui.github.io/#!/zh-cn)\n\n- [Vant](https://youzan.github.io/vant/#/zh-CN/home)\n\n- [VUX](https://vux.li/)\n\n- [cube-ui](https://didi.github.io/cube-ui/)\n\n#### pc端\n- [element-ui](https://element.eleme.cn/2.13/#/zh-CN/component/\ninstallation）\n\n- [Ant Design of Vue](https://www.antdv.com/docs/vue/introduce-cn/)\n\n- [iview/viewui/view-design](https://iviewui.com/)\n\n- [Avue](https://avuejs.com/)\n\n- [vuetify](https://vuetifyjs.com/)\n\n### 常用配置\n#### publicPath\n1. cli2 config/index.js\n```js\nbuild: {\n    assetsPublicPath: './'\n}\n```\n2. cli3 vue.config.js\n```js\nmodule.exports = {\n    publicPath: './'\n}\n```\n部署应用包时的基本 URL。默认情况下，Vue CLI会假设你的应用是被部署在一个域名的根路径\n上，例如https://www.my-app.com/。如果应用被部署在一个子路径上，\n你就需要用这个选项指定这个子路径。例如，如果你的应用被部署在https://www.my-app.\ncom/my-app/，则设置publicPath为/my-app/\n\n```js\nproxy: { \n    \"/api\": { //如果ajax请求的地址是http://192.168.0.118:9999/api1那么你就可以在ajax中使用/api/api1路径,其请求路径会解析\n    // http://192.168.0.118:9999/api1，当然你在浏览器上看到的还是http://localhost:8080/api/api1;\n    target: \"http://192.168.0.118:9999\",\n    //是否允许跨域，这里是在开发环境会起作用，但在生产环境下，还是由后台去处理，所以不必太在意\n    changeOrigin: true,\n    pathRewrite: {\n        //把多余的路径置为''\n        \"api\": \"\"\n    }\n}\n```\n\n### vue3\n1. createApp\n- vue2.x\n```js\nimport Vue from \"vue\";\nimport App from './App.vue'\n\nnew Vue({\n  render: (h) => h(App)\n}).$mount(\"#app\");\n```\n\n- vue3新特性\n> createApp 会产生一个 app 实例，该实例拥有全局的可配置上下文\n```js\nimport { createApp } from 'vue'\nimport App from './App.vue'\n\ncreateApp(App).mount('#app')\n```\n\n2. globalProperties\n```js\napp.config.globalProperties.foo = 'bar'\n\napp.component('child-component', {\n  mounted() {\n    console.log(this.foo) // 'bar'\n  }\n})\n```\n> 添加可在程序内的任何组件实例中访问的全局属性。当存在键冲突时，组件属性将优先替代掉Vue2.x的 Vue.prototype属性放到原型上的写法\n\n```js\n// Vue2.x\nVue.prototype.$http = () => {}\n\n// Vue3\nconst app = Vue.createApp({})\napp.config.globalProperties.$http = () => {}\n```\n\n3. 更快\n\n- 重写虚拟DOM (Virtual DOM Rewrite)\n\n随着虚拟 DOM 重写，我们可以期待更多的 编译时（compile-time）提示来减少 运行时（runtime）开销。重写将包括更有效的代码来创建虚拟节点。\n\n- 优化插槽生成(Optimized Slots Generation)\n\n在当前的 Vue 版本中，当父组件重新渲染时，其子组件也必须重新渲染。 使用 Vue 3 ，可以单独重新渲染父组件和子组件。\n\n- 静态树提升(Static Tree Hoisting)\n\n使用静态树提升，这意味着 Vue 3 的编译器将能够检测到什么是静态组件，然后将其提升，从而降低了渲染成本。它将能够跳过未整个树结构打补丁的过程。\n\n- 静态属性提升（Static Props Hoisting）\n\n此外，我们可以期待静态属性提升，其中 Vue 3 将跳过不会改变节点的打补丁过程。\n\n- 基于 Proxy 的观察者机制\n\n- 更小\nVue已经非常小了，在运行时（runtime）压缩后大约 20kb 。 但我们可以期待它会变得更加小，新的核心运行时压缩后大概 10kb 。\n- 使其更具可维护性\n不仅会使用 TypeScript（允许在编辑器中进行高级的类型检查和有用的错误和警告） ，而且许多软件包将被解耦，使所有内容更加模块化。\n- 更多的原生支持\n运行时内核也将与平台无关，使得 Vue 可以更容易地与任何平台（例如Web，iOS或Android）一起使用。\n- 更易于开发使用\n当我们需要在 Vue 中共享两个组件之间的行为时，我们通常使用 Mixins 。然而，Evan 正在尝试使用 Hooks API 来避免来自 Mixins 的一些问题，并且更适合\n- 使用惯用的 Vue 代码。\n使用 Time Slicing，将 JS 的执行分解为几个部分，如果有用户交互需要处理，这些部分将提供给浏览器。\n\n### element-ui使用中遇到的坑\n1. 不支持v-model修饰符导致如果使用.trim当数据拼接了' '后，第一次点击数据中间编辑，光标会跳到末尾\n\n2. el-table当注入的data经过过滤，所对应的$index还是原来的，导致删除splice对应的index不准确\n\n3. 在disabled的button上使用Tooltip失效， el-tooltip不显示(disable属性)\n\n4. input-number 输入精度precision 既要编辑又要显示超出最小值\n\n5. 页面刷新、局部刷新\n\n\n### [转载](http://mydearest.cn/2020/vueInterview.html)","source":"_posts/2020-12-23-vue-knownledge.md","raw":"---\ntitle: (转)vue面试题记录\ntags:\n  - vue\n  - 面试\ncopyright: true\ncomments: true\ndate: 2020-12-23\ncategories: Vue\nphotos:\n---\n\n### vue 双向绑定的原理\n采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调，实现视图刷新。\n<!-- more -->\n\n具体流程：\nVue中先遍历data选项中所有的属性（发布者）用Object.defineProperty劫持这些属性将其转为getter/setter。读取数据时候会触发getter。修改数据时会触发setter。\n\n然后给每个属性对应new Dep()，Dep是专门收集依赖、删除依赖、向依赖发送消息的。先让每个依赖设置在Dep.target上，在Dep中创建一个依赖数组，先判断Dep.target是否已经在依赖中存在，不存在的话添加到依赖数组中完成依赖收集，随后将Dep.target置为上一个依赖。\n\n组件在挂载过程中都会new一个Watcher实例。这个实例就是依赖（订阅者）。Watcher第二参数是一个函数，此函数作用是更新且渲染节点。在首次渲染过程，会自动调用Dep方法来收集依赖，收集完成后组件中每个数据都绑定上该依赖。当数据变化时就会在setter中通知对应的依赖进行更新。在更新过程中要先读取数据，就会触发Wacther的第二个函数参数。一触发就再次自动调用Dep方法收集依赖，同时在此函数中运行patch（diff运算)来更新对应的DOM节点，完成了双向绑定。\n\n- 每一个组件默认都会创建一个 Watcher，自定义的 watch 和 computed 方法也会创建 Watcher \n\n### Object.defineProperty()实现双向绑定的缺点\n1. 只能监听某个属性，不能监听整个对象\n2. 需要使用for in遍历对象属性绑定监听\n3. 不能监听数组，需要重写数组方法进行特异性操作\n4. 会污染原对象\n\n\n### v-show和v-if有什么区别\n\n- v-if（初始化不会渲染）\nv-if 是真正的条件渲染，因为它会确保在切换过程中条件块内的事件监听和子组件适当地被销毁和重建，也是惰性的，如果在初始渲染条件为假时，则什么也不做——直到条件第一次变为真时才开始渲染条件块，能用在`<template>`上。\n\n- v-show（初始化会渲染）\nv-show就简单得多，不管初始条件是什么，元素总是会被渲染，并且只是简单地基于css的display进行切换。\n\n所以，v-if适用于切换不频繁的场景，v-show适用于切换频繁的场景，不能用在`<template>`上。\n\n### class和style如何动态绑定\n\nclass可以通过对象语法和数组语法进行动态绑定：\n- 对象语法\n```js\n<div v-bind:class=\"{active: isActive, 'text-danger': hasError }\"></div>\ndata: {\n    isActive: true,\n    hasError: false\n}\n```\n\n- 数组语法\n```js\n<div v-bind:class=\"[isActive ? activeClass : '', errorClass]\"></div>\ndata: {\n    activeClass: 'active',\n    errorClass: 'text-danger'\n}\n```\nstyle也可以通过对象语法和数组语法进行动态绑定\n\n### 理解vue里的单向数据流\n所有的prop都使得其父子prop之间形成一个单向下行绑定：父级prop的更新会向下流动到子组件中，但是反过来不行，这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流难以解释.\n\n额外地，每次父级组件发生更新时，子组件中的所有prop都会刷新为最新的值，这意味着你不应该在一个子组件内部改变prop，如果你这样做了，vue会在浏览器的控制台发出警告，子组件想修改时，只能通过$emit派发一个自定义事件，父组件接收到后，由父组件修改.\n\n> 双向数据流是指数据从父级向子级传递数据，子级可以通过一些手段改变父级向子级传递的数据。\n\n### computed和watch的区别和运用场景\n- computed：是计算属性，依赖其他属性值，并且computed的值有缓存，只有它依赖的属性值发生改变时下一次获取computed的值时候才会重新计算computed的值。避免在模板中放入太多的逻辑，导致模板过重且难以维护。当未发生改变时，则会返回上一次的数据。\n\n- watch：更多的是观察作用，类似于某些数据的监听回调，每当监听的数据发生变化时都会执行回调进行后续操作。\n\n- methods: 每次渲染时都需要重新执行。\n\n简单的说：\n* 1.methods里面定义的是函数，你显然需要像\"fuc()\"这样去调用它（假设函数为fuc）。\n\n* 2.computed是计算属性，事实上和和data对象里的数据属性是同一类的（使用上）。\n\n* 3.watch:类似于监听机制+事件机制。\n\nwatch和computed的对比\n\n首先它们都是以Vue的依赖追踪机制为基础的，它们的共同点是：都是希望在依赖数据发生改变的时候，被依赖的数据根据预先定义好的函数，发生“自动”的变化。我们当然可以自己写代码完成这一切，但却很可能造成写法混乱，代码冗余的情况。\n\n但watch和computed也有明显不同的地方：\n\nwatch和computed各自处理的数据关系场景不同\n\n* 1.watch擅长处理的场景：一个数据影响多个数据\n\n* 2.computed擅长处理的场景：一个数据受多个数据影响\n\n相比于watch/computed，methods不处理数据逻辑关系，只提供可调用的函数\n\n运用场景：\n\n- 当我们需要进行数值计算，并依赖于其他数据时，应该使用computed，因为可以利用computed的缓存特性，避免每次获取值时都要重新计算。\n\n- 但我们需要在数据变化时执行异步或开销较大的操作时应该使用watch，使用watch选项允许我们执行异步操作，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态，这些都是计算属性无法做到的。\n\n### 直接给一个数组项赋值，vue能检测到吗\n- 由于js的限制(引用类型)，vue不能检测到以下数组的变动(对象属性的添加和删除)：\n\n- 当你利用索引直接设置一个数组项时，例如vm.item[indexOfItem] = newValue\n- 当你修改数组的长度时，例如vm.items.length = newLength\n\n为了解决第一个问题，vue提供了以下操作方法：\n```js\nVue.set(vm.items, indexOfItem, newValue)\n\nVue.$set(vm.items, indexOfItem, newValue)\n\nVue.$set(this.data,”key”,value) // 动态添加单个属性\n\n// 动态添加多个属性 \nthis.obj = Object.assign({}, this.obj, {\n  age: 18,\n  name: 'Chocolate',\n})\n\nVue.items.splice(indexOfItem, 1, newValue)\n```\n\n为了解决第二个问题，vue提供了以下操作方法：\n```js\nvm.items.splice(newLength)\n```\n\n- Vue 是不能检测对象属性的添加或删除\n```js\ndata() {\n    return {\n        obj:{\n            name:'Vue'\n        }\n    };\n},\nmounted() {\n    this.name = 'zs' // 不是响应式的\n    this.$set(this.obj,'name','lisi') //响应式 解决添加\n    // 用Object.assign来解决第二种情况。解决对象的删除\n    // Vue.delete\n},\n```\n### delete和Vue.delete的区别\ndelete 只是被删除的元素变成了empty/undefined，其他元素的键值还是不变的。而Vue.delete直接删除了数组，改变了数组的键值。\n\n### vue生命周期的理解（10个）\n- 生命周期是什么(创建到销毁的过程)\nvue实例有一个完整的生命周期，也就是从开始创建，初始化数据，编译模板，挂载dom->渲染更新->渲染卸载等一些过程，我们称这是vue的生命周期\n\n- 各个生命周期的作用\n  - beforeCreate：组件被创建之初，组件的属性生效之前\n  - created：组件实例已经完全创建，属性也绑定，但是真实的dom还没有生成，$el还不能用(vue实例的数据对象data有了，el和数据对象data都为undefined，还\n  未初始化。)\n  - beforeMount：在挂载开始之前被调用，相关的render函数首次被调用\n  - mounted：el被新创建的vm.$el替换，并挂载到实例上去后调用该钩子\n  - beforeUpdate：组件数据更新之前调用，发生在虚拟dom打补丁之前 \n  - updated：组件数据更新之后\n  - activated：keep-alive专属，组件被激活时调用\n  - deactivated：keep-alive专属，组件被销毁时调用\n  - beforeDestroy：组件被销毁前\n  - destroyed：组件被销毁后调用\n\n- _init_\n  - initLifecycle/Event，往vm上挂载各种属性\n  - callHook: beforeCreate: 实例刚创建\n  - initInjection/initState: 初始化注入和 data 响应性\n  - created: 创建完成，属性已经绑定， 但还未生成真实dom\n  - 进行元素的挂载： $el / vm.$mount()\n  - 是否有template: 解析成render function\n    - *.vue文件: vue-loader会将`<template>`编译成render function\n  - beforeMount: 模板编译/挂载之前\n  - 执行render function，生成真实的dom，并替换到dom tree中\n  - mounted: 组件已挂载\n\n- update:\n  - 执行diff算法，比对改变是否需要触发UI更新\n  - flushScheduleQueue\n    - watcher.before: 触发beforeUpdate钩子\t\t\n    - watcher.run(): 执行watcher中的 notify，通知所有依赖项更新UI\n  - 触发updated钩子: 组件已更新\n\n- actived / deactivated(keep-alive): 不销毁，缓存，组件激活与失活\n- destroy:\n  - beforeDestroy: 销毁开始\n  - 销毁自身且递归销毁子组件以及事件监听\n    - remove(): 删除节点\n    - watcher.teardown(): 清空依赖\n    - vm.$off(): 解绑监听\n  - destroyed: 完成后触发钩子\n\n```js\nnew Vue({})\n\n// 初始化Vue实例\nfunction _init() {\n\t // 挂载属性\n    initLifeCycle(vm) \n    // 初始化事件系统，钩子函数等\n    initEvent(vm) \n    // 编译slot、vnode\n    initRender(vm) \n    // 触发钩子\n    callHook(vm, 'beforeCreate')\n    // 添加inject功能\n    initInjection(vm)\n    // 完成数据响应性 props/data/watch/computed/methods\n    initState(vm)\n    // 添加 provide 功能\n    initProvide(vm)\n    // 触发钩子\n    callHook(vm, 'created')\n\t\t\n\t // 挂载节点\n    if (vm.$options.el) {\n        vm.$mount(vm.$options.el)\n    }\n}\n\n// 挂载节点实现\nfunction mountComponent(vm) {\n\t // 获取 render function\n    if (!this.options.render) {\n        // template to render\n        // Vue.compile = compileToFunctions\n        let { render } = compileToFunctions() \n        this.options.render = render\n    }\n    // 触发钩子\n    callHook('beforeMount')\n    // 初始化观察者\n    // render 渲染 vdom， \n    vdom = vm.render()\n    // update: 根据 diff 出的 patchs 挂载成真实的 dom \n    vm._update(vdom)\n    // 触发钩子  \n    callHook(vm, 'mounted')\n}\n\n// 更新节点实现\nfuntion queueWatcher(watcher) {\n\tnextTick(flushScheduleQueue)\n}\n\n// 清空队列\nfunction flushScheduleQueue() {\n\t // 遍历队列中所有修改\n    for(){\n\t    // beforeUpdate\n        watcher.before()\n         \n        // 依赖局部更新节点\n        watcher.update() \n        callHook('updated')\n    }\n}\n\n// 销毁实例实现\nVue.prototype.$destory = function() {\n\t // 触发钩子\n    callHook(vm, 'beforeDestory')\n    // 自身及子节点\n    remove() \n    // 删除依赖\n    watcher.teardown() \n    // 删除监听\n    vm.$off() \n    // 触发钩子\n    callHook(vm, 'destoryed')\n}\n```\n\n### vue父子组件生命周期钩子函数的执行顺序\n- 加载渲染过程\n父beforeCreate->父created->父beforeMount->子beforeCreate->子created->子beforeMount->子mounted->父mounted\n\n- 子组件更新过程\n父beforeUpdate->子beforeUpdate->子updated->父updated\n\n- 父组件更新过程\n父beforeUpdate->父updated\n\n- 销毁过程\n父beforeDestroy->子beforeDestroy->子destroyed->父destroy\n\n### 在哪个生命周期内调用异步请求\n可以在函数created，beforeMount，mounted中进行调用，因为在这三个钩子函数中data已经可以创建，可以将服务端返回的数据进行赋值，但是比较推荐在created钩子函数中调用异步请求，因为：\n\n- 能更快的获取到服务端数据，减少页面loading时间\n- ssr不支持beforeMount，mounted钩子函数，所以放在created中有助于一致性\n\n- mounted里能够操作dom\n\n### 在什么阶段才能访问操作DOM\n在钩子函数mounted被调用之前，vue已经把编译好的模板挂载到页面上，所以在mounted中可以访问操作dom，vue具体的生命周期。\n\n### 父组件可以监听到子组件的生命周期吗\n- 手动设置$emit来发布监听\n```js\n// parent\n<Child @mounted=\"fn\" />\n// child\nmounted() {\n    this.$emit(\"mounted\");\n}\n```\n\n- @hook\n```js\n// parent\n<Child @hook:mounted=\"fn\" />\nfn() {\n    console.log('get')\n}\n// child\nmounted() {\n    console.log('emit');\n```\n\n### 谈谈你对keep-alive的了解\nkeep-alive是vue内置的一个组件，可以使被包含的组件保留状态，避免重复渲染，其有以下特性：\n\n- 一般结合路由和动态组件使用，用于缓存组件\n- 提供include和exclude属性，两者都支持字符串或正则表达式，include表示只有名字匹配的组件会被缓存，exclude表示任何名称匹配的组件都不会被缓存，其中exclude的优先级比include高\n- 对应两个钩子函数actived和deactivated\n\n### 组件中的data为什么是个函数\n因为组件是拿来复用的，且js里的对象是引用关系，如果组件中的data是一个对象，那么这样作用域没有隔离，子组件中的data属性值会相互影响，如果组件中的data是一个函数，那么每个实例可以维护一份被返回对象的独立的拷贝，组件实例之间的data属性值不会互相影响，而new Vue的实例是不会被复用的，因此不存在引用对象的问题。\n\n### v-model的原理\n我们在vue项目中主要使用v-model指令在表单input，textarea，select等元素上创建双向绑定，我们知道v-model本质上不过是语法糖，v-model在内部为不同的输入元素使用不同的属性并抛出不同的事件：\n\n- text和textarea元素使用value属性和input事件\n- checkbox和radio使用checked和change\n- select字段将value作为prop并将change作为事件\n\n### vue组件间通信有哪几种方式（6种）\n- props和$emit\n适用父子组件通信\n\n- ref和$parent $children\nref：如果在普通dom上使用，引用指向的就是dom元素，如果用在子组件上，引用就指向组件实例 $parent/$children：访问父子实例\n\n- EventBus（$emit/$on）\n这种方法通过一个空的vue实例作为中央事件总线（事件中心），用它来触发事件和监听事件，从而实现任何组件间的通信，包括父子，隔代，兄弟组件\n\n- $attrs/$listeners\n$attrs：包含了父作用域里不被prop所识别（且获取）的特性绑定（class和style除外）。当一个组件没有声明任何prop时，这里会包含所有父作用域的绑定（class和style除外），并且可以通过v-bind=\"$attrs\"传入内部组件。通常配合inheritAttrs选项一起使用\n\n$listeners：包含了父作用域中的v-on事件监听器，它可以通过v-on=\"$listeners\"传入内部组件\n\n- provide、inject\n祖先组件通过provide来提供变量，然后在子孙组件中通过inject来注入变量，provide / inject API主要解决了跨级组件间的通信问题，不过他的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立一种主动提供和依赖注入的关系\n\n- vuex\nvuex是一个专为vue应用程序开发的状态管理模式，每一个vuex应用的核心就是store，store基本上就是一仓库，它包含着你的应用中大部分的状态\n\nvuex的状态存储是响应式的，当vue从store中读取状态时候，若store中的状态发生变化，那么相应的组件也会相应的得到高效更新\n\n改变store中的状态的唯一的途径就是显式地提交mutation，这样使我们可以方便地跟踪每一个状态的变化\n\n### 你使用过vuex吗\nvuex是一个专门为vue应用程序开发的状态管理模式，每一个vuex应用的核心是store，store基本上就是一个容器，它包含着你的应用中大部分的状态（state）\n\n主要包括以下几个模块：\n\n- state：定义了应用状态的数据结构，可以在这里设置默认的初始状态\n- Getters：允许组件从State中获取数据，mapGetters辅助函数仅仅是将store中的getter映射到局部计算属性\n- Mutations：是唯一更改store中状态的方法，且必须是同步函数\n- Actions：用于提交mutation，而不是直接更改状态，可以包含任意的异步操作\n- Modules：允许将单一的Store拆分成多个store且同时保存在单一的状态树里\n\n### vuex解决了什么问题\n1. 多个组件依赖同一状态，多层嵌套繁琐，兄弟组件没办法传值通信。\n\n2. 不同组件的行为需要修改同一状态\n\n### Vuex中状态是对象时，使用时要注意什么？\n因为对象是引用类型，复制后改变属性还是会影响原始数据，这样会改变state里面的状态，是不允许，所以先用深度克隆复制对象，再修改。\n\n### 组件中批量使用Vuex的state状态\n```js\nimport {mapState} from 'vuex'\nexport default{\n    computed:{\n        ...mapState(['price','number'])\n    }\n}\n```\n\n### Vuex中要从state派生一些状态出来，且多个组件使用它\n使用getter属性，相当Vue中的计算属性computed，只有原状态改变派生状态才会改变。\n```js\nconst store = new Vuex.Store({\n    state: {\n        price: 10,\n        number: 10,\n        discount: 0.7,\n    },\n    getters: {\n        total: state => {\n            return state.price * state.number\n        },\n        discountTotal: (state, getters) => {\n            return state.discount * getters.total\n        },\n        getTodoById: (state) => (id) =>{\n            return state.todos.find(todo => todo.id === id)\n        }\n    },\n});\n```\n```js\ncomputed: {\n    total() {\n        return this.$store.getters.total\n    },\n    discountTotal() {\n        return this.$store.getters.discountTotal\n    },\n    getTodoById() {\n        return this.$store.getters.getTodoById\n    },\n    ...mapGetters(['total','discountTotal']), // 批量使用getter属性\n    ...mapGetters({\n        myTotal:'total',\n        myDiscountTotal:'discountTotal',\n    }) // 取别名\n},\nmounted(){\n    console.log(this.getTodoById(2).done)//false\n}\n```\n- 在getter中可以通过第三个参数rootState访问到全局的state,可以通过第四个参数rootGetters访问到全局的getter。\n- 在mutation中不可以访问全局的state和getter，只能访问到局部的state。\n- 在action中第一个参数context中的context.rootState访问到全局的state，context.rootGetters访问到全局的getter。\n\n### 在组件中多次提交同一个mutation,action\n```js\nmethods:{\n    ...mapMutations({\n        setNumber:'SET_NUMBER',\n    }),\n    ...mapActions({\n        setNumber:'SET_NUMBER',\n    })\n}\n```\nthis.setNumber(10)相当调用this.$store.commit('SET_NUMBER',10)\n\n### Vuex中action和mutation有什么区别？\n1. action 提交的是 mutation，而不是直接变更状态。mutation可以直接变更状态。\n2. action 可以包含任意异步操作。mutation只能是同步操作。\n3. 提交方式不同，action 是用this.$store.dispatch('ACTION_NAME',data)来提交。mutation是用this.$store.commit('SET_NUMBER',10)来提交。\n4. 接收参数不同：\n```js\n{\n    state,      // 等同于 `store.state`，若在模块中则为局部状态\n    rootState,  // 等同于 `store.state`，只存在于模块中\n    commit,     // 等同于 `store.commit`\n    dispatch,   // 等同于 `store.dispatch`\n    getters,    // 等同于 `store.getters`\n    rootGetters // 等同于 `store.getters`，只存在于模块中\n}\n```\n多个actions，A结束后再执行其他操作\n```js\nactions:{\n    async actionA({commit}){\n        //...\n    },\n    async actionB({dispatch}){\n        await dispatch ('actionA')//等待actionA完成\n        // ... \n    }\n}\n```\n\n### 命名空间\n```js\nexport default{\n    namespaced: true,\n    state,\n    getters,\n    mutations,\n    actions\n}\n```\n- 怎么在带命名空间的模块内提交全局的mutation和action？\n```js\nthis.$store.dispatch('actionA', null, { root: true })\nthis.$store.commit('mutationA', null, { root: true })\n```\n\n### 在Vuex插件中怎么监听组件中提交mutation和action？\n```js\nexport default function createPlugin(param) {\n    return store => {\n        store.subscribe((mutation, state) => {\n            console.log(mutation.type)//是那个mutation\n            console.log(mutation.payload)\n            console.log(state)\n        })\n        // store.subscribeAction((action, state) => {\n        //     console.log(action.type)//是那个action\n        //     console.log(action.payload)//提交action的参数\n        // })\n        store.subscribeAction({\n            before: (action, state) => {//提交action之前\n                console.log(`before action ${action.type}`)\n            },\n            after: (action, state) => {//提交action之后\n                console.log(`after action ${action.type}`)\n            }\n        })\n    }\n}\n```\n\n### 在v-model上怎么用Vuex中state的值？\n```js\n<input v-model=\"message\">\n// ...\ncomputed: {\n    message: {\n        get () {\n            return this.$store.state.message\n        },\n        set (value) {\n            this.$store.commit('updateMessage', value)\n        }\n    }\n}\n```\n\n### vue router全局导航守卫\n三个参数\n- to：即将要进入的目标 路由对象。\n- from：当前导航正要离开的路由对象。\n- next：函数，必须调用，不然路由跳转不过去。\n\nnext()：进入下一个路由。\nnext(false)：中断当前的导航。\nnext('/')或next({ path: '/' }) : 跳转到其他路由，当前导航被中断，进行新的一个导航。\n\n- router.beforeEach：全局前置守卫。\n- router.beforeResolve：全局解析守卫。\n- router.afterEach：全局后置钩子。\n\n### 路由独享守卫\n```js\nconst router = new VueRouter({\n    routes: [\n        {\n            path: '/foo',\n            component: Foo,\n            beforeEnter: (to, from, next) => {\n            // ...\n            }\n        }\n    ]\n})\n```\n\n### 组件内导航守卫\n- beforeRouteLeave：在失活的组件里调用离开守卫。\n- beforeRouteUpdate：在重用的组件里调用,比如包含`<router-view />`的组件。\n- beforeRouteEnter：在进入对应路由的组件创建前调用。\n\n### router-link\n`<router-link>`是Vue-Router的内置组件，在具有路由功能的应用中作为声明式的导航使用。类似react的Link标签\n```html\n<router-link to=\"home\">Home</router-link>\n<router-link :to=\"'home'\">Home</router-link>\n<router-link :to=\"{ path: 'home' }\">Home</router-link>\n<router-link :to=\"{ name: 'user', params: { userId: 123 }}\">User</router-link>\n<router-link :to=\"{ path: 'user', query: { userId: 123 }}\">User</router-link>\n```\n注册在router-link上事件无效解决方法:\n使用@click.native。原因：router-link会阻止click事件，.native指直接监听一个原生事件\n\n在ie和firefox无效：\n1. 使用a标签不用Button\n2. 使用Button和Router.navigate方法\n\n\n### vue-router\n- mode\n  - hash\n  - history\n- 跳转\n  - this.$router.push()\n  - `<router-link to=\"\"></router-link>`\n- 占位\n  - `<router-view></router-view>`\n\n### Vue router 跳转和 location.href 有什么区别？\n`router` 是 `hash` 改变\n`location.href` 是页面跳转，刷新页面\n\n### Vue router 除了 router-link 怎么实现跳转?\n```\nrouter.go(1)\nrouter.push('/')\n```\n\n### params和query的区别\nquery需要path引入，params需要name引入\nthis.$route.query.name、this.$route.params.query\n> 注意点：query刷新不会丢失query数据，params刷新会丢失数据\n\n### 组件内监听路由的变化\n只能用在包含<router-view />的组件内\n1. \n```js\nwatch: {\n    '$route'(to, from) {\n        //这里监听\n    },\n}\n```\n\n2. \n```js\nbeforeRouteUpdate (to, from, next) {\n    //这里监听\n},\n```\n\n### 切换新路由的滚动条处理\n```js\nconst router = new Router({\n    mode: 'history',\n    base: process.env.BASE_URL,\n    routes,\n    scrollBehavior(to, from, savedPosition) {\n        if (savedPosition) {\n            return savedPosition;\n        } else {\n            return { x: 0, y: 0 };\n        }\n    }\n});\n```\n\n### 路由传参获取方式\n1. meta：路由元信息，写在routes配置文件中。\n```js\n{\n    path: '/home',\n    name: 'home',\n    component: load('home'),\n    meta: {\n        title: '首页'\n    },\n},\n```\n> this.$route.meta.title\n\n2. query\n```js\nthis.$router.push({\n    path:'/home',\n    query: {\n        userId:123\n    }\n})\n```\n> this.$route.query.userId\n\n3. params\n```js\n{\n    path: '/home/:userId',\n    name: 'home',\n    component: load('home'),\n},\n// 注意用params传参，只能用命名的路由（用name访问）\nconst userId = '123'\nthis.$router.push({ name: 'home', params: { userId } })\n// this.$route.params\n```\n\n### 实现动态加载路由\n- 使用Router的实例方法addRoutes来实现动态加载路由，一般用来实现菜单权限。\n\n- 使用时要注意，静态路由文件中不能有404路由，而要通过addRoutes一起动态添加进去。\n\n```js\nwebpack< 2.4 时\n{ \n    path:'/', \n    name:'home',\n    components:resolve=>require(['@/components/home'],resolve)\n} \nwebpack> 2.4 时\n{ \n    path:'/', \n    name:'home', \n    components:()=>import('@/components/home')\n}\n```\n\n### 路由之间跳转\n1. 声明式\n通过使用内置组件<router-link :to=\"/home\">来跳转 or router-link :to=\"{name:'index'}\">\n\n2. 编程式\n```js\nthis.$router.push({ path:'home' })\nthis.$router.replace({ path: '/home' })\nthis.$router.push({name:'组件名')};\n```\n$router和$route的区别\n> $route为当前router跳转对象，里面可以获取name、path、query、params等\n> $router为VueRouter实例，想要导航到不同URL，则使用router.push方法，返回上一个历史$router.to(-1)\n\n### 打开新窗口\n```js\nconst obj = {\n    path: xxx,//路由地址\n    query: {\n       mid: data.id//可以带参数\n    }\n};\nconst {href} = this.$router.resolve(obj);\nwindow.open(href, '_blank');\n```\n\n### 动态绑定Class和Style\n```html\n<!--第一种对象语法 -->\n<div class=\"test\" :class=\"{active:actived,'active-click': clicked&&actived}\"></div>\n<!-- 第二种数组语法 -->\n<div class=\"test\" :class=\"[actived?activeClass : '', clicked&&actived?activeClickClass : '']\"></div>\n<!-- 第三种对象和数组混合 -->\n<div :class=\"[testClass,{active:actived},{'active-click':clicked&&actived}]\"></div>\n<!-- 第四种对象和计算属性(推荐) -->\n<div :class=\"classObject\"></div>\n```\n\n### 过滤器(filter)\n```js\n<div><span>{{money | moneyFilter(0.15)}}</span>美元</div>\n<div><span>{{money | moneyFilter(0.12)}}</span>英镑</div>\nfilters: {\n    moneyFilter: function(val, ratio) {\n        return Number(val * ratio).toFixed(2);\n    }\n}\n```\n除了用在插值上还可以用在v-bind表达式上。\n\n### computed中的属性名和data中的属性名可以相同吗？也不能和method中属性同名\n不能同名，因为不管是computed属性名还是data数据名还是props数据名都会被挂载在vm实例上，因此这三个都不能同名。\n\n### watch的属性使用箭头函数定义可以吗？\n不可以。this会是undefind,因为箭头函数中的this指向的是定义时的this，而不是执行时的this，所以不会指向Vue实例的上下文。\n\n### watch怎么深度监听对象变化\n监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；\n```js\nwatch:{\n   a:{\n       handler:function(val,oldval){\n           \n       },\n       deep:true, // 一层层遍历给属性都加上监听器\n       immediate: true // 组件加载立即触发回调函数执行\n   },\n   'obj.a': {\n\n   }\n}\n```\n\n### 强制刷新组件\n- this.$forceUpdate()。\n- 组件上加上key，然后变化key的值。\n\n### 访问子组件实例或者子元素\n1. ref\n先用ref特性为子组件赋予一个ID引用<base-input ref=\"myInput\"></<base-input>\n\n比如子组件有个focus的方法，可以这样调用this.$refs.myInput.focus()；\n比如子组件有个value的数据，可以这样使用this.$refs.myInput.value。\n\n2. 子组件访问父组件\nthis.$parent\n\n### 组件什么时候下被销毁\n- 没有使用keep-alive切换\n- v-if=\"false\"\n- 执行vm.$destroy()\n\n### $event.target和$event.currentTarget有什么区别\n$event.currentTarget始终指向事件所绑定的元素，而$event.target指向事件发生时的元素。\n\n### 事件修饰符和表单修饰符\n\n- 事件修饰符\n\n.stop：阻止事件传递；\n.prevent： 阻止默认事件；\n.capture ：在捕获的过程监听，没有capture修饰符时都是默认冒泡过程监听；\n.self：当前绑定事件的元素才能触发；\n.once：事件只会触发一次；\n.passive：默认事件会立即触发，不要把.passive和.prevent一起使用，因为.prevent将不起作用。\n\n- 表单修饰符.number .lazy .trim\n\n```\n<comp :foo.sync=\"bar\"></comp>\n```\n相当于\n```\n<comp :foo=\"bar\" @update:foo=\"val => bar = val\"></comp>\n\n// this.$emit('update:foo', newValue)\n```\n\n要注意顺序很重要，用@click.prevent.self会阻止所有的点击，而@click.self.prevent只会阻止对元素自身的点击。\n\n### 说说你对Vue的表单修饰符.lazy的理解。\ninput标签v-model用lazy修饰之后，并不会立即监听input的value的改变，会在input失去焦点之后，才会监听input的value的改变。\n\n### 监听键盘事件\n使用按键修饰符 <input @keyup.enter=\"submit\">按下回车键时候触发submit事件。\n- .enter\n- .tab\n- .delete (捕获“删除”和“退格”键)\n- .esc\n- .space\n- .up\n- .down\n- .left\n- .right\n\n### v-on绑定多个方法\n```html\n<template>\n    <div v-on:{click:a,dblclick:b}></div>\n</template>\n<script>\n    methods:{\n        a(){\n            alert(1)\n        },\n        b(){\n            alert(2)\n        }\n    }\n</script>\n```\n\n### css样式当前组件有效\n```html\n<style lang=\"less\" scoped></style>\n```\n原理：vue通过在DOM结构以及css样式上加上唯一的标记`data-v-xxxxxx`，保证动态属性唯一，达到样式私有化，不污染全局的作用。\n\n编译后：\n```html\n<template>    \n    <span data-v-3e5b2a80 class=\"textScoped\">scoped测试</span>\n</template>\n<script>\n\n</script>\n<style scoped>    \n    .textScoped[data-v-3e5b2a80]{        \n        color: red;    \n    }\n</style>\n```\n\n### 渲染模板保留注释\n- 在组件中将comments选项设置为true\n- `<template comments> ... <template>`\n\n### 在created和mounted这两个生命周期中请求数据有什么区别呢？\n在created中，页面视图未出现，如果请求信息过多，页面会长时间处于白屏状态，DOM节点没出来，无法操作DOM节点。在mounted不会这样，比较好。\n\n### Vue组件里的定时器要怎么销毁？\n- 如果页面上有很多定时器，可以在data选项中创建一个对象timer，给每个定时器取个名字一一映射在对象timer中，\n在beforeDestroy构造函数中for(let k in this.timer){clearInterval(k)}；\n\n- 如果页面只有单个定时器，可以这么做。\n```js\nconst timer = setInterval(() =>{}, 500);\nthis.$once('hook:beforeDestroy', () => {\n   clearInterval(timer);\n})\n```\n\n### Vue中能监听到数组变化的方法有哪些？为什么这些方法能监听到呢？\n- push()、pop()、shift()、unshift()、splice()、sort()、reverse()，这些方法在Vue中被重新定义了，故可以监听到数组变化；\n- filter()、concat()、slice()，这些方法会返回一个新数组，也可以监听到数组的变化。\n\n### 定义全局方法\n1. 挂载在Vue的prototype上\n2. 利用全局混入mixin\n3. \n```js\nthis.$root.$on('demo',function(){\n    console.log('test');\n})\nthis.$root.$emit('demo')；\nthis.$root.$off('demo')；\n// Mustache的web模板引擎\n```\n\n### 捕获组件的错误信息\n- errorCaptured是组件内部钩子，当捕获一个来自子孙组件的错误时被调用，接收error、vm、info三个参数，return false后可以阻止错误继续向上抛出。\n\n- errorHandler为全局钩子，使用Vue.config.errorHandler配置，接收参数与errorCaptured一致，2.6后可捕捉v-on与promise链的错误，可用于统一错误\n处理与错误兜底。\n\n### vue SSR\nvue是构建客户端应用程序的框架，默认情况下，可以在浏览器中输出vue组件，进行生成dom和操作dom，然而，也可以将同一个组件渲染为服务端的html字符串，将他们直接发送到客户端，然后将这些静态标记激活为客户端上可以交互的应用程序。\n\n即ssr的意思就是vue在服务端完成将标签渲染成整个html片段的工作，然后将片段直接返回给客户端使用\n\n- ssr优点：\n\n  - 更好的seo：因为spa页面的内容是通过ajax获取，而搜索引擎爬取工具并不会等待ajax一步完成后再抓取页面内容，所以在spa中是抓取不到页面通过ajax获取到的内容；而ssr是直接由服务器返回已经渲染好的页面（数据已经包含在页面中），所以搜索引擎爬取工具可以抓取到渲染好的页面\n\n  - 更快的内容到达时间（首屏加载快）：spa会等待所有vue编译后的js文件都下载完成后，才开始进行也免得渲染，文件下载需要一定的时间等，所以首屏加载需要时间，而ssr直接由服务器渲染好页面返回显示，无需等待js文件再去渲染，所以ssr有更快的内容到达时间\n\n- ssr缺点：\n\n  - 更多的开发条件限制：例如服务端渲染只支持beforeCreate和created两个钩子函数，这会导致一些外部扩展库需要特殊处理，才能在服务端渲染程序中运行；并且与可以部署在任何静态文件服务器上的完全静态单页面应用程序spa不同，服务端渲染应用程序，需要处于nodejs server中才能运行\n\n  - 更多的服务器负载\n\n### nextTick\n在下次dom更新循环结束之后执行延迟回调，可用于获取更新后的dom状态。\n\n- 新版本中默认是microtasks, v-on中会使用macrotasks\n```js\n// 修改数据\nvm.msg = 'Hello'\n// DOM 还没有更新\nVue.nextTick(function () {\n  // DOM 更新了\n  ...   //DOM操作\n})\n\n// 作为一个 Promise 使用\nVue.nextTick()\n    .then(function () {\n    // DOM 更新了\n    })\n```\n\n```\nVue 在更新 DOM 时是异步执行的。只要侦听到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部对异步队列尝试使用原生的 Promise.then、MutationObserver 和 setImmediate，如果执行环境不支持，则会采用 setTimeout(fn, 0) 代替。\n例如，当你设置 vm.someData = 'new value'，该组件不会立即重新渲染。当刷新队列时，组件会在下一个事件循环“tick”中更新。多数情况我们不需要关心这个过程，但是如果你想基于更新后的 DOM 状态来做点什么，这就可能会有些棘手。虽然 Vue.js 通常鼓励开发人员使用“数据驱动”的方式思考，避免直接接触 DOM，但是有时我们必须要这么做。为了在数据变化之后等待 Vue 完成更新 DOM，可以在数据变化之后立即使用 Vue.nextTick(callback)。这样回调函数将在 DOM 更新完成后被调用。\n```\n> dom更新为什么是一个异步操作因为它提升了渲染效率。\n\n### 数据响应(数据劫持)\n数据响应的实现由两部分构成: 观察者( watcher ) 和 依赖收集器( Dep )，其核心是 defineProperty 这个方法，它可以重写属性的 get 与 set 方法，从而完成监听数据的改变。\n\n> 1. 对需要observe的数据对象进行递归遍历，包括子属性对象的属性，都加上setter和getter这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化\n\n> 2. compile解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图\n\n> 3. Watcher订阅者是Observer和Compile之间通信的桥梁，主要做的事情是:\n①在自身实例化时往属性订阅器(dep)里面添加自己\n②自身必须有一个update()方法\n③待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调\n\n> 4、MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -> 视图更新；视图交互变化(input) -> 数据model变更的双向绑定效果。\n\n```js\nlet data = {a: 1}\n// 数据响应性\nobserve(data)\n\n// 初始化观察者\nnew Watcher(data, 'name', updateComponent)\ndata.a = 2\n\n// 简单表示用于数据更新后的操作\nfunction updateComponent() {\n    vm._update() // patchs\n}\n\n// 监视对象\nfunction observe(obj) {\n\t// 遍历对象，使用 get/set 重新定义对象的每个属性值\n  Object.keys(obj).map(key => {\n      defineReactive(obj, key, obj[key])\n  })\n}\n\nfunction defineReactive(obj, k, v) {\n    // 递归子属性\n    if (type(v) == 'object') observe(v)\n    \n    // 新建依赖收集器\n    let dep = new Dep()\n    // 定义get/set\n    Object.defineProperty(obj, k, {\n        enumerable: true,\n        configurable: true,\n        get: function reactiveGetter() {\n        \t  // 当有获取该属性时，证明依赖于该对象，因此被添加进收集器中\n            if (Dep.target) {\n                dep.addSub(Dep.target)\n            }\n            return v\n        },\n        // 重新设置值时，触发收集器的通知机制\n        set: function reactiveSetter(nV) {\n            v = nV\n            dep.nofify()\n        },\n    })\n}\n\n// 依赖收集器\nclass Dep {\n    constructor() {\n        this.subs = []\n    }\n    addSub(sub) {\n        this.subs.push(sub)\n    }\n    notify() {\n        this.subs.map(sub => {\n            sub.update()\n        })\n    }\n}\n\nDep.target = null\n\n// 观察者\nclass Watcher {\n    constructor(obj, key, cb) {\n        Dep.target = this\n        this.cb = cb\n        this.obj = obj\n        this.key = key\n        this.value = obj[key]\n        Dep.target = null\n    }\n    addDep(Dep) {\n        Dep.addSub(this)\n    }\n    update() {\n        this.value = this.obj[this.key]\n        this.cb(this.value)\n    }\n    before() {\n        callHook('beforeUpdate')\n    }\n}\n```\n\n### 虚拟dom原理实现\n- 创建 dom 树\n\n- 树的diff，同层对比，输出patchs(listDiff/diffChildren/diffProps)\n  - 没有新的节点，返回\n  - 新的节点tagName与key不变， 对比props，继续递归遍历子树\n    - 对比属性(对比新旧属性列表):\n      - 旧属性是否存在与新属性列表中\n      - 都存在的是否有变化\n      - 是否出现旧列表中没有的新属性\n\n  - tagName和key值变化了，则直接替换成新节点\n\n- 渲染差异\n  - 遍历patchs， 把需要更改的节点取出来\n  - 局部更新dom\n\n\n- patch函数 oldvnode vnode\n  - 如果两个节点不一样，直接用新节点替换老节点；\n  - 如果两个节点一样，\n​\t  - 新老节点一样，直接返回；\n​     - 老节点有子节点，新节点没有：删除老节点的子节点；\n    ​ - 老节点没有子节点，新节点有子节点：新节点的子节点直接append到老节点；\n    ​ -\t都只有文本节点：直接用新节点的文本节点替换老的文本节点；\n    ​ -\t都有子节点：updateChildren\n\n```js\n// diff算法的实现\nfunction diff(oldTree, newTree) {\n\t // 差异收集\n    let pathchs = {}\n    dfs(oldTree, newTree, 0, pathchs)\n    return pathchs\n}\n\nfunction dfs(oldNode, newNode, index, pathchs) {\n    let curPathchs = []\n    if (newNode) {\n        // 当新旧节点的 tagName 和 key 值完全一致时\n        if (oldNode.tagName === newNode.tagName && oldNode.key === newNode.key) {\n        \t  // 继续比对属性差异\n            let props = diffProps(oldNode.props, newNode.props)\n            curPathchs.push({ type: 'changeProps', props })\n            // 递归进入下一层级的比较\n            diffChildrens(oldNode.children, newNode.children, index, pathchs)\n        } else {\n        \t  // 当 tagName 或者 key 修改了后，表示已经是全新节点，无需再比\n            curPathchs.push({ type: 'replaceNode', node: newNode })\n        }\n    }\n\n\t // 构建出整颗差异树\n    if (curPathchs.length) {\n    \t\tif(pathchs[index]){\n    \t\t\tpathchs[index] = pathchs[index].concat(curPathchs)\n    \t\t} else {\n    \t\t\tpathchs[index] = curPathchs\n    \t\t}\n    }\n}\n\n// 属性对比实现\nfunction diffProps(oldProps, newProps) {\n    let propsPathchs = []\n    // 遍历新旧属性列表\n    // 查找删除项\n    // 查找修改项\n    // 查找新增项\n    forin(olaProps, (k, v) => {\n        if (!newProps.hasOwnProperty(k)) {\n            propsPathchs.push({ type: 'remove', prop: k })\n        } else {\n            if (v !== newProps[k]) {\n                propsPathchs.push({ type: 'change', prop: k , value: newProps[k] })\n            }\n        }\n    })\n    forin(newProps, (k, v) => {\n        if (!oldProps.hasOwnProperty(k)) {\n            propsPathchs.push({ type: 'add', prop: k, value: v })\n        }\n    })\n    return propsPathchs\n}\n\n// 对比子级差异\nfunction diffChildrens(oldChild, newChild, index, pathchs) {\n\t\t// 标记子级的删除/新增/移动\n    let { change, list } = diffList(oldChild, newChild, index, pathchs)\n    if (change.length) {\n        if (pathchs[index]) {\n            pathchs[index] = pathchs[index].concat(change)\n        } else {\n            pathchs[index] = change\n        }\n    }\n\n\t // 根据 key 获取原本匹配的节点，进一步递归从头开始对比\n    oldChild.map((item, i) => {\n        let keyIndex = list.indexOf(item.key)\n        if (keyIndex) {\n            let node = newChild[keyIndex]\n            // 进一步递归对比\n            dfs(item, node, index, pathchs)\n        }\n    })\n}\n\n// 列表对比，主要也是根据 key 值查找匹配项\n// 对比出新旧列表的新增/删除/移动\nfunction diffList(oldList, newList, index, pathchs) {\n    let change = []\n    let list = []\n    const newKeys = getKey(newList)\n    oldList.map(v => {\n        if (newKeys.indexOf(v.key) > -1) {\n            list.push(v.key)\n        } else {\n            list.push(null)\n        }\n    })\n\n    // 标记删除\n    for (let i = list.length - 1; i>= 0; i--) {\n        if (!list[i]) {\n            list.splice(i, 1)\n            change.push({ type: 'remove', index: i })\n        }\n    }\n\n    // 标记新增和移动\n    newList.map((item, i) => {\n        const key = item.key\n        const index = list.indexOf(key)\n        if (index === -1 || key == null) {\n            // 新增\n            change.push({ type: 'add', node: item, index: i })\n            list.splice(i, 0, key)\n        } else {\n            // 移动\n            if (index !== i) {\n                change.push({\n                    type: 'move',\n                    form: index,\n                    to: i,\n                })\n                move(list, index, i)\n            }\n        }\n    })\n\n    return { change, list }\n}\n```\n\n### Proxy 相比于 defineProperty 的优势\n- 数组变化也能监听到\n- 不需要深度遍历监听(遍历每一个属性)\n\n```js\nlet data = { a: 1 }\nlet reactiveData = new Proxy(data, {\n\tget: function(target, name){\n\t\t// ...\n\t},\n\t// ...\n})\n```\n\n### 为什么在v-for中使用key？\n为了标识每个唯一的节点，方便比较，v-for中加key可以减少渲染次数，提升渲染性能。\n\n### Vuex页面刷新数据丢失怎么解决？\n使用 vuex-persist 插件，它就是为 Vuex 持久化存储而生的一个插件。不需要你手动存取 storage ，而是直接将状态保存至 cookie 或者 localStorage 中\n\n### vue项目的优化\n1. v-if和v-show区分场景使用\n\n2. computed 和 watch 区分场景使用\n\n3. v-for 遍历必须加key，key最好是id值，如果采用index当插入数据时索引会发生变化，且避免同时使用v-if(用计算属性过滤数据)\n\n4. 图片懒加载\n\n5. 路由懒加载\n\n6. 第三方插件按需引入\n\n7. 长列表(虚拟列表)\n> 无限列表加载到底部请求api，用v-for循环数据这样是欠妥当的。随着数据的加载，dom会越来越多，造成性能的开销大，对客户端造成压力。虚拟列表保证dom数量一定，渲染可视区的dom，通过替换数据来实现长列表的显示。\n\n8. 释放组件资源(beforeDestroy移除监听)\n\n9. 首屏优化 mixins抽离公共代码\n\n### vue父子组件实现双向绑定实例\n```\n<Child :name=\"name\" :change=\"changeName\"/>\n\nprops:{\n    name:{\n        type:String,\n        required: false\n    }\n},\ndata() {\n    newName:''\n},\nwatch:{\n    name(val){\n        this.newName = val\n    },\n    newName(val){\n        this.$emit('change', val)\n    }\n}\n```\n\n### 自定义v-model\n自定义 v-model，设置子组件 model 属性，设置 v-model 侦听的属性值，同时绑定属性变化时执行的事件，实现自定义 v-model，即双向绑定。\n```\n// v-model只是一个语法糖\n<input type=\"text\" v-model=\"price\"/>\n\n<input type=\"text\" :value=\"price\" @input=\"price=$event.target.value\" />\n```\n- Vue.extend方法创建一个组件\n```js\n// 注册组件\nVue.component(\"base-checkbox\", {\n    model:{\n        prop:'checked', // 绑定属性\n        event:'change', // 抛出事件\n    },\n    props:{\n        checked: boolean\n    },\n    templete:`<input type=\"checkbox\" v-bind:checked=\"checked\" v-on:change=\"$emit('change',$event.target.value)\"/>`\n})\n\n<base-checkbox v-model=\"value\"></base-checkbox>\n```\n\n### provide/inject有什么用？\n> 常用的父子组件通信方式都是父组件绑定要传递给子组件的数据，子组件通过`props`属性接收，一旦组件层级变多时，采用这种方式一级一级传递值非常麻烦，而且代码可读性不高，不便后期维护。\n\n> vue提供了`provide`和`inject`帮助我们解决多层次嵌套嵌套通信问题。在`provide`中指定要传递给子孙组件的数据，子孙组件通过`inject`注入祖父组件传递过来的数据。\n\n> `provide`和`inject`主要为高阶插件/组件库提供用例。并不推荐直接用于应用程序代码中。\n```js\nprovide() {\n    return {\n        elForm: this\n    }\n}\n\ninject: ['elForm']\n\n\nprovide: {\n    name: 'cosyer'\n}\n\ninject:{\n    newName: {\n        from: 'name',\n        default: ''\n    }\n}\n```\n\n### vue is的作用\n#### 简单来说就是扩展html标签的限制\n```html\n<ul>\n    <li></li>\n</ul>\n<!-- ul里面嵌套li是固定的写法 -->\n```\n当我们使用自定义的组件时会被当作无效内容↓\n```html\n<ul>\n    <my-li></my-li>\n</ul>\n```\n可以通过is来扩展\n```html\n<ul>\n    <li is=\"my-li\"></li>\n</ul>\n```\n\n#### 动态切换组件\n```\n<div :is=\"变量名称\"></div>\n```\n\n### assets和static的区别\n- assets中的文件在运行npm run build的时候会打包，简单来说就是会被压缩体积，代码格式化之类的。打包之后也会放到static中。\n\n- static中的文件则不会被打包。\n\n> 建议：将图片等未处理的文件放在assets中，打包减少体积。而对于第三方引入的一些资源文件如iconfont.css等可以放在static中，因为这些文件已经经过处理了。\n\n### slot插槽分发\n很多时候，我们封装了一个子组件之后，在父组件使用的时候，想添加一些dom元素，这个时候就可以使用slot插槽了，但是这些dom是否显示以及在哪里显示，则是看子组件\n中slot组件的位置了。\n\n### v-clock指令的作用\n- 解决页面闪烁问题(会显示插值表达式{{message}})\n如果网速慢，而该标签内容是变量没有请求响应回来的时候，页面上先不显示该标签（vue给该标\n签加了css样式），当响应回来的时候改标签默认将css样式去除。\n\n`此指令可以解决使用插值表达式页面闪烁问题`将该指令加在html标签中时，可以在该文件中加\nstyle属性为display：none\n```js\n<div class=\"#app\" v-cloak>\n    <p>{{name}}</p>\n</div>\n\n[v-cloak]{\n    display: none;\n}\n```\n\n### 封装vue组件的过程\n1. 建立组件模板、架子写写样式，考虑好组件的基本逻辑\n2. 准备好组件的数据输入，定好props里面的数据、类型\n3. 准备好组价的数据输出，定好暴露出来的方法\n\n### 常用组件库\n- [文本比对:vue-code-diff](https://github.com/ddchef/vue-code-diff)\n- [JSON代码编辑器:vue-codemirror](https://github.com/surmon-china/vue-codemirror)\n- [国际化:vue-i18n](https://github.com/kazupon/vue-i18n)\n- [富文本编辑器:wangEditor](https://github.com/wangeditor-team/wangEditor)\n- [富文本编辑器:tinymce](https://github.com/tinymce/tinymce)\n- [monaco编辑器:vue-monaco](https://github.com/egoist/vue-monaco)\n- [ace编辑器:vue2-ace-editor](https://github.com/chairuosen/vue2-ace-editor)\n- [剪切板:vue-clipboard2](https://github.com/Inndy/vue-clipboard2)\n- [操作cookie:vue-cookies](https://github.com/cmp-cc/vue-cookies)\n- [fragment元素:vue-fragment](https://github.com/Thunberg087/vue-fragment)\n- [代码高亮:vue-highlightjs](https://github.com/metachris/vue-highlightjs)\n- [command界面:xterm.js](https://github.com/xtermjs/xterm.js)\n- [command界面:hterm](https://github.com/chromium/hterm)\n- [处理yaml:yaml.js](https://github.com/jeremyfa/yaml.js)\n- [yaml:js-yaml](https://github.com/nodeca/js-yaml)\n- [vue的echarts封装:v-charts](https://github.com/ElemeFE/v-charts)\n- [mock:mockjs](https://github.com/nuysoft/Mock)\n- [判断是否是黑色:is-dark-color](https://github.com/gion/is-dark-color)\n- [XSS过滤:DOMPurify](https://github.com/cure53/DOMPurify)\n\n### 常用UI库\n#### 移动端\n- [mint-ui](http://mint-ui.github.io/#!/zh-cn)\n\n- [Vant](https://youzan.github.io/vant/#/zh-CN/home)\n\n- [VUX](https://vux.li/)\n\n- [cube-ui](https://didi.github.io/cube-ui/)\n\n#### pc端\n- [element-ui](https://element.eleme.cn/2.13/#/zh-CN/component/\ninstallation）\n\n- [Ant Design of Vue](https://www.antdv.com/docs/vue/introduce-cn/)\n\n- [iview/viewui/view-design](https://iviewui.com/)\n\n- [Avue](https://avuejs.com/)\n\n- [vuetify](https://vuetifyjs.com/)\n\n### 常用配置\n#### publicPath\n1. cli2 config/index.js\n```js\nbuild: {\n    assetsPublicPath: './'\n}\n```\n2. cli3 vue.config.js\n```js\nmodule.exports = {\n    publicPath: './'\n}\n```\n部署应用包时的基本 URL。默认情况下，Vue CLI会假设你的应用是被部署在一个域名的根路径\n上，例如https://www.my-app.com/。如果应用被部署在一个子路径上，\n你就需要用这个选项指定这个子路径。例如，如果你的应用被部署在https://www.my-app.\ncom/my-app/，则设置publicPath为/my-app/\n\n```js\nproxy: { \n    \"/api\": { //如果ajax请求的地址是http://192.168.0.118:9999/api1那么你就可以在ajax中使用/api/api1路径,其请求路径会解析\n    // http://192.168.0.118:9999/api1，当然你在浏览器上看到的还是http://localhost:8080/api/api1;\n    target: \"http://192.168.0.118:9999\",\n    //是否允许跨域，这里是在开发环境会起作用，但在生产环境下，还是由后台去处理，所以不必太在意\n    changeOrigin: true,\n    pathRewrite: {\n        //把多余的路径置为''\n        \"api\": \"\"\n    }\n}\n```\n\n### vue3\n1. createApp\n- vue2.x\n```js\nimport Vue from \"vue\";\nimport App from './App.vue'\n\nnew Vue({\n  render: (h) => h(App)\n}).$mount(\"#app\");\n```\n\n- vue3新特性\n> createApp 会产生一个 app 实例，该实例拥有全局的可配置上下文\n```js\nimport { createApp } from 'vue'\nimport App from './App.vue'\n\ncreateApp(App).mount('#app')\n```\n\n2. globalProperties\n```js\napp.config.globalProperties.foo = 'bar'\n\napp.component('child-component', {\n  mounted() {\n    console.log(this.foo) // 'bar'\n  }\n})\n```\n> 添加可在程序内的任何组件实例中访问的全局属性。当存在键冲突时，组件属性将优先替代掉Vue2.x的 Vue.prototype属性放到原型上的写法\n\n```js\n// Vue2.x\nVue.prototype.$http = () => {}\n\n// Vue3\nconst app = Vue.createApp({})\napp.config.globalProperties.$http = () => {}\n```\n\n3. 更快\n\n- 重写虚拟DOM (Virtual DOM Rewrite)\n\n随着虚拟 DOM 重写，我们可以期待更多的 编译时（compile-time）提示来减少 运行时（runtime）开销。重写将包括更有效的代码来创建虚拟节点。\n\n- 优化插槽生成(Optimized Slots Generation)\n\n在当前的 Vue 版本中，当父组件重新渲染时，其子组件也必须重新渲染。 使用 Vue 3 ，可以单独重新渲染父组件和子组件。\n\n- 静态树提升(Static Tree Hoisting)\n\n使用静态树提升，这意味着 Vue 3 的编译器将能够检测到什么是静态组件，然后将其提升，从而降低了渲染成本。它将能够跳过未整个树结构打补丁的过程。\n\n- 静态属性提升（Static Props Hoisting）\n\n此外，我们可以期待静态属性提升，其中 Vue 3 将跳过不会改变节点的打补丁过程。\n\n- 基于 Proxy 的观察者机制\n\n- 更小\nVue已经非常小了，在运行时（runtime）压缩后大约 20kb 。 但我们可以期待它会变得更加小，新的核心运行时压缩后大概 10kb 。\n- 使其更具可维护性\n不仅会使用 TypeScript（允许在编辑器中进行高级的类型检查和有用的错误和警告） ，而且许多软件包将被解耦，使所有内容更加模块化。\n- 更多的原生支持\n运行时内核也将与平台无关，使得 Vue 可以更容易地与任何平台（例如Web，iOS或Android）一起使用。\n- 更易于开发使用\n当我们需要在 Vue 中共享两个组件之间的行为时，我们通常使用 Mixins 。然而，Evan 正在尝试使用 Hooks API 来避免来自 Mixins 的一些问题，并且更适合\n- 使用惯用的 Vue 代码。\n使用 Time Slicing，将 JS 的执行分解为几个部分，如果有用户交互需要处理，这些部分将提供给浏览器。\n\n### element-ui使用中遇到的坑\n1. 不支持v-model修饰符导致如果使用.trim当数据拼接了' '后，第一次点击数据中间编辑，光标会跳到末尾\n\n2. el-table当注入的data经过过滤，所对应的$index还是原来的，导致删除splice对应的index不准确\n\n3. 在disabled的button上使用Tooltip失效， el-tooltip不显示(disable属性)\n\n4. input-number 输入精度precision 既要编辑又要显示超出最小值\n\n5. 页面刷新、局部刷新\n\n\n### [转载](http://mydearest.cn/2020/vueInterview.html)","slug":"2020-12-23-vue-knownledge","published":1,"updated":"2021-05-07T11:38:30.948Z","layout":"post","link":"","_id":"ckoe9igyr006i8cpn1f0hf8ek","content":"<h3 id=\"vue-双向绑定的原理\"><a href=\"#vue-双向绑定的原理\" class=\"headerlink\" title=\"vue 双向绑定的原理\"></a>vue 双向绑定的原理</h3><p>采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调，实现视图刷新。</p>\n<a id=\"more\"></a>\n\n<p>具体流程：<br>Vue中先遍历data选项中所有的属性（发布者）用Object.defineProperty劫持这些属性将其转为getter/setter。读取数据时候会触发getter。修改数据时会触发setter。</p>\n<p>然后给每个属性对应new Dep()，Dep是专门收集依赖、删除依赖、向依赖发送消息的。先让每个依赖设置在Dep.target上，在Dep中创建一个依赖数组，先判断Dep.target是否已经在依赖中存在，不存在的话添加到依赖数组中完成依赖收集，随后将Dep.target置为上一个依赖。</p>\n<p>组件在挂载过程中都会new一个Watcher实例。这个实例就是依赖（订阅者）。Watcher第二参数是一个函数，此函数作用是更新且渲染节点。在首次渲染过程，会自动调用Dep方法来收集依赖，收集完成后组件中每个数据都绑定上该依赖。当数据变化时就会在setter中通知对应的依赖进行更新。在更新过程中要先读取数据，就会触发Wacther的第二个函数参数。一触发就再次自动调用Dep方法收集依赖，同时在此函数中运行patch（diff运算)来更新对应的DOM节点，完成了双向绑定。</p>\n<ul>\n<li>每一个组件默认都会创建一个 Watcher，自定义的 watch 和 computed 方法也会创建 Watcher </li>\n</ul>\n<h3 id=\"Object-defineProperty-实现双向绑定的缺点\"><a href=\"#Object-defineProperty-实现双向绑定的缺点\" class=\"headerlink\" title=\"Object.defineProperty()实现双向绑定的缺点\"></a>Object.defineProperty()实现双向绑定的缺点</h3><ol>\n<li>只能监听某个属性，不能监听整个对象</li>\n<li>需要使用for in遍历对象属性绑定监听</li>\n<li>不能监听数组，需要重写数组方法进行特异性操作</li>\n<li>会污染原对象</li>\n</ol>\n<h3 id=\"v-show和v-if有什么区别\"><a href=\"#v-show和v-if有什么区别\" class=\"headerlink\" title=\"v-show和v-if有什么区别\"></a>v-show和v-if有什么区别</h3><ul>\n<li><p>v-if（初始化不会渲染）<br>v-if 是真正的条件渲染，因为它会确保在切换过程中条件块内的事件监听和子组件适当地被销毁和重建，也是惰性的，如果在初始渲染条件为假时，则什么也不做——直到条件第一次变为真时才开始渲染条件块，能用在<code>&lt;template&gt;</code>上。</p>\n</li>\n<li><p>v-show（初始化会渲染）<br>v-show就简单得多，不管初始条件是什么，元素总是会被渲染，并且只是简单地基于css的display进行切换。</p>\n</li>\n</ul>\n<p>所以，v-if适用于切换不频繁的场景，v-show适用于切换频繁的场景，不能用在<code>&lt;template&gt;</code>上。</p>\n<h3 id=\"class和style如何动态绑定\"><a href=\"#class和style如何动态绑定\" class=\"headerlink\" title=\"class和style如何动态绑定\"></a>class和style如何动态绑定</h3><p>class可以通过对象语法和数组语法进行动态绑定：</p>\n<ul>\n<li><p>对象语法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;&#123;active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">    isActive: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    hasError: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组语法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;[isActive ? activeClass : &#x27;&#x27;, errorClass]&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">    activeClass: <span class=\"string\">&#x27;active&#x27;</span>,</span><br><span class=\"line\">    errorClass: <span class=\"string\">&#x27;text-danger&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>style也可以通过对象语法和数组语法进行动态绑定</p>\n</li>\n</ul>\n<h3 id=\"理解vue里的单向数据流\"><a href=\"#理解vue里的单向数据流\" class=\"headerlink\" title=\"理解vue里的单向数据流\"></a>理解vue里的单向数据流</h3><p>所有的prop都使得其父子prop之间形成一个单向下行绑定：父级prop的更新会向下流动到子组件中，但是反过来不行，这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流难以解释.</p>\n<p>额外地，每次父级组件发生更新时，子组件中的所有prop都会刷新为最新的值，这意味着你不应该在一个子组件内部改变prop，如果你这样做了，vue会在浏览器的控制台发出警告，子组件想修改时，只能通过$emit派发一个自定义事件，父组件接收到后，由父组件修改.</p>\n<blockquote>\n<p>双向数据流是指数据从父级向子级传递数据，子级可以通过一些手段改变父级向子级传递的数据。</p>\n</blockquote>\n<h3 id=\"computed和watch的区别和运用场景\"><a href=\"#computed和watch的区别和运用场景\" class=\"headerlink\" title=\"computed和watch的区别和运用场景\"></a>computed和watch的区别和运用场景</h3><ul>\n<li><p>computed：是计算属性，依赖其他属性值，并且computed的值有缓存，只有它依赖的属性值发生改变时下一次获取computed的值时候才会重新计算computed的值。避免在模板中放入太多的逻辑，导致模板过重且难以维护。当未发生改变时，则会返回上一次的数据。</p>\n</li>\n<li><p>watch：更多的是观察作用，类似于某些数据的监听回调，每当监听的数据发生变化时都会执行回调进行后续操作。</p>\n</li>\n<li><p>methods: 每次渲染时都需要重新执行。</p>\n</li>\n</ul>\n<p>简单的说：</p>\n<ul>\n<li><p>1.methods里面定义的是函数，你显然需要像”fuc()”这样去调用它（假设函数为fuc）。</p>\n</li>\n<li><p>2.computed是计算属性，事实上和和data对象里的数据属性是同一类的（使用上）。</p>\n</li>\n<li><p>3.watch:类似于监听机制+事件机制。</p>\n</li>\n</ul>\n<p>watch和computed的对比</p>\n<p>首先它们都是以Vue的依赖追踪机制为基础的，它们的共同点是：都是希望在依赖数据发生改变的时候，被依赖的数据根据预先定义好的函数，发生“自动”的变化。我们当然可以自己写代码完成这一切，但却很可能造成写法混乱，代码冗余的情况。</p>\n<p>但watch和computed也有明显不同的地方：</p>\n<p>watch和computed各自处理的数据关系场景不同</p>\n<ul>\n<li><p>1.watch擅长处理的场景：一个数据影响多个数据</p>\n</li>\n<li><p>2.computed擅长处理的场景：一个数据受多个数据影响</p>\n</li>\n</ul>\n<p>相比于watch/computed，methods不处理数据逻辑关系，只提供可调用的函数</p>\n<p>运用场景：</p>\n<ul>\n<li><p>当我们需要进行数值计算，并依赖于其他数据时，应该使用computed，因为可以利用computed的缓存特性，避免每次获取值时都要重新计算。</p>\n</li>\n<li><p>但我们需要在数据变化时执行异步或开销较大的操作时应该使用watch，使用watch选项允许我们执行异步操作，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态，这些都是计算属性无法做到的。</p>\n</li>\n</ul>\n<h3 id=\"直接给一个数组项赋值，vue能检测到吗\"><a href=\"#直接给一个数组项赋值，vue能检测到吗\" class=\"headerlink\" title=\"直接给一个数组项赋值，vue能检测到吗\"></a>直接给一个数组项赋值，vue能检测到吗</h3><ul>\n<li><p>由于js的限制(引用类型)，vue不能检测到以下数组的变动(对象属性的添加和删除)：</p>\n</li>\n<li><p>当你利用索引直接设置一个数组项时，例如vm.item[indexOfItem] = newValue</p>\n</li>\n<li><p>当你修改数组的长度时，例如vm.items.length = newLength</p>\n</li>\n</ul>\n<p>为了解决第一个问题，vue提供了以下操作方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.set(vm.items, indexOfItem, newValue)</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.$set(vm.items, indexOfItem, newValue)</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.$set(<span class=\"built_in\">this</span>.data,”key”,value) <span class=\"comment\">// 动态添加单个属性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 动态添加多个属性 </span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.obj = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, <span class=\"built_in\">this</span>.obj, &#123;</span><br><span class=\"line\">  age: <span class=\"number\">18</span>,</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;Chocolate&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.items.splice(indexOfItem, <span class=\"number\">1</span>, newValue)</span><br></pre></td></tr></table></figure>\n\n<p>为了解决第二个问题，vue提供了以下操作方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">vm.items.splice(newLength)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Vue 是不能检测对象属性的添加或删除<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        obj:&#123;</span><br><span class=\"line\">            name:<span class=\"string\">&#x27;Vue&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">mounted() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;zs&#x27;</span> <span class=\"comment\">// 不是响应式的</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$set(<span class=\"built_in\">this</span>.obj,<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;lisi&#x27;</span>) <span class=\"comment\">//响应式 解决添加</span></span><br><span class=\"line\">    <span class=\"comment\">// 用Object.assign来解决第二种情况。解决对象的删除</span></span><br><span class=\"line\">    <span class=\"comment\">// Vue.delete</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"delete和Vue-delete的区别\"><a href=\"#delete和Vue-delete的区别\" class=\"headerlink\" title=\"delete和Vue.delete的区别\"></a>delete和Vue.delete的区别</h3>delete 只是被删除的元素变成了empty/undefined，其他元素的键值还是不变的。而Vue.delete直接删除了数组，改变了数组的键值。</li>\n</ul>\n<h3 id=\"vue生命周期的理解（10个）\"><a href=\"#vue生命周期的理解（10个）\" class=\"headerlink\" title=\"vue生命周期的理解（10个）\"></a>vue生命周期的理解（10个）</h3><ul>\n<li><p>生命周期是什么(创建到销毁的过程)<br>vue实例有一个完整的生命周期，也就是从开始创建，初始化数据，编译模板，挂载dom-&gt;渲染更新-&gt;渲染卸载等一些过程，我们称这是vue的生命周期</p>\n</li>\n<li><p>各个生命周期的作用</p>\n<ul>\n<li>beforeCreate：组件被创建之初，组件的属性生效之前</li>\n<li>created：组件实例已经完全创建，属性也绑定，但是真实的dom还没有生成，$el还不能用(vue实例的数据对象data有了，el和数据对象data都为undefined，还<br>未初始化。)</li>\n<li>beforeMount：在挂载开始之前被调用，相关的render函数首次被调用</li>\n<li>mounted：el被新创建的vm.$el替换，并挂载到实例上去后调用该钩子</li>\n<li>beforeUpdate：组件数据更新之前调用，发生在虚拟dom打补丁之前 </li>\n<li>updated：组件数据更新之后</li>\n<li>activated：keep-alive专属，组件被激活时调用</li>\n<li>deactivated：keep-alive专属，组件被销毁时调用</li>\n<li>beforeDestroy：组件被销毁前</li>\n<li>destroyed：组件被销毁后调用</li>\n</ul>\n</li>\n<li><p><em>init</em></p>\n<ul>\n<li>initLifecycle/Event，往vm上挂载各种属性</li>\n<li>callHook: beforeCreate: 实例刚创建</li>\n<li>initInjection/initState: 初始化注入和 data 响应性</li>\n<li>created: 创建完成，属性已经绑定， 但还未生成真实dom</li>\n<li>进行元素的挂载： $el / vm.$mount()</li>\n<li>是否有template: 解析成render function<ul>\n<li>*.vue文件: vue-loader会将<code>&lt;template&gt;</code>编译成render function</li>\n</ul>\n</li>\n<li>beforeMount: 模板编译/挂载之前</li>\n<li>执行render function，生成真实的dom，并替换到dom tree中</li>\n<li>mounted: 组件已挂载</li>\n</ul>\n</li>\n<li><p>update:</p>\n<ul>\n<li>执行diff算法，比对改变是否需要触发UI更新</li>\n<li>flushScheduleQueue<ul>\n<li>watcher.before: 触发beforeUpdate钩子        </li>\n<li>watcher.run(): 执行watcher中的 notify，通知所有依赖项更新UI</li>\n</ul>\n</li>\n<li>触发updated钩子: 组件已更新</li>\n</ul>\n</li>\n<li><p>actived / deactivated(keep-alive): 不销毁，缓存，组件激活与失活</p>\n</li>\n<li><p>destroy:</p>\n<ul>\n<li>beforeDestroy: 销毁开始</li>\n<li>销毁自身且递归销毁子组件以及事件监听<ul>\n<li>remove(): 删除节点</li>\n<li>watcher.teardown(): 清空依赖</li>\n<li>vm.$off(): 解绑监听</li>\n</ul>\n</li>\n<li>destroyed: 完成后触发钩子</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化Vue实例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_init</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t <span class=\"comment\">// 挂载属性</span></span><br><span class=\"line\">    initLifeCycle(vm) </span><br><span class=\"line\">    <span class=\"comment\">// 初始化事件系统，钩子函数等</span></span><br><span class=\"line\">    initEvent(vm) </span><br><span class=\"line\">    <span class=\"comment\">// 编译slot、vnode</span></span><br><span class=\"line\">    initRender(vm) </span><br><span class=\"line\">    <span class=\"comment\">// 触发钩子</span></span><br><span class=\"line\">    callHook(vm, <span class=\"string\">&#x27;beforeCreate&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 添加inject功能</span></span><br><span class=\"line\">    initInjection(vm)</span><br><span class=\"line\">    <span class=\"comment\">// 完成数据响应性 props/data/watch/computed/methods</span></span><br><span class=\"line\">    initState(vm)</span><br><span class=\"line\">    <span class=\"comment\">// 添加 provide 功能</span></span><br><span class=\"line\">    initProvide(vm)</span><br><span class=\"line\">    <span class=\"comment\">// 触发钩子</span></span><br><span class=\"line\">    callHook(vm, <span class=\"string\">&#x27;created&#x27;</span>)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t <span class=\"comment\">// 挂载节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vm.$options.el) &#123;</span><br><span class=\"line\">        vm.$mount(vm.$options.el)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 挂载节点实现</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mountComponent</span>(<span class=\"params\">vm</span>) </span>&#123;</span><br><span class=\"line\">\t <span class=\"comment\">// 获取 render function</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.options.render) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// template to render</span></span><br><span class=\"line\">        <span class=\"comment\">// Vue.compile = compileToFunctions</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123; render &#125; = compileToFunctions() </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.options.render = render</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 触发钩子</span></span><br><span class=\"line\">    callHook(<span class=\"string\">&#x27;beforeMount&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 初始化观察者</span></span><br><span class=\"line\">    <span class=\"comment\">// render 渲染 vdom， </span></span><br><span class=\"line\">    vdom = vm.render()</span><br><span class=\"line\">    <span class=\"comment\">// update: 根据 diff 出的 patchs 挂载成真实的 dom </span></span><br><span class=\"line\">    vm._update(vdom)</span><br><span class=\"line\">    <span class=\"comment\">// 触发钩子  </span></span><br><span class=\"line\">    callHook(vm, <span class=\"string\">&#x27;mounted&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更新节点实现</span></span><br><span class=\"line\">funtion queueWatcher(watcher) &#123;</span><br><span class=\"line\">\tnextTick(flushScheduleQueue)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 清空队列</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flushScheduleQueue</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t <span class=\"comment\">// 遍历队列中所有修改</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>()&#123;</span><br><span class=\"line\">\t    <span class=\"comment\">// beforeUpdate</span></span><br><span class=\"line\">        watcher.before()</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">// 依赖局部更新节点</span></span><br><span class=\"line\">        watcher.update() </span><br><span class=\"line\">        callHook(<span class=\"string\">&#x27;updated&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 销毁实例实现</span></span><br><span class=\"line\">Vue.prototype.$destory = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t <span class=\"comment\">// 触发钩子</span></span><br><span class=\"line\">    callHook(vm, <span class=\"string\">&#x27;beforeDestory&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 自身及子节点</span></span><br><span class=\"line\">    remove() </span><br><span class=\"line\">    <span class=\"comment\">// 删除依赖</span></span><br><span class=\"line\">    watcher.teardown() </span><br><span class=\"line\">    <span class=\"comment\">// 删除监听</span></span><br><span class=\"line\">    vm.$off() </span><br><span class=\"line\">    <span class=\"comment\">// 触发钩子</span></span><br><span class=\"line\">    callHook(vm, <span class=\"string\">&#x27;destoryed&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vue父子组件生命周期钩子函数的执行顺序\"><a href=\"#vue父子组件生命周期钩子函数的执行顺序\" class=\"headerlink\" title=\"vue父子组件生命周期钩子函数的执行顺序\"></a>vue父子组件生命周期钩子函数的执行顺序</h3><ul>\n<li><p>加载渲染过程<br>父beforeCreate-&gt;父created-&gt;父beforeMount-&gt;子beforeCreate-&gt;子created-&gt;子beforeMount-&gt;子mounted-&gt;父mounted</p>\n</li>\n<li><p>子组件更新过程<br>父beforeUpdate-&gt;子beforeUpdate-&gt;子updated-&gt;父updated</p>\n</li>\n<li><p>父组件更新过程<br>父beforeUpdate-&gt;父updated</p>\n</li>\n<li><p>销毁过程<br>父beforeDestroy-&gt;子beforeDestroy-&gt;子destroyed-&gt;父destroy</p>\n</li>\n</ul>\n<h3 id=\"在哪个生命周期内调用异步请求\"><a href=\"#在哪个生命周期内调用异步请求\" class=\"headerlink\" title=\"在哪个生命周期内调用异步请求\"></a>在哪个生命周期内调用异步请求</h3><p>可以在函数created，beforeMount，mounted中进行调用，因为在这三个钩子函数中data已经可以创建，可以将服务端返回的数据进行赋值，但是比较推荐在created钩子函数中调用异步请求，因为：</p>\n<ul>\n<li><p>能更快的获取到服务端数据，减少页面loading时间</p>\n</li>\n<li><p>ssr不支持beforeMount，mounted钩子函数，所以放在created中有助于一致性</p>\n</li>\n<li><p>mounted里能够操作dom</p>\n</li>\n</ul>\n<h3 id=\"在什么阶段才能访问操作DOM\"><a href=\"#在什么阶段才能访问操作DOM\" class=\"headerlink\" title=\"在什么阶段才能访问操作DOM\"></a>在什么阶段才能访问操作DOM</h3><p>在钩子函数mounted被调用之前，vue已经把编译好的模板挂载到页面上，所以在mounted中可以访问操作dom，vue具体的生命周期。</p>\n<h3 id=\"父组件可以监听到子组件的生命周期吗\"><a href=\"#父组件可以监听到子组件的生命周期吗\" class=\"headerlink\" title=\"父组件可以监听到子组件的生命周期吗\"></a>父组件可以监听到子组件的生命周期吗</h3><ul>\n<li><p>手动设置$emit来发布监听</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// parent</span></span><br><span class=\"line\">&lt;Child @mounted=<span class=\"string\">&quot;fn&quot;</span> /&gt;</span><br><span class=\"line\"><span class=\"comment\">// child</span></span><br><span class=\"line\">mounted() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$emit(<span class=\"string\">&quot;mounted&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>@hook</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// parent</span></span><br><span class=\"line\">&lt;Child @hook:mounted=<span class=\"string\">&quot;fn&quot;</span> /&gt;</span><br><span class=\"line\">fn() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;get&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// child</span></span><br><span class=\"line\">mounted() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;emit&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"谈谈你对keep-alive的了解\"><a href=\"#谈谈你对keep-alive的了解\" class=\"headerlink\" title=\"谈谈你对keep-alive的了解\"></a>谈谈你对keep-alive的了解</h3><p>keep-alive是vue内置的一个组件，可以使被包含的组件保留状态，避免重复渲染，其有以下特性：</p>\n<ul>\n<li>一般结合路由和动态组件使用，用于缓存组件</li>\n<li>提供include和exclude属性，两者都支持字符串或正则表达式，include表示只有名字匹配的组件会被缓存，exclude表示任何名称匹配的组件都不会被缓存，其中exclude的优先级比include高</li>\n<li>对应两个钩子函数actived和deactivated</li>\n</ul>\n<h3 id=\"组件中的data为什么是个函数\"><a href=\"#组件中的data为什么是个函数\" class=\"headerlink\" title=\"组件中的data为什么是个函数\"></a>组件中的data为什么是个函数</h3><p>因为组件是拿来复用的，且js里的对象是引用关系，如果组件中的data是一个对象，那么这样作用域没有隔离，子组件中的data属性值会相互影响，如果组件中的data是一个函数，那么每个实例可以维护一份被返回对象的独立的拷贝，组件实例之间的data属性值不会互相影响，而new Vue的实例是不会被复用的，因此不存在引用对象的问题。</p>\n<h3 id=\"v-model的原理\"><a href=\"#v-model的原理\" class=\"headerlink\" title=\"v-model的原理\"></a>v-model的原理</h3><p>我们在vue项目中主要使用v-model指令在表单input，textarea，select等元素上创建双向绑定，我们知道v-model本质上不过是语法糖，v-model在内部为不同的输入元素使用不同的属性并抛出不同的事件：</p>\n<ul>\n<li>text和textarea元素使用value属性和input事件</li>\n<li>checkbox和radio使用checked和change</li>\n<li>select字段将value作为prop并将change作为事件</li>\n</ul>\n<h3 id=\"vue组件间通信有哪几种方式（6种）\"><a href=\"#vue组件间通信有哪几种方式（6种）\" class=\"headerlink\" title=\"vue组件间通信有哪几种方式（6种）\"></a>vue组件间通信有哪几种方式（6种）</h3><ul>\n<li><p>props和$emit<br>适用父子组件通信</p>\n</li>\n<li><p>ref和$parent $children<br>ref：如果在普通dom上使用，引用指向的就是dom元素，如果用在子组件上，引用就指向组件实例 $parent/$children：访问父子实例</p>\n</li>\n<li><p>EventBus（$emit/$on）<br>这种方法通过一个空的vue实例作为中央事件总线（事件中心），用它来触发事件和监听事件，从而实现任何组件间的通信，包括父子，隔代，兄弟组件</p>\n</li>\n<li><p>$attrs/$listeners<br>$attrs：包含了父作用域里不被prop所识别（且获取）的特性绑定（class和style除外）。当一个组件没有声明任何prop时，这里会包含所有父作用域的绑定（class和style除外），并且可以通过v-bind=”$attrs”传入内部组件。通常配合inheritAttrs选项一起使用</p>\n</li>\n</ul>\n<p>$listeners：包含了父作用域中的v-on事件监听器，它可以通过v-on=”$listeners”传入内部组件</p>\n<ul>\n<li><p>provide、inject<br>祖先组件通过provide来提供变量，然后在子孙组件中通过inject来注入变量，provide / inject API主要解决了跨级组件间的通信问题，不过他的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立一种主动提供和依赖注入的关系</p>\n</li>\n<li><p>vuex<br>vuex是一个专为vue应用程序开发的状态管理模式，每一个vuex应用的核心就是store，store基本上就是一仓库，它包含着你的应用中大部分的状态</p>\n</li>\n</ul>\n<p>vuex的状态存储是响应式的，当vue从store中读取状态时候，若store中的状态发生变化，那么相应的组件也会相应的得到高效更新</p>\n<p>改变store中的状态的唯一的途径就是显式地提交mutation，这样使我们可以方便地跟踪每一个状态的变化</p>\n<h3 id=\"你使用过vuex吗\"><a href=\"#你使用过vuex吗\" class=\"headerlink\" title=\"你使用过vuex吗\"></a>你使用过vuex吗</h3><p>vuex是一个专门为vue应用程序开发的状态管理模式，每一个vuex应用的核心是store，store基本上就是一个容器，它包含着你的应用中大部分的状态（state）</p>\n<p>主要包括以下几个模块：</p>\n<ul>\n<li>state：定义了应用状态的数据结构，可以在这里设置默认的初始状态</li>\n<li>Getters：允许组件从State中获取数据，mapGetters辅助函数仅仅是将store中的getter映射到局部计算属性</li>\n<li>Mutations：是唯一更改store中状态的方法，且必须是同步函数</li>\n<li>Actions：用于提交mutation，而不是直接更改状态，可以包含任意的异步操作</li>\n<li>Modules：允许将单一的Store拆分成多个store且同时保存在单一的状态树里</li>\n</ul>\n<h3 id=\"vuex解决了什么问题\"><a href=\"#vuex解决了什么问题\" class=\"headerlink\" title=\"vuex解决了什么问题\"></a>vuex解决了什么问题</h3><ol>\n<li><p>多个组件依赖同一状态，多层嵌套繁琐，兄弟组件没办法传值通信。</p>\n</li>\n<li><p>不同组件的行为需要修改同一状态</p>\n</li>\n</ol>\n<h3 id=\"Vuex中状态是对象时，使用时要注意什么？\"><a href=\"#Vuex中状态是对象时，使用时要注意什么？\" class=\"headerlink\" title=\"Vuex中状态是对象时，使用时要注意什么？\"></a>Vuex中状态是对象时，使用时要注意什么？</h3><p>因为对象是引用类型，复制后改变属性还是会影响原始数据，这样会改变state里面的状态，是不允许，所以先用深度克隆复制对象，再修改。</p>\n<h3 id=\"组件中批量使用Vuex的state状态\"><a href=\"#组件中批量使用Vuex的state状态\" class=\"headerlink\" title=\"组件中批量使用Vuex的state状态\"></a>组件中批量使用Vuex的state状态</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;mapState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>&#123;</span><br><span class=\"line\">    computed:&#123;</span><br><span class=\"line\">        ...mapState([<span class=\"string\">&#x27;price&#x27;</span>,<span class=\"string\">&#x27;number&#x27;</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Vuex中要从state派生一些状态出来，且多个组件使用它\"><a href=\"#Vuex中要从state派生一些状态出来，且多个组件使用它\" class=\"headerlink\" title=\"Vuex中要从state派生一些状态出来，且多个组件使用它\"></a>Vuex中要从state派生一些状态出来，且多个组件使用它</h3><p>使用getter属性，相当Vue中的计算属性computed，只有原状态改变派生状态才会改变。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    state: &#123;</span><br><span class=\"line\">        price: <span class=\"number\">10</span>,</span><br><span class=\"line\">        number: <span class=\"number\">10</span>,</span><br><span class=\"line\">        discount: <span class=\"number\">0.7</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getters: &#123;</span><br><span class=\"line\">        total: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> state.price * state.number</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        discountTotal: <span class=\"function\">(<span class=\"params\">state, getters</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> state.discount * getters.total</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        getTodoById: <span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> <span class=\"function\">(<span class=\"params\">id</span>) =&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> state.todos.find(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span> todo.id === id)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">    total() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.$store.getters.total</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    discountTotal() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.$store.getters.discountTotal</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getTodoById() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.$store.getters.getTodoById</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...mapGetters([<span class=\"string\">&#x27;total&#x27;</span>,<span class=\"string\">&#x27;discountTotal&#x27;</span>]), <span class=\"comment\">// 批量使用getter属性</span></span><br><span class=\"line\">    ...mapGetters(&#123;</span><br><span class=\"line\">        myTotal:<span class=\"string\">&#x27;total&#x27;</span>,</span><br><span class=\"line\">        myDiscountTotal:<span class=\"string\">&#x27;discountTotal&#x27;</span>,</span><br><span class=\"line\">    &#125;) <span class=\"comment\">// 取别名</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">mounted()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.getTodoById(<span class=\"number\">2</span>).done)<span class=\"comment\">//false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在getter中可以通过第三个参数rootState访问到全局的state,可以通过第四个参数rootGetters访问到全局的getter。</li>\n<li>在mutation中不可以访问全局的state和getter，只能访问到局部的state。</li>\n<li>在action中第一个参数context中的context.rootState访问到全局的state，context.rootGetters访问到全局的getter。</li>\n</ul>\n<h3 id=\"在组件中多次提交同一个mutation-action\"><a href=\"#在组件中多次提交同一个mutation-action\" class=\"headerlink\" title=\"在组件中多次提交同一个mutation,action\"></a>在组件中多次提交同一个mutation,action</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    ...mapMutations(&#123;</span><br><span class=\"line\">        setNumber:<span class=\"string\">&#x27;SET_NUMBER&#x27;</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    ...mapActions(&#123;</span><br><span class=\"line\">        setNumber:<span class=\"string\">&#x27;SET_NUMBER&#x27;</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>this.setNumber(10)相当调用this.$store.commit(‘SET_NUMBER’,10)</p>\n<h3 id=\"Vuex中action和mutation有什么区别？\"><a href=\"#Vuex中action和mutation有什么区别？\" class=\"headerlink\" title=\"Vuex中action和mutation有什么区别？\"></a>Vuex中action和mutation有什么区别？</h3><ol>\n<li>action 提交的是 mutation，而不是直接变更状态。mutation可以直接变更状态。</li>\n<li>action 可以包含任意异步操作。mutation只能是同步操作。</li>\n<li>提交方式不同，action 是用this.$store.dispatch(‘ACTION_NAME’,data)来提交。mutation是用this.$store.commit(‘SET_NUMBER’,10)来提交。</li>\n<li>接收参数不同：<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    state,      <span class=\"comment\">// 等同于 `store.state`，若在模块中则为局部状态</span></span><br><span class=\"line\">    rootState,  <span class=\"comment\">// 等同于 `store.state`，只存在于模块中</span></span><br><span class=\"line\">    commit,     <span class=\"comment\">// 等同于 `store.commit`</span></span><br><span class=\"line\">    dispatch,   <span class=\"comment\">// 等同于 `store.dispatch`</span></span><br><span class=\"line\">    getters,    <span class=\"comment\">// 等同于 `store.getters`</span></span><br><span class=\"line\">    rootGetters <span class=\"comment\">// 等同于 `store.getters`，只存在于模块中</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n多个actions，A结束后再执行其他操作<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">actions:&#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span> actionA(&#123;commit&#125;)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">async</span> actionB(&#123;dispatch&#125;)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> dispatch (<span class=\"string\">&#x27;actionA&#x27;</span>)<span class=\"comment\">//等待actionA完成</span></span><br><span class=\"line\">        <span class=\"comment\">// ... </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>&#123;</span><br><span class=\"line\">    namespaced: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    state,</span><br><span class=\"line\">    getters,</span><br><span class=\"line\">    mutations,</span><br><span class=\"line\">    actions</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>怎么在带命名空间的模块内提交全局的mutation和action？<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.$store.dispatch(<span class=\"string\">&#x27;actionA&#x27;</span>, <span class=\"literal\">null</span>, &#123; <span class=\"attr\">root</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\"><span class=\"built_in\">this</span>.$store.commit(<span class=\"string\">&#x27;mutationA&#x27;</span>, <span class=\"literal\">null</span>, &#123; <span class=\"attr\">root</span>: <span class=\"literal\">true</span> &#125;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"在Vuex插件中怎么监听组件中提交mutation和action？\"><a href=\"#在Vuex插件中怎么监听组件中提交mutation和action？\" class=\"headerlink\" title=\"在Vuex插件中怎么监听组件中提交mutation和action？\"></a>在Vuex插件中怎么监听组件中提交mutation和action？</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPlugin</span>(<span class=\"params\">param</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">store</span> =&gt;</span> &#123;</span><br><span class=\"line\">        store.subscribe(<span class=\"function\">(<span class=\"params\">mutation, state</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(mutation.type)<span class=\"comment\">//是那个mutation</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(mutation.payload)</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(state)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// store.subscribeAction((action, state) =&gt; &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     console.log(action.type)//是那个action</span></span><br><span class=\"line\">        <span class=\"comment\">//     console.log(action.payload)//提交action的参数</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">        store.subscribeAction(&#123;</span><br><span class=\"line\">            before: <span class=\"function\">(<span class=\"params\">action, state</span>) =&gt;</span> &#123;<span class=\"comment\">//提交action之前</span></span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">`before action <span class=\"subst\">$&#123;action.type&#125;</span>`</span>)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            after: <span class=\"function\">(<span class=\"params\">action, state</span>) =&gt;</span> &#123;<span class=\"comment\">//提交action之后</span></span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">`after action <span class=\"subst\">$&#123;action.type&#125;</span>`</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在v-model上怎么用Vuex中state的值？\"><a href=\"#在v-model上怎么用Vuex中state的值？\" class=\"headerlink\" title=\"在v-model上怎么用Vuex中state的值？\"></a>在v-model上怎么用Vuex中state的值？</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;input v-model=<span class=\"string\">&quot;message&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">    message: &#123;</span><br><span class=\"line\">        get () &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.$store.state.message</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        set (value) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.$store.commit(<span class=\"string\">&#x27;updateMessage&#x27;</span>, value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vue-router全局导航守卫\"><a href=\"#vue-router全局导航守卫\" class=\"headerlink\" title=\"vue router全局导航守卫\"></a>vue router全局导航守卫</h3><p>三个参数</p>\n<ul>\n<li>to：即将要进入的目标 路由对象。</li>\n<li>from：当前导航正要离开的路由对象。</li>\n<li>next：函数，必须调用，不然路由跳转不过去。</li>\n</ul>\n<p>next()：进入下一个路由。<br>next(false)：中断当前的导航。<br>next(‘/‘)或next({ path: ‘/‘ }) : 跳转到其他路由，当前导航被中断，进行新的一个导航。</p>\n<ul>\n<li>router.beforeEach：全局前置守卫。</li>\n<li>router.beforeResolve：全局解析守卫。</li>\n<li>router.afterEach：全局后置钩子。</li>\n</ul>\n<h3 id=\"路由独享守卫\"><a href=\"#路由独享守卫\" class=\"headerlink\" title=\"路由独享守卫\"></a>路由独享守卫</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    routes: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            path: <span class=\"string\">&#x27;/foo&#x27;</span>,</span><br><span class=\"line\">            component: Foo,</span><br><span class=\"line\">            beforeEnter: <span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"组件内导航守卫\"><a href=\"#组件内导航守卫\" class=\"headerlink\" title=\"组件内导航守卫\"></a>组件内导航守卫</h3><ul>\n<li>beforeRouteLeave：在失活的组件里调用离开守卫。</li>\n<li>beforeRouteUpdate：在重用的组件里调用,比如包含<code>&lt;router-view /&gt;</code>的组件。</li>\n<li>beforeRouteEnter：在进入对应路由的组件创建前调用。</li>\n</ul>\n<h3 id=\"router-link\"><a href=\"#router-link\" class=\"headerlink\" title=\"router-link\"></a>router-link</h3><p><code>&lt;router-link&gt;</code>是Vue-Router的内置组件，在具有路由功能的应用中作为声明式的导航使用。类似react的Link标签</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;home&quot;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#x27;home&#x27;&quot;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123; path: &#x27;home&#x27; &#125;&quot;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123; name: &#x27;user&#x27;, params: &#123; userId: 123 &#125;&#125;&quot;</span>&gt;</span>User<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123; path: &#x27;user&#x27;, query: &#123; userId: 123 &#125;&#125;&quot;</span>&gt;</span>User<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注册在router-link上事件无效解决方法:<br>使用@click.native。原因：router-link会阻止click事件，.native指直接监听一个原生事件</p>\n<p>在ie和firefox无效：</p>\n<ol>\n<li>使用a标签不用Button</li>\n<li>使用Button和Router.navigate方法</li>\n</ol>\n<h3 id=\"vue-router\"><a href=\"#vue-router\" class=\"headerlink\" title=\"vue-router\"></a>vue-router</h3><ul>\n<li>mode<ul>\n<li>hash</li>\n<li>history</li>\n</ul>\n</li>\n<li>跳转<ul>\n<li>this.$router.push()</li>\n<li><code>&lt;router-link to=&quot;&quot;&gt;&lt;/router-link&gt;</code></li>\n</ul>\n</li>\n<li>占位<ul>\n<li><code>&lt;router-view&gt;&lt;/router-view&gt;</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Vue-router-跳转和-location-href-有什么区别？\"><a href=\"#Vue-router-跳转和-location-href-有什么区别？\" class=\"headerlink\" title=\"Vue router 跳转和 location.href 有什么区别？\"></a>Vue router 跳转和 location.href 有什么区别？</h3><p><code>router</code> 是 <code>hash</code> 改变<br><code>location.href</code> 是页面跳转，刷新页面</p>\n<h3 id=\"Vue-router-除了-router-link-怎么实现跳转\"><a href=\"#Vue-router-除了-router-link-怎么实现跳转\" class=\"headerlink\" title=\"Vue router 除了 router-link 怎么实现跳转?\"></a>Vue router 除了 router-link 怎么实现跳转?</h3><figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">router</span><span class=\"selector-class\">.go</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"selector-tag\">router</span><span class=\"selector-class\">.push</span>(<span class=\"string\">&#x27;/&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"params和query的区别\"><a href=\"#params和query的区别\" class=\"headerlink\" title=\"params和query的区别\"></a>params和query的区别</h3><p>query需要path引入，params需要name引入<br>this.$route.query.name、this.$route.params.query</p>\n<blockquote>\n<p>注意点：query刷新不会丢失query数据，params刷新会丢失数据</p>\n</blockquote>\n<h3 id=\"组件内监听路由的变化\"><a href=\"#组件内监听路由的变化\" class=\"headerlink\" title=\"组件内监听路由的变化\"></a>组件内监听路由的变化</h3><p>只能用在包含<router-view />的组件内</p>\n<ol>\n<li><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;$route&#x27;</span>(to, <span class=\"keyword\">from</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//这里监听</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">beforeRouteUpdate (to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里监听</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"切换新路由的滚动条处理\"><a href=\"#切换新路由的滚动条处理\" class=\"headerlink\" title=\"切换新路由的滚动条处理\"></a>切换新路由的滚动条处理</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">    mode: <span class=\"string\">&#x27;history&#x27;</span>,</span><br><span class=\"line\">    base: process.env.BASE_URL,</span><br><span class=\"line\">    routes,</span><br><span class=\"line\">    scrollBehavior(to, <span class=\"keyword\">from</span>, savedPosition) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (savedPosition) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> savedPosition;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123; <span class=\"attr\">x</span>: <span class=\"number\">0</span>, <span class=\"attr\">y</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"路由传参获取方式\"><a href=\"#路由传参获取方式\" class=\"headerlink\" title=\"路由传参获取方式\"></a>路由传参获取方式</h3><ol>\n<li><p>meta：路由元信息，写在routes配置文件中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    path: <span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;home&#x27;</span>,</span><br><span class=\"line\">    component: load(<span class=\"string\">&#x27;home&#x27;</span>),</span><br><span class=\"line\">    meta: &#123;</span><br><span class=\"line\">        title: <span class=\"string\">&#x27;首页&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>this.$route.meta.title</p>\n</blockquote>\n</li>\n<li><p>query</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.$router.push(&#123;</span><br><span class=\"line\">    path:<span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">    query: &#123;</span><br><span class=\"line\">        userId:<span class=\"number\">123</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>this.$route.query.userId</p>\n</blockquote>\n</li>\n<li><p>params</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    path: <span class=\"string\">&#x27;/home/:userId&#x27;</span>,</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;home&#x27;</span>,</span><br><span class=\"line\">    component: load(<span class=\"string\">&#x27;home&#x27;</span>),</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 注意用params传参，只能用命名的路由（用name访问）</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> userId = <span class=\"string\">&#x27;123&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$router.push(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;home&#x27;</span>, <span class=\"attr\">params</span>: &#123; userId &#125; &#125;)</span><br><span class=\"line\"><span class=\"comment\">// this.$route.params</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"实现动态加载路由\"><a href=\"#实现动态加载路由\" class=\"headerlink\" title=\"实现动态加载路由\"></a>实现动态加载路由</h3><ul>\n<li><p>使用Router的实例方法addRoutes来实现动态加载路由，一般用来实现菜单权限。</p>\n</li>\n<li><p>使用时要注意，静态路由文件中不能有404路由，而要通过addRoutes一起动态添加进去。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">webpack&lt; <span class=\"number\">2.4</span> 时</span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    path:<span class=\"string\">&#x27;/&#x27;</span>, </span><br><span class=\"line\">    name:<span class=\"string\">&#x27;home&#x27;</span>,</span><br><span class=\"line\">    components:<span class=\"function\"><span class=\"params\">resolve</span>=&gt;</span><span class=\"built_in\">require</span>([<span class=\"string\">&#x27;@/components/home&#x27;</span>],resolve)</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">webpack&gt; <span class=\"number\">2.4</span> 时</span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    path:<span class=\"string\">&#x27;/&#x27;</span>, </span><br><span class=\"line\">    name:<span class=\"string\">&#x27;home&#x27;</span>, </span><br><span class=\"line\">    components:<span class=\"function\">()=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">&#x27;@/components/home&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"路由之间跳转\"><a href=\"#路由之间跳转\" class=\"headerlink\" title=\"路由之间跳转\"></a>路由之间跳转</h3><ol>\n<li><p>声明式<br>通过使用内置组件<router-link :to=\"/home\">来跳转 or router-link :to=”{name:’index’}”&gt;</p>\n</li>\n<li><p>编程式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.$router.push(&#123; <span class=\"attr\">path</span>:<span class=\"string\">&#x27;home&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"built_in\">this</span>.$router.replace(&#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/home&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"built_in\">this</span>.$router.push(&#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;组件名&#x27;</span>)&#125;;</span><br></pre></td></tr></table></figure>\n<p>$router和$route的区别</p>\n<blockquote>\n<p>$route为当前router跳转对象，里面可以获取name、path、query、params等<br>$router为VueRouter实例，想要导航到不同URL，则使用router.push方法，返回上一个历史$router.to(-1)</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"打开新窗口\"><a href=\"#打开新窗口\" class=\"headerlink\" title=\"打开新窗口\"></a>打开新窗口</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    path: xxx,<span class=\"comment\">//路由地址</span></span><br><span class=\"line\">    query: &#123;</span><br><span class=\"line\">       mid: data.id<span class=\"comment\">//可以带参数</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;href&#125; = <span class=\"built_in\">this</span>.$router.resolve(obj);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.open(href, <span class=\"string\">&#x27;_blank&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态绑定Class和Style\"><a href=\"#动态绑定Class和Style\" class=\"headerlink\" title=\"动态绑定Class和Style\"></a>动态绑定Class和Style</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--第一种对象语法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;test&quot;</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123;active:actived,&#x27;active-click&#x27;: clicked&amp;&amp;actived&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 第二种数组语法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;test&quot;</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;[actived?activeClass : &#x27;&#x27;, clicked&amp;&amp;actived?activeClickClass : &#x27;&#x27;]&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 第三种对象和数组混合 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;[testClass,&#123;active:actived&#125;,&#123;&#x27;active-click&#x27;:clicked&amp;&amp;actived&#125;]&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 第四种对象和计算属性(推荐) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;classObject&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"过滤器-filter\"><a href=\"#过滤器-filter\" class=\"headerlink\" title=\"过滤器(filter)\"></a>过滤器(filter)</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123;money | moneyFilter(0.15)&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span>美元&lt;/div&gt;</span><br><span class=\"line\">&lt;div&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123;money | moneyFilter(0.12)&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span>英镑&lt;/div&gt;</span><br><span class=\"line\">filters: &#123;</span><br><span class=\"line\">    moneyFilter: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val, ratio</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Number</span>(val * ratio).toFixed(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>除了用在插值上还可以用在v-bind表达式上。</p>\n<h3 id=\"computed中的属性名和data中的属性名可以相同吗？也不能和method中属性同名\"><a href=\"#computed中的属性名和data中的属性名可以相同吗？也不能和method中属性同名\" class=\"headerlink\" title=\"computed中的属性名和data中的属性名可以相同吗？也不能和method中属性同名\"></a>computed中的属性名和data中的属性名可以相同吗？也不能和method中属性同名</h3><p>不能同名，因为不管是computed属性名还是data数据名还是props数据名都会被挂载在vm实例上，因此这三个都不能同名。</p>\n<h3 id=\"watch的属性使用箭头函数定义可以吗？\"><a href=\"#watch的属性使用箭头函数定义可以吗？\" class=\"headerlink\" title=\"watch的属性使用箭头函数定义可以吗？\"></a>watch的属性使用箭头函数定义可以吗？</h3><p>不可以。this会是undefind,因为箭头函数中的this指向的是定义时的this，而不是执行时的this，所以不会指向Vue实例的上下文。</p>\n<h3 id=\"watch怎么深度监听对象变化\"><a href=\"#watch怎么深度监听对象变化\" class=\"headerlink\" title=\"watch怎么深度监听对象变化\"></a>watch怎么深度监听对象变化</h3><p>监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">watch:&#123;</span><br><span class=\"line\">   a:&#123;</span><br><span class=\"line\">       handler:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val,oldval</span>)</span>&#123;</span><br><span class=\"line\">           </span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">       deep:<span class=\"literal\">true</span>, <span class=\"comment\">// 一层层遍历给属性都加上监听器</span></span><br><span class=\"line\">       immediate: <span class=\"literal\">true</span> <span class=\"comment\">// 组件加载立即触发回调函数执行</span></span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"string\">&#x27;obj.a&#x27;</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"强制刷新组件\"><a href=\"#强制刷新组件\" class=\"headerlink\" title=\"强制刷新组件\"></a>强制刷新组件</h3><ul>\n<li>this.$forceUpdate()。</li>\n<li>组件上加上key，然后变化key的值。</li>\n</ul>\n<h3 id=\"访问子组件实例或者子元素\"><a href=\"#访问子组件实例或者子元素\" class=\"headerlink\" title=\"访问子组件实例或者子元素\"></a>访问子组件实例或者子元素</h3><ol>\n<li>ref<br>先用ref特性为子组件赋予一个ID引用<base-input ref=\"myInput\">&lt;/<base-input></li>\n</ol>\n<p>比如子组件有个focus的方法，可以这样调用this.$refs.myInput.focus()；<br>比如子组件有个value的数据，可以这样使用this.$refs.myInput.value。</p>\n<ol start=\"2\">\n<li>子组件访问父组件<br>this.$parent</li>\n</ol>\n<h3 id=\"组件什么时候下被销毁\"><a href=\"#组件什么时候下被销毁\" class=\"headerlink\" title=\"组件什么时候下被销毁\"></a>组件什么时候下被销毁</h3><ul>\n<li>没有使用keep-alive切换</li>\n<li>v-if=”false”</li>\n<li>执行vm.$destroy()</li>\n</ul>\n<h3 id=\"event-target和-event-currentTarget有什么区别\"><a href=\"#event-target和-event-currentTarget有什么区别\" class=\"headerlink\" title=\"$event.target和$event.currentTarget有什么区别\"></a>$event.target和$event.currentTarget有什么区别</h3><p>$event.currentTarget始终指向事件所绑定的元素，而$event.target指向事件发生时的元素。</p>\n<h3 id=\"事件修饰符和表单修饰符\"><a href=\"#事件修饰符和表单修饰符\" class=\"headerlink\" title=\"事件修饰符和表单修饰符\"></a>事件修饰符和表单修饰符</h3><ul>\n<li>事件修饰符</li>\n</ul>\n<p>.stop：阻止事件传递；<br>.prevent： 阻止默认事件；<br>.capture ：在捕获的过程监听，没有capture修饰符时都是默认冒泡过程监听；<br>.self：当前绑定事件的元素才能触发；<br>.once：事件只会触发一次；<br>.passive：默认事件会立即触发，不要把.passive和.prevent一起使用，因为.prevent将不起作用。</p>\n<ul>\n<li>表单修饰符.number .lazy .trim</li>\n</ul>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">comp</span> :foo.<span class=\"keyword\">sync</span>=<span class=\"string\">&quot;bar&quot;</span>&gt;&lt;/<span class=\"keyword\">comp</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>相当于</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;comp <span class=\"symbol\">:foo=<span class=\"string\">&quot;bar&quot;</span></span> <span class=\"variable\">@update</span><span class=\"symbol\">:foo=<span class=\"string\">&quot;val =&gt; bar = val&quot;</span>&gt;&lt;/comp&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">/<span class=\"regexp\">/ this.$emit(&#x27;update:foo&#x27;, newValue)</span></span><br></pre></td></tr></table></figure>\n\n<p>要注意顺序很重要，用@click.prevent.self会阻止所有的点击，而@click.self.prevent只会阻止对元素自身的点击。</p>\n<h3 id=\"说说你对Vue的表单修饰符-lazy的理解。\"><a href=\"#说说你对Vue的表单修饰符-lazy的理解。\" class=\"headerlink\" title=\"说说你对Vue的表单修饰符.lazy的理解。\"></a>说说你对Vue的表单修饰符.lazy的理解。</h3><p>input标签v-model用lazy修饰之后，并不会立即监听input的value的改变，会在input失去焦点之后，才会监听input的value的改变。</p>\n<h3 id=\"监听键盘事件\"><a href=\"#监听键盘事件\" class=\"headerlink\" title=\"监听键盘事件\"></a>监听键盘事件</h3><p>使用按键修饰符 &lt;input @keyup.enter=”submit”&gt;按下回车键时候触发submit事件。</p>\n<ul>\n<li>.enter</li>\n<li>.tab</li>\n<li>.delete (捕获“删除”和“退格”键)</li>\n<li>.esc</li>\n<li>.space</li>\n<li>.up</li>\n<li>.down</li>\n<li>.left</li>\n<li>.right</li>\n</ul>\n<h3 id=\"v-on绑定多个方法\"><a href=\"#v-on绑定多个方法\" class=\"headerlink\" title=\"v-on绑定多个方法\"></a>v-on绑定多个方法</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:</span>&#123;<span class=\"attr\">click:a</span>,<span class=\"attr\">dblclick:b</span>&#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">        a()&#123;</span><br><span class=\"line\">            alert(1)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        b()&#123;</span><br><span class=\"line\">            alert(2)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"css样式当前组件有效\"><a href=\"#css样式当前组件有效\" class=\"headerlink\" title=\"css样式当前组件有效\"></a>css样式当前组件有效</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;less&quot;</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>原理：vue通过在DOM结构以及css样式上加上唯一的标记<code>data-v-xxxxxx</code>，保证动态属性唯一，达到样式私有化，不污染全局的作用。</p>\n<p>编译后：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">data-v-3e5b2a80</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;textScoped&quot;</span>&gt;</span>scoped测试<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.textScoped</span><span class=\"selector-attr\">[data-v-3e5b2a80]</span>&#123;        </span></span><br><span class=\"line\">        color: red;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"渲染模板保留注释\"><a href=\"#渲染模板保留注释\" class=\"headerlink\" title=\"渲染模板保留注释\"></a>渲染模板保留注释</h3><ul>\n<li>在组件中将comments选项设置为true</li>\n<li><code>&lt;template comments&gt; ... &lt;template&gt;</code></li>\n</ul>\n<h3 id=\"在created和mounted这两个生命周期中请求数据有什么区别呢？\"><a href=\"#在created和mounted这两个生命周期中请求数据有什么区别呢？\" class=\"headerlink\" title=\"在created和mounted这两个生命周期中请求数据有什么区别呢？\"></a>在created和mounted这两个生命周期中请求数据有什么区别呢？</h3><p>在created中，页面视图未出现，如果请求信息过多，页面会长时间处于白屏状态，DOM节点没出来，无法操作DOM节点。在mounted不会这样，比较好。</p>\n<h3 id=\"Vue组件里的定时器要怎么销毁？\"><a href=\"#Vue组件里的定时器要怎么销毁？\" class=\"headerlink\" title=\"Vue组件里的定时器要怎么销毁？\"></a>Vue组件里的定时器要怎么销毁？</h3><ul>\n<li><p>如果页面上有很多定时器，可以在data选项中创建一个对象timer，给每个定时器取个名字一一映射在对象timer中，<br>在beforeDestroy构造函数中for(let k in this.timer){clearInterval(k)}；</p>\n</li>\n<li><p>如果页面只有单个定时器，可以这么做。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span>&#123;&#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\"><span class=\"built_in\">this</span>.$once(<span class=\"string\">&#x27;hook:beforeDestroy&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"built_in\">clearInterval</span>(timer);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"Vue中能监听到数组变化的方法有哪些？为什么这些方法能监听到呢？\"><a href=\"#Vue中能监听到数组变化的方法有哪些？为什么这些方法能监听到呢？\" class=\"headerlink\" title=\"Vue中能监听到数组变化的方法有哪些？为什么这些方法能监听到呢？\"></a>Vue中能监听到数组变化的方法有哪些？为什么这些方法能监听到呢？</h3><ul>\n<li>push()、pop()、shift()、unshift()、splice()、sort()、reverse()，这些方法在Vue中被重新定义了，故可以监听到数组变化；</li>\n<li>filter()、concat()、slice()，这些方法会返回一个新数组，也可以监听到数组的变化。</li>\n</ul>\n<h3 id=\"定义全局方法\"><a href=\"#定义全局方法\" class=\"headerlink\" title=\"定义全局方法\"></a>定义全局方法</h3><ol>\n<li>挂载在Vue的prototype上</li>\n<li>利用全局混入mixin</li>\n<li><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.$root.$on(<span class=\"string\">&#x27;demo&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;test&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">this</span>.$root.$emit(<span class=\"string\">&#x27;demo&#x27;</span>)；</span><br><span class=\"line\"><span class=\"built_in\">this</span>.$root.$off(<span class=\"string\">&#x27;demo&#x27;</span>)；</span><br><span class=\"line\"><span class=\"comment\">// Mustache的web模板引擎</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"捕获组件的错误信息\"><a href=\"#捕获组件的错误信息\" class=\"headerlink\" title=\"捕获组件的错误信息\"></a>捕获组件的错误信息</h3><ul>\n<li><p>errorCaptured是组件内部钩子，当捕获一个来自子孙组件的错误时被调用，接收error、vm、info三个参数，return false后可以阻止错误继续向上抛出。</p>\n</li>\n<li><p>errorHandler为全局钩子，使用Vue.config.errorHandler配置，接收参数与errorCaptured一致，2.6后可捕捉v-on与promise链的错误，可用于统一错误<br>处理与错误兜底。</p>\n</li>\n</ul>\n<h3 id=\"vue-SSR\"><a href=\"#vue-SSR\" class=\"headerlink\" title=\"vue SSR\"></a>vue SSR</h3><p>vue是构建客户端应用程序的框架，默认情况下，可以在浏览器中输出vue组件，进行生成dom和操作dom，然而，也可以将同一个组件渲染为服务端的html字符串，将他们直接发送到客户端，然后将这些静态标记激活为客户端上可以交互的应用程序。</p>\n<p>即ssr的意思就是vue在服务端完成将标签渲染成整个html片段的工作，然后将片段直接返回给客户端使用</p>\n<ul>\n<li><p>ssr优点：</p>\n<ul>\n<li><p>更好的seo：因为spa页面的内容是通过ajax获取，而搜索引擎爬取工具并不会等待ajax一步完成后再抓取页面内容，所以在spa中是抓取不到页面通过ajax获取到的内容；而ssr是直接由服务器返回已经渲染好的页面（数据已经包含在页面中），所以搜索引擎爬取工具可以抓取到渲染好的页面</p>\n</li>\n<li><p>更快的内容到达时间（首屏加载快）：spa会等待所有vue编译后的js文件都下载完成后，才开始进行也免得渲染，文件下载需要一定的时间等，所以首屏加载需要时间，而ssr直接由服务器渲染好页面返回显示，无需等待js文件再去渲染，所以ssr有更快的内容到达时间</p>\n</li>\n</ul>\n</li>\n<li><p>ssr缺点：</p>\n<ul>\n<li><p>更多的开发条件限制：例如服务端渲染只支持beforeCreate和created两个钩子函数，这会导致一些外部扩展库需要特殊处理，才能在服务端渲染程序中运行；并且与可以部署在任何静态文件服务器上的完全静态单页面应用程序spa不同，服务端渲染应用程序，需要处于nodejs server中才能运行</p>\n</li>\n<li><p>更多的服务器负载</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"nextTick\"><a href=\"#nextTick\" class=\"headerlink\" title=\"nextTick\"></a>nextTick</h3><p>在下次dom更新循环结束之后执行延迟回调，可用于获取更新后的dom状态。</p>\n<ul>\n<li>新版本中默认是microtasks, v-on中会使用macrotasks<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 修改数据</span></span><br><span class=\"line\">vm.msg = <span class=\"string\">&#x27;Hello&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// DOM 还没有更新</span></span><br><span class=\"line\">Vue.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// DOM 更新了</span></span><br><span class=\"line\">  ...   <span class=\"comment\">//DOM操作</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 作为一个 Promise 使用</span></span><br><span class=\"line\">Vue.nextTick()</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// DOM 更新了</span></span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue 在更新 DOM 时是异步执行的。只要侦听到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部对异步队列尝试使用原生的 <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Promise</span>.</span></span><span class=\"keyword\">then</span>、MutationObserver 和 setImmediate，如果执行环境不支持，则会采用 set<span class=\"constructor\">Timeout(<span class=\"params\">fn</span>, 0)</span> 代替。</span><br><span class=\"line\">例如，当你设置 vm.someData = &#x27;<span class=\"keyword\">new</span> value&#x27;，该组件不会立即重新渲染。当刷新队列时，组件会在下一个事件循环“tick”中更新。多数情况我们不需要关心这个过程，但是如果你想基于更新后的 DOM 状态来做点什么，这就可能会有些棘手。虽然 <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Vue</span>.</span></span>js 通常鼓励开发人员使用“数据驱动”的方式思考，避免直接接触 DOM，但是有时我们必须要这么做。为了在数据变化之后等待 Vue 完成更新 DOM，可以在数据变化之后立即使用 <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Vue</span>.</span></span>next<span class=\"constructor\">Tick(<span class=\"params\">callback</span>)</span>。这样回调函数将在 DOM 更新完成后被调用。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>dom更新为什么是一个异步操作因为它提升了渲染效率。</p>\n</blockquote>\n<h3 id=\"数据响应-数据劫持\"><a href=\"#数据响应-数据劫持\" class=\"headerlink\" title=\"数据响应(数据劫持)\"></a>数据响应(数据劫持)</h3><p>数据响应的实现由两部分构成: 观察者( watcher ) 和 依赖收集器( Dep )，其核心是 defineProperty 这个方法，它可以重写属性的 get 与 set 方法，从而完成监听数据的改变。</p>\n<blockquote>\n<ol>\n<li>对需要observe的数据对象进行递归遍历，包括子属性对象的属性，都加上setter和getter这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>compile解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"3\">\n<li>Watcher订阅者是Observer和Compile之间通信的桥梁，主要做的事情是:<br>①在自身实例化时往属性订阅器(dep)里面添加自己<br>②自身必须有一个update()方法<br>③待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>4、MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(input) -&gt; 数据model变更的双向绑定效果。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> data = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">// 数据响应性</span></span><br><span class=\"line\">observe(data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化观察者</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Watcher(data, <span class=\"string\">&#x27;name&#x27;</span>, updateComponent)</span><br><span class=\"line\">data.a = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 简单表示用于数据更新后的操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateComponent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    vm._update() <span class=\"comment\">// patchs</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监视对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observe</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 遍历对象，使用 get/set 重新定义对象的每个属性值</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(obj).map(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">      defineReactive(obj, key, obj[key])</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive</span>(<span class=\"params\">obj, k, v</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 递归子属性</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type(v) == <span class=\"string\">&#x27;object&#x27;</span>) observe(v)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 新建依赖收集器</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> dep = <span class=\"keyword\">new</span> Dep()</span><br><span class=\"line\">    <span class=\"comment\">// 定义get/set</span></span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(obj, k, &#123;</span><br><span class=\"line\">        enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        get: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactiveGetter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        \t  <span class=\"comment\">// 当有获取该属性时，证明依赖于该对象，因此被添加进收集器中</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">                dep.addSub(Dep.target)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> v</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 重新设置值时，触发收集器的通知机制</span></span><br><span class=\"line\">        set: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactiveSetter</span>(<span class=\"params\">nV</span>) </span>&#123;</span><br><span class=\"line\">            v = nV</span><br><span class=\"line\">            dep.nofify()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 依赖收集器</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dep</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.subs = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    addSub(sub) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.subs.push(sub)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    notify() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.subs.map(<span class=\"function\"><span class=\"params\">sub</span> =&gt;</span> &#123;</span><br><span class=\"line\">            sub.update()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Dep.target = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 观察者</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Watcher</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(obj, key, cb) &#123;</span><br><span class=\"line\">        Dep.target = <span class=\"built_in\">this</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.cb = cb</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.obj = obj</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.key = key</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = obj[key]</span><br><span class=\"line\">        Dep.target = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    addDep(Dep) &#123;</span><br><span class=\"line\">        Dep.addSub(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    update() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = <span class=\"built_in\">this</span>.obj[<span class=\"built_in\">this</span>.key]</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.cb(<span class=\"built_in\">this</span>.value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    before() &#123;</span><br><span class=\"line\">        callHook(<span class=\"string\">&#x27;beforeUpdate&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"虚拟dom原理实现\"><a href=\"#虚拟dom原理实现\" class=\"headerlink\" title=\"虚拟dom原理实现\"></a>虚拟dom原理实现</h3><ul>\n<li><p>创建 dom 树</p>\n</li>\n<li><p>树的diff，同层对比，输出patchs(listDiff/diffChildren/diffProps)</p>\n<ul>\n<li><p>没有新的节点，返回</p>\n</li>\n<li><p>新的节点tagName与key不变， 对比props，继续递归遍历子树</p>\n<ul>\n<li>对比属性(对比新旧属性列表):<ul>\n<li>旧属性是否存在与新属性列表中</li>\n<li>都存在的是否有变化</li>\n<li>是否出现旧列表中没有的新属性</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>tagName和key值变化了，则直接替换成新节点</p>\n</li>\n</ul>\n</li>\n<li><p>渲染差异</p>\n<ul>\n<li>遍历patchs， 把需要更改的节点取出来</li>\n<li>局部更新dom</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>patch函数 oldvnode vnode<ul>\n<li>如果两个节点不一样，直接用新节点替换老节点；</li>\n<li>如果两个节点一样，<br>​      - 新老节点一样，直接返回；<br>​     - 老节点有子节点，新节点没有：删除老节点的子节点；<br>​ - 老节点没有子节点，新节点有子节点：新节点的子节点直接append到老节点；<br>​ -    都只有文本节点：直接用新节点的文本节点替换老的文本节点；<br>​ -    都有子节点：updateChildren</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// diff算法的实现</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">diff</span>(<span class=\"params\">oldTree, newTree</span>) </span>&#123;</span><br><span class=\"line\">\t <span class=\"comment\">// 差异收集</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> pathchs = &#123;&#125;</span><br><span class=\"line\">    dfs(oldTree, newTree, <span class=\"number\">0</span>, pathchs)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pathchs</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dfs</span>(<span class=\"params\">oldNode, newNode, index, pathchs</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> curPathchs = []</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newNode) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当新旧节点的 tagName 和 key 值完全一致时</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldNode.tagName === newNode.tagName &amp;&amp; oldNode.key === newNode.key) &#123;</span><br><span class=\"line\">        \t  <span class=\"comment\">// 继续比对属性差异</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> props = diffProps(oldNode.props, newNode.props)</span><br><span class=\"line\">            curPathchs.push(&#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;changeProps&#x27;</span>, props &#125;)</span><br><span class=\"line\">            <span class=\"comment\">// 递归进入下一层级的比较</span></span><br><span class=\"line\">            diffChildrens(oldNode.children, newNode.children, index, pathchs)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        \t  <span class=\"comment\">// 当 tagName 或者 key 修改了后，表示已经是全新节点，无需再比</span></span><br><span class=\"line\">            curPathchs.push(&#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;replaceNode&#x27;</span>, <span class=\"attr\">node</span>: newNode &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t <span class=\"comment\">// 构建出整颗差异树</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (curPathchs.length) &#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span>(pathchs[index])&#123;</span><br><span class=\"line\">    \t\t\tpathchs[index] = pathchs[index].concat(curPathchs)</span><br><span class=\"line\">    \t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    \t\t\tpathchs[index] = curPathchs</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 属性对比实现</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">diffProps</span>(<span class=\"params\">oldProps, newProps</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> propsPathchs = []</span><br><span class=\"line\">    <span class=\"comment\">// 遍历新旧属性列表</span></span><br><span class=\"line\">    <span class=\"comment\">// 查找删除项</span></span><br><span class=\"line\">    <span class=\"comment\">// 查找修改项</span></span><br><span class=\"line\">    <span class=\"comment\">// 查找新增项</span></span><br><span class=\"line\">    forin(olaProps, <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!newProps.hasOwnProperty(k)) &#123;</span><br><span class=\"line\">            propsPathchs.push(&#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;remove&#x27;</span>, <span class=\"attr\">prop</span>: k &#125;)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (v !== newProps[k]) &#123;</span><br><span class=\"line\">                propsPathchs.push(&#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;change&#x27;</span>, <span class=\"attr\">prop</span>: k , <span class=\"attr\">value</span>: newProps[k] &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    forin(newProps, <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!oldProps.hasOwnProperty(k)) &#123;</span><br><span class=\"line\">            propsPathchs.push(&#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;add&#x27;</span>, <span class=\"attr\">prop</span>: k, <span class=\"attr\">value</span>: v &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> propsPathchs</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对比子级差异</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">diffChildrens</span>(<span class=\"params\">oldChild, newChild, index, pathchs</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 标记子级的删除/新增/移动</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; change, list &#125; = diffList(oldChild, newChild, index, pathchs)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (change.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pathchs[index]) &#123;</span><br><span class=\"line\">            pathchs[index] = pathchs[index].concat(change)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            pathchs[index] = change</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t <span class=\"comment\">// 根据 key 获取原本匹配的节点，进一步递归从头开始对比</span></span><br><span class=\"line\">    oldChild.map(<span class=\"function\">(<span class=\"params\">item, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> keyIndex = list.indexOf(item.key)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (keyIndex) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> node = newChild[keyIndex]</span><br><span class=\"line\">            <span class=\"comment\">// 进一步递归对比</span></span><br><span class=\"line\">            dfs(item, node, index, pathchs)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 列表对比，主要也是根据 key 值查找匹配项</span></span><br><span class=\"line\"><span class=\"comment\">// 对比出新旧列表的新增/删除/移动</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">diffList</span>(<span class=\"params\">oldList, newList, index, pathchs</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> change = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> list = []</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newKeys = getKey(newList)</span><br><span class=\"line\">    oldList.map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newKeys.indexOf(v.key) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            list.push(v.key)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            list.push(<span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 标记删除</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = list.length - <span class=\"number\">1</span>; i&gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!list[i]) &#123;</span><br><span class=\"line\">            list.splice(i, <span class=\"number\">1</span>)</span><br><span class=\"line\">            change.push(&#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;remove&#x27;</span>, <span class=\"attr\">index</span>: i &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 标记新增和移动</span></span><br><span class=\"line\">    newList.map(<span class=\"function\">(<span class=\"params\">item, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> key = item.key</span><br><span class=\"line\">        <span class=\"keyword\">const</span> index = list.indexOf(key)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === <span class=\"number\">-1</span> || key == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新增</span></span><br><span class=\"line\">            change.push(&#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;add&#x27;</span>, <span class=\"attr\">node</span>: item, <span class=\"attr\">index</span>: i &#125;)</span><br><span class=\"line\">            list.splice(i, <span class=\"number\">0</span>, key)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 移动</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index !== i) &#123;</span><br><span class=\"line\">                change.push(&#123;</span><br><span class=\"line\">                    type: <span class=\"string\">&#x27;move&#x27;</span>,</span><br><span class=\"line\">                    form: index,</span><br><span class=\"line\">                    to: i,</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                move(list, index, i)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; change, list &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Proxy-相比于-defineProperty-的优势\"><a href=\"#Proxy-相比于-defineProperty-的优势\" class=\"headerlink\" title=\"Proxy 相比于 defineProperty 的优势\"></a>Proxy 相比于 defineProperty 的优势</h3><ul>\n<li>数组变化也能监听到</li>\n<li>不需要深度遍历监听(遍历每一个属性)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> data = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> reactiveData = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(data, &#123;</span><br><span class=\"line\">\tget: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, name</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"为什么在v-for中使用key？\"><a href=\"#为什么在v-for中使用key？\" class=\"headerlink\" title=\"为什么在v-for中使用key？\"></a>为什么在v-for中使用key？</h3><p>为了标识每个唯一的节点，方便比较，v-for中加key可以减少渲染次数，提升渲染性能。</p>\n<h3 id=\"Vuex页面刷新数据丢失怎么解决？\"><a href=\"#Vuex页面刷新数据丢失怎么解决？\" class=\"headerlink\" title=\"Vuex页面刷新数据丢失怎么解决？\"></a>Vuex页面刷新数据丢失怎么解决？</h3><p>使用 vuex-persist 插件，它就是为 Vuex 持久化存储而生的一个插件。不需要你手动存取 storage ，而是直接将状态保存至 cookie 或者 localStorage 中</p>\n<h3 id=\"vue项目的优化\"><a href=\"#vue项目的优化\" class=\"headerlink\" title=\"vue项目的优化\"></a>vue项目的优化</h3><ol>\n<li><p>v-if和v-show区分场景使用</p>\n</li>\n<li><p>computed 和 watch 区分场景使用</p>\n</li>\n<li><p>v-for 遍历必须加key，key最好是id值，如果采用index当插入数据时索引会发生变化，且避免同时使用v-if(用计算属性过滤数据)</p>\n</li>\n<li><p>图片懒加载</p>\n</li>\n<li><p>路由懒加载</p>\n</li>\n<li><p>第三方插件按需引入</p>\n</li>\n<li><p>长列表(虚拟列表)</p>\n<blockquote>\n<p>无限列表加载到底部请求api，用v-for循环数据这样是欠妥当的。随着数据的加载，dom会越来越多，造成性能的开销大，对客户端造成压力。虚拟列表保证dom数量一定，渲染可视区的dom，通过替换数据来实现长列表的显示。</p>\n</blockquote>\n</li>\n<li><p>释放组件资源(beforeDestroy移除监听)</p>\n</li>\n<li><p>首屏优化 mixins抽离公共代码</p>\n</li>\n</ol>\n<h3 id=\"vue父子组件实现双向绑定实例\"><a href=\"#vue父子组件实现双向绑定实例\" class=\"headerlink\" title=\"vue父子组件实现双向绑定实例\"></a>vue父子组件实现双向绑定实例</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;Child :name=<span class=\"string\">&quot;name&quot;</span> :change=<span class=\"string\">&quot;changeName&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">props:&#123;</span><br><span class=\"line\">    name:&#123;</span><br><span class=\"line\">        type:String,</span><br><span class=\"line\">        required: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"keyword\">data</span>() &#123;</span><br><span class=\"line\">    newName:<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">watch:&#123;</span><br><span class=\"line\">    name(<span class=\"keyword\">val</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.newName = <span class=\"keyword\">val</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    newName(<span class=\"keyword\">val</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$emit(<span class=\"string\">&#x27;change&#x27;</span>, <span class=\"keyword\">val</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义v-model\"><a href=\"#自定义v-model\" class=\"headerlink\" title=\"自定义v-model\"></a>自定义v-model</h3><p>自定义 v-model，设置子组件 model 属性，设置 v-model 侦听的属性值，同时绑定属性变化时执行的事件，实现自定义 v-model，即双向绑定。</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\">// v-model只是一个语法糖</span><br><span class=\"line\">&lt;<span class=\"keyword\">input</span> <span class=\"keyword\">type</span>=&quot;text&quot; v-model=&quot;price&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"keyword\">input</span> <span class=\"keyword\">type</span>=&quot;text&quot; :<span class=\"keyword\">value</span>=&quot;price&quot; @input=&quot;price=$event.target.value&quot; /&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Vue.extend方法创建一个组件<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注册组件</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">&quot;base-checkbox&quot;</span>, &#123;</span><br><span class=\"line\">    model:&#123;</span><br><span class=\"line\">        prop:<span class=\"string\">&#x27;checked&#x27;</span>, <span class=\"comment\">// 绑定属性</span></span><br><span class=\"line\">        event:<span class=\"string\">&#x27;change&#x27;</span>, <span class=\"comment\">// 抛出事件</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    props:&#123;</span><br><span class=\"line\">        checked: boolean</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    templete:<span class=\"string\">`&lt;input type=&quot;checkbox&quot; v-bind:checked=&quot;checked&quot; v-on:change=&quot;$emit(&#x27;change&#x27;,$event.target.value)&quot;/&gt;`</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;base-checkbox v-model=<span class=\"string\">&quot;value&quot;</span>&gt;&lt;/base-checkbox&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"provide-inject有什么用？\"><a href=\"#provide-inject有什么用？\" class=\"headerlink\" title=\"provide/inject有什么用？\"></a>provide/inject有什么用？</h3><blockquote>\n<p>常用的父子组件通信方式都是父组件绑定要传递给子组件的数据，子组件通过<code>props</code>属性接收，一旦组件层级变多时，采用这种方式一级一级传递值非常麻烦，而且代码可读性不高，不便后期维护。</p>\n</blockquote>\n<blockquote>\n<p>vue提供了<code>provide</code>和<code>inject</code>帮助我们解决多层次嵌套嵌套通信问题。在<code>provide</code>中指定要传递给子孙组件的数据，子孙组件通过<code>inject</code>注入祖父组件传递过来的数据。</p>\n</blockquote>\n<blockquote>\n<p><code>provide</code>和<code>inject</code>主要为高阶插件/组件库提供用例。并不推荐直接用于应用程序代码中。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">provide() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        elForm: <span class=\"built_in\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">inject: [<span class=\"string\">&#x27;elForm&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">provide: &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;cosyer&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">inject:&#123;</span><br><span class=\"line\">    newName: &#123;</span><br><span class=\"line\">        <span class=\"keyword\">from</span>: <span class=\"string\">&#x27;name&#x27;</span>,</span><br><span class=\"line\">        <span class=\"keyword\">default</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vue-is的作用\"><a href=\"#vue-is的作用\" class=\"headerlink\" title=\"vue is的作用\"></a>vue is的作用</h3><h4 id=\"简单来说就是扩展html标签的限制\"><a href=\"#简单来说就是扩展html标签的限制\" class=\"headerlink\" title=\"简单来说就是扩展html标签的限制\"></a>简单来说就是扩展html标签的限制</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ul里面嵌套li是固定的写法 --&gt;</span></span><br></pre></td></tr></table></figure>\n<p>当我们使用自定义的组件时会被当作无效内容↓</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以通过is来扩展</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">is</span>=<span class=\"string\">&quot;my-li&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"动态切换组件\"><a href=\"#动态切换组件\" class=\"headerlink\" title=\"动态切换组件\"></a>动态切换组件</h4><figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"symbol\">:is=<span class=\"string\">&quot;变量名称&quot;</span>&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"assets和static的区别\"><a href=\"#assets和static的区别\" class=\"headerlink\" title=\"assets和static的区别\"></a>assets和static的区别</h3><ul>\n<li><p>assets中的文件在运行npm run build的时候会打包，简单来说就是会被压缩体积，代码格式化之类的。打包之后也会放到static中。</p>\n</li>\n<li><p>static中的文件则不会被打包。</p>\n</li>\n</ul>\n<blockquote>\n<p>建议：将图片等未处理的文件放在assets中，打包减少体积。而对于第三方引入的一些资源文件如iconfont.css等可以放在static中，因为这些文件已经经过处理了。</p>\n</blockquote>\n<h3 id=\"slot插槽分发\"><a href=\"#slot插槽分发\" class=\"headerlink\" title=\"slot插槽分发\"></a>slot插槽分发</h3><p>很多时候，我们封装了一个子组件之后，在父组件使用的时候，想添加一些dom元素，这个时候就可以使用slot插槽了，但是这些dom是否显示以及在哪里显示，则是看子组件<br>中slot组件的位置了。</p>\n<h3 id=\"v-clock指令的作用\"><a href=\"#v-clock指令的作用\" class=\"headerlink\" title=\"v-clock指令的作用\"></a>v-clock指令的作用</h3><ul>\n<li>解决页面闪烁问题(会显示插值表达式)<br>如果网速慢，而该标签内容是变量没有请求响应回来的时候，页面上先不显示该标签（vue给该标<br>签加了css样式），当响应回来的时候改标签默认将css样式去除。</li>\n</ul>\n<p><code>此指令可以解决使用插值表达式页面闪烁问题</code>将该指令加在html标签中时，可以在该文件中加<br>style属性为display：none</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;#app&quot;</span> v-cloak&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123;name&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">[v-cloak]&#123;</span><br><span class=\"line\">    display: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"封装vue组件的过程\"><a href=\"#封装vue组件的过程\" class=\"headerlink\" title=\"封装vue组件的过程\"></a>封装vue组件的过程</h3><ol>\n<li>建立组件模板、架子写写样式，考虑好组件的基本逻辑</li>\n<li>准备好组件的数据输入，定好props里面的数据、类型</li>\n<li>准备好组价的数据输出，定好暴露出来的方法</li>\n</ol>\n<h3 id=\"常用组件库\"><a href=\"#常用组件库\" class=\"headerlink\" title=\"常用组件库\"></a>常用组件库</h3><ul>\n<li><a href=\"https://github.com/ddchef/vue-code-diff\">文本比对:vue-code-diff</a></li>\n<li><a href=\"https://github.com/surmon-china/vue-codemirror\">JSON代码编辑器:vue-codemirror</a></li>\n<li><a href=\"https://github.com/kazupon/vue-i18n\">国际化:vue-i18n</a></li>\n<li><a href=\"https://github.com/wangeditor-team/wangEditor\">富文本编辑器:wangEditor</a></li>\n<li><a href=\"https://github.com/tinymce/tinymce\">富文本编辑器:tinymce</a></li>\n<li><a href=\"https://github.com/egoist/vue-monaco\">monaco编辑器:vue-monaco</a></li>\n<li><a href=\"https://github.com/chairuosen/vue2-ace-editor\">ace编辑器:vue2-ace-editor</a></li>\n<li><a href=\"https://github.com/Inndy/vue-clipboard2\">剪切板:vue-clipboard2</a></li>\n<li><a href=\"https://github.com/cmp-cc/vue-cookies\">操作cookie:vue-cookies</a></li>\n<li><a href=\"https://github.com/Thunberg087/vue-fragment\">fragment元素:vue-fragment</a></li>\n<li><a href=\"https://github.com/metachris/vue-highlightjs\">代码高亮:vue-highlightjs</a></li>\n<li><a href=\"https://github.com/xtermjs/xterm.js\">command界面:xterm.js</a></li>\n<li><a href=\"https://github.com/chromium/hterm\">command界面:hterm</a></li>\n<li><a href=\"https://github.com/jeremyfa/yaml.js\">处理yaml:yaml.js</a></li>\n<li><a href=\"https://github.com/nodeca/js-yaml\">yaml:js-yaml</a></li>\n<li><a href=\"https://github.com/ElemeFE/v-charts\">vue的echarts封装:v-charts</a></li>\n<li><a href=\"https://github.com/nuysoft/Mock\">mock:mockjs</a></li>\n<li><a href=\"https://github.com/gion/is-dark-color\">判断是否是黑色:is-dark-color</a></li>\n<li><a href=\"https://github.com/cure53/DOMPurify\">XSS过滤:DOMPurify</a></li>\n</ul>\n<h3 id=\"常用UI库\"><a href=\"#常用UI库\" class=\"headerlink\" title=\"常用UI库\"></a>常用UI库</h3><h4 id=\"移动端\"><a href=\"#移动端\" class=\"headerlink\" title=\"移动端\"></a>移动端</h4><ul>\n<li><p><a href=\"http://mint-ui.github.io/#!/zh-cn\">mint-ui</a></p>\n</li>\n<li><p><a href=\"https://youzan.github.io/vant/#/zh-CN/home\">Vant</a></p>\n</li>\n<li><p><a href=\"https://vux.li/\">VUX</a></p>\n</li>\n<li><p><a href=\"https://didi.github.io/cube-ui/\">cube-ui</a></p>\n</li>\n</ul>\n<h4 id=\"pc端\"><a href=\"#pc端\" class=\"headerlink\" title=\"pc端\"></a>pc端</h4><ul>\n<li><p>[element-ui](<a href=\"https://element.eleme.cn/2.13/#/zh-CN/component/\">https://element.eleme.cn/2.13/#/zh-CN/component/</a><br>installation）</p>\n</li>\n<li><p><a href=\"https://www.antdv.com/docs/vue/introduce-cn/\">Ant Design of Vue</a></p>\n</li>\n<li><p><a href=\"https://iviewui.com/\">iview/viewui/view-design</a></p>\n</li>\n<li><p><a href=\"https://avuejs.com/\">Avue</a></p>\n</li>\n<li><p><a href=\"https://vuetifyjs.com/\">vuetify</a></p>\n</li>\n</ul>\n<h3 id=\"常用配置\"><a href=\"#常用配置\" class=\"headerlink\" title=\"常用配置\"></a>常用配置</h3><h4 id=\"publicPath\"><a href=\"#publicPath\" class=\"headerlink\" title=\"publicPath\"></a>publicPath</h4><ol>\n<li>cli2 config/index.js<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">build: &#123;</span><br><span class=\"line\">    assetsPublicPath: <span class=\"string\">&#x27;./&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>cli3 vue.config.js<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    publicPath: <span class=\"string\">&#x27;./&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n部署应用包时的基本 URL。默认情况下，Vue CLI会假设你的应用是被部署在一个域名的根路径<br>上，例如<a href=\"https://www.my-app.com/%E3%80%82%E5%A6%82%E6%9E%9C%E5%BA%94%E7%94%A8%E8%A2%AB%E9%83%A8%E7%BD%B2%E5%9C%A8%E4%B8%80%E4%B8%AA%E5%AD%90%E8%B7%AF%E5%BE%84%E4%B8%8A%EF%BC%8C\">https://www.my-app.com/。如果应用被部署在一个子路径上，</a><br>你就需要用这个选项指定这个子路径。例如，如果你的应用被部署在<a href=\"https://www.my-app/\">https://www.my-app</a>.<br>com/my-app/，则设置publicPath为/my-app/</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxy: &#123; </span><br><span class=\"line\">    <span class=\"string\">&quot;/api&quot;</span>: &#123; <span class=\"comment\">//如果ajax请求的地址是http://192.168.0.118:9999/api1那么你就可以在ajax中使用/api/api1路径,其请求路径会解析</span></span><br><span class=\"line\">    <span class=\"comment\">// http://192.168.0.118:9999/api1，当然你在浏览器上看到的还是http://localhost:8080/api/api1;</span></span><br><span class=\"line\">    target: <span class=\"string\">&quot;http://192.168.0.118:9999&quot;</span>,</span><br><span class=\"line\">    <span class=\"comment\">//是否允许跨域，这里是在开发环境会起作用，但在生产环境下，还是由后台去处理，所以不必太在意</span></span><br><span class=\"line\">    changeOrigin: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    pathRewrite: &#123;</span><br><span class=\"line\">        <span class=\"comment\">//把多余的路径置为&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;api&quot;</span>: <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vue3\"><a href=\"#vue3\" class=\"headerlink\" title=\"vue3\"></a>vue3</h3><ol>\n<li>createApp</li>\n</ol>\n<ul>\n<li><p>vue2.x</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  render: <span class=\"function\">(<span class=\"params\">h</span>) =&gt;</span> h(App)</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>vue3新特性</p>\n<blockquote>\n<p>createApp 会产生一个 app 实例，该实例拥有全局的可配置上下文</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">createApp(App).mount(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"2\">\n<li>globalProperties<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.config.globalProperties.foo = <span class=\"string\">&#x27;bar&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.component(<span class=\"string\">&#x27;child-component&#x27;</span>, &#123;</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.foo) <span class=\"comment\">// &#x27;bar&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>添加可在程序内的任何组件实例中访问的全局属性。当存在键冲突时，组件属性将优先替代掉Vue2.x的 Vue.prototype属性放到原型上的写法</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Vue2.x</span></span><br><span class=\"line\">Vue.prototype.$http = <span class=\"function\">() =&gt;</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Vue3</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = Vue.createApp(&#123;&#125;)</span><br><span class=\"line\">app.config.globalProperties.$http = <span class=\"function\">() =&gt;</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>更快</li>\n</ol>\n<ul>\n<li>重写虚拟DOM (Virtual DOM Rewrite)</li>\n</ul>\n<p>随着虚拟 DOM 重写，我们可以期待更多的 编译时（compile-time）提示来减少 运行时（runtime）开销。重写将包括更有效的代码来创建虚拟节点。</p>\n<ul>\n<li>优化插槽生成(Optimized Slots Generation)</li>\n</ul>\n<p>在当前的 Vue 版本中，当父组件重新渲染时，其子组件也必须重新渲染。 使用 Vue 3 ，可以单独重新渲染父组件和子组件。</p>\n<ul>\n<li>静态树提升(Static Tree Hoisting)</li>\n</ul>\n<p>使用静态树提升，这意味着 Vue 3 的编译器将能够检测到什么是静态组件，然后将其提升，从而降低了渲染成本。它将能够跳过未整个树结构打补丁的过程。</p>\n<ul>\n<li>静态属性提升（Static Props Hoisting）</li>\n</ul>\n<p>此外，我们可以期待静态属性提升，其中 Vue 3 将跳过不会改变节点的打补丁过程。</p>\n<ul>\n<li><p>基于 Proxy 的观察者机制</p>\n</li>\n<li><p>更小<br>Vue已经非常小了，在运行时（runtime）压缩后大约 20kb 。 但我们可以期待它会变得更加小，新的核心运行时压缩后大概 10kb 。</p>\n</li>\n<li><p>使其更具可维护性<br>不仅会使用 TypeScript（允许在编辑器中进行高级的类型检查和有用的错误和警告） ，而且许多软件包将被解耦，使所有内容更加模块化。</p>\n</li>\n<li><p>更多的原生支持<br>运行时内核也将与平台无关，使得 Vue 可以更容易地与任何平台（例如Web，iOS或Android）一起使用。</p>\n</li>\n<li><p>更易于开发使用<br>当我们需要在 Vue 中共享两个组件之间的行为时，我们通常使用 Mixins 。然而，Evan 正在尝试使用 Hooks API 来避免来自 Mixins 的一些问题，并且更适合</p>\n</li>\n<li><p>使用惯用的 Vue 代码。<br>使用 Time Slicing，将 JS 的执行分解为几个部分，如果有用户交互需要处理，这些部分将提供给浏览器。</p>\n</li>\n</ul>\n<h3 id=\"element-ui使用中遇到的坑\"><a href=\"#element-ui使用中遇到的坑\" class=\"headerlink\" title=\"element-ui使用中遇到的坑\"></a>element-ui使用中遇到的坑</h3><ol>\n<li><p>不支持v-model修饰符导致如果使用.trim当数据拼接了’ ‘后，第一次点击数据中间编辑，光标会跳到末尾</p>\n</li>\n<li><p>el-table当注入的data经过过滤，所对应的$index还是原来的，导致删除splice对应的index不准确</p>\n</li>\n<li><p>在disabled的button上使用Tooltip失效， el-tooltip不显示(disable属性)</p>\n</li>\n<li><p>input-number 输入精度precision 既要编辑又要显示超出最小值</p>\n</li>\n<li><p>页面刷新、局部刷新</p>\n</li>\n</ol>\n<h3 id=\"转载\"><a href=\"#转载\" class=\"headerlink\" title=\"转载\"></a><a href=\"http://mydearest.cn/2020/vueInterview.html\">转载</a></h3>","site":{"data":{}},"excerpt":"<h3 id=\"vue-双向绑定的原理\"><a href=\"#vue-双向绑定的原理\" class=\"headerlink\" title=\"vue 双向绑定的原理\"></a>vue 双向绑定的原理</h3><p>采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调，实现视图刷新。</p>","more":"<p>具体流程：<br>Vue中先遍历data选项中所有的属性（发布者）用Object.defineProperty劫持这些属性将其转为getter/setter。读取数据时候会触发getter。修改数据时会触发setter。</p>\n<p>然后给每个属性对应new Dep()，Dep是专门收集依赖、删除依赖、向依赖发送消息的。先让每个依赖设置在Dep.target上，在Dep中创建一个依赖数组，先判断Dep.target是否已经在依赖中存在，不存在的话添加到依赖数组中完成依赖收集，随后将Dep.target置为上一个依赖。</p>\n<p>组件在挂载过程中都会new一个Watcher实例。这个实例就是依赖（订阅者）。Watcher第二参数是一个函数，此函数作用是更新且渲染节点。在首次渲染过程，会自动调用Dep方法来收集依赖，收集完成后组件中每个数据都绑定上该依赖。当数据变化时就会在setter中通知对应的依赖进行更新。在更新过程中要先读取数据，就会触发Wacther的第二个函数参数。一触发就再次自动调用Dep方法收集依赖，同时在此函数中运行patch（diff运算)来更新对应的DOM节点，完成了双向绑定。</p>\n<ul>\n<li>每一个组件默认都会创建一个 Watcher，自定义的 watch 和 computed 方法也会创建 Watcher </li>\n</ul>\n<h3 id=\"Object-defineProperty-实现双向绑定的缺点\"><a href=\"#Object-defineProperty-实现双向绑定的缺点\" class=\"headerlink\" title=\"Object.defineProperty()实现双向绑定的缺点\"></a>Object.defineProperty()实现双向绑定的缺点</h3><ol>\n<li>只能监听某个属性，不能监听整个对象</li>\n<li>需要使用for in遍历对象属性绑定监听</li>\n<li>不能监听数组，需要重写数组方法进行特异性操作</li>\n<li>会污染原对象</li>\n</ol>\n<h3 id=\"v-show和v-if有什么区别\"><a href=\"#v-show和v-if有什么区别\" class=\"headerlink\" title=\"v-show和v-if有什么区别\"></a>v-show和v-if有什么区别</h3><ul>\n<li><p>v-if（初始化不会渲染）<br>v-if 是真正的条件渲染，因为它会确保在切换过程中条件块内的事件监听和子组件适当地被销毁和重建，也是惰性的，如果在初始渲染条件为假时，则什么也不做——直到条件第一次变为真时才开始渲染条件块，能用在<code>&lt;template&gt;</code>上。</p>\n</li>\n<li><p>v-show（初始化会渲染）<br>v-show就简单得多，不管初始条件是什么，元素总是会被渲染，并且只是简单地基于css的display进行切换。</p>\n</li>\n</ul>\n<p>所以，v-if适用于切换不频繁的场景，v-show适用于切换频繁的场景，不能用在<code>&lt;template&gt;</code>上。</p>\n<h3 id=\"class和style如何动态绑定\"><a href=\"#class和style如何动态绑定\" class=\"headerlink\" title=\"class和style如何动态绑定\"></a>class和style如何动态绑定</h3><p>class可以通过对象语法和数组语法进行动态绑定：</p>\n<ul>\n<li><p>对象语法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;&#123;active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">    isActive: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    hasError: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组语法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;[isActive ? activeClass : &#x27;&#x27;, errorClass]&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">    activeClass: <span class=\"string\">&#x27;active&#x27;</span>,</span><br><span class=\"line\">    errorClass: <span class=\"string\">&#x27;text-danger&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>style也可以通过对象语法和数组语法进行动态绑定</p>\n</li>\n</ul>\n<h3 id=\"理解vue里的单向数据流\"><a href=\"#理解vue里的单向数据流\" class=\"headerlink\" title=\"理解vue里的单向数据流\"></a>理解vue里的单向数据流</h3><p>所有的prop都使得其父子prop之间形成一个单向下行绑定：父级prop的更新会向下流动到子组件中，但是反过来不行，这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流难以解释.</p>\n<p>额外地，每次父级组件发生更新时，子组件中的所有prop都会刷新为最新的值，这意味着你不应该在一个子组件内部改变prop，如果你这样做了，vue会在浏览器的控制台发出警告，子组件想修改时，只能通过$emit派发一个自定义事件，父组件接收到后，由父组件修改.</p>\n<blockquote>\n<p>双向数据流是指数据从父级向子级传递数据，子级可以通过一些手段改变父级向子级传递的数据。</p>\n</blockquote>\n<h3 id=\"computed和watch的区别和运用场景\"><a href=\"#computed和watch的区别和运用场景\" class=\"headerlink\" title=\"computed和watch的区别和运用场景\"></a>computed和watch的区别和运用场景</h3><ul>\n<li><p>computed：是计算属性，依赖其他属性值，并且computed的值有缓存，只有它依赖的属性值发生改变时下一次获取computed的值时候才会重新计算computed的值。避免在模板中放入太多的逻辑，导致模板过重且难以维护。当未发生改变时，则会返回上一次的数据。</p>\n</li>\n<li><p>watch：更多的是观察作用，类似于某些数据的监听回调，每当监听的数据发生变化时都会执行回调进行后续操作。</p>\n</li>\n<li><p>methods: 每次渲染时都需要重新执行。</p>\n</li>\n</ul>\n<p>简单的说：</p>\n<ul>\n<li><p>1.methods里面定义的是函数，你显然需要像”fuc()”这样去调用它（假设函数为fuc）。</p>\n</li>\n<li><p>2.computed是计算属性，事实上和和data对象里的数据属性是同一类的（使用上）。</p>\n</li>\n<li><p>3.watch:类似于监听机制+事件机制。</p>\n</li>\n</ul>\n<p>watch和computed的对比</p>\n<p>首先它们都是以Vue的依赖追踪机制为基础的，它们的共同点是：都是希望在依赖数据发生改变的时候，被依赖的数据根据预先定义好的函数，发生“自动”的变化。我们当然可以自己写代码完成这一切，但却很可能造成写法混乱，代码冗余的情况。</p>\n<p>但watch和computed也有明显不同的地方：</p>\n<p>watch和computed各自处理的数据关系场景不同</p>\n<ul>\n<li><p>1.watch擅长处理的场景：一个数据影响多个数据</p>\n</li>\n<li><p>2.computed擅长处理的场景：一个数据受多个数据影响</p>\n</li>\n</ul>\n<p>相比于watch/computed，methods不处理数据逻辑关系，只提供可调用的函数</p>\n<p>运用场景：</p>\n<ul>\n<li><p>当我们需要进行数值计算，并依赖于其他数据时，应该使用computed，因为可以利用computed的缓存特性，避免每次获取值时都要重新计算。</p>\n</li>\n<li><p>但我们需要在数据变化时执行异步或开销较大的操作时应该使用watch，使用watch选项允许我们执行异步操作，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态，这些都是计算属性无法做到的。</p>\n</li>\n</ul>\n<h3 id=\"直接给一个数组项赋值，vue能检测到吗\"><a href=\"#直接给一个数组项赋值，vue能检测到吗\" class=\"headerlink\" title=\"直接给一个数组项赋值，vue能检测到吗\"></a>直接给一个数组项赋值，vue能检测到吗</h3><ul>\n<li><p>由于js的限制(引用类型)，vue不能检测到以下数组的变动(对象属性的添加和删除)：</p>\n</li>\n<li><p>当你利用索引直接设置一个数组项时，例如vm.item[indexOfItem] = newValue</p>\n</li>\n<li><p>当你修改数组的长度时，例如vm.items.length = newLength</p>\n</li>\n</ul>\n<p>为了解决第一个问题，vue提供了以下操作方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.set(vm.items, indexOfItem, newValue)</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.$set(vm.items, indexOfItem, newValue)</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.$set(<span class=\"built_in\">this</span>.data,”key”,value) <span class=\"comment\">// 动态添加单个属性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 动态添加多个属性 </span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.obj = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, <span class=\"built_in\">this</span>.obj, &#123;</span><br><span class=\"line\">  age: <span class=\"number\">18</span>,</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;Chocolate&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.items.splice(indexOfItem, <span class=\"number\">1</span>, newValue)</span><br></pre></td></tr></table></figure>\n\n<p>为了解决第二个问题，vue提供了以下操作方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">vm.items.splice(newLength)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Vue 是不能检测对象属性的添加或删除<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        obj:&#123;</span><br><span class=\"line\">            name:<span class=\"string\">&#x27;Vue&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">mounted() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;zs&#x27;</span> <span class=\"comment\">// 不是响应式的</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$set(<span class=\"built_in\">this</span>.obj,<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;lisi&#x27;</span>) <span class=\"comment\">//响应式 解决添加</span></span><br><span class=\"line\">    <span class=\"comment\">// 用Object.assign来解决第二种情况。解决对象的删除</span></span><br><span class=\"line\">    <span class=\"comment\">// Vue.delete</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"delete和Vue-delete的区别\"><a href=\"#delete和Vue-delete的区别\" class=\"headerlink\" title=\"delete和Vue.delete的区别\"></a>delete和Vue.delete的区别</h3>delete 只是被删除的元素变成了empty/undefined，其他元素的键值还是不变的。而Vue.delete直接删除了数组，改变了数组的键值。</li>\n</ul>\n<h3 id=\"vue生命周期的理解（10个）\"><a href=\"#vue生命周期的理解（10个）\" class=\"headerlink\" title=\"vue生命周期的理解（10个）\"></a>vue生命周期的理解（10个）</h3><ul>\n<li><p>生命周期是什么(创建到销毁的过程)<br>vue实例有一个完整的生命周期，也就是从开始创建，初始化数据，编译模板，挂载dom-&gt;渲染更新-&gt;渲染卸载等一些过程，我们称这是vue的生命周期</p>\n</li>\n<li><p>各个生命周期的作用</p>\n<ul>\n<li>beforeCreate：组件被创建之初，组件的属性生效之前</li>\n<li>created：组件实例已经完全创建，属性也绑定，但是真实的dom还没有生成，$el还不能用(vue实例的数据对象data有了，el和数据对象data都为undefined，还<br>未初始化。)</li>\n<li>beforeMount：在挂载开始之前被调用，相关的render函数首次被调用</li>\n<li>mounted：el被新创建的vm.$el替换，并挂载到实例上去后调用该钩子</li>\n<li>beforeUpdate：组件数据更新之前调用，发生在虚拟dom打补丁之前 </li>\n<li>updated：组件数据更新之后</li>\n<li>activated：keep-alive专属，组件被激活时调用</li>\n<li>deactivated：keep-alive专属，组件被销毁时调用</li>\n<li>beforeDestroy：组件被销毁前</li>\n<li>destroyed：组件被销毁后调用</li>\n</ul>\n</li>\n<li><p><em>init</em></p>\n<ul>\n<li>initLifecycle/Event，往vm上挂载各种属性</li>\n<li>callHook: beforeCreate: 实例刚创建</li>\n<li>initInjection/initState: 初始化注入和 data 响应性</li>\n<li>created: 创建完成，属性已经绑定， 但还未生成真实dom</li>\n<li>进行元素的挂载： $el / vm.$mount()</li>\n<li>是否有template: 解析成render function<ul>\n<li>*.vue文件: vue-loader会将<code>&lt;template&gt;</code>编译成render function</li>\n</ul>\n</li>\n<li>beforeMount: 模板编译/挂载之前</li>\n<li>执行render function，生成真实的dom，并替换到dom tree中</li>\n<li>mounted: 组件已挂载</li>\n</ul>\n</li>\n<li><p>update:</p>\n<ul>\n<li>执行diff算法，比对改变是否需要触发UI更新</li>\n<li>flushScheduleQueue<ul>\n<li>watcher.before: 触发beforeUpdate钩子        </li>\n<li>watcher.run(): 执行watcher中的 notify，通知所有依赖项更新UI</li>\n</ul>\n</li>\n<li>触发updated钩子: 组件已更新</li>\n</ul>\n</li>\n<li><p>actived / deactivated(keep-alive): 不销毁，缓存，组件激活与失活</p>\n</li>\n<li><p>destroy:</p>\n<ul>\n<li>beforeDestroy: 销毁开始</li>\n<li>销毁自身且递归销毁子组件以及事件监听<ul>\n<li>remove(): 删除节点</li>\n<li>watcher.teardown(): 清空依赖</li>\n<li>vm.$off(): 解绑监听</li>\n</ul>\n</li>\n<li>destroyed: 完成后触发钩子</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化Vue实例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_init</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t <span class=\"comment\">// 挂载属性</span></span><br><span class=\"line\">    initLifeCycle(vm) </span><br><span class=\"line\">    <span class=\"comment\">// 初始化事件系统，钩子函数等</span></span><br><span class=\"line\">    initEvent(vm) </span><br><span class=\"line\">    <span class=\"comment\">// 编译slot、vnode</span></span><br><span class=\"line\">    initRender(vm) </span><br><span class=\"line\">    <span class=\"comment\">// 触发钩子</span></span><br><span class=\"line\">    callHook(vm, <span class=\"string\">&#x27;beforeCreate&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 添加inject功能</span></span><br><span class=\"line\">    initInjection(vm)</span><br><span class=\"line\">    <span class=\"comment\">// 完成数据响应性 props/data/watch/computed/methods</span></span><br><span class=\"line\">    initState(vm)</span><br><span class=\"line\">    <span class=\"comment\">// 添加 provide 功能</span></span><br><span class=\"line\">    initProvide(vm)</span><br><span class=\"line\">    <span class=\"comment\">// 触发钩子</span></span><br><span class=\"line\">    callHook(vm, <span class=\"string\">&#x27;created&#x27;</span>)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t <span class=\"comment\">// 挂载节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vm.$options.el) &#123;</span><br><span class=\"line\">        vm.$mount(vm.$options.el)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 挂载节点实现</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mountComponent</span>(<span class=\"params\">vm</span>) </span>&#123;</span><br><span class=\"line\">\t <span class=\"comment\">// 获取 render function</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.options.render) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// template to render</span></span><br><span class=\"line\">        <span class=\"comment\">// Vue.compile = compileToFunctions</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123; render &#125; = compileToFunctions() </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.options.render = render</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 触发钩子</span></span><br><span class=\"line\">    callHook(<span class=\"string\">&#x27;beforeMount&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 初始化观察者</span></span><br><span class=\"line\">    <span class=\"comment\">// render 渲染 vdom， </span></span><br><span class=\"line\">    vdom = vm.render()</span><br><span class=\"line\">    <span class=\"comment\">// update: 根据 diff 出的 patchs 挂载成真实的 dom </span></span><br><span class=\"line\">    vm._update(vdom)</span><br><span class=\"line\">    <span class=\"comment\">// 触发钩子  </span></span><br><span class=\"line\">    callHook(vm, <span class=\"string\">&#x27;mounted&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更新节点实现</span></span><br><span class=\"line\">funtion queueWatcher(watcher) &#123;</span><br><span class=\"line\">\tnextTick(flushScheduleQueue)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 清空队列</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flushScheduleQueue</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t <span class=\"comment\">// 遍历队列中所有修改</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>()&#123;</span><br><span class=\"line\">\t    <span class=\"comment\">// beforeUpdate</span></span><br><span class=\"line\">        watcher.before()</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">// 依赖局部更新节点</span></span><br><span class=\"line\">        watcher.update() </span><br><span class=\"line\">        callHook(<span class=\"string\">&#x27;updated&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 销毁实例实现</span></span><br><span class=\"line\">Vue.prototype.$destory = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t <span class=\"comment\">// 触发钩子</span></span><br><span class=\"line\">    callHook(vm, <span class=\"string\">&#x27;beforeDestory&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 自身及子节点</span></span><br><span class=\"line\">    remove() </span><br><span class=\"line\">    <span class=\"comment\">// 删除依赖</span></span><br><span class=\"line\">    watcher.teardown() </span><br><span class=\"line\">    <span class=\"comment\">// 删除监听</span></span><br><span class=\"line\">    vm.$off() </span><br><span class=\"line\">    <span class=\"comment\">// 触发钩子</span></span><br><span class=\"line\">    callHook(vm, <span class=\"string\">&#x27;destoryed&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vue父子组件生命周期钩子函数的执行顺序\"><a href=\"#vue父子组件生命周期钩子函数的执行顺序\" class=\"headerlink\" title=\"vue父子组件生命周期钩子函数的执行顺序\"></a>vue父子组件生命周期钩子函数的执行顺序</h3><ul>\n<li><p>加载渲染过程<br>父beforeCreate-&gt;父created-&gt;父beforeMount-&gt;子beforeCreate-&gt;子created-&gt;子beforeMount-&gt;子mounted-&gt;父mounted</p>\n</li>\n<li><p>子组件更新过程<br>父beforeUpdate-&gt;子beforeUpdate-&gt;子updated-&gt;父updated</p>\n</li>\n<li><p>父组件更新过程<br>父beforeUpdate-&gt;父updated</p>\n</li>\n<li><p>销毁过程<br>父beforeDestroy-&gt;子beforeDestroy-&gt;子destroyed-&gt;父destroy</p>\n</li>\n</ul>\n<h3 id=\"在哪个生命周期内调用异步请求\"><a href=\"#在哪个生命周期内调用异步请求\" class=\"headerlink\" title=\"在哪个生命周期内调用异步请求\"></a>在哪个生命周期内调用异步请求</h3><p>可以在函数created，beforeMount，mounted中进行调用，因为在这三个钩子函数中data已经可以创建，可以将服务端返回的数据进行赋值，但是比较推荐在created钩子函数中调用异步请求，因为：</p>\n<ul>\n<li><p>能更快的获取到服务端数据，减少页面loading时间</p>\n</li>\n<li><p>ssr不支持beforeMount，mounted钩子函数，所以放在created中有助于一致性</p>\n</li>\n<li><p>mounted里能够操作dom</p>\n</li>\n</ul>\n<h3 id=\"在什么阶段才能访问操作DOM\"><a href=\"#在什么阶段才能访问操作DOM\" class=\"headerlink\" title=\"在什么阶段才能访问操作DOM\"></a>在什么阶段才能访问操作DOM</h3><p>在钩子函数mounted被调用之前，vue已经把编译好的模板挂载到页面上，所以在mounted中可以访问操作dom，vue具体的生命周期。</p>\n<h3 id=\"父组件可以监听到子组件的生命周期吗\"><a href=\"#父组件可以监听到子组件的生命周期吗\" class=\"headerlink\" title=\"父组件可以监听到子组件的生命周期吗\"></a>父组件可以监听到子组件的生命周期吗</h3><ul>\n<li><p>手动设置$emit来发布监听</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// parent</span></span><br><span class=\"line\">&lt;Child @mounted=<span class=\"string\">&quot;fn&quot;</span> /&gt;</span><br><span class=\"line\"><span class=\"comment\">// child</span></span><br><span class=\"line\">mounted() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$emit(<span class=\"string\">&quot;mounted&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>@hook</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// parent</span></span><br><span class=\"line\">&lt;Child @hook:mounted=<span class=\"string\">&quot;fn&quot;</span> /&gt;</span><br><span class=\"line\">fn() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;get&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// child</span></span><br><span class=\"line\">mounted() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;emit&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"谈谈你对keep-alive的了解\"><a href=\"#谈谈你对keep-alive的了解\" class=\"headerlink\" title=\"谈谈你对keep-alive的了解\"></a>谈谈你对keep-alive的了解</h3><p>keep-alive是vue内置的一个组件，可以使被包含的组件保留状态，避免重复渲染，其有以下特性：</p>\n<ul>\n<li>一般结合路由和动态组件使用，用于缓存组件</li>\n<li>提供include和exclude属性，两者都支持字符串或正则表达式，include表示只有名字匹配的组件会被缓存，exclude表示任何名称匹配的组件都不会被缓存，其中exclude的优先级比include高</li>\n<li>对应两个钩子函数actived和deactivated</li>\n</ul>\n<h3 id=\"组件中的data为什么是个函数\"><a href=\"#组件中的data为什么是个函数\" class=\"headerlink\" title=\"组件中的data为什么是个函数\"></a>组件中的data为什么是个函数</h3><p>因为组件是拿来复用的，且js里的对象是引用关系，如果组件中的data是一个对象，那么这样作用域没有隔离，子组件中的data属性值会相互影响，如果组件中的data是一个函数，那么每个实例可以维护一份被返回对象的独立的拷贝，组件实例之间的data属性值不会互相影响，而new Vue的实例是不会被复用的，因此不存在引用对象的问题。</p>\n<h3 id=\"v-model的原理\"><a href=\"#v-model的原理\" class=\"headerlink\" title=\"v-model的原理\"></a>v-model的原理</h3><p>我们在vue项目中主要使用v-model指令在表单input，textarea，select等元素上创建双向绑定，我们知道v-model本质上不过是语法糖，v-model在内部为不同的输入元素使用不同的属性并抛出不同的事件：</p>\n<ul>\n<li>text和textarea元素使用value属性和input事件</li>\n<li>checkbox和radio使用checked和change</li>\n<li>select字段将value作为prop并将change作为事件</li>\n</ul>\n<h3 id=\"vue组件间通信有哪几种方式（6种）\"><a href=\"#vue组件间通信有哪几种方式（6种）\" class=\"headerlink\" title=\"vue组件间通信有哪几种方式（6种）\"></a>vue组件间通信有哪几种方式（6种）</h3><ul>\n<li><p>props和$emit<br>适用父子组件通信</p>\n</li>\n<li><p>ref和$parent $children<br>ref：如果在普通dom上使用，引用指向的就是dom元素，如果用在子组件上，引用就指向组件实例 $parent/$children：访问父子实例</p>\n</li>\n<li><p>EventBus（$emit/$on）<br>这种方法通过一个空的vue实例作为中央事件总线（事件中心），用它来触发事件和监听事件，从而实现任何组件间的通信，包括父子，隔代，兄弟组件</p>\n</li>\n<li><p>$attrs/$listeners<br>$attrs：包含了父作用域里不被prop所识别（且获取）的特性绑定（class和style除外）。当一个组件没有声明任何prop时，这里会包含所有父作用域的绑定（class和style除外），并且可以通过v-bind=”$attrs”传入内部组件。通常配合inheritAttrs选项一起使用</p>\n</li>\n</ul>\n<p>$listeners：包含了父作用域中的v-on事件监听器，它可以通过v-on=”$listeners”传入内部组件</p>\n<ul>\n<li><p>provide、inject<br>祖先组件通过provide来提供变量，然后在子孙组件中通过inject来注入变量，provide / inject API主要解决了跨级组件间的通信问题，不过他的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立一种主动提供和依赖注入的关系</p>\n</li>\n<li><p>vuex<br>vuex是一个专为vue应用程序开发的状态管理模式，每一个vuex应用的核心就是store，store基本上就是一仓库，它包含着你的应用中大部分的状态</p>\n</li>\n</ul>\n<p>vuex的状态存储是响应式的，当vue从store中读取状态时候，若store中的状态发生变化，那么相应的组件也会相应的得到高效更新</p>\n<p>改变store中的状态的唯一的途径就是显式地提交mutation，这样使我们可以方便地跟踪每一个状态的变化</p>\n<h3 id=\"你使用过vuex吗\"><a href=\"#你使用过vuex吗\" class=\"headerlink\" title=\"你使用过vuex吗\"></a>你使用过vuex吗</h3><p>vuex是一个专门为vue应用程序开发的状态管理模式，每一个vuex应用的核心是store，store基本上就是一个容器，它包含着你的应用中大部分的状态（state）</p>\n<p>主要包括以下几个模块：</p>\n<ul>\n<li>state：定义了应用状态的数据结构，可以在这里设置默认的初始状态</li>\n<li>Getters：允许组件从State中获取数据，mapGetters辅助函数仅仅是将store中的getter映射到局部计算属性</li>\n<li>Mutations：是唯一更改store中状态的方法，且必须是同步函数</li>\n<li>Actions：用于提交mutation，而不是直接更改状态，可以包含任意的异步操作</li>\n<li>Modules：允许将单一的Store拆分成多个store且同时保存在单一的状态树里</li>\n</ul>\n<h3 id=\"vuex解决了什么问题\"><a href=\"#vuex解决了什么问题\" class=\"headerlink\" title=\"vuex解决了什么问题\"></a>vuex解决了什么问题</h3><ol>\n<li><p>多个组件依赖同一状态，多层嵌套繁琐，兄弟组件没办法传值通信。</p>\n</li>\n<li><p>不同组件的行为需要修改同一状态</p>\n</li>\n</ol>\n<h3 id=\"Vuex中状态是对象时，使用时要注意什么？\"><a href=\"#Vuex中状态是对象时，使用时要注意什么？\" class=\"headerlink\" title=\"Vuex中状态是对象时，使用时要注意什么？\"></a>Vuex中状态是对象时，使用时要注意什么？</h3><p>因为对象是引用类型，复制后改变属性还是会影响原始数据，这样会改变state里面的状态，是不允许，所以先用深度克隆复制对象，再修改。</p>\n<h3 id=\"组件中批量使用Vuex的state状态\"><a href=\"#组件中批量使用Vuex的state状态\" class=\"headerlink\" title=\"组件中批量使用Vuex的state状态\"></a>组件中批量使用Vuex的state状态</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;mapState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>&#123;</span><br><span class=\"line\">    computed:&#123;</span><br><span class=\"line\">        ...mapState([<span class=\"string\">&#x27;price&#x27;</span>,<span class=\"string\">&#x27;number&#x27;</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Vuex中要从state派生一些状态出来，且多个组件使用它\"><a href=\"#Vuex中要从state派生一些状态出来，且多个组件使用它\" class=\"headerlink\" title=\"Vuex中要从state派生一些状态出来，且多个组件使用它\"></a>Vuex中要从state派生一些状态出来，且多个组件使用它</h3><p>使用getter属性，相当Vue中的计算属性computed，只有原状态改变派生状态才会改变。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    state: &#123;</span><br><span class=\"line\">        price: <span class=\"number\">10</span>,</span><br><span class=\"line\">        number: <span class=\"number\">10</span>,</span><br><span class=\"line\">        discount: <span class=\"number\">0.7</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getters: &#123;</span><br><span class=\"line\">        total: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> state.price * state.number</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        discountTotal: <span class=\"function\">(<span class=\"params\">state, getters</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> state.discount * getters.total</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        getTodoById: <span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> <span class=\"function\">(<span class=\"params\">id</span>) =&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> state.todos.find(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span> todo.id === id)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">    total() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.$store.getters.total</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    discountTotal() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.$store.getters.discountTotal</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getTodoById() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.$store.getters.getTodoById</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...mapGetters([<span class=\"string\">&#x27;total&#x27;</span>,<span class=\"string\">&#x27;discountTotal&#x27;</span>]), <span class=\"comment\">// 批量使用getter属性</span></span><br><span class=\"line\">    ...mapGetters(&#123;</span><br><span class=\"line\">        myTotal:<span class=\"string\">&#x27;total&#x27;</span>,</span><br><span class=\"line\">        myDiscountTotal:<span class=\"string\">&#x27;discountTotal&#x27;</span>,</span><br><span class=\"line\">    &#125;) <span class=\"comment\">// 取别名</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">mounted()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.getTodoById(<span class=\"number\">2</span>).done)<span class=\"comment\">//false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在getter中可以通过第三个参数rootState访问到全局的state,可以通过第四个参数rootGetters访问到全局的getter。</li>\n<li>在mutation中不可以访问全局的state和getter，只能访问到局部的state。</li>\n<li>在action中第一个参数context中的context.rootState访问到全局的state，context.rootGetters访问到全局的getter。</li>\n</ul>\n<h3 id=\"在组件中多次提交同一个mutation-action\"><a href=\"#在组件中多次提交同一个mutation-action\" class=\"headerlink\" title=\"在组件中多次提交同一个mutation,action\"></a>在组件中多次提交同一个mutation,action</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    ...mapMutations(&#123;</span><br><span class=\"line\">        setNumber:<span class=\"string\">&#x27;SET_NUMBER&#x27;</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    ...mapActions(&#123;</span><br><span class=\"line\">        setNumber:<span class=\"string\">&#x27;SET_NUMBER&#x27;</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>this.setNumber(10)相当调用this.$store.commit(‘SET_NUMBER’,10)</p>\n<h3 id=\"Vuex中action和mutation有什么区别？\"><a href=\"#Vuex中action和mutation有什么区别？\" class=\"headerlink\" title=\"Vuex中action和mutation有什么区别？\"></a>Vuex中action和mutation有什么区别？</h3><ol>\n<li>action 提交的是 mutation，而不是直接变更状态。mutation可以直接变更状态。</li>\n<li>action 可以包含任意异步操作。mutation只能是同步操作。</li>\n<li>提交方式不同，action 是用this.$store.dispatch(‘ACTION_NAME’,data)来提交。mutation是用this.$store.commit(‘SET_NUMBER’,10)来提交。</li>\n<li>接收参数不同：<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    state,      <span class=\"comment\">// 等同于 `store.state`，若在模块中则为局部状态</span></span><br><span class=\"line\">    rootState,  <span class=\"comment\">// 等同于 `store.state`，只存在于模块中</span></span><br><span class=\"line\">    commit,     <span class=\"comment\">// 等同于 `store.commit`</span></span><br><span class=\"line\">    dispatch,   <span class=\"comment\">// 等同于 `store.dispatch`</span></span><br><span class=\"line\">    getters,    <span class=\"comment\">// 等同于 `store.getters`</span></span><br><span class=\"line\">    rootGetters <span class=\"comment\">// 等同于 `store.getters`，只存在于模块中</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n多个actions，A结束后再执行其他操作<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">actions:&#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span> actionA(&#123;commit&#125;)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">async</span> actionB(&#123;dispatch&#125;)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> dispatch (<span class=\"string\">&#x27;actionA&#x27;</span>)<span class=\"comment\">//等待actionA完成</span></span><br><span class=\"line\">        <span class=\"comment\">// ... </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>&#123;</span><br><span class=\"line\">    namespaced: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    state,</span><br><span class=\"line\">    getters,</span><br><span class=\"line\">    mutations,</span><br><span class=\"line\">    actions</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>怎么在带命名空间的模块内提交全局的mutation和action？<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.$store.dispatch(<span class=\"string\">&#x27;actionA&#x27;</span>, <span class=\"literal\">null</span>, &#123; <span class=\"attr\">root</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\"><span class=\"built_in\">this</span>.$store.commit(<span class=\"string\">&#x27;mutationA&#x27;</span>, <span class=\"literal\">null</span>, &#123; <span class=\"attr\">root</span>: <span class=\"literal\">true</span> &#125;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"在Vuex插件中怎么监听组件中提交mutation和action？\"><a href=\"#在Vuex插件中怎么监听组件中提交mutation和action？\" class=\"headerlink\" title=\"在Vuex插件中怎么监听组件中提交mutation和action？\"></a>在Vuex插件中怎么监听组件中提交mutation和action？</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPlugin</span>(<span class=\"params\">param</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">store</span> =&gt;</span> &#123;</span><br><span class=\"line\">        store.subscribe(<span class=\"function\">(<span class=\"params\">mutation, state</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(mutation.type)<span class=\"comment\">//是那个mutation</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(mutation.payload)</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(state)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// store.subscribeAction((action, state) =&gt; &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     console.log(action.type)//是那个action</span></span><br><span class=\"line\">        <span class=\"comment\">//     console.log(action.payload)//提交action的参数</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">        store.subscribeAction(&#123;</span><br><span class=\"line\">            before: <span class=\"function\">(<span class=\"params\">action, state</span>) =&gt;</span> &#123;<span class=\"comment\">//提交action之前</span></span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">`before action <span class=\"subst\">$&#123;action.type&#125;</span>`</span>)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            after: <span class=\"function\">(<span class=\"params\">action, state</span>) =&gt;</span> &#123;<span class=\"comment\">//提交action之后</span></span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">`after action <span class=\"subst\">$&#123;action.type&#125;</span>`</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在v-model上怎么用Vuex中state的值？\"><a href=\"#在v-model上怎么用Vuex中state的值？\" class=\"headerlink\" title=\"在v-model上怎么用Vuex中state的值？\"></a>在v-model上怎么用Vuex中state的值？</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;input v-model=<span class=\"string\">&quot;message&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">    message: &#123;</span><br><span class=\"line\">        get () &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.$store.state.message</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        set (value) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.$store.commit(<span class=\"string\">&#x27;updateMessage&#x27;</span>, value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vue-router全局导航守卫\"><a href=\"#vue-router全局导航守卫\" class=\"headerlink\" title=\"vue router全局导航守卫\"></a>vue router全局导航守卫</h3><p>三个参数</p>\n<ul>\n<li>to：即将要进入的目标 路由对象。</li>\n<li>from：当前导航正要离开的路由对象。</li>\n<li>next：函数，必须调用，不然路由跳转不过去。</li>\n</ul>\n<p>next()：进入下一个路由。<br>next(false)：中断当前的导航。<br>next(‘/‘)或next({ path: ‘/‘ }) : 跳转到其他路由，当前导航被中断，进行新的一个导航。</p>\n<ul>\n<li>router.beforeEach：全局前置守卫。</li>\n<li>router.beforeResolve：全局解析守卫。</li>\n<li>router.afterEach：全局后置钩子。</li>\n</ul>\n<h3 id=\"路由独享守卫\"><a href=\"#路由独享守卫\" class=\"headerlink\" title=\"路由独享守卫\"></a>路由独享守卫</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    routes: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            path: <span class=\"string\">&#x27;/foo&#x27;</span>,</span><br><span class=\"line\">            component: Foo,</span><br><span class=\"line\">            beforeEnter: <span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"组件内导航守卫\"><a href=\"#组件内导航守卫\" class=\"headerlink\" title=\"组件内导航守卫\"></a>组件内导航守卫</h3><ul>\n<li>beforeRouteLeave：在失活的组件里调用离开守卫。</li>\n<li>beforeRouteUpdate：在重用的组件里调用,比如包含<code>&lt;router-view /&gt;</code>的组件。</li>\n<li>beforeRouteEnter：在进入对应路由的组件创建前调用。</li>\n</ul>\n<h3 id=\"router-link\"><a href=\"#router-link\" class=\"headerlink\" title=\"router-link\"></a>router-link</h3><p><code>&lt;router-link&gt;</code>是Vue-Router的内置组件，在具有路由功能的应用中作为声明式的导航使用。类似react的Link标签</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;home&quot;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#x27;home&#x27;&quot;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123; path: &#x27;home&#x27; &#125;&quot;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123; name: &#x27;user&#x27;, params: &#123; userId: 123 &#125;&#125;&quot;</span>&gt;</span>User<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123; path: &#x27;user&#x27;, query: &#123; userId: 123 &#125;&#125;&quot;</span>&gt;</span>User<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注册在router-link上事件无效解决方法:<br>使用@click.native。原因：router-link会阻止click事件，.native指直接监听一个原生事件</p>\n<p>在ie和firefox无效：</p>\n<ol>\n<li>使用a标签不用Button</li>\n<li>使用Button和Router.navigate方法</li>\n</ol>\n<h3 id=\"vue-router\"><a href=\"#vue-router\" class=\"headerlink\" title=\"vue-router\"></a>vue-router</h3><ul>\n<li>mode<ul>\n<li>hash</li>\n<li>history</li>\n</ul>\n</li>\n<li>跳转<ul>\n<li>this.$router.push()</li>\n<li><code>&lt;router-link to=&quot;&quot;&gt;&lt;/router-link&gt;</code></li>\n</ul>\n</li>\n<li>占位<ul>\n<li><code>&lt;router-view&gt;&lt;/router-view&gt;</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Vue-router-跳转和-location-href-有什么区别？\"><a href=\"#Vue-router-跳转和-location-href-有什么区别？\" class=\"headerlink\" title=\"Vue router 跳转和 location.href 有什么区别？\"></a>Vue router 跳转和 location.href 有什么区别？</h3><p><code>router</code> 是 <code>hash</code> 改变<br><code>location.href</code> 是页面跳转，刷新页面</p>\n<h3 id=\"Vue-router-除了-router-link-怎么实现跳转\"><a href=\"#Vue-router-除了-router-link-怎么实现跳转\" class=\"headerlink\" title=\"Vue router 除了 router-link 怎么实现跳转?\"></a>Vue router 除了 router-link 怎么实现跳转?</h3><figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">router</span><span class=\"selector-class\">.go</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"selector-tag\">router</span><span class=\"selector-class\">.push</span>(<span class=\"string\">&#x27;/&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"params和query的区别\"><a href=\"#params和query的区别\" class=\"headerlink\" title=\"params和query的区别\"></a>params和query的区别</h3><p>query需要path引入，params需要name引入<br>this.$route.query.name、this.$route.params.query</p>\n<blockquote>\n<p>注意点：query刷新不会丢失query数据，params刷新会丢失数据</p>\n</blockquote>\n<h3 id=\"组件内监听路由的变化\"><a href=\"#组件内监听路由的变化\" class=\"headerlink\" title=\"组件内监听路由的变化\"></a>组件内监听路由的变化</h3><p>只能用在包含<router-view />的组件内</p>\n<ol>\n<li><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;$route&#x27;</span>(to, <span class=\"keyword\">from</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//这里监听</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">beforeRouteUpdate (to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里监听</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"切换新路由的滚动条处理\"><a href=\"#切换新路由的滚动条处理\" class=\"headerlink\" title=\"切换新路由的滚动条处理\"></a>切换新路由的滚动条处理</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">    mode: <span class=\"string\">&#x27;history&#x27;</span>,</span><br><span class=\"line\">    base: process.env.BASE_URL,</span><br><span class=\"line\">    routes,</span><br><span class=\"line\">    scrollBehavior(to, <span class=\"keyword\">from</span>, savedPosition) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (savedPosition) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> savedPosition;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123; <span class=\"attr\">x</span>: <span class=\"number\">0</span>, <span class=\"attr\">y</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"路由传参获取方式\"><a href=\"#路由传参获取方式\" class=\"headerlink\" title=\"路由传参获取方式\"></a>路由传参获取方式</h3><ol>\n<li><p>meta：路由元信息，写在routes配置文件中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    path: <span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;home&#x27;</span>,</span><br><span class=\"line\">    component: load(<span class=\"string\">&#x27;home&#x27;</span>),</span><br><span class=\"line\">    meta: &#123;</span><br><span class=\"line\">        title: <span class=\"string\">&#x27;首页&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>this.$route.meta.title</p>\n</blockquote>\n</li>\n<li><p>query</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.$router.push(&#123;</span><br><span class=\"line\">    path:<span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">    query: &#123;</span><br><span class=\"line\">        userId:<span class=\"number\">123</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>this.$route.query.userId</p>\n</blockquote>\n</li>\n<li><p>params</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    path: <span class=\"string\">&#x27;/home/:userId&#x27;</span>,</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;home&#x27;</span>,</span><br><span class=\"line\">    component: load(<span class=\"string\">&#x27;home&#x27;</span>),</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 注意用params传参，只能用命名的路由（用name访问）</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> userId = <span class=\"string\">&#x27;123&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$router.push(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;home&#x27;</span>, <span class=\"attr\">params</span>: &#123; userId &#125; &#125;)</span><br><span class=\"line\"><span class=\"comment\">// this.$route.params</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"实现动态加载路由\"><a href=\"#实现动态加载路由\" class=\"headerlink\" title=\"实现动态加载路由\"></a>实现动态加载路由</h3><ul>\n<li><p>使用Router的实例方法addRoutes来实现动态加载路由，一般用来实现菜单权限。</p>\n</li>\n<li><p>使用时要注意，静态路由文件中不能有404路由，而要通过addRoutes一起动态添加进去。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">webpack&lt; <span class=\"number\">2.4</span> 时</span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    path:<span class=\"string\">&#x27;/&#x27;</span>, </span><br><span class=\"line\">    name:<span class=\"string\">&#x27;home&#x27;</span>,</span><br><span class=\"line\">    components:<span class=\"function\"><span class=\"params\">resolve</span>=&gt;</span><span class=\"built_in\">require</span>([<span class=\"string\">&#x27;@/components/home&#x27;</span>],resolve)</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">webpack&gt; <span class=\"number\">2.4</span> 时</span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    path:<span class=\"string\">&#x27;/&#x27;</span>, </span><br><span class=\"line\">    name:<span class=\"string\">&#x27;home&#x27;</span>, </span><br><span class=\"line\">    components:<span class=\"function\">()=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">&#x27;@/components/home&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"路由之间跳转\"><a href=\"#路由之间跳转\" class=\"headerlink\" title=\"路由之间跳转\"></a>路由之间跳转</h3><ol>\n<li><p>声明式<br>通过使用内置组件<router-link :to=\"/home\">来跳转 or router-link :to=”{name:’index’}”&gt;</p>\n</li>\n<li><p>编程式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.$router.push(&#123; <span class=\"attr\">path</span>:<span class=\"string\">&#x27;home&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"built_in\">this</span>.$router.replace(&#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/home&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"built_in\">this</span>.$router.push(&#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;组件名&#x27;</span>)&#125;;</span><br></pre></td></tr></table></figure>\n<p>$router和$route的区别</p>\n<blockquote>\n<p>$route为当前router跳转对象，里面可以获取name、path、query、params等<br>$router为VueRouter实例，想要导航到不同URL，则使用router.push方法，返回上一个历史$router.to(-1)</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"打开新窗口\"><a href=\"#打开新窗口\" class=\"headerlink\" title=\"打开新窗口\"></a>打开新窗口</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    path: xxx,<span class=\"comment\">//路由地址</span></span><br><span class=\"line\">    query: &#123;</span><br><span class=\"line\">       mid: data.id<span class=\"comment\">//可以带参数</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;href&#125; = <span class=\"built_in\">this</span>.$router.resolve(obj);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.open(href, <span class=\"string\">&#x27;_blank&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态绑定Class和Style\"><a href=\"#动态绑定Class和Style\" class=\"headerlink\" title=\"动态绑定Class和Style\"></a>动态绑定Class和Style</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--第一种对象语法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;test&quot;</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123;active:actived,&#x27;active-click&#x27;: clicked&amp;&amp;actived&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 第二种数组语法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;test&quot;</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;[actived?activeClass : &#x27;&#x27;, clicked&amp;&amp;actived?activeClickClass : &#x27;&#x27;]&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 第三种对象和数组混合 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;[testClass,&#123;active:actived&#125;,&#123;&#x27;active-click&#x27;:clicked&amp;&amp;actived&#125;]&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 第四种对象和计算属性(推荐) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;classObject&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"过滤器-filter\"><a href=\"#过滤器-filter\" class=\"headerlink\" title=\"过滤器(filter)\"></a>过滤器(filter)</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123;money | moneyFilter(0.15)&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span>美元&lt;/div&gt;</span><br><span class=\"line\">&lt;div&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123;money | moneyFilter(0.12)&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span>英镑&lt;/div&gt;</span><br><span class=\"line\">filters: &#123;</span><br><span class=\"line\">    moneyFilter: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val, ratio</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Number</span>(val * ratio).toFixed(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>除了用在插值上还可以用在v-bind表达式上。</p>\n<h3 id=\"computed中的属性名和data中的属性名可以相同吗？也不能和method中属性同名\"><a href=\"#computed中的属性名和data中的属性名可以相同吗？也不能和method中属性同名\" class=\"headerlink\" title=\"computed中的属性名和data中的属性名可以相同吗？也不能和method中属性同名\"></a>computed中的属性名和data中的属性名可以相同吗？也不能和method中属性同名</h3><p>不能同名，因为不管是computed属性名还是data数据名还是props数据名都会被挂载在vm实例上，因此这三个都不能同名。</p>\n<h3 id=\"watch的属性使用箭头函数定义可以吗？\"><a href=\"#watch的属性使用箭头函数定义可以吗？\" class=\"headerlink\" title=\"watch的属性使用箭头函数定义可以吗？\"></a>watch的属性使用箭头函数定义可以吗？</h3><p>不可以。this会是undefind,因为箭头函数中的this指向的是定义时的this，而不是执行时的this，所以不会指向Vue实例的上下文。</p>\n<h3 id=\"watch怎么深度监听对象变化\"><a href=\"#watch怎么深度监听对象变化\" class=\"headerlink\" title=\"watch怎么深度监听对象变化\"></a>watch怎么深度监听对象变化</h3><p>监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">watch:&#123;</span><br><span class=\"line\">   a:&#123;</span><br><span class=\"line\">       handler:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val,oldval</span>)</span>&#123;</span><br><span class=\"line\">           </span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">       deep:<span class=\"literal\">true</span>, <span class=\"comment\">// 一层层遍历给属性都加上监听器</span></span><br><span class=\"line\">       immediate: <span class=\"literal\">true</span> <span class=\"comment\">// 组件加载立即触发回调函数执行</span></span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"string\">&#x27;obj.a&#x27;</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"强制刷新组件\"><a href=\"#强制刷新组件\" class=\"headerlink\" title=\"强制刷新组件\"></a>强制刷新组件</h3><ul>\n<li>this.$forceUpdate()。</li>\n<li>组件上加上key，然后变化key的值。</li>\n</ul>\n<h3 id=\"访问子组件实例或者子元素\"><a href=\"#访问子组件实例或者子元素\" class=\"headerlink\" title=\"访问子组件实例或者子元素\"></a>访问子组件实例或者子元素</h3><ol>\n<li>ref<br>先用ref特性为子组件赋予一个ID引用<base-input ref=\"myInput\">&lt;/<base-input></li>\n</ol>\n<p>比如子组件有个focus的方法，可以这样调用this.$refs.myInput.focus()；<br>比如子组件有个value的数据，可以这样使用this.$refs.myInput.value。</p>\n<ol start=\"2\">\n<li>子组件访问父组件<br>this.$parent</li>\n</ol>\n<h3 id=\"组件什么时候下被销毁\"><a href=\"#组件什么时候下被销毁\" class=\"headerlink\" title=\"组件什么时候下被销毁\"></a>组件什么时候下被销毁</h3><ul>\n<li>没有使用keep-alive切换</li>\n<li>v-if=”false”</li>\n<li>执行vm.$destroy()</li>\n</ul>\n<h3 id=\"event-target和-event-currentTarget有什么区别\"><a href=\"#event-target和-event-currentTarget有什么区别\" class=\"headerlink\" title=\"$event.target和$event.currentTarget有什么区别\"></a>$event.target和$event.currentTarget有什么区别</h3><p>$event.currentTarget始终指向事件所绑定的元素，而$event.target指向事件发生时的元素。</p>\n<h3 id=\"事件修饰符和表单修饰符\"><a href=\"#事件修饰符和表单修饰符\" class=\"headerlink\" title=\"事件修饰符和表单修饰符\"></a>事件修饰符和表单修饰符</h3><ul>\n<li>事件修饰符</li>\n</ul>\n<p>.stop：阻止事件传递；<br>.prevent： 阻止默认事件；<br>.capture ：在捕获的过程监听，没有capture修饰符时都是默认冒泡过程监听；<br>.self：当前绑定事件的元素才能触发；<br>.once：事件只会触发一次；<br>.passive：默认事件会立即触发，不要把.passive和.prevent一起使用，因为.prevent将不起作用。</p>\n<ul>\n<li>表单修饰符.number .lazy .trim</li>\n</ul>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">comp</span> :foo.<span class=\"keyword\">sync</span>=<span class=\"string\">&quot;bar&quot;</span>&gt;&lt;/<span class=\"keyword\">comp</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>相当于</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;comp <span class=\"symbol\">:foo=<span class=\"string\">&quot;bar&quot;</span></span> <span class=\"variable\">@update</span><span class=\"symbol\">:foo=<span class=\"string\">&quot;val =&gt; bar = val&quot;</span>&gt;&lt;/comp&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">/<span class=\"regexp\">/ this.$emit(&#x27;update:foo&#x27;, newValue)</span></span><br></pre></td></tr></table></figure>\n\n<p>要注意顺序很重要，用@click.prevent.self会阻止所有的点击，而@click.self.prevent只会阻止对元素自身的点击。</p>\n<h3 id=\"说说你对Vue的表单修饰符-lazy的理解。\"><a href=\"#说说你对Vue的表单修饰符-lazy的理解。\" class=\"headerlink\" title=\"说说你对Vue的表单修饰符.lazy的理解。\"></a>说说你对Vue的表单修饰符.lazy的理解。</h3><p>input标签v-model用lazy修饰之后，并不会立即监听input的value的改变，会在input失去焦点之后，才会监听input的value的改变。</p>\n<h3 id=\"监听键盘事件\"><a href=\"#监听键盘事件\" class=\"headerlink\" title=\"监听键盘事件\"></a>监听键盘事件</h3><p>使用按键修饰符 &lt;input @keyup.enter=”submit”&gt;按下回车键时候触发submit事件。</p>\n<ul>\n<li>.enter</li>\n<li>.tab</li>\n<li>.delete (捕获“删除”和“退格”键)</li>\n<li>.esc</li>\n<li>.space</li>\n<li>.up</li>\n<li>.down</li>\n<li>.left</li>\n<li>.right</li>\n</ul>\n<h3 id=\"v-on绑定多个方法\"><a href=\"#v-on绑定多个方法\" class=\"headerlink\" title=\"v-on绑定多个方法\"></a>v-on绑定多个方法</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:</span>&#123;<span class=\"attr\">click:a</span>,<span class=\"attr\">dblclick:b</span>&#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">        a()&#123;</span><br><span class=\"line\">            alert(1)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        b()&#123;</span><br><span class=\"line\">            alert(2)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"css样式当前组件有效\"><a href=\"#css样式当前组件有效\" class=\"headerlink\" title=\"css样式当前组件有效\"></a>css样式当前组件有效</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;less&quot;</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>原理：vue通过在DOM结构以及css样式上加上唯一的标记<code>data-v-xxxxxx</code>，保证动态属性唯一，达到样式私有化，不污染全局的作用。</p>\n<p>编译后：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">data-v-3e5b2a80</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;textScoped&quot;</span>&gt;</span>scoped测试<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.textScoped</span><span class=\"selector-attr\">[data-v-3e5b2a80]</span>&#123;        </span></span><br><span class=\"line\">        color: red;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"渲染模板保留注释\"><a href=\"#渲染模板保留注释\" class=\"headerlink\" title=\"渲染模板保留注释\"></a>渲染模板保留注释</h3><ul>\n<li>在组件中将comments选项设置为true</li>\n<li><code>&lt;template comments&gt; ... &lt;template&gt;</code></li>\n</ul>\n<h3 id=\"在created和mounted这两个生命周期中请求数据有什么区别呢？\"><a href=\"#在created和mounted这两个生命周期中请求数据有什么区别呢？\" class=\"headerlink\" title=\"在created和mounted这两个生命周期中请求数据有什么区别呢？\"></a>在created和mounted这两个生命周期中请求数据有什么区别呢？</h3><p>在created中，页面视图未出现，如果请求信息过多，页面会长时间处于白屏状态，DOM节点没出来，无法操作DOM节点。在mounted不会这样，比较好。</p>\n<h3 id=\"Vue组件里的定时器要怎么销毁？\"><a href=\"#Vue组件里的定时器要怎么销毁？\" class=\"headerlink\" title=\"Vue组件里的定时器要怎么销毁？\"></a>Vue组件里的定时器要怎么销毁？</h3><ul>\n<li><p>如果页面上有很多定时器，可以在data选项中创建一个对象timer，给每个定时器取个名字一一映射在对象timer中，<br>在beforeDestroy构造函数中for(let k in this.timer){clearInterval(k)}；</p>\n</li>\n<li><p>如果页面只有单个定时器，可以这么做。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span>&#123;&#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\"><span class=\"built_in\">this</span>.$once(<span class=\"string\">&#x27;hook:beforeDestroy&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"built_in\">clearInterval</span>(timer);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"Vue中能监听到数组变化的方法有哪些？为什么这些方法能监听到呢？\"><a href=\"#Vue中能监听到数组变化的方法有哪些？为什么这些方法能监听到呢？\" class=\"headerlink\" title=\"Vue中能监听到数组变化的方法有哪些？为什么这些方法能监听到呢？\"></a>Vue中能监听到数组变化的方法有哪些？为什么这些方法能监听到呢？</h3><ul>\n<li>push()、pop()、shift()、unshift()、splice()、sort()、reverse()，这些方法在Vue中被重新定义了，故可以监听到数组变化；</li>\n<li>filter()、concat()、slice()，这些方法会返回一个新数组，也可以监听到数组的变化。</li>\n</ul>\n<h3 id=\"定义全局方法\"><a href=\"#定义全局方法\" class=\"headerlink\" title=\"定义全局方法\"></a>定义全局方法</h3><ol>\n<li>挂载在Vue的prototype上</li>\n<li>利用全局混入mixin</li>\n<li><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.$root.$on(<span class=\"string\">&#x27;demo&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;test&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">this</span>.$root.$emit(<span class=\"string\">&#x27;demo&#x27;</span>)；</span><br><span class=\"line\"><span class=\"built_in\">this</span>.$root.$off(<span class=\"string\">&#x27;demo&#x27;</span>)；</span><br><span class=\"line\"><span class=\"comment\">// Mustache的web模板引擎</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"捕获组件的错误信息\"><a href=\"#捕获组件的错误信息\" class=\"headerlink\" title=\"捕获组件的错误信息\"></a>捕获组件的错误信息</h3><ul>\n<li><p>errorCaptured是组件内部钩子，当捕获一个来自子孙组件的错误时被调用，接收error、vm、info三个参数，return false后可以阻止错误继续向上抛出。</p>\n</li>\n<li><p>errorHandler为全局钩子，使用Vue.config.errorHandler配置，接收参数与errorCaptured一致，2.6后可捕捉v-on与promise链的错误，可用于统一错误<br>处理与错误兜底。</p>\n</li>\n</ul>\n<h3 id=\"vue-SSR\"><a href=\"#vue-SSR\" class=\"headerlink\" title=\"vue SSR\"></a>vue SSR</h3><p>vue是构建客户端应用程序的框架，默认情况下，可以在浏览器中输出vue组件，进行生成dom和操作dom，然而，也可以将同一个组件渲染为服务端的html字符串，将他们直接发送到客户端，然后将这些静态标记激活为客户端上可以交互的应用程序。</p>\n<p>即ssr的意思就是vue在服务端完成将标签渲染成整个html片段的工作，然后将片段直接返回给客户端使用</p>\n<ul>\n<li><p>ssr优点：</p>\n<ul>\n<li><p>更好的seo：因为spa页面的内容是通过ajax获取，而搜索引擎爬取工具并不会等待ajax一步完成后再抓取页面内容，所以在spa中是抓取不到页面通过ajax获取到的内容；而ssr是直接由服务器返回已经渲染好的页面（数据已经包含在页面中），所以搜索引擎爬取工具可以抓取到渲染好的页面</p>\n</li>\n<li><p>更快的内容到达时间（首屏加载快）：spa会等待所有vue编译后的js文件都下载完成后，才开始进行也免得渲染，文件下载需要一定的时间等，所以首屏加载需要时间，而ssr直接由服务器渲染好页面返回显示，无需等待js文件再去渲染，所以ssr有更快的内容到达时间</p>\n</li>\n</ul>\n</li>\n<li><p>ssr缺点：</p>\n<ul>\n<li><p>更多的开发条件限制：例如服务端渲染只支持beforeCreate和created两个钩子函数，这会导致一些外部扩展库需要特殊处理，才能在服务端渲染程序中运行；并且与可以部署在任何静态文件服务器上的完全静态单页面应用程序spa不同，服务端渲染应用程序，需要处于nodejs server中才能运行</p>\n</li>\n<li><p>更多的服务器负载</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"nextTick\"><a href=\"#nextTick\" class=\"headerlink\" title=\"nextTick\"></a>nextTick</h3><p>在下次dom更新循环结束之后执行延迟回调，可用于获取更新后的dom状态。</p>\n<ul>\n<li>新版本中默认是microtasks, v-on中会使用macrotasks<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 修改数据</span></span><br><span class=\"line\">vm.msg = <span class=\"string\">&#x27;Hello&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// DOM 还没有更新</span></span><br><span class=\"line\">Vue.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// DOM 更新了</span></span><br><span class=\"line\">  ...   <span class=\"comment\">//DOM操作</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 作为一个 Promise 使用</span></span><br><span class=\"line\">Vue.nextTick()</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// DOM 更新了</span></span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue 在更新 DOM 时是异步执行的。只要侦听到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部对异步队列尝试使用原生的 <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Promise</span>.</span></span><span class=\"keyword\">then</span>、MutationObserver 和 setImmediate，如果执行环境不支持，则会采用 set<span class=\"constructor\">Timeout(<span class=\"params\">fn</span>, 0)</span> 代替。</span><br><span class=\"line\">例如，当你设置 vm.someData = &#x27;<span class=\"keyword\">new</span> value&#x27;，该组件不会立即重新渲染。当刷新队列时，组件会在下一个事件循环“tick”中更新。多数情况我们不需要关心这个过程，但是如果你想基于更新后的 DOM 状态来做点什么，这就可能会有些棘手。虽然 <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Vue</span>.</span></span>js 通常鼓励开发人员使用“数据驱动”的方式思考，避免直接接触 DOM，但是有时我们必须要这么做。为了在数据变化之后等待 Vue 完成更新 DOM，可以在数据变化之后立即使用 <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Vue</span>.</span></span>next<span class=\"constructor\">Tick(<span class=\"params\">callback</span>)</span>。这样回调函数将在 DOM 更新完成后被调用。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>dom更新为什么是一个异步操作因为它提升了渲染效率。</p>\n</blockquote>\n<h3 id=\"数据响应-数据劫持\"><a href=\"#数据响应-数据劫持\" class=\"headerlink\" title=\"数据响应(数据劫持)\"></a>数据响应(数据劫持)</h3><p>数据响应的实现由两部分构成: 观察者( watcher ) 和 依赖收集器( Dep )，其核心是 defineProperty 这个方法，它可以重写属性的 get 与 set 方法，从而完成监听数据的改变。</p>\n<blockquote>\n<ol>\n<li>对需要observe的数据对象进行递归遍历，包括子属性对象的属性，都加上setter和getter这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>compile解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"3\">\n<li>Watcher订阅者是Observer和Compile之间通信的桥梁，主要做的事情是:<br>①在自身实例化时往属性订阅器(dep)里面添加自己<br>②自身必须有一个update()方法<br>③待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>4、MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(input) -&gt; 数据model变更的双向绑定效果。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> data = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">// 数据响应性</span></span><br><span class=\"line\">observe(data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化观察者</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Watcher(data, <span class=\"string\">&#x27;name&#x27;</span>, updateComponent)</span><br><span class=\"line\">data.a = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 简单表示用于数据更新后的操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateComponent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    vm._update() <span class=\"comment\">// patchs</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监视对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observe</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 遍历对象，使用 get/set 重新定义对象的每个属性值</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(obj).map(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">      defineReactive(obj, key, obj[key])</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive</span>(<span class=\"params\">obj, k, v</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 递归子属性</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type(v) == <span class=\"string\">&#x27;object&#x27;</span>) observe(v)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 新建依赖收集器</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> dep = <span class=\"keyword\">new</span> Dep()</span><br><span class=\"line\">    <span class=\"comment\">// 定义get/set</span></span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(obj, k, &#123;</span><br><span class=\"line\">        enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        get: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactiveGetter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        \t  <span class=\"comment\">// 当有获取该属性时，证明依赖于该对象，因此被添加进收集器中</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">                dep.addSub(Dep.target)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> v</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 重新设置值时，触发收集器的通知机制</span></span><br><span class=\"line\">        set: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactiveSetter</span>(<span class=\"params\">nV</span>) </span>&#123;</span><br><span class=\"line\">            v = nV</span><br><span class=\"line\">            dep.nofify()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 依赖收集器</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dep</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.subs = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    addSub(sub) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.subs.push(sub)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    notify() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.subs.map(<span class=\"function\"><span class=\"params\">sub</span> =&gt;</span> &#123;</span><br><span class=\"line\">            sub.update()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Dep.target = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 观察者</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Watcher</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(obj, key, cb) &#123;</span><br><span class=\"line\">        Dep.target = <span class=\"built_in\">this</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.cb = cb</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.obj = obj</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.key = key</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = obj[key]</span><br><span class=\"line\">        Dep.target = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    addDep(Dep) &#123;</span><br><span class=\"line\">        Dep.addSub(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    update() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = <span class=\"built_in\">this</span>.obj[<span class=\"built_in\">this</span>.key]</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.cb(<span class=\"built_in\">this</span>.value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    before() &#123;</span><br><span class=\"line\">        callHook(<span class=\"string\">&#x27;beforeUpdate&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"虚拟dom原理实现\"><a href=\"#虚拟dom原理实现\" class=\"headerlink\" title=\"虚拟dom原理实现\"></a>虚拟dom原理实现</h3><ul>\n<li><p>创建 dom 树</p>\n</li>\n<li><p>树的diff，同层对比，输出patchs(listDiff/diffChildren/diffProps)</p>\n<ul>\n<li><p>没有新的节点，返回</p>\n</li>\n<li><p>新的节点tagName与key不变， 对比props，继续递归遍历子树</p>\n<ul>\n<li>对比属性(对比新旧属性列表):<ul>\n<li>旧属性是否存在与新属性列表中</li>\n<li>都存在的是否有变化</li>\n<li>是否出现旧列表中没有的新属性</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>tagName和key值变化了，则直接替换成新节点</p>\n</li>\n</ul>\n</li>\n<li><p>渲染差异</p>\n<ul>\n<li>遍历patchs， 把需要更改的节点取出来</li>\n<li>局部更新dom</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>patch函数 oldvnode vnode<ul>\n<li>如果两个节点不一样，直接用新节点替换老节点；</li>\n<li>如果两个节点一样，<br>​      - 新老节点一样，直接返回；<br>​     - 老节点有子节点，新节点没有：删除老节点的子节点；<br>​ - 老节点没有子节点，新节点有子节点：新节点的子节点直接append到老节点；<br>​ -    都只有文本节点：直接用新节点的文本节点替换老的文本节点；<br>​ -    都有子节点：updateChildren</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// diff算法的实现</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">diff</span>(<span class=\"params\">oldTree, newTree</span>) </span>&#123;</span><br><span class=\"line\">\t <span class=\"comment\">// 差异收集</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> pathchs = &#123;&#125;</span><br><span class=\"line\">    dfs(oldTree, newTree, <span class=\"number\">0</span>, pathchs)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pathchs</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dfs</span>(<span class=\"params\">oldNode, newNode, index, pathchs</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> curPathchs = []</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newNode) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当新旧节点的 tagName 和 key 值完全一致时</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldNode.tagName === newNode.tagName &amp;&amp; oldNode.key === newNode.key) &#123;</span><br><span class=\"line\">        \t  <span class=\"comment\">// 继续比对属性差异</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> props = diffProps(oldNode.props, newNode.props)</span><br><span class=\"line\">            curPathchs.push(&#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;changeProps&#x27;</span>, props &#125;)</span><br><span class=\"line\">            <span class=\"comment\">// 递归进入下一层级的比较</span></span><br><span class=\"line\">            diffChildrens(oldNode.children, newNode.children, index, pathchs)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        \t  <span class=\"comment\">// 当 tagName 或者 key 修改了后，表示已经是全新节点，无需再比</span></span><br><span class=\"line\">            curPathchs.push(&#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;replaceNode&#x27;</span>, <span class=\"attr\">node</span>: newNode &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t <span class=\"comment\">// 构建出整颗差异树</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (curPathchs.length) &#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span>(pathchs[index])&#123;</span><br><span class=\"line\">    \t\t\tpathchs[index] = pathchs[index].concat(curPathchs)</span><br><span class=\"line\">    \t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    \t\t\tpathchs[index] = curPathchs</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 属性对比实现</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">diffProps</span>(<span class=\"params\">oldProps, newProps</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> propsPathchs = []</span><br><span class=\"line\">    <span class=\"comment\">// 遍历新旧属性列表</span></span><br><span class=\"line\">    <span class=\"comment\">// 查找删除项</span></span><br><span class=\"line\">    <span class=\"comment\">// 查找修改项</span></span><br><span class=\"line\">    <span class=\"comment\">// 查找新增项</span></span><br><span class=\"line\">    forin(olaProps, <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!newProps.hasOwnProperty(k)) &#123;</span><br><span class=\"line\">            propsPathchs.push(&#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;remove&#x27;</span>, <span class=\"attr\">prop</span>: k &#125;)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (v !== newProps[k]) &#123;</span><br><span class=\"line\">                propsPathchs.push(&#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;change&#x27;</span>, <span class=\"attr\">prop</span>: k , <span class=\"attr\">value</span>: newProps[k] &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    forin(newProps, <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!oldProps.hasOwnProperty(k)) &#123;</span><br><span class=\"line\">            propsPathchs.push(&#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;add&#x27;</span>, <span class=\"attr\">prop</span>: k, <span class=\"attr\">value</span>: v &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> propsPathchs</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对比子级差异</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">diffChildrens</span>(<span class=\"params\">oldChild, newChild, index, pathchs</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 标记子级的删除/新增/移动</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; change, list &#125; = diffList(oldChild, newChild, index, pathchs)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (change.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pathchs[index]) &#123;</span><br><span class=\"line\">            pathchs[index] = pathchs[index].concat(change)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            pathchs[index] = change</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t <span class=\"comment\">// 根据 key 获取原本匹配的节点，进一步递归从头开始对比</span></span><br><span class=\"line\">    oldChild.map(<span class=\"function\">(<span class=\"params\">item, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> keyIndex = list.indexOf(item.key)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (keyIndex) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> node = newChild[keyIndex]</span><br><span class=\"line\">            <span class=\"comment\">// 进一步递归对比</span></span><br><span class=\"line\">            dfs(item, node, index, pathchs)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 列表对比，主要也是根据 key 值查找匹配项</span></span><br><span class=\"line\"><span class=\"comment\">// 对比出新旧列表的新增/删除/移动</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">diffList</span>(<span class=\"params\">oldList, newList, index, pathchs</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> change = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> list = []</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newKeys = getKey(newList)</span><br><span class=\"line\">    oldList.map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newKeys.indexOf(v.key) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            list.push(v.key)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            list.push(<span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 标记删除</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = list.length - <span class=\"number\">1</span>; i&gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!list[i]) &#123;</span><br><span class=\"line\">            list.splice(i, <span class=\"number\">1</span>)</span><br><span class=\"line\">            change.push(&#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;remove&#x27;</span>, <span class=\"attr\">index</span>: i &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 标记新增和移动</span></span><br><span class=\"line\">    newList.map(<span class=\"function\">(<span class=\"params\">item, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> key = item.key</span><br><span class=\"line\">        <span class=\"keyword\">const</span> index = list.indexOf(key)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === <span class=\"number\">-1</span> || key == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新增</span></span><br><span class=\"line\">            change.push(&#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;add&#x27;</span>, <span class=\"attr\">node</span>: item, <span class=\"attr\">index</span>: i &#125;)</span><br><span class=\"line\">            list.splice(i, <span class=\"number\">0</span>, key)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 移动</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index !== i) &#123;</span><br><span class=\"line\">                change.push(&#123;</span><br><span class=\"line\">                    type: <span class=\"string\">&#x27;move&#x27;</span>,</span><br><span class=\"line\">                    form: index,</span><br><span class=\"line\">                    to: i,</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                move(list, index, i)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; change, list &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Proxy-相比于-defineProperty-的优势\"><a href=\"#Proxy-相比于-defineProperty-的优势\" class=\"headerlink\" title=\"Proxy 相比于 defineProperty 的优势\"></a>Proxy 相比于 defineProperty 的优势</h3><ul>\n<li>数组变化也能监听到</li>\n<li>不需要深度遍历监听(遍历每一个属性)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> data = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> reactiveData = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(data, &#123;</span><br><span class=\"line\">\tget: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, name</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"为什么在v-for中使用key？\"><a href=\"#为什么在v-for中使用key？\" class=\"headerlink\" title=\"为什么在v-for中使用key？\"></a>为什么在v-for中使用key？</h3><p>为了标识每个唯一的节点，方便比较，v-for中加key可以减少渲染次数，提升渲染性能。</p>\n<h3 id=\"Vuex页面刷新数据丢失怎么解决？\"><a href=\"#Vuex页面刷新数据丢失怎么解决？\" class=\"headerlink\" title=\"Vuex页面刷新数据丢失怎么解决？\"></a>Vuex页面刷新数据丢失怎么解决？</h3><p>使用 vuex-persist 插件，它就是为 Vuex 持久化存储而生的一个插件。不需要你手动存取 storage ，而是直接将状态保存至 cookie 或者 localStorage 中</p>\n<h3 id=\"vue项目的优化\"><a href=\"#vue项目的优化\" class=\"headerlink\" title=\"vue项目的优化\"></a>vue项目的优化</h3><ol>\n<li><p>v-if和v-show区分场景使用</p>\n</li>\n<li><p>computed 和 watch 区分场景使用</p>\n</li>\n<li><p>v-for 遍历必须加key，key最好是id值，如果采用index当插入数据时索引会发生变化，且避免同时使用v-if(用计算属性过滤数据)</p>\n</li>\n<li><p>图片懒加载</p>\n</li>\n<li><p>路由懒加载</p>\n</li>\n<li><p>第三方插件按需引入</p>\n</li>\n<li><p>长列表(虚拟列表)</p>\n<blockquote>\n<p>无限列表加载到底部请求api，用v-for循环数据这样是欠妥当的。随着数据的加载，dom会越来越多，造成性能的开销大，对客户端造成压力。虚拟列表保证dom数量一定，渲染可视区的dom，通过替换数据来实现长列表的显示。</p>\n</blockquote>\n</li>\n<li><p>释放组件资源(beforeDestroy移除监听)</p>\n</li>\n<li><p>首屏优化 mixins抽离公共代码</p>\n</li>\n</ol>\n<h3 id=\"vue父子组件实现双向绑定实例\"><a href=\"#vue父子组件实现双向绑定实例\" class=\"headerlink\" title=\"vue父子组件实现双向绑定实例\"></a>vue父子组件实现双向绑定实例</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;Child :name=<span class=\"string\">&quot;name&quot;</span> :change=<span class=\"string\">&quot;changeName&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">props:&#123;</span><br><span class=\"line\">    name:&#123;</span><br><span class=\"line\">        type:String,</span><br><span class=\"line\">        required: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"keyword\">data</span>() &#123;</span><br><span class=\"line\">    newName:<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">watch:&#123;</span><br><span class=\"line\">    name(<span class=\"keyword\">val</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.newName = <span class=\"keyword\">val</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    newName(<span class=\"keyword\">val</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$emit(<span class=\"string\">&#x27;change&#x27;</span>, <span class=\"keyword\">val</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义v-model\"><a href=\"#自定义v-model\" class=\"headerlink\" title=\"自定义v-model\"></a>自定义v-model</h3><p>自定义 v-model，设置子组件 model 属性，设置 v-model 侦听的属性值，同时绑定属性变化时执行的事件，实现自定义 v-model，即双向绑定。</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\">// v-model只是一个语法糖</span><br><span class=\"line\">&lt;<span class=\"keyword\">input</span> <span class=\"keyword\">type</span>=&quot;text&quot; v-model=&quot;price&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"keyword\">input</span> <span class=\"keyword\">type</span>=&quot;text&quot; :<span class=\"keyword\">value</span>=&quot;price&quot; @input=&quot;price=$event.target.value&quot; /&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Vue.extend方法创建一个组件<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注册组件</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">&quot;base-checkbox&quot;</span>, &#123;</span><br><span class=\"line\">    model:&#123;</span><br><span class=\"line\">        prop:<span class=\"string\">&#x27;checked&#x27;</span>, <span class=\"comment\">// 绑定属性</span></span><br><span class=\"line\">        event:<span class=\"string\">&#x27;change&#x27;</span>, <span class=\"comment\">// 抛出事件</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    props:&#123;</span><br><span class=\"line\">        checked: boolean</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    templete:<span class=\"string\">`&lt;input type=&quot;checkbox&quot; v-bind:checked=&quot;checked&quot; v-on:change=&quot;$emit(&#x27;change&#x27;,$event.target.value)&quot;/&gt;`</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;base-checkbox v-model=<span class=\"string\">&quot;value&quot;</span>&gt;&lt;/base-checkbox&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"provide-inject有什么用？\"><a href=\"#provide-inject有什么用？\" class=\"headerlink\" title=\"provide/inject有什么用？\"></a>provide/inject有什么用？</h3><blockquote>\n<p>常用的父子组件通信方式都是父组件绑定要传递给子组件的数据，子组件通过<code>props</code>属性接收，一旦组件层级变多时，采用这种方式一级一级传递值非常麻烦，而且代码可读性不高，不便后期维护。</p>\n</blockquote>\n<blockquote>\n<p>vue提供了<code>provide</code>和<code>inject</code>帮助我们解决多层次嵌套嵌套通信问题。在<code>provide</code>中指定要传递给子孙组件的数据，子孙组件通过<code>inject</code>注入祖父组件传递过来的数据。</p>\n</blockquote>\n<blockquote>\n<p><code>provide</code>和<code>inject</code>主要为高阶插件/组件库提供用例。并不推荐直接用于应用程序代码中。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">provide() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        elForm: <span class=\"built_in\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">inject: [<span class=\"string\">&#x27;elForm&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">provide: &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;cosyer&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">inject:&#123;</span><br><span class=\"line\">    newName: &#123;</span><br><span class=\"line\">        <span class=\"keyword\">from</span>: <span class=\"string\">&#x27;name&#x27;</span>,</span><br><span class=\"line\">        <span class=\"keyword\">default</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vue-is的作用\"><a href=\"#vue-is的作用\" class=\"headerlink\" title=\"vue is的作用\"></a>vue is的作用</h3><h4 id=\"简单来说就是扩展html标签的限制\"><a href=\"#简单来说就是扩展html标签的限制\" class=\"headerlink\" title=\"简单来说就是扩展html标签的限制\"></a>简单来说就是扩展html标签的限制</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ul里面嵌套li是固定的写法 --&gt;</span></span><br></pre></td></tr></table></figure>\n<p>当我们使用自定义的组件时会被当作无效内容↓</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以通过is来扩展</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">is</span>=<span class=\"string\">&quot;my-li&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"动态切换组件\"><a href=\"#动态切换组件\" class=\"headerlink\" title=\"动态切换组件\"></a>动态切换组件</h4><figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"symbol\">:is=<span class=\"string\">&quot;变量名称&quot;</span>&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"assets和static的区别\"><a href=\"#assets和static的区别\" class=\"headerlink\" title=\"assets和static的区别\"></a>assets和static的区别</h3><ul>\n<li><p>assets中的文件在运行npm run build的时候会打包，简单来说就是会被压缩体积，代码格式化之类的。打包之后也会放到static中。</p>\n</li>\n<li><p>static中的文件则不会被打包。</p>\n</li>\n</ul>\n<blockquote>\n<p>建议：将图片等未处理的文件放在assets中，打包减少体积。而对于第三方引入的一些资源文件如iconfont.css等可以放在static中，因为这些文件已经经过处理了。</p>\n</blockquote>\n<h3 id=\"slot插槽分发\"><a href=\"#slot插槽分发\" class=\"headerlink\" title=\"slot插槽分发\"></a>slot插槽分发</h3><p>很多时候，我们封装了一个子组件之后，在父组件使用的时候，想添加一些dom元素，这个时候就可以使用slot插槽了，但是这些dom是否显示以及在哪里显示，则是看子组件<br>中slot组件的位置了。</p>\n<h3 id=\"v-clock指令的作用\"><a href=\"#v-clock指令的作用\" class=\"headerlink\" title=\"v-clock指令的作用\"></a>v-clock指令的作用</h3><ul>\n<li>解决页面闪烁问题(会显示插值表达式)<br>如果网速慢，而该标签内容是变量没有请求响应回来的时候，页面上先不显示该标签（vue给该标<br>签加了css样式），当响应回来的时候改标签默认将css样式去除。</li>\n</ul>\n<p><code>此指令可以解决使用插值表达式页面闪烁问题</code>将该指令加在html标签中时，可以在该文件中加<br>style属性为display：none</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;#app&quot;</span> v-cloak&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123;name&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">[v-cloak]&#123;</span><br><span class=\"line\">    display: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"封装vue组件的过程\"><a href=\"#封装vue组件的过程\" class=\"headerlink\" title=\"封装vue组件的过程\"></a>封装vue组件的过程</h3><ol>\n<li>建立组件模板、架子写写样式，考虑好组件的基本逻辑</li>\n<li>准备好组件的数据输入，定好props里面的数据、类型</li>\n<li>准备好组价的数据输出，定好暴露出来的方法</li>\n</ol>\n<h3 id=\"常用组件库\"><a href=\"#常用组件库\" class=\"headerlink\" title=\"常用组件库\"></a>常用组件库</h3><ul>\n<li><a href=\"https://github.com/ddchef/vue-code-diff\">文本比对:vue-code-diff</a></li>\n<li><a href=\"https://github.com/surmon-china/vue-codemirror\">JSON代码编辑器:vue-codemirror</a></li>\n<li><a href=\"https://github.com/kazupon/vue-i18n\">国际化:vue-i18n</a></li>\n<li><a href=\"https://github.com/wangeditor-team/wangEditor\">富文本编辑器:wangEditor</a></li>\n<li><a href=\"https://github.com/tinymce/tinymce\">富文本编辑器:tinymce</a></li>\n<li><a href=\"https://github.com/egoist/vue-monaco\">monaco编辑器:vue-monaco</a></li>\n<li><a href=\"https://github.com/chairuosen/vue2-ace-editor\">ace编辑器:vue2-ace-editor</a></li>\n<li><a href=\"https://github.com/Inndy/vue-clipboard2\">剪切板:vue-clipboard2</a></li>\n<li><a href=\"https://github.com/cmp-cc/vue-cookies\">操作cookie:vue-cookies</a></li>\n<li><a href=\"https://github.com/Thunberg087/vue-fragment\">fragment元素:vue-fragment</a></li>\n<li><a href=\"https://github.com/metachris/vue-highlightjs\">代码高亮:vue-highlightjs</a></li>\n<li><a href=\"https://github.com/xtermjs/xterm.js\">command界面:xterm.js</a></li>\n<li><a href=\"https://github.com/chromium/hterm\">command界面:hterm</a></li>\n<li><a href=\"https://github.com/jeremyfa/yaml.js\">处理yaml:yaml.js</a></li>\n<li><a href=\"https://github.com/nodeca/js-yaml\">yaml:js-yaml</a></li>\n<li><a href=\"https://github.com/ElemeFE/v-charts\">vue的echarts封装:v-charts</a></li>\n<li><a href=\"https://github.com/nuysoft/Mock\">mock:mockjs</a></li>\n<li><a href=\"https://github.com/gion/is-dark-color\">判断是否是黑色:is-dark-color</a></li>\n<li><a href=\"https://github.com/cure53/DOMPurify\">XSS过滤:DOMPurify</a></li>\n</ul>\n<h3 id=\"常用UI库\"><a href=\"#常用UI库\" class=\"headerlink\" title=\"常用UI库\"></a>常用UI库</h3><h4 id=\"移动端\"><a href=\"#移动端\" class=\"headerlink\" title=\"移动端\"></a>移动端</h4><ul>\n<li><p><a href=\"http://mint-ui.github.io/#!/zh-cn\">mint-ui</a></p>\n</li>\n<li><p><a href=\"https://youzan.github.io/vant/#/zh-CN/home\">Vant</a></p>\n</li>\n<li><p><a href=\"https://vux.li/\">VUX</a></p>\n</li>\n<li><p><a href=\"https://didi.github.io/cube-ui/\">cube-ui</a></p>\n</li>\n</ul>\n<h4 id=\"pc端\"><a href=\"#pc端\" class=\"headerlink\" title=\"pc端\"></a>pc端</h4><ul>\n<li><p>[element-ui](<a href=\"https://element.eleme.cn/2.13/#/zh-CN/component/\">https://element.eleme.cn/2.13/#/zh-CN/component/</a><br>installation）</p>\n</li>\n<li><p><a href=\"https://www.antdv.com/docs/vue/introduce-cn/\">Ant Design of Vue</a></p>\n</li>\n<li><p><a href=\"https://iviewui.com/\">iview/viewui/view-design</a></p>\n</li>\n<li><p><a href=\"https://avuejs.com/\">Avue</a></p>\n</li>\n<li><p><a href=\"https://vuetifyjs.com/\">vuetify</a></p>\n</li>\n</ul>\n<h3 id=\"常用配置\"><a href=\"#常用配置\" class=\"headerlink\" title=\"常用配置\"></a>常用配置</h3><h4 id=\"publicPath\"><a href=\"#publicPath\" class=\"headerlink\" title=\"publicPath\"></a>publicPath</h4><ol>\n<li>cli2 config/index.js<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">build: &#123;</span><br><span class=\"line\">    assetsPublicPath: <span class=\"string\">&#x27;./&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>cli3 vue.config.js<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    publicPath: <span class=\"string\">&#x27;./&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n部署应用包时的基本 URL。默认情况下，Vue CLI会假设你的应用是被部署在一个域名的根路径<br>上，例如<a href=\"https://www.my-app.com/%E3%80%82%E5%A6%82%E6%9E%9C%E5%BA%94%E7%94%A8%E8%A2%AB%E9%83%A8%E7%BD%B2%E5%9C%A8%E4%B8%80%E4%B8%AA%E5%AD%90%E8%B7%AF%E5%BE%84%E4%B8%8A%EF%BC%8C\">https://www.my-app.com/。如果应用被部署在一个子路径上，</a><br>你就需要用这个选项指定这个子路径。例如，如果你的应用被部署在<a href=\"https://www.my-app/\">https://www.my-app</a>.<br>com/my-app/，则设置publicPath为/my-app/</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxy: &#123; </span><br><span class=\"line\">    <span class=\"string\">&quot;/api&quot;</span>: &#123; <span class=\"comment\">//如果ajax请求的地址是http://192.168.0.118:9999/api1那么你就可以在ajax中使用/api/api1路径,其请求路径会解析</span></span><br><span class=\"line\">    <span class=\"comment\">// http://192.168.0.118:9999/api1，当然你在浏览器上看到的还是http://localhost:8080/api/api1;</span></span><br><span class=\"line\">    target: <span class=\"string\">&quot;http://192.168.0.118:9999&quot;</span>,</span><br><span class=\"line\">    <span class=\"comment\">//是否允许跨域，这里是在开发环境会起作用，但在生产环境下，还是由后台去处理，所以不必太在意</span></span><br><span class=\"line\">    changeOrigin: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    pathRewrite: &#123;</span><br><span class=\"line\">        <span class=\"comment\">//把多余的路径置为&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;api&quot;</span>: <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vue3\"><a href=\"#vue3\" class=\"headerlink\" title=\"vue3\"></a>vue3</h3><ol>\n<li>createApp</li>\n</ol>\n<ul>\n<li><p>vue2.x</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  render: <span class=\"function\">(<span class=\"params\">h</span>) =&gt;</span> h(App)</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>vue3新特性</p>\n<blockquote>\n<p>createApp 会产生一个 app 实例，该实例拥有全局的可配置上下文</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">createApp(App).mount(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"2\">\n<li>globalProperties<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.config.globalProperties.foo = <span class=\"string\">&#x27;bar&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.component(<span class=\"string\">&#x27;child-component&#x27;</span>, &#123;</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.foo) <span class=\"comment\">// &#x27;bar&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>添加可在程序内的任何组件实例中访问的全局属性。当存在键冲突时，组件属性将优先替代掉Vue2.x的 Vue.prototype属性放到原型上的写法</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Vue2.x</span></span><br><span class=\"line\">Vue.prototype.$http = <span class=\"function\">() =&gt;</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Vue3</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = Vue.createApp(&#123;&#125;)</span><br><span class=\"line\">app.config.globalProperties.$http = <span class=\"function\">() =&gt;</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>更快</li>\n</ol>\n<ul>\n<li>重写虚拟DOM (Virtual DOM Rewrite)</li>\n</ul>\n<p>随着虚拟 DOM 重写，我们可以期待更多的 编译时（compile-time）提示来减少 运行时（runtime）开销。重写将包括更有效的代码来创建虚拟节点。</p>\n<ul>\n<li>优化插槽生成(Optimized Slots Generation)</li>\n</ul>\n<p>在当前的 Vue 版本中，当父组件重新渲染时，其子组件也必须重新渲染。 使用 Vue 3 ，可以单独重新渲染父组件和子组件。</p>\n<ul>\n<li>静态树提升(Static Tree Hoisting)</li>\n</ul>\n<p>使用静态树提升，这意味着 Vue 3 的编译器将能够检测到什么是静态组件，然后将其提升，从而降低了渲染成本。它将能够跳过未整个树结构打补丁的过程。</p>\n<ul>\n<li>静态属性提升（Static Props Hoisting）</li>\n</ul>\n<p>此外，我们可以期待静态属性提升，其中 Vue 3 将跳过不会改变节点的打补丁过程。</p>\n<ul>\n<li><p>基于 Proxy 的观察者机制</p>\n</li>\n<li><p>更小<br>Vue已经非常小了，在运行时（runtime）压缩后大约 20kb 。 但我们可以期待它会变得更加小，新的核心运行时压缩后大概 10kb 。</p>\n</li>\n<li><p>使其更具可维护性<br>不仅会使用 TypeScript（允许在编辑器中进行高级的类型检查和有用的错误和警告） ，而且许多软件包将被解耦，使所有内容更加模块化。</p>\n</li>\n<li><p>更多的原生支持<br>运行时内核也将与平台无关，使得 Vue 可以更容易地与任何平台（例如Web，iOS或Android）一起使用。</p>\n</li>\n<li><p>更易于开发使用<br>当我们需要在 Vue 中共享两个组件之间的行为时，我们通常使用 Mixins 。然而，Evan 正在尝试使用 Hooks API 来避免来自 Mixins 的一些问题，并且更适合</p>\n</li>\n<li><p>使用惯用的 Vue 代码。<br>使用 Time Slicing，将 JS 的执行分解为几个部分，如果有用户交互需要处理，这些部分将提供给浏览器。</p>\n</li>\n</ul>\n<h3 id=\"element-ui使用中遇到的坑\"><a href=\"#element-ui使用中遇到的坑\" class=\"headerlink\" title=\"element-ui使用中遇到的坑\"></a>element-ui使用中遇到的坑</h3><ol>\n<li><p>不支持v-model修饰符导致如果使用.trim当数据拼接了’ ‘后，第一次点击数据中间编辑，光标会跳到末尾</p>\n</li>\n<li><p>el-table当注入的data经过过滤，所对应的$index还是原来的，导致删除splice对应的index不准确</p>\n</li>\n<li><p>在disabled的button上使用Tooltip失效， el-tooltip不显示(disable属性)</p>\n</li>\n<li><p>input-number 输入精度precision 既要编辑又要显示超出最小值</p>\n</li>\n<li><p>页面刷新、局部刷新</p>\n</li>\n</ol>\n<h3 id=\"转载\"><a href=\"#转载\" class=\"headerlink\" title=\"转载\"></a><a href=\"http://mydearest.cn/2020/vueInterview.html\">转载</a></h3>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckoe9igyr006i8cpn1f0hf8ek","category_id":"ckoe9igyu006j8cpn2fi826yf","_id":"ckoe9igyx006n8cpnad2i1ftk"}],"PostTag":[{"post_id":"ckoe9igtx00098cpn8i3l8ep3","tag_id":"ckoe9igtv00088cpn0y5hc17t","_id":"ckoe9igu6000c8cpn0d5x4qzj"},{"post_id":"ckoe9igt800018cpngzb5cjjc","tag_id":"ckoe9igtm00048cpn7gu41ra9","_id":"ckoe9igu8000e8cpn3j6c2ol5"},{"post_id":"ckoe9igt800018cpngzb5cjjc","tag_id":"ckoe9igtv00088cpn0y5hc17t","_id":"ckoe9igub000h8cpn9q52446g"},{"post_id":"ckoe9igtg00038cpn11sjgu4j","tag_id":"ckoe9igu5000b8cpn6t1udxpy","_id":"ckoe9igul000p8cpnbaq134pc"},{"post_id":"ckoe9igtg00038cpn11sjgu4j","tag_id":"ckoe9igua000g8cpn58r8hkvj","_id":"ckoe9igun000r8cpn5cls6ceq"},{"post_id":"ckoe9igtg00038cpn11sjgu4j","tag_id":"ckoe9igue000k8cpngjcy2qqm","_id":"ckoe9iguo000u8cpn1xbd9gjv"},{"post_id":"ckoe9igun000s8cpnb0f46inw","tag_id":"ckoe9igtv00088cpn0y5hc17t","_id":"ckoe9igup000w8cpn2l3420ql"},{"post_id":"ckoe9igtp00058cpn6udj9y7x","tag_id":"ckoe9igul000o8cpn00dfgnq9","_id":"ckoe9iguu00108cpn8doyft4a"},{"post_id":"ckoe9igtp00058cpn6udj9y7x","tag_id":"ckoe9iguo000t8cpn0838gp3j","_id":"ckoe9iguw00128cpn75uf9zo6"},{"post_id":"ckoe9igut000z8cpn0694255o","tag_id":"ckoe9igtm00048cpn7gu41ra9","_id":"ckoe9igv500158cpn95gq1ouv"},{"post_id":"ckoe9igut000z8cpn0694255o","tag_id":"ckoe9igtv00088cpn0y5hc17t","_id":"ckoe9igv600178cpncq7m31ow"},{"post_id":"ckoe9igts00068cpnh1572g8n","tag_id":"ckoe9igtv00088cpn0y5hc17t","_id":"ckoe9igv8001a8cpnatou4jda"},{"post_id":"ckoe9igts00068cpnh1572g8n","tag_id":"ckoe9iguw00138cpngn3ec0vp","_id":"ckoe9igva001c8cpnbq31e6j7"},{"post_id":"ckoe9igtu00078cpn6j1r842y","tag_id":"ckoe9igtv00088cpn0y5hc17t","_id":"ckoe9igvm001l8cpnb31mgtfd"},{"post_id":"ckoe9igtu00078cpn6j1r842y","tag_id":"ckoe9igva001d8cpnh8z97uwu","_id":"ckoe9igvo001n8cpn13fjcjag"},{"post_id":"ckoe9igtu00078cpn6j1r842y","tag_id":"ckoe9iguw00138cpngn3ec0vp","_id":"ckoe9igvp001q8cpn5i064vxr"},{"post_id":"ckoe9igu3000a8cpngafudu36","tag_id":"ckoe9igvl001k8cpn4cjteqk0","_id":"ckoe9igvq001s8cpngpkm5sbo"},{"post_id":"ckoe9igu6000d8cpngryqcf9b","tag_id":"ckoe9igvp001p8cpn8pzg4uhd","_id":"ckoe9igvt001w8cpn1hs05e5h"},{"post_id":"ckoe9igvs001v8cpn5ntlesgw","tag_id":"ckoe9igua000g8cpn58r8hkvj","_id":"ckoe9igvx001z8cpn51tscovj"},{"post_id":"ckoe9igvs001v8cpn5ntlesgw","tag_id":"ckoe9igue000k8cpngjcy2qqm","_id":"ckoe9igvz00218cpnfxuu8681"},{"post_id":"ckoe9igu8000f8cpn0yti3t8y","tag_id":"ckoe9igue000k8cpngjcy2qqm","_id":"ckoe9igw000248cpn8p6ch8qt"},{"post_id":"ckoe9igub000i8cpn8leu8fs6","tag_id":"ckoe9igvp001p8cpn8pzg4uhd","_id":"ckoe9igw200268cpn6b3lbmio"},{"post_id":"ckoe9igw000258cpn0gnhdhjo","tag_id":"ckoe9igue000k8cpngjcy2qqm","_id":"ckoe9igw300288cpn37syc5y9"},{"post_id":"ckoe9iguc000j8cpn7zxu2d2f","tag_id":"ckoe9igw000238cpn7z9m3akz","_id":"ckoe9igw5002b8cpn9paz257i"},{"post_id":"ckoe9igw200278cpn4ts19szs","tag_id":"ckoe9igua000g8cpn58r8hkvj","_id":"ckoe9igw7002d8cpn5wilf940"},{"post_id":"ckoe9igw200278cpn4ts19szs","tag_id":"ckoe9igvp001p8cpn8pzg4uhd","_id":"ckoe9igw9002g8cpn83iv5v7u"},{"post_id":"ckoe9igw3002a8cpne2sm8wnt","tag_id":"ckoe9igua000g8cpn58r8hkvj","_id":"ckoe9igwa002i8cpndlw62rud"},{"post_id":"ckoe9igw6002c8cpn12tohsga","tag_id":"ckoe9igue000k8cpngjcy2qqm","_id":"ckoe9igwf002l8cpn9yuv9j3w"},{"post_id":"ckoe9igue000l8cpn53pi1qi6","tag_id":"ckoe9igw300298cpnclwr5zka","_id":"ckoe9igwg002n8cpnd3td95xp"},{"post_id":"ckoe9igw7002e8cpnfnmk76ie","tag_id":"ckoe9igue000k8cpngjcy2qqm","_id":"ckoe9igwi002q8cpnbgh013l1"},{"post_id":"ckoe9igw9002h8cpn657j0b7a","tag_id":"ckoe9igvp001p8cpn8pzg4uhd","_id":"ckoe9igwj002s8cpnctzjb4ya"},{"post_id":"ckoe9igug000m8cpn60ckdwkh","tag_id":"ckoe9igul000o8cpn00dfgnq9","_id":"ckoe9igwl002v8cpn4xyaen7o"},{"post_id":"ckoe9igwa002j8cpnf28lb2gi","tag_id":"ckoe9igue000k8cpngjcy2qqm","_id":"ckoe9igwm002x8cpn37waau8y"},{"post_id":"ckoe9igwf002m8cpneftseb1n","tag_id":"ckoe9igue000k8cpngjcy2qqm","_id":"ckoe9igwn00308cpnf6eq5pab"},{"post_id":"ckoe9igwg002o8cpn5vm39iht","tag_id":"ckoe9igue000k8cpngjcy2qqm","_id":"ckoe9igwp00328cpn9bnffzkv"},{"post_id":"ckoe9igwi002r8cpnhkphev2r","tag_id":"ckoe9igue000k8cpngjcy2qqm","_id":"ckoe9igwr00348cpnaci35qs4"},{"post_id":"ckoe9iguk000n8cpn9vyhatbl","tag_id":"ckoe9igua000g8cpn58r8hkvj","_id":"ckoe9igwx00378cpn3e8mh20k"},{"post_id":"ckoe9iguk000n8cpn9vyhatbl","tag_id":"ckoe9igue000k8cpngjcy2qqm","_id":"ckoe9igx000398cpndzliast1"},{"post_id":"ckoe9iguk000n8cpn9vyhatbl","tag_id":"ckoe9igwe002k8cpn07xk34lw","_id":"ckoe9igx1003c8cpn2u7h5itu"},{"post_id":"ckoe9iguk000n8cpn9vyhatbl","tag_id":"ckoe9igvp001p8cpn8pzg4uhd","_id":"ckoe9igx3003e8cpngaumg5pr"},{"post_id":"ckoe9igwj002t8cpn7r7y6e95","tag_id":"ckoe9igue000k8cpngjcy2qqm","_id":"ckoe9igx4003h8cpng6g9f65t"},{"post_id":"ckoe9igum000q8cpnfexh9niu","tag_id":"ckoe9igul000o8cpn00dfgnq9","_id":"ckoe9igx5003j8cpn2lvfd5q3"},{"post_id":"ckoe9igum000q8cpnfexh9niu","tag_id":"ckoe9igwk002u8cpn3t8nd1f4","_id":"ckoe9igx7003m8cpn1zb301y7"},{"post_id":"ckoe9igum000q8cpnfexh9niu","tag_id":"ckoe9igwn002z8cpn3o8t7yos","_id":"ckoe9igx8003o8cpn0i1x5o2x"},{"post_id":"ckoe9igwq00338cpnfsfh2x6u","tag_id":"ckoe9igvp001p8cpn8pzg4uhd","_id":"ckoe9igxd003r8cpncdtrch1l"},{"post_id":"ckoe9igwr00368cpnao3y6q4e","tag_id":"ckoe9igvp001p8cpn8pzg4uhd","_id":"ckoe9igxd003s8cpn29achc1x"},{"post_id":"ckoe9igwr00368cpnao3y6q4e","tag_id":"ckoe9igua000g8cpn58r8hkvj","_id":"ckoe9igxe003u8cpn7fnl9hy3"},{"post_id":"ckoe9igwx00388cpn9hkcfbps","tag_id":"ckoe9igue000k8cpngjcy2qqm","_id":"ckoe9igxf003v8cpncks0dgkf"},{"post_id":"ckoe9igx2003d8cpnfcbyfgsy","tag_id":"ckoe9igvp001p8cpn8pzg4uhd","_id":"ckoe9igxf003x8cpn0vj738xe"},{"post_id":"ckoe9igx2003d8cpnfcbyfgsy","tag_id":"ckoe9igua000g8cpn58r8hkvj","_id":"ckoe9igxg003y8cpn91i61t1m"},{"post_id":"ckoe9iguo000v8cpn13fs8hsp","tag_id":"ckoe9igul000o8cpn00dfgnq9","_id":"ckoe9igxg00408cpn9jfd27y7"},{"post_id":"ckoe9iguo000v8cpn13fs8hsp","tag_id":"ckoe9igwn002z8cpn3o8t7yos","_id":"ckoe9igxg00418cpn4422a98f"},{"post_id":"ckoe9iguo000v8cpn13fs8hsp","tag_id":"ckoe9igx0003a8cpn0koc5bl4","_id":"ckoe9igxh00438cpn6xlh7din"},{"post_id":"ckoe9igx3003f8cpn48256ixe","tag_id":"ckoe9igvp001p8cpn8pzg4uhd","_id":"ckoe9igxh00448cpn0wjgf6w8"},{"post_id":"ckoe9igx3003f8cpn48256ixe","tag_id":"ckoe9igua000g8cpn58r8hkvj","_id":"ckoe9igxh00458cpnhic73k2d"},{"post_id":"ckoe9igx4003i8cpn8csufwkk","tag_id":"ckoe9igvp001p8cpn8pzg4uhd","_id":"ckoe9igxi00478cpn2yulddhj"},{"post_id":"ckoe9igx4003i8cpn8csufwkk","tag_id":"ckoe9igua000g8cpn58r8hkvj","_id":"ckoe9igxj00488cpndlzrah3c"},{"post_id":"ckoe9igup000x8cpnfvzz1vm2","tag_id":"ckoe9igwk002u8cpn3t8nd1f4","_id":"ckoe9igxk004a8cpnae4j22vf"},{"post_id":"ckoe9igx8003p8cpnc0oxcoel","tag_id":"ckoe9igul000o8cpn00dfgnq9","_id":"ckoe9igxk004b8cpn04r8f9jc"},{"post_id":"ckoe9iguv00118cpn1suz1icj","tag_id":"ckoe9igul000o8cpn00dfgnq9","_id":"ckoe9igxk004d8cpngkn2g65k"},{"post_id":"ckoe9iguv00118cpn1suz1icj","tag_id":"ckoe9igwk002u8cpn3t8nd1f4","_id":"ckoe9igxl004e8cpn1yejh1gu"},{"post_id":"ckoe9iguv00118cpn1suz1icj","tag_id":"ckoe9igwn002z8cpn3o8t7yos","_id":"ckoe9igxl004g8cpnaua602ft"},{"post_id":"ckoe9igux00148cpn3obxc91b","tag_id":"ckoe9igul000o8cpn00dfgnq9","_id":"ckoe9igxm004h8cpn8o8xbj3x"},{"post_id":"ckoe9igux00148cpn3obxc91b","tag_id":"ckoe9igw300298cpnclwr5zka","_id":"ckoe9igxm004j8cpn7sawfkvp"},{"post_id":"ckoe9igv500168cpn4i9f5lmc","tag_id":"ckoe9igua000g8cpn58r8hkvj","_id":"ckoe9igxm004k8cpn6omwd5yw"},{"post_id":"ckoe9igv500168cpn4i9f5lmc","tag_id":"ckoe9igxf003w8cpneabjdky9","_id":"ckoe9igxn004m8cpncsq7eftx"},{"post_id":"ckoe9igv700198cpnaed15enf","tag_id":"ckoe9igul000o8cpn00dfgnq9","_id":"ckoe9igxn004n8cpn1p6he3z6"},{"post_id":"ckoe9igv700198cpnaed15enf","tag_id":"ckoe9igxg003z8cpn1hii4j80","_id":"ckoe9igxo004p8cpnchs9fpvx"},{"post_id":"ckoe9igv700198cpnaed15enf","tag_id":"ckoe9igua000g8cpn58r8hkvj","_id":"ckoe9igxp004q8cpnb24vb7z6"},{"post_id":"ckoe9igv8001b8cpn8z91hl0q","tag_id":"ckoe9igue000k8cpngjcy2qqm","_id":"ckoe9igxs004s8cpn3cdz4hvm"},{"post_id":"ckoe9igv8001b8cpn8z91hl0q","tag_id":"ckoe9igxg00428cpnfpv8hzhk","_id":"ckoe9igxs004t8cpn3cn7hvnu"},{"post_id":"ckoe9igv8001b8cpn8z91hl0q","tag_id":"ckoe9igua000g8cpn58r8hkvj","_id":"ckoe9igxv004v8cpn422t2jca"},{"post_id":"ckoe9igva001e8cpncvog1530","tag_id":"ckoe9igxf003w8cpneabjdky9","_id":"ckoe9igxw004w8cpn4slq715j"},{"post_id":"ckoe9igvc001f8cpn580xdwig","tag_id":"ckoe9igxf003w8cpneabjdky9","_id":"ckoe9igxw004y8cpn2galc6gs"},{"post_id":"ckoe9igvc001f8cpn580xdwig","tag_id":"ckoe9igua000g8cpn58r8hkvj","_id":"ckoe9igxw004z8cpn8o7v0wag"},{"post_id":"ckoe9igvh001g8cpn20y8gie3","tag_id":"ckoe9igue000k8cpngjcy2qqm","_id":"ckoe9igxx00518cpn7mi40p6t"},{"post_id":"ckoe9igvh001g8cpn20y8gie3","tag_id":"ckoe9igua000g8cpn58r8hkvj","_id":"ckoe9igxx00528cpn4m4db2oo"},{"post_id":"ckoe9igvh001g8cpn20y8gie3","tag_id":"ckoe9igxk004c8cpnf17oe01d","_id":"ckoe9igxx00538cpn4kov2zbe"},{"post_id":"ckoe9igvi001i8cpn070v5bfl","tag_id":"ckoe9igue000k8cpngjcy2qqm","_id":"ckoe9igxy00558cpn9k4takff"},{"post_id":"ckoe9igvi001i8cpn070v5bfl","tag_id":"ckoe9igxk004c8cpnf17oe01d","_id":"ckoe9igxy00568cpn1011hsvu"},{"post_id":"ckoe9igvk001j8cpne6ueayq0","tag_id":"ckoe9igue000k8cpngjcy2qqm","_id":"ckoe9igxy00588cpndaa46z02"},{"post_id":"ckoe9igvk001j8cpne6ueayq0","tag_id":"ckoe9igxm004i8cpnbsiebscl","_id":"ckoe9igxy00598cpn77sr5mnu"},{"post_id":"ckoe9igvk001j8cpne6ueayq0","tag_id":"ckoe9igua000g8cpn58r8hkvj","_id":"ckoe9igxz005b8cpne9ci6c1v"},{"post_id":"ckoe9igvn001m8cpndi08f8ux","tag_id":"ckoe9igxf003w8cpneabjdky9","_id":"ckoe9igxz005c8cpn7oq5e35x"},{"post_id":"ckoe9igvo001o8cpn5vrk978w","tag_id":"ckoe9igue000k8cpngjcy2qqm","_id":"ckoe9igy0005e8cpnhkcpar3e"},{"post_id":"ckoe9igvo001o8cpn5vrk978w","tag_id":"ckoe9igxk004c8cpnf17oe01d","_id":"ckoe9igy0005f8cpn73vl1ra0"},{"post_id":"ckoe9igvp001r8cpn0ydy1l9p","tag_id":"ckoe9igue000k8cpngjcy2qqm","_id":"ckoe9igy1005h8cpneobn5l8i"},{"post_id":"ckoe9igvp001r8cpn0ydy1l9p","tag_id":"ckoe9igxk004c8cpnf17oe01d","_id":"ckoe9igy1005i8cpnb6b0eoji"},{"post_id":"ckoe9igvp001r8cpn0ydy1l9p","tag_id":"ckoe9igua000g8cpn58r8hkvj","_id":"ckoe9igy1005k8cpngrs24ave"},{"post_id":"ckoe9igvq001t8cpn7sva1h1w","tag_id":"ckoe9igxg003z8cpn1hii4j80","_id":"ckoe9igy1005l8cpndlyg9sor"},{"post_id":"ckoe9igvq001t8cpn7sva1h1w","tag_id":"ckoe9igxw004x8cpn0dow312d","_id":"ckoe9igy2005n8cpng6ltex4r"},{"post_id":"ckoe9igvt001x8cpn3ztn5mnx","tag_id":"ckoe9igua000g8cpn58r8hkvj","_id":"ckoe9igy2005o8cpn36a9cbt6"},{"post_id":"ckoe9igvt001x8cpn3ztn5mnx","tag_id":"ckoe9igue000k8cpngjcy2qqm","_id":"ckoe9igy2005q8cpneaio9twm"},{"post_id":"ckoe9igvt001x8cpn3ztn5mnx","tag_id":"ckoe9igxx00508cpn7p64001b","_id":"ckoe9igy3005r8cpnhbdo7174"},{"post_id":"ckoe9igvx00208cpn2cf1137z","tag_id":"ckoe9igue000k8cpngjcy2qqm","_id":"ckoe9igy3005s8cpngobnb5ci"},{"post_id":"ckoe9igvx00208cpn2cf1137z","tag_id":"ckoe9igxg00428cpnfpv8hzhk","_id":"ckoe9igy3005u8cpnhw7k5d97"},{"post_id":"ckoe9igvz00228cpnc0e07zqd","tag_id":"ckoe9igxy00578cpn0ndo7hib","_id":"ckoe9igy3005v8cpnbsey7qtm"},{"post_id":"ckoe9igvz00228cpnc0e07zqd","tag_id":"ckoe9igue000k8cpngjcy2qqm","_id":"ckoe9igy4005x8cpn9ck4c8sj"},{"post_id":"ckoe9igwl002w8cpnd9qxgky4","tag_id":"ckoe9igue000k8cpngjcy2qqm","_id":"ckoe9igy5005y8cpnecd9cotb"},{"post_id":"ckoe9igwl002w8cpnd9qxgky4","tag_id":"ckoe9igxy005a8cpn2746fg9d","_id":"ckoe9igya00608cpna4u5gjg0"},{"post_id":"ckoe9igwm002y8cpn0k768010","tag_id":"ckoe9igua000g8cpn58r8hkvj","_id":"ckoe9igyb00618cpng9ssg1r9"},{"post_id":"ckoe9igwm002y8cpn0k768010","tag_id":"ckoe9igxg003z8cpn1hii4j80","_id":"ckoe9igyb00628cpn3lfz4dqh"},{"post_id":"ckoe9igwm002y8cpn0k768010","tag_id":"ckoe9igue000k8cpngjcy2qqm","_id":"ckoe9igyb00638cpneet0294f"},{"post_id":"ckoe9igwn00318cpn4fb6c0eu","tag_id":"ckoe9igxw004x8cpn0dow312d","_id":"ckoe9igyb00648cpnhm1vdaj1"},{"post_id":"ckoe9igwn00318cpn4fb6c0eu","tag_id":"ckoe9igxg003z8cpn1hii4j80","_id":"ckoe9igyb00658cpn1b5ycstk"},{"post_id":"ckoe9igwn00318cpn4fb6c0eu","tag_id":"ckoe9igy1005m8cpn22jghge8","_id":"ckoe9igyc00668cpnc1bu8mq6"},{"post_id":"ckoe9igx0003b8cpng92w4lr3","tag_id":"ckoe9igvp001p8cpn8pzg4uhd","_id":"ckoe9igyc00678cpn9r7642wd"},{"post_id":"ckoe9igx0003b8cpng92w4lr3","tag_id":"ckoe9igy2005p8cpn9drr4104","_id":"ckoe9igyc00688cpn2i3m1ntc"},{"post_id":"ckoe9igx0003b8cpng92w4lr3","tag_id":"ckoe9igy1005m8cpn22jghge8","_id":"ckoe9igyc00698cpnbvq44jtx"},{"post_id":"ckoe9igx6003k8cpnem6s9kii","tag_id":"ckoe9igy4005w8cpn0tx6cnby","_id":"ckoe9igyc006a8cpn43ykgp63"},{"post_id":"ckoe9igx6003k8cpnem6s9kii","tag_id":"ckoe9igue000k8cpngjcy2qqm","_id":"ckoe9igyc006b8cpnfchd2d7g"},{"post_id":"ckoe9igx7003n8cpn31xscw8v","tag_id":"ckoe9igy9005z8cpn8catbla6","_id":"ckoe9igyc006c8cpnha955jnj"},{"post_id":"ckoe9igyf006d8cpn1vqo22hf","tag_id":"ckoe9igul000o8cpn00dfgnq9","_id":"ckoe9igyl006f8cpn2gwe9tih"},{"post_id":"ckoe9igyf006d8cpn1vqo22hf","tag_id":"ckoe9igwk002u8cpn3t8nd1f4","_id":"ckoe9igyl006g8cpnhjyve855"},{"post_id":"ckoe9igyf006d8cpn1vqo22hf","tag_id":"ckoe9igyj006e8cpn3ydg3hdz","_id":"ckoe9igyl006h8cpngd90brzj"},{"post_id":"ckoe9igyr006i8cpn1f0hf8ek","tag_id":"ckoe9igxy00578cpn0ndo7hib","_id":"ckoe9igyw006l8cpn7h5tf884"},{"post_id":"ckoe9igyr006i8cpn1f0hf8ek","tag_id":"ckoe9igyv006k8cpnbwk6e4a5","_id":"ckoe9igyw006m8cpndgwkaz9n"}],"Tag":[{"name":"mongo","_id":"ckoe9igtm00048cpn7gu41ra9"},{"name":"ruby","_id":"ckoe9igtv00088cpn0y5hc17t"},{"name":"DataTable","_id":"ckoe9igu5000b8cpn6t1udxpy"},{"name":"web","_id":"ckoe9igua000g8cpn58r8hkvj"},{"name":"javascript","_id":"ckoe9igue000k8cpngjcy2qqm"},{"name":"linux","_id":"ckoe9igul000o8cpn00dfgnq9"},{"name":"network","_id":"ckoe9iguo000t8cpn0838gp3j"},{"name":"base","_id":"ckoe9iguw00138cpngn3ec0vp"},{"name":"rails","_id":"ckoe9igva001d8cpnh8z97uwu"},{"name":"git","_id":"ckoe9igvl001k8cpn4cjteqk0"},{"name":"css","_id":"ckoe9igvp001p8cpn8pzg4uhd"},{"name":"projects","_id":"ckoe9igw000238cpn7z9m3akz"},{"name":"docker","_id":"ckoe9igw300298cpnclwr5zka"},{"name":"html","_id":"ckoe9igwe002k8cpn07xk34lw"},{"name":"kubernetes","_id":"ckoe9igwk002u8cpn3t8nd1f4"},{"name":"debian","_id":"ckoe9igwn002z8cpn3o8t7yos"},{"name":"ubuntu","_id":"ckoe9igx0003a8cpn0koc5bl4"},{"name":"hexo","_id":"ckoe9igxf003w8cpneabjdky9"},{"name":"nodejs","_id":"ckoe9igxg003z8cpn1hii4j80"},{"name":"jquery","_id":"ckoe9igxg00428cpnfpv8hzhk"},{"name":"es6","_id":"ckoe9igxk004c8cpnf17oe01d"},{"name":"dataTable","_id":"ckoe9igxm004i8cpnbsiebscl"},{"name":"npm","_id":"ckoe9igxw004x8cpn0dow312d"},{"name":"video","_id":"ckoe9igxx00508cpn7p64001b"},{"name":"vue","_id":"ckoe9igxy00578cpn0ndo7hib"},{"name":"angular","_id":"ckoe9igxy005a8cpn2746fg9d"},{"name":"sass","_id":"ckoe9igy1005m8cpn22jghge8"},{"name":"less","_id":"ckoe9igy2005p8cpn9drr4104"},{"name":"angualr","_id":"ckoe9igy4005w8cpn0tx6cnby"},{"name":"nginx","_id":"ckoe9igy9005z8cpn8catbla6"},{"name":"centos","_id":"ckoe9igyj006e8cpn3ydg3hdz"},{"name":"面试","_id":"ckoe9igyv006k8cpnbwk6e4a5"}]}}